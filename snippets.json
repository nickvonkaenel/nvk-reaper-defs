{
	"APIExists lua": {
		"prefix": "r.APIExists",
		"scope": "lua",
		"body": "r.APIExists({1:function_name})$0"
		"description": "Returns true if function_name exists in the REAPER API"
	},
	"APITest lua": {
		"prefix": "r.APITest",
		"scope": "lua",
		"body": "r.APITest()$0"
		"description": "Displays a message window if the API was successfully called."
	},
	"AddMediaItemToTrack lua": {
		"prefix": "r.AddMediaItemToTrack",
		"scope": "lua",
		"body": "r.AddMediaItemToTrack({1:tr})$0"
		"description": "creates a new media item."
	},
	"AddProjectMarker lua": {
		"prefix": "r.AddProjectMarker",
		"scope": "lua",
		"body": "r.AddProjectMarker({1:proj}, {2:isrgn}, {3:pos}, {4:rgnend}, {5:name}, {6:wantidx})$0"
		"description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use."
	},
	"AddProjectMarker2 lua": {
		"prefix": "r.AddProjectMarker2",
		"scope": "lua",
		"body": "r.AddProjectMarker2({1:proj}, {2:isrgn}, {3:pos}, {4:rgnend}, {5:name}, {6:wantidx}, {7:color})$0"
		"description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000"
	},
	"AddRemoveReaScript lua": {
		"prefix": "r.AddRemoveReaScript",
		"scope": "lua",
		"body": "r.AddRemoveReaScript({1:add}, {2:sectionID}, {3:scriptfn}, {4:commit})$0"
		"description": "Add a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return >0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call."
	},
	"AddTakeToMediaItem lua": {
		"prefix": "r.AddTakeToMediaItem",
		"scope": "lua",
		"body": "r.AddTakeToMediaItem({1:item})$0"
		"description": "creates a new take in an item"
	},
	"AddTempoTimeSigMarker lua": {
		"prefix": "r.AddTempoTimeSigMarker",
		"scope": "lua",
		"body": "r.AddTempoTimeSigMarker({1:proj}, {2:timepos}, {3:bpm}, {4:timesig_num}, {5:timesig_denom}, {6:lineartempochange})$0"
		"description": "Deprecated. Use SetTempoTimeSigMarker with ptidx=-1."
	},
	"AnyTrackSolo lua": {
		"prefix": "r.AnyTrackSolo",
		"scope": "lua",
		"body": "r.AnyTrackSolo({1:proj})$0"
		"description": ""
	},
	"ApplyNudge lua": {
		"prefix": "r.ApplyNudge",
		"scope": "lua",
		"body": "r.ApplyNudge({1:project}, {2:nudgeflag}, {3:nudgewhat}, {4:nudgeunits}, {5:value}, {6:reverse}, {7:copies})$0"
		"description": "nudgeflag: &1=set to value (otherwise nudge by value), &2=snap\nnudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor\nnudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections\nvalue: amount to nudge by, or value to set to\nreverse: in nudge mode, nudges left (otherwise ignored)\ncopies: in nudge duplicate mode, number of copies (otherwise ignored)"
	},
	"ArmCommand lua": {
		"prefix": "r.ArmCommand",
		"scope": "lua",
		"body": "r.ArmCommand({1:cmd}, {2:sectionname})$0"
		"description": "arms a command (or disarms if 0 passed) in section sectionname (empty string for main)"
	},
	"AudioAccessorStateChanged lua": {
		"prefix": "r.AudioAccessorStateChanged",
		"scope": "lua",
		"body": "r.AudioAccessorStateChanged({1:accessor})$0"
		"description": "Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call AudioAccessorValidateState only when needed. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"AudioAccessorUpdate lua": {
		"prefix": "r.AudioAccessorUpdate",
		"scope": "lua",
		"body": "r.AudioAccessorUpdate({1:accessor})$0"
		"description": "Force the accessor to reload its state from the underlying track or media item take. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"AudioAccessorValidateState lua": {
		"prefix": "r.AudioAccessorValidateState",
		"scope": "lua",
		"body": "r.AudioAccessorValidateState({1:accessor})$0"
		"description": "Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed."
	},
	"Audio_Init lua": {
		"prefix": "r.Audio_Init",
		"scope": "lua",
		"body": "r.Audio_Init()$0"
		"description": "open all audio and MIDI devices, if not open"
	},
	"Audio_IsPreBuffer lua": {
		"prefix": "r.Audio_IsPreBuffer",
		"scope": "lua",
		"body": "r.Audio_IsPreBuffer()$0"
		"description": "is in pre-buffer? threadsafe"
	},
	"Audio_IsRunning lua": {
		"prefix": "r.Audio_IsRunning",
		"scope": "lua",
		"body": "r.Audio_IsRunning()$0"
		"description": "is audio running at all? threadsafe"
	},
	"Audio_Quit lua": {
		"prefix": "r.Audio_Quit",
		"scope": "lua",
		"body": "r.Audio_Quit()$0"
		"description": "close all audio and MIDI devices, if open"
	},
	"BR_EnvAlloc lua": {
		"prefix": "r.BR_EnvAlloc",
		"scope": "lua",
		"body": "r.BR_EnvAlloc({1:envelope}, {2:takeEnvelopesUseProjectTime})$0"
		"description": "[BR] Allocate envelope object from track or take envelope pointer. Always call BR_EnvFree when done to release the object and commit changes if needed.\n takeEnvelopesUseProjectTime: take envelope points' positions are counted from take position, not project start time. If you want to work with project time instead, pass this as true.\n\nFor further manipulation see BR_EnvCountPoints, BR_EnvDeletePoint, BR_EnvFind, BR_EnvFindNext, BR_EnvFindPrevious, BR_EnvGetParentTake, BR_EnvGetParentTrack, BR_EnvGetPoint, BR_EnvGetProperties, BR_EnvSetPoint, BR_EnvSetProperties, BR_EnvValueAtPos."
	},
	"BR_EnvCountPoints lua": {
		"prefix": "r.BR_EnvCountPoints",
		"scope": "lua",
		"body": "r.BR_EnvCountPoints({1:envelope})$0"
		"description": "[BR] Count envelope points in the envelope object allocated with BR_EnvAlloc."
	},
	"BR_EnvDeletePoint lua": {
		"prefix": "r.BR_EnvDeletePoint",
		"scope": "lua",
		"body": "r.BR_EnvDeletePoint({1:envelope}, {2:id})$0"
		"description": "[BR] Delete envelope point by index (zero-based) in the envelope object allocated with BR_EnvAlloc. Returns true on success."
	},
	"BR_EnvFind lua": {
		"prefix": "r.BR_EnvFind",
		"scope": "lua",
		"body": "r.BR_EnvFind({1:envelope}, {2:position}, {3:delta})$0"
		"description": "[BR] Find envelope point at time position in the envelope object allocated with BR_EnvAlloc. Pass delta > 0 to search surrounding range - in that case the closest point to position within delta will be searched for. Returns envelope point id (zero-based) on success or -1 on failure."
	},
	"BR_EnvFindNext lua": {
		"prefix": "r.BR_EnvFindNext",
		"scope": "lua",
		"body": "r.BR_EnvFindNext({1:envelope}, {2:position})$0"
		"description": "[BR] Find next envelope point after time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure."
	},
	"BR_EnvFindPrevious lua": {
		"prefix": "r.BR_EnvFindPrevious",
		"scope": "lua",
		"body": "r.BR_EnvFindPrevious({1:envelope}, {2:position})$0"
		"description": "[BR] Find previous envelope point before time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure."
	},
	"BR_EnvFree lua": {
		"prefix": "r.BR_EnvFree",
		"scope": "lua",
		"body": "r.BR_EnvFree({1:envelope}, {2:commit})$0"
		"description": "[BR] Free envelope object allocated with BR_EnvAlloc and commit changes if needed. Returns true if changes were committed successfully. Note that when envelope object wasn't modified nothing will get committed even if commit = true - in that case function returns false."
	},
	"BR_EnvGetParentTake lua": {
		"prefix": "r.BR_EnvGetParentTake",
		"scope": "lua",
		"body": "r.BR_EnvGetParentTake({1:envelope})$0"
		"description": "[BR] If envelope object allocated with BR_EnvAlloc is take envelope, returns parent media item take, otherwise NULL."
	},
	"BR_EnvGetParentTrack lua": {
		"prefix": "r.BR_EnvGetParentTrack",
		"scope": "lua",
		"body": "r.BR_EnvGetParentTrack({1:envelope})$0"
		"description": "[BR] Get parent track of envelope object allocated with BR_EnvAlloc. If take envelope, returns NULL."
	},
	"BR_EnvGetPoint lua": {
		"prefix": "r.BR_EnvGetPoint",
		"scope": "lua",
		"body": "r.BR_EnvGetPoint({1:envelope}, {2:id})$0"
		"description": "[BR] Get envelope point by id (zero-based) from the envelope object allocated with BR_EnvAlloc. Returns true on success."
	},
	"BR_EnvGetProperties lua": {
		"prefix": "r.BR_EnvGetProperties",
		"scope": "lua",
		"body": "r.BR_EnvGetProperties({1:envelope})$0"
		"description": "[BR] Get envelope properties for the envelope object allocated with BR_EnvAlloc.\n\nactive: true if envelope is active\nvisible: true if envelope is visible\narmed: true if envelope is armed\ninLane: true if envelope has it's own envelope lane\nlaneHeight: envelope lane override height. 0 for none, otherwise size in pixels\ndefaultShape: default point shape: 0->Linear, 1->Square, 2->Slow start/end, 3->Fast start, 4->Fast end, 5->Bezier\nminValue: minimum envelope value\nmaxValue: maximum envelope value\ntype: envelope type: 0->Volume, 1->Volume (Pre-FX), 2->Pan, 3->Pan (Pre-FX), 4->Width, 5->Width (Pre-FX), 6->Mute, 7->Pitch, 8->Playrate, 9->Tempo map, 10->Parameter\nfaderScaling: true if envelope uses fader scaling\nautomationItemsOptions: -1->project default, &1=0->don't attach to underl. env., &1->attach to underl. env. on right side,  &2->attach to underl. env. on both sides, &4: bypass underl. env."
	},
	"BR_EnvSetPoint lua": {
		"prefix": "r.BR_EnvSetPoint",
		"scope": "lua",
		"body": "r.BR_EnvSetPoint({1:envelope}, {2:id}, {3:position}, {4:value}, {5:shape}, {6:selected}, {7:bezier})$0"
		"description": "[BR] Set envelope point by id (zero-based) in the envelope object allocated with BR_EnvAlloc. To create point instead, pass id = -1. Note that if new point is inserted or existing point's time position is changed, points won't automatically get sorted. To do that, see BR_EnvSortPoints.\nReturns true on success."
	},
	"BR_EnvSetProperties lua": {
		"prefix": "r.BR_EnvSetProperties",
		"scope": "lua",
		"body": "r.BR_EnvSetProperties({1:envelope}, {2:active}, {3:visible}, {4:armed}, {5:inLane}, {6:laneHeight}, {7:defaultShape}, {8:faderScaling}, {9:automationItemsOptionsIn})$0"
		"description": "[BR] Set envelope properties for the envelope object allocated with BR_EnvAlloc. For parameter description see BR_EnvGetProperties.\nSetting automationItemsOptions requires REAPER 5.979+."
	},
	"BR_EnvSortPoints lua": {
		"prefix": "r.BR_EnvSortPoints",
		"scope": "lua",
		"body": "r.BR_EnvSortPoints({1:envelope})$0"
		"description": "[BR] Sort envelope points by position. The only reason to call this is if sorted points are explicitly needed after editing them with BR_EnvSetPoint. Note that you do not have to call this before doing BR_EnvFree since it does handle unsorted points too."
	},
	"BR_EnvValueAtPos lua": {
		"prefix": "r.BR_EnvValueAtPos",
		"scope": "lua",
		"body": "r.BR_EnvValueAtPos({1:envelope}, {2:position})$0"
		"description": "[BR] Get envelope value at time position for the envelope object allocated with BR_EnvAlloc."
	},
	"BR_GetArrangeView lua": {
		"prefix": "r.BR_GetArrangeView",
		"scope": "lua",
		"body": "r.BR_GetArrangeView({1:proj})$0"
		"description": "[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see BR_SetArrangeView."
	},
	"BR_GetClosestGridDivision lua": {
		"prefix": "r.BR_GetClosestGridDivision",
		"scope": "lua",
		"body": "r.BR_GetClosestGridDivision({1:position})$0"
		"description": "[BR] Get closest grid division to position. Note that this functions is different from SnapToGrid in two regards. SnapToGrid() needs snap enabled to work and this one works always. Secondly, grid divisions are different from grid lines because some grid lines may be hidden due to zoom level - this function ignores grid line visibility and always searches for the closest grid division at given position. For more grid division functions, see BR_GetNextGridDivision and BR_GetPrevGridDivision."
	},
	"BR_GetCurrentTheme lua": {
		"prefix": "r.BR_GetCurrentTheme",
		"scope": "lua",
		"body": "r.BR_GetCurrentTheme()$0"
		"description": "[BR] Get current theme information. themePathOut is set to full theme path and themeNameOut is set to theme name excluding any path info and extension"
	},
	"BR_GetMediaItemByGUID lua": {
		"prefix": "r.BR_GetMediaItemByGUID",
		"scope": "lua",
		"body": "r.BR_GetMediaItemByGUID({1:proj}, {2:guidStringIn})$0"
		"description": "[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see BR_GetMediaItemGUID."
	},
	"BR_GetMediaItemGUID lua": {
		"prefix": "r.BR_GetMediaItemGUID",
		"scope": "lua",
		"body": "r.BR_GetMediaItemGUID({1:item})$0"
		"description": "[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see BR_GetMediaItemByGUID."
	},
	"BR_GetMediaItemImageResource lua": {
		"prefix": "r.BR_GetMediaItemImageResource",
		"scope": "lua",
		"body": "r.BR_GetMediaItemImageResource({1:item})$0"
		"description": "[BR] Get currently loaded image resource and its flags for a given item. Returns false if there is no image resource set. To set image resource, see BR_SetMediaItemImageResource."
	},
	"BR_GetMediaItemTakeGUID lua": {
		"prefix": "r.BR_GetMediaItemTakeGUID",
		"scope": "lua",
		"body": "r.BR_GetMediaItemTakeGUID({1:take})$0"
		"description": "[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see SNM_GetMediaItemTakeByGUID."
	},
	"BR_GetMediaSourceProperties lua": {
		"prefix": "r.BR_GetMediaSourceProperties",
		"scope": "lua",
		"body": "r.BR_GetMediaSourceProperties({1:take})$0"
		"description": "[BR] Get take media source properties as they appear in Item properties. Returns false if take can't have them (MIDI items etc.).\nTo set source properties, see BR_SetMediaSourceProperties."
	},
	"BR_GetMediaTrackByGUID lua": {
		"prefix": "r.BR_GetMediaTrackByGUID",
		"scope": "lua",
		"body": "r.BR_GetMediaTrackByGUID({1:proj}, {2:guidStringIn})$0"
		"description": "[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see GetSetMediaTrackInfo_String."
	},
	"BR_GetMediaTrackFreezeCount lua": {
		"prefix": "r.BR_GetMediaTrackFreezeCount",
		"scope": "lua",
		"body": "r.BR_GetMediaTrackFreezeCount({1:track})$0"
		"description": "[BR] Get media track freeze count (if track isn't frozen at all, returns 0)."
	},
	"BR_GetMediaTrackGUID lua": {
		"prefix": "r.BR_GetMediaTrackGUID",
		"scope": "lua",
		"body": "r.BR_GetMediaTrackGUID({1:track})$0"
		"description": "[BR] Deprecated, see GetSetMediaTrackInfo_String (v5.95+). Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see BR_GetMediaTrackByGUID."
	},
	"BR_GetMediaTrackLayouts lua": {
		"prefix": "r.BR_GetMediaTrackLayouts",
		"scope": "lua",
		"body": "r.BR_GetMediaTrackLayouts({1:track})$0"
		"description": "[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string ('') means that layout is set to the default layout. To set media track layouts, see BR_SetMediaTrackLayouts."
	},
	"BR_GetMediaTrackSendInfo_Envelope lua": {
		"prefix": "r.BR_GetMediaTrackSendInfo_Envelope",
		"scope": "lua",
		"body": "r.BR_GetMediaTrackSendInfo_Envelope({1:track}, {2:category}, {3:sendidx}, {4:envelopeType})$0"
		"description": "[BR] Get track envelope for send/receive/hardware output.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\nenvelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)\n\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Track."
	},
	"BR_GetMediaTrackSendInfo_Track lua": {
		"prefix": "r.BR_GetMediaTrackSendInfo_Track",
		"scope": "lua",
		"body": "r.BR_GetMediaTrackSendInfo_Track({1:track}, {2:category}, {3:sendidx}, {4:trackType})$0"
		"description": "[BR] Get source or destination media track for send/receive.\n\ncategory is <0 for receives, 0=sends\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives)\ntrackType determines which track is returned (0=source track, 1=destination track)\n\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Envelope."
	},
	"BR_GetMidiSourceLenPPQ lua": {
		"prefix": "r.BR_GetMidiSourceLenPPQ",
		"scope": "lua",
		"body": "r.BR_GetMidiSourceLenPPQ({1:take})$0"
		"description": "[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1."
	},
	"BR_GetMidiTakePoolGUID lua": {
		"prefix": "r.BR_GetMidiTakePoolGUID",
		"scope": "lua",
		"body": "r.BR_GetMidiTakePoolGUID({1:take})$0"
		"description": "[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled."
	},
	"BR_GetMidiTakeTempoInfo lua": {
		"prefix": "r.BR_GetMidiTakeTempoInfo",
		"scope": "lua",
		"body": "r.BR_GetMidiTakeTempoInfo({1:take})$0"
		"description": "[BR] Get 'ignore project tempo' information for MIDI take. Returns true if take can ignore project tempo (no matter if it's actually ignored), otherwise false."
	},
	"BR_GetMouseCursorContext lua": {
		"prefix": "r.BR_GetMouseCursorContext",
		"scope": "lua",
		"body": "r.BR_GetMouseCursorContext()$0"
		"description": "[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.\n\nTo get more info on stuff that was found under mouse cursor see BR_GetMouseCursorContext_Envelope, BR_GetMouseCursorContext_Item, BR_GetMouseCursorContext_MIDI, BR_GetMouseCursorContext_Position, BR_GetMouseCursorContext_Take, BR_GetMouseCursorContext_Track \n\nWindow Segment Details                                            unknown          ''            ''                                                             ruler            region_lane     ''                                                                                                                        marker_lane     ''                                                                                                                        tempo_lane      ''                                                                                                                        timeline        ''                                                             transport        ''            ''                                                             tcp              track           ''                                                                                                                        envelope        ''                                                                                                                        empty           ''                                                             mcp              track           ''                                                                                                                        empty           ''                                                             arrange          track           empty,\nitem, item_stretch_marker,\nenv_point, env_segment                                                              envelope        empty, env_point, env_segment                                                                                               empty           ''                                                             midi_editor      unknown         ''                                                                                                                        ruler           ''                                                                                                                        piano           ''                                                                                                                        notes           ''                                                                                                                        cc_lane         cc_selector, cc_lane"
	},
	"BR_GetMouseCursorContext_Envelope lua": {
		"prefix": "r.BR_GetMouseCursorContext_Envelope",
		"scope": "lua",
		"body": "r.BR_GetMouseCursorContext_Envelope()$0"
		"description": "[BR] Returns envelope that was captured with the last call to BR_GetMouseCursorContext. In case the envelope belongs to take, takeEnvelope will be true."
	},
	"BR_GetMouseCursorContext_Item lua": {
		"prefix": "r.BR_GetMouseCursorContext_Item",
		"scope": "lua",
		"body": "r.BR_GetMouseCursorContext_Item()$0"
		"description": "[BR] Returns item under mouse cursor that was captured with the last call to BR_GetMouseCursorContext. Note that the function will return item even if mouse cursor is over some other track lane element like stretch marker or envelope. This enables for easier identification of items when you want to ignore elements within the item."
	},
	"BR_GetMouseCursorContext_MIDI lua": {
		"prefix": "r.BR_GetMouseCursorContext_MIDI",
		"scope": "lua",
		"body": "r.BR_GetMouseCursorContext_MIDI()$0"
		"description": "[BR] Returns midi editor under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\n\ninlineEditor: if mouse was captured in inline MIDI editor, this will be true (consequentially, returned MIDI editor will be NULL)\nnoteRow: note row or piano key under mouse cursor (0-127)\nccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events)\nccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)\nccLaneId: lane position, counting from the top (0 based)\n\nNote: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1"
	},
	"BR_GetMouseCursorContext_Position lua": {
		"prefix": "r.BR_GetMouseCursorContext_Position",
		"scope": "lua",
		"body": "r.BR_GetMouseCursorContext_Position()$0"
		"description": "[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to BR_GetMouseCursorContext."
	},
	"BR_GetMouseCursorContext_StretchMarker lua": {
		"prefix": "r.BR_GetMouseCursorContext_StretchMarker",
		"scope": "lua",
		"body": "r.BR_GetMouseCursorContext_StretchMarker()$0"
		"description": "[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to BR_GetMouseCursorContext."
	},
	"BR_GetMouseCursorContext_Take lua": {
		"prefix": "r.BR_GetMouseCursorContext_Take",
		"scope": "lua",
		"body": "r.BR_GetMouseCursorContext_Take()$0"
		"description": "[BR] Returns take under mouse cursor that was captured with the last call to BR_GetMouseCursorContext."
	},
	"BR_GetMouseCursorContext_Track lua": {
		"prefix": "r.BR_GetMouseCursorContext_Track",
		"scope": "lua",
		"body": "r.BR_GetMouseCursorContext_Track()$0"
		"description": "[BR] Returns track under mouse cursor that was captured with the last call to BR_GetMouseCursorContext."
	},
	"BR_GetNextGridDivision lua": {
		"prefix": "r.BR_GetNextGridDivision",
		"scope": "lua",
		"body": "r.BR_GetNextGridDivision({1:position})$0"
		"description": "[BR] Get next grid division after the time position. For more grid divisions function, see BR_GetClosestGridDivision and BR_GetPrevGridDivision."
	},
	"BR_GetPrevGridDivision lua": {
		"prefix": "r.BR_GetPrevGridDivision",
		"scope": "lua",
		"body": "r.BR_GetPrevGridDivision({1:position})$0"
		"description": "[BR] Get previous grid division before the time position. For more grid division functions, see BR_GetClosestGridDivision and BR_GetNextGridDivision."
	},
	"BR_GetSetTrackSendInfo lua": {
		"prefix": "r.BR_GetSetTrackSendInfo",
		"scope": "lua",
		"body": "r.BR_GetSetTrackSendInfo({1:track}, {2:category}, {3:sendidx}, {4:parmname}, {5:setNewValue}, {6:newValue})$0"
		"description": "[BR] Get or set send attributes.\n\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\nTo set attribute, pass setNewValue as true\n\nList of possible parameters:\nB_MUTE : send mute state (1.0 if muted, otherwise 0.0)\nB_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)\nB_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)\nD_VOL : send volume (1.0=+0dB etc...)\nD_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)\nD_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)\nI_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)\nI_SRCCHAN : audio source starting channel index or -1 if audio send is disabled (&1024=mono...note that in that case, when reading index, you should do (index XOR 1024) to get starting channel index)\nI_DSTCHAN : audio destination starting channel index (&1024=mono (and in case of hardware output &512=rearoute)...note that in that case, when reading index, you should do (index XOR (1024 OR 512)) to get starting channel index)\nI_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)\nI_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)\nI_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\nI_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\nI_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI\n\nNote: To get or set other send attributes, see BR_GetMediaTrackSendInfo_Envelope and BR_GetMediaTrackSendInfo_Track."
	},
	"BR_GetTakeFXCount lua": {
		"prefix": "r.BR_GetTakeFXCount",
		"scope": "lua",
		"body": "r.BR_GetTakeFXCount({1:take})$0"
		"description": "[BR] Returns FX count for supplied take"
	},
	"BR_IsMidiOpenInInlineEditor lua": {
		"prefix": "r.BR_IsMidiOpenInInlineEditor",
		"scope": "lua",
		"body": "r.BR_IsMidiOpenInInlineEditor({1:take})$0"
		"description": "[SWS] Check if take has MIDI inline editor open and returns true or false."
	},
	"BR_IsTakeMidi lua": {
		"prefix": "r.BR_IsTakeMidi",
		"scope": "lua",
		"body": "r.BR_IsTakeMidi({1:take})$0"
		"description": "[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI source data, inProjectMidiOut will be true, otherwise false."
	},
	"BR_ItemAtMouseCursor lua": {
		"prefix": "r.BR_ItemAtMouseCursor",
		"scope": "lua",
		"body": "r.BR_ItemAtMouseCursor()$0"
		"description": "[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange."
	},
	"BR_MIDI_CCLaneRemove lua": {
		"prefix": "r.BR_MIDI_CCLaneRemove",
		"scope": "lua",
		"body": "r.BR_MIDI_CCLaneRemove({1:midiEditor}, {2:laneId})$0"
		"description": "[BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success"
	},
	"BR_MIDI_CCLaneReplace lua": {
		"prefix": "r.BR_MIDI_CCLaneReplace",
		"scope": "lua",
		"body": "r.BR_MIDI_CCLaneReplace({1:midiEditor}, {2:laneId}, {3:newCC})$0"
		"description": "[BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.\nValid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207"
	},
	"BR_PositionAtMouseCursor lua": {
		"prefix": "r.BR_PositionAtMouseCursor",
		"scope": "lua",
		"body": "r.BR_PositionAtMouseCursor({1:checkRuler})$0"
		"description": "[BR] Get position at mouse cursor. To check ruler along with arrange, pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler."
	},
	"BR_SetArrangeView lua": {
		"prefix": "r.BR_SetArrangeView",
		"scope": "lua",
		"body": "r.BR_SetArrangeView({1:proj}, {2:startTime}, {3:endTime})$0"
		"description": "[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see BR_GetArrangeView."
	},
	"BR_SetItemEdges lua": {
		"prefix": "r.BR_SetItemEdges",
		"scope": "lua",
		"body": "r.BR_SetItemEdges({1:item}, {2:startTime}, {3:endTime})$0"
		"description": "[BR] Set item start and end edges' position - returns true in case of any changes"
	},
	"BR_SetMediaItemImageResource lua": {
		"prefix": "r.BR_SetMediaItemImageResource",
		"scope": "lua",
		"body": "r.BR_SetMediaItemImageResource({1:item}, {2:imageIn}, {3:imageFlags})$0"
		"description": "[BR] Set image resource and its flags for a given item. To clear current image resource, pass imageIn as ''.\nimageFlags: &1=0: don't display image, &1: center / tile, &3: stretch, &5: full height (REAPER 5.974+).\nCan also be used to display existing text in empty items unstretched (pass imageIn = '', imageFlags = 0) or stretched (pass imageIn = ''. imageFlags = 3).\nTo get image resource, see BR_GetMediaItemImageResource."
	},
	"BR_SetMediaSourceProperties lua": {
		"prefix": "r.BR_SetMediaSourceProperties",
		"scope": "lua",
		"body": "r.BR_SetMediaSourceProperties({1:take}, {2:section}, {3:start}, {4:length}, {5:fade}, {6:reverse})$0"
		"description": "[BR] Set take media source properties. Returns false if take can't have them (MIDI items etc.). Section parameters have to be valid only when passing section=true.\nTo get source properties, see BR_GetMediaSourceProperties."
	},
	"BR_SetMediaTrackLayouts lua": {
		"prefix": "r.BR_SetMediaTrackLayouts",
		"scope": "lua",
		"body": "r.BR_SetMediaTrackLayouts({1:track}, {2:mcpLayoutNameIn}, {3:tcpLayoutNameIn})$0"
		"description": "[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Set media track layouts for MCP and TCP. To set default layout, pass empty string ('') as layout name. In case layouts were successfully set, returns true (if layouts are already set to supplied layout names, it will return false since no changes were made).\nTo get media track layouts, see BR_GetMediaTrackLayouts."
	},
	"BR_SetMidiTakeTempoInfo lua": {
		"prefix": "r.BR_SetMidiTakeTempoInfo",
		"scope": "lua",
		"body": "r.BR_SetMidiTakeTempoInfo({1:take}, {2:ignoreProjTempo}, {3:bpm}, {4:num}, {5:den})$0"
		"description": "[BR] Set 'ignore project tempo' information for MIDI take. Returns true in case the take was successfully updated."
	},
	"BR_SetTakeSourceFromFile lua": {
		"prefix": "r.BR_SetTakeSourceFromFile",
		"scope": "lua",
		"body": "r.BR_SetTakeSourceFromFile({1:take}, {2:filenameIn}, {3:inProjectData})$0"
		"description": "[BR] Set new take source from file. To import MIDI file as in-project source data pass inProjectData=true. Returns false if failed.\nAny take source properties from the previous source will be lost - to preserve them, see BR_SetTakeSourceFromFile2.\nNote: To set source from existing take, see SNM_GetSetSourceState2."
	},
	"BR_SetTakeSourceFromFile2 lua": {
		"prefix": "r.BR_SetTakeSourceFromFile2",
		"scope": "lua",
		"body": "r.BR_SetTakeSourceFromFile2({1:take}, {2:filenameIn}, {3:inProjectData}, {4:keepSourceProperties})$0"
		"description": "[BR] Differs from BR_SetTakeSourceFromFile only that it can also preserve existing take media source properties."
	},
	"BR_TakeAtMouseCursor lua": {
		"prefix": "r.BR_TakeAtMouseCursor",
		"scope": "lua",
		"body": "r.BR_TakeAtMouseCursor()$0"
		"description": "[BR] Get take under mouse cursor. Position is mouse cursor position in arrange."
	},
	"BR_TrackAtMouseCursor lua": {
		"prefix": "r.BR_TrackAtMouseCursor",
		"scope": "lua",
		"body": "r.BR_TrackAtMouseCursor()$0"
		"description": "[BR] Get track under mouse cursor.\nContext signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.\nPosition will hold mouse cursor position in arrange if applicable."
	},
	"BR_TrackFX_GetFXModuleName lua": {
		"prefix": "r.BR_TrackFX_GetFXModuleName",
		"scope": "lua",
		"body": "r.BR_TrackFX_GetFXModuleName({1:track}, {2:fx})$0"
		"description": "[BR] Deprecated, see TrackFX_GetNamedConfigParm/'fx_ident' (v6.37+). Get the exact name (like effect.dll, effect.vst3, etc...) of an FX."
	},
	"BR_Win32_CB_FindString lua": {
		"prefix": "r.BR_Win32_CB_FindString",
		"scope": "lua",
		"body": "r.BR_Win32_CB_FindString({1:comboBoxHwnd}, {2:startId}, {3:string})$0"
		"description": "[BR] Equivalent to win32 API ComboBox_FindString()."
	},
	"BR_Win32_CB_FindStringExact lua": {
		"prefix": "r.BR_Win32_CB_FindStringExact",
		"scope": "lua",
		"body": "r.BR_Win32_CB_FindStringExact({1:comboBoxHwnd}, {2:startId}, {3:string})$0"
		"description": "[BR] Equivalent to win32 API ComboBox_FindStringExact()."
	},
	"BR_Win32_ClientToScreen lua": {
		"prefix": "r.BR_Win32_ClientToScreen",
		"scope": "lua",
		"body": "r.BR_Win32_ClientToScreen({1:hwnd}, {2:xIn}, {3:yIn})$0"
		"description": "[BR] Equivalent to win32 API ClientToScreen()."
	},
	"BR_Win32_FindWindowEx lua": {
		"prefix": "r.BR_Win32_FindWindowEx",
		"scope": "lua",
		"body": "r.BR_Win32_FindWindowEx({1:hwndParent}, {2:hwndChildAfter}, {3:className}, {4:windowName}, {5:searchClass}, {6:searchName})$0"
		"description": "[BR] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn't allow passing NULL (None in Python, nil in Lua etc...) parameters, to search by supplied class or name set searchClass and searchName accordingly. HWND parameters should be passed as either '0' to signify NULL or as string obtained from BR_Win32_HwndToString."
	},
	"BR_Win32_GET_X_LPARAM lua": {
		"prefix": "r.BR_Win32_GET_X_LPARAM",
		"scope": "lua",
		"body": "r.BR_Win32_GET_X_LPARAM({1:lParam})$0"
		"description": "[BR] Equivalent to win32 API GET_X_LPARAM()."
	},
	"BR_Win32_GET_Y_LPARAM lua": {
		"prefix": "r.BR_Win32_GET_Y_LPARAM",
		"scope": "lua",
		"body": "r.BR_Win32_GET_Y_LPARAM({1:lParam})$0"
		"description": "[BR] Equivalent to win32 API GET_Y_LPARAM()."
	},
	"BR_Win32_GetConstant lua": {
		"prefix": "r.BR_Win32_GetConstant",
		"scope": "lua",
		"body": "r.BR_Win32_GetConstant({1:constantName})$0"
		"description": "[BR] Returns various constants needed for BR_Win32 functions.\nSupported constants are:\nCB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL\nEM_SETSEL\nGW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER\nGWL_STYLE\nSW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL\nSWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER\nVK_DOWN, VK_UP\nWM_CLOSE, WM_KEYDOWN\nWS_MAXIMIZE, WS_OVERLAPPEDWINDOW"
	},
	"BR_Win32_GetCursorPos lua": {
		"prefix": "r.BR_Win32_GetCursorPos",
		"scope": "lua",
		"body": "r.BR_Win32_GetCursorPos()$0"
		"description": "[BR] Equivalent to win32 API GetCursorPos()."
	},
	"BR_Win32_GetFocus lua": {
		"prefix": "r.BR_Win32_GetFocus",
		"scope": "lua",
		"body": "r.BR_Win32_GetFocus()$0"
		"description": "[BR] Equivalent to win32 API GetFocus()."
	},
	"BR_Win32_GetForegroundWindow lua": {
		"prefix": "r.BR_Win32_GetForegroundWindow",
		"scope": "lua",
		"body": "r.BR_Win32_GetForegroundWindow()$0"
		"description": "[BR] Equivalent to win32 API GetForegroundWindow()."
	},
	"BR_Win32_GetMainHwnd lua": {
		"prefix": "r.BR_Win32_GetMainHwnd",
		"scope": "lua",
		"body": "r.BR_Win32_GetMainHwnd()$0"
		"description": "[BR] Alternative to GetMainHwnd. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type"
	},
	"BR_Win32_GetMixerHwnd lua": {
		"prefix": "r.BR_Win32_GetMixerHwnd",
		"scope": "lua",
		"body": "r.BR_Win32_GetMixerHwnd()$0"
		"description": "[BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked"
	},
	"BR_Win32_GetMonitorRectFromRect lua": {
		"prefix": "r.BR_Win32_GetMonitorRectFromRect",
		"scope": "lua",
		"body": "r.BR_Win32_GetMonitorRectFromRect({1:workingAreaOnly}, {2:leftIn}, {3:topIn}, {4:rightIn}, {5:bottomIn})$0"
		"description": "[BR] Get coordinates for screen which is nearest to supplied coordinates. Pass workingAreaOnly as true to get screen coordinates excluding taskbar (or menu bar on OSX)."
	},
	"BR_Win32_GetParent lua": {
		"prefix": "r.BR_Win32_GetParent",
		"scope": "lua",
		"body": "r.BR_Win32_GetParent({1:hwnd})$0"
		"description": "[BR] Equivalent to win32 API GetParent()."
	},
	"BR_Win32_GetPrivateProfileString lua": {
		"prefix": "r.BR_Win32_GetPrivateProfileString",
		"scope": "lua",
		"body": "r.BR_Win32_GetPrivateProfileString({1:sectionName}, {2:keyName}, {3:defaultString}, {4:filePath})$0"
		"description": "[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini."
	},
	"BR_Win32_GetWindow lua": {
		"prefix": "r.BR_Win32_GetWindow",
		"scope": "lua",
		"body": "r.BR_Win32_GetWindow({1:hwnd}, {2:cmd})$0"
		"description": "[BR] Equivalent to win32 API GetWindow()."
	},
	"BR_Win32_GetWindowLong lua": {
		"prefix": "r.BR_Win32_GetWindowLong",
		"scope": "lua",
		"body": "r.BR_Win32_GetWindowLong({1:hwnd}, {2:index})$0"
		"description": "[BR] Equivalent to win32 API GetWindowLong()."
	},
	"BR_Win32_GetWindowRect lua": {
		"prefix": "r.BR_Win32_GetWindowRect",
		"scope": "lua",
		"body": "r.BR_Win32_GetWindowRect({1:hwnd})$0"
		"description": "[BR] Equivalent to win32 API GetWindowRect()."
	},
	"BR_Win32_GetWindowText lua": {
		"prefix": "r.BR_Win32_GetWindowText",
		"scope": "lua",
		"body": "r.BR_Win32_GetWindowText({1:hwnd})$0"
		"description": "[BR] Equivalent to win32 API GetWindowText()."
	},
	"BR_Win32_HIBYTE lua": {
		"prefix": "r.BR_Win32_HIBYTE",
		"scope": "lua",
		"body": "r.BR_Win32_HIBYTE({1:value})$0"
		"description": "[BR] Equivalent to win32 API HIBYTE()."
	},
	"BR_Win32_HIWORD lua": {
		"prefix": "r.BR_Win32_HIWORD",
		"scope": "lua",
		"body": "r.BR_Win32_HIWORD({1:value})$0"
		"description": "[BR] Equivalent to win32 API HIWORD()."
	},
	"BR_Win32_HwndToString lua": {
		"prefix": "r.BR_Win32_HwndToString",
		"scope": "lua",
		"body": "r.BR_Win32_HwndToString({1:hwnd})$0"
		"description": "[BR] Convert HWND to string. To convert string back to HWND, see BR_Win32_StringToHwnd."
	},
	"BR_Win32_IsWindow lua": {
		"prefix": "r.BR_Win32_IsWindow",
		"scope": "lua",
		"body": "r.BR_Win32_IsWindow({1:hwnd})$0"
		"description": "[BR] Equivalent to win32 API IsWindow()."
	},
	"BR_Win32_IsWindowVisible lua": {
		"prefix": "r.BR_Win32_IsWindowVisible",
		"scope": "lua",
		"body": "r.BR_Win32_IsWindowVisible({1:hwnd})$0"
		"description": "[BR] Equivalent to win32 API IsWindowVisible()."
	},
	"BR_Win32_LOBYTE lua": {
		"prefix": "r.BR_Win32_LOBYTE",
		"scope": "lua",
		"body": "r.BR_Win32_LOBYTE({1:value})$0"
		"description": "[BR] Equivalent to win32 API LOBYTE()."
	},
	"BR_Win32_LOWORD lua": {
		"prefix": "r.BR_Win32_LOWORD",
		"scope": "lua",
		"body": "r.BR_Win32_LOWORD({1:value})$0"
		"description": "[BR] Equivalent to win32 API LOWORD()."
	},
	"BR_Win32_MAKELONG lua": {
		"prefix": "r.BR_Win32_MAKELONG",
		"scope": "lua",
		"body": "r.BR_Win32_MAKELONG({1:low}, {2:high})$0"
		"description": "[BR] Equivalent to win32 API MAKELONG()."
	},
	"BR_Win32_MAKELPARAM lua": {
		"prefix": "r.BR_Win32_MAKELPARAM",
		"scope": "lua",
		"body": "r.BR_Win32_MAKELPARAM({1:low}, {2:high})$0"
		"description": "[BR] Equivalent to win32 API MAKELPARAM()."
	},
	"BR_Win32_MAKELRESULT lua": {
		"prefix": "r.BR_Win32_MAKELRESULT",
		"scope": "lua",
		"body": "r.BR_Win32_MAKELRESULT({1:low}, {2:high})$0"
		"description": "[BR] Equivalent to win32 API MAKELRESULT()."
	},
	"BR_Win32_MAKEWORD lua": {
		"prefix": "r.BR_Win32_MAKEWORD",
		"scope": "lua",
		"body": "r.BR_Win32_MAKEWORD({1:low}, {2:high})$0"
		"description": "[BR] Equivalent to win32 API MAKEWORD()."
	},
	"BR_Win32_MAKEWPARAM lua": {
		"prefix": "r.BR_Win32_MAKEWPARAM",
		"scope": "lua",
		"body": "r.BR_Win32_MAKEWPARAM({1:low}, {2:high})$0"
		"description": "[BR] Equivalent to win32 API MAKEWPARAM()."
	},
	"BR_Win32_MIDIEditor_GetActive lua": {
		"prefix": "r.BR_Win32_MIDIEditor_GetActive",
		"scope": "lua",
		"body": "r.BR_Win32_MIDIEditor_GetActive()$0"
		"description": "[BR] Alternative to MIDIEditor_GetActive. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type."
	},
	"BR_Win32_ScreenToClient lua": {
		"prefix": "r.BR_Win32_ScreenToClient",
		"scope": "lua",
		"body": "r.BR_Win32_ScreenToClient({1:hwnd}, {2:xIn}, {3:yIn})$0"
		"description": "[BR] Equivalent to win32 API ClientToScreen()."
	},
	"BR_Win32_SendMessage lua": {
		"prefix": "r.BR_Win32_SendMessage",
		"scope": "lua",
		"body": "r.BR_Win32_SendMessage({1:hwnd}, {2:msg}, {3:lParam}, {4:wParam})$0"
		"description": "[BR] Equivalent to win32 API SendMessage()."
	},
	"BR_Win32_SetFocus lua": {
		"prefix": "r.BR_Win32_SetFocus",
		"scope": "lua",
		"body": "r.BR_Win32_SetFocus({1:hwnd})$0"
		"description": "[BR] Equivalent to win32 API SetFocus()."
	},
	"BR_Win32_SetForegroundWindow lua": {
		"prefix": "r.BR_Win32_SetForegroundWindow",
		"scope": "lua",
		"body": "r.BR_Win32_SetForegroundWindow({1:hwnd})$0"
		"description": "[BR] Equivalent to win32 API SetForegroundWindow()."
	},
	"BR_Win32_SetWindowLong lua": {
		"prefix": "r.BR_Win32_SetWindowLong",
		"scope": "lua",
		"body": "r.BR_Win32_SetWindowLong({1:hwnd}, {2:index}, {3:newLong})$0"
		"description": "[BR] Equivalent to win32 API SetWindowLong()."
	},
	"BR_Win32_SetWindowPos lua": {
		"prefix": "r.BR_Win32_SetWindowPos",
		"scope": "lua",
		"body": "r.BR_Win32_SetWindowPos({1:hwnd}, {2:hwndInsertAfter}, {3:x}, {4:y}, {5:width}, {6:height}, {7:flags})$0"
		"description": "[BR] Equivalent to win32 API SetWindowPos().\nhwndInsertAfter may be a string: 'HWND_BOTTOM', 'HWND_NOTOPMOST', 'HWND_TOP', 'HWND_TOPMOST' or a string obtained with BR_Win32_HwndToString."
	},
	"BR_Win32_ShellExecute lua": {
		"prefix": "r.BR_Win32_ShellExecute",
		"scope": "lua",
		"body": "r.BR_Win32_ShellExecute({1:operation}, {2:file}, {3:parameters}, {4:directory}, {5:showFlags})$0"
		"description": "[BR] Equivalent to win32 API ShellExecute() with HWND set to main window"
	},
	"BR_Win32_ShowWindow lua": {
		"prefix": "r.BR_Win32_ShowWindow",
		"scope": "lua",
		"body": "r.BR_Win32_ShowWindow({1:hwnd}, {2:cmdShow})$0"
		"description": "[BR] Equivalent to win32 API ShowWindow()."
	},
	"BR_Win32_StringToHwnd lua": {
		"prefix": "r.BR_Win32_StringToHwnd",
		"scope": "lua",
		"body": "r.BR_Win32_StringToHwnd({1:string})$0"
		"description": "[BR] Convert string to HWND. To convert HWND back to string, see BR_Win32_HwndToString."
	},
	"BR_Win32_WindowFromPoint lua": {
		"prefix": "r.BR_Win32_WindowFromPoint",
		"scope": "lua",
		"body": "r.BR_Win32_WindowFromPoint({1:x}, {2:y})$0"
		"description": "[BR] Equivalent to win32 API WindowFromPoint()."
	},
	"BR_Win32_WritePrivateProfileString lua": {
		"prefix": "r.BR_Win32_WritePrivateProfileString",
		"scope": "lua",
		"body": "r.BR_Win32_WritePrivateProfileString({1:sectionName}, {2:keyName}, {3:value}, {4:filePath})$0"
		"description": "[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini. You can pass an empty string as value to delete a key."
	},
	"Blink_GetAudioBufferTimingInfo lua": {
		"prefix": "r.Blink_GetAudioBufferTimingInfo",
		"scope": "lua",
		"body": "r.Blink_GetAudioBufferTimingInfo()$0"
		"description": "Get audio buffer timing information. This is the length (size) of audio buffer in samples, sample rate and 'latest audio buffer switch wall clock time' in seconds."
	},
	"Blink_GetBeatAtTime lua": {
		"prefix": "r.Blink_GetBeatAtTime",
		"scope": "lua",
		"body": "r.Blink_GetBeatAtTime({1:time}, {2:quantum})$0"
		"description": "Get session beat value corresponding to given time for given quantum."
	},
	"Blink_GetClockNow lua": {
		"prefix": "r.Blink_GetClockNow",
		"scope": "lua",
		"body": "r.Blink_GetClockNow()$0"
		"description": "Clock used by Blink."
	},
	"Blink_GetEnabled lua": {
		"prefix": "r.Blink_GetEnabled",
		"scope": "lua",
		"body": "r.Blink_GetEnabled()$0"
		"description": "Is Blink currently enabled?"
	},
	"Blink_GetMaster lua": {
		"prefix": "r.Blink_GetMaster",
		"scope": "lua",
		"body": "r.Blink_GetMaster()$0"
		"description": "Is Blink Master?"
	},
	"Blink_GetNumPeers lua": {
		"prefix": "r.Blink_GetNumPeers",
		"scope": "lua",
		"body": "r.Blink_GetNumPeers()$0"
		"description": "How many peers are currently connected in Link session?"
	},
	"Blink_GetPhaseAtTime lua": {
		"prefix": "r.Blink_GetPhaseAtTime",
		"scope": "lua",
		"body": "r.Blink_GetPhaseAtTime({1:time}, {2:quantum})$0"
		"description": "Get session phase at given time for given quantum."
	},
	"Blink_GetPlaying lua": {
		"prefix": "r.Blink_GetPlaying",
		"scope": "lua",
		"body": "r.Blink_GetPlaying()$0"
		"description": "Is transport playing?"
	},
	"Blink_GetPuppet lua": {
		"prefix": "r.Blink_GetPuppet",
		"scope": "lua",
		"body": "r.Blink_GetPuppet()$0"
		"description": "Is Blink Puppet?"
	},
	"Blink_GetQuantum lua": {
		"prefix": "r.Blink_GetQuantum",
		"scope": "lua",
		"body": "r.Blink_GetQuantum()$0"
		"description": "Get quantum."
	},
	"Blink_GetStartStopSyncEnabled lua": {
		"prefix": "r.Blink_GetStartStopSyncEnabled",
		"scope": "lua",
		"body": "r.Blink_GetStartStopSyncEnabled()$0"
		"description": "Is start/stop synchronization enabled?"
	},
	"Blink_GetTempo lua": {
		"prefix": "r.Blink_GetTempo",
		"scope": "lua",
		"body": "r.Blink_GetTempo()$0"
		"description": "Tempo of timeline, in quarter note Beats Per Minute."
	},
	"Blink_GetTimeAtBeat lua": {
		"prefix": "r.Blink_GetTimeAtBeat",
		"scope": "lua",
		"body": "r.Blink_GetTimeAtBeat({1:beat}, {2:quantum})$0"
		"description": "Get time at which given beat occurs for given quantum."
	},
	"Blink_GetTimeForPlaying lua": {
		"prefix": "r.Blink_GetTimeForPlaying",
		"scope": "lua",
		"body": "r.Blink_GetTimeForPlaying()$0"
		"description": "Get time at which transport start/stop occurs."
	},
	"Blink_GetTimelineOffset lua": {
		"prefix": "r.Blink_GetTimelineOffset",
		"scope": "lua",
		"body": "r.Blink_GetTimelineOffset()$0"
		"description": "Get timeline offset. This is the offset between REAPER timeline and Link session timeline."
	},
	"Blink_GetVersion lua": {
		"prefix": "r.Blink_GetVersion",
		"scope": "lua",
		"body": "r.Blink_GetVersion()$0"
		"description": "Get Blink version."
	},
	"Blink_SetBeatAtStartPlayingTimeRequest lua": {
		"prefix": "r.Blink_SetBeatAtStartPlayingTimeRequest",
		"scope": "lua",
		"body": "r.Blink_SetBeatAtStartPlayingTimeRequest({1:beat}, {2:quantum})$0"
		"description": "Convenience function to attempt to map given beat to time when transport is starting to play in context of given quantum. This function evaluates to a no-op if GetPlaying() equals false."
	},
	"Blink_SetBeatAtTimeForce lua": {
		"prefix": "r.Blink_SetBeatAtTimeForce",
		"scope": "lua",
		"body": "r.Blink_SetBeatAtTimeForce({1:bpm}, {2:time}, {3:quantum})$0"
		"description": "Rudely re-map beat/time relationship for all peers in Link session."
	},
	"Blink_SetBeatAtTimeRequest lua": {
		"prefix": "r.Blink_SetBeatAtTimeRequest",
		"scope": "lua",
		"body": "r.Blink_SetBeatAtTimeRequest({1:bpm}, {2:time}, {3:quantum})$0"
		"description": "Attempt to map given beat to given time in context of given quantum."
	},
	"Blink_SetCaptureTransportCommands lua": {
		"prefix": "r.Blink_SetCaptureTransportCommands",
		"scope": "lua",
		"body": "r.Blink_SetCaptureTransportCommands({1:enable})$0"
		"description": "Captures REAPER Transport commands and 'Tempo: Increase/Decrease current project tempo by' commands and broadcasts them into Link session. When used with Master or Puppet mode enabled, provides better integration between REAPER and Link session transport and tempos."
	},
	"Blink_SetEnabled lua": {
		"prefix": "r.Blink_SetEnabled",
		"scope": "lua",
		"body": "r.Blink_SetEnabled({1:enable})$0"
		"description": "Enable/disable Blink. In Blink methods transport, tempo and timeline refer to Link session, not local REAPER instance."
	},
	"Blink_SetLaunchOffset lua": {
		"prefix": "r.Blink_SetLaunchOffset",
		"scope": "lua",
		"body": "r.Blink_SetLaunchOffset({1:offset})$0"
		"description": "Set launch offset. This is used to compensate for possible constant REAPER transport launch delay, if such exists."
	},
	"Blink_SetMaster lua": {
		"prefix": "r.Blink_SetMaster",
		"scope": "lua",
		"body": "r.Blink_SetMaster({1:enable})$0"
		"description": "Set Blink as Master. Puppet needs to be enabled first. Same as Puppet, but possible beat offset is broadcast to Link session, effectively forcing local REAPER timeline on peers. Only one, if any, Blink should be Master in Link session."
	},
	"Blink_SetPlaying lua": {
		"prefix": "r.Blink_SetPlaying",
		"scope": "lua",
		"body": "r.Blink_SetPlaying({1:playing}, {2:time})$0"
		"description": "Set if transport should be playing or stopped, taking effect at given time."
	},
	"Blink_SetPlayingAndBeatAtTimeRequest lua": {
		"prefix": "r.Blink_SetPlayingAndBeatAtTimeRequest",
		"scope": "lua",
		"body": "r.Blink_SetPlayingAndBeatAtTimeRequest({1:playing}, {2:time}, {3:beat}, {4:quantum})$0"
		"description": "Convenience function to start or stop transport at given time and attempt to map given beat to this time in context of given quantum."
	},
	"Blink_SetPuppet lua": {
		"prefix": "r.Blink_SetPuppet",
		"scope": "lua",
		"body": "r.Blink_SetPuppet({1:enable})$0"
		"description": "Set Blink as Puppet. When enabled, Blink attempts to synchronize local REAPER tempo to Link session tempo by adjusting current active tempo/time signature marker, or broadcasts local REAPER tempo changes into Link session, and attempts to correct possible offset by adjusting REAPER playrate. Based on cumulative single beat phase since Link session transport start, regardless of quantum."
	},
	"Blink_SetQuantum lua": {
		"prefix": "r.Blink_SetQuantum",
		"scope": "lua",
		"body": "r.Blink_SetQuantum({1:quantum})$0"
		"description": "Set quantum. Usually this is set to length of one measure/bar in quarter notes."
	},
	"Blink_SetStartStopSyncEnabled lua": {
		"prefix": "r.Blink_SetStartStopSyncEnabled",
		"scope": "lua",
		"body": "r.Blink_SetStartStopSyncEnabled({1:enable})$0"
		"description": "Enable start/stop synchronization."
	},
	"Blink_SetTempo lua": {
		"prefix": "r.Blink_SetTempo",
		"scope": "lua",
		"body": "r.Blink_SetTempo({1:bpm})$0"
		"description": "Set timeline tempo to given bpm value."
	},
	"Blink_SetTempoAtTime lua": {
		"prefix": "r.Blink_SetTempoAtTime",
		"scope": "lua",
		"body": "r.Blink_SetTempoAtTime({1:bpm}, {2:time})$0"
		"description": "Set tempo to given bpm value, taking effect (heard from speakers)at given wall clock time."
	},
	"Blink_StartStop lua": {
		"prefix": "r.Blink_StartStop",
		"scope": "lua",
		"body": "r.Blink_StartStop()$0"
		"description": "Transport start/stop."
	},
	"BypassFxAllTracks lua": {
		"prefix": "r.BypassFxAllTracks",
		"scope": "lua",
		"body": "r.BypassFxAllTracks({1:bypass})$0"
		"description": "-1 = bypass all if not all bypassed,otherwise unbypass all"
	},
	"CF_CreatePreview lua": {
		"prefix": "r.CF_CreatePreview",
		"scope": "lua",
		"body": "r.CF_CreatePreview({1:source})$0"
		"description": "Create a new preview object. Does not take ownership of the source (don't forget to destroy it unless it came from a take!). See CF_Preview_Play and the others CF_Preview_* functions.\n\nThe preview object is automatically destroyed at the end of a defer cycle if at least one of these conditions are met:\n- playback finished\n- playback was not started using CF_Preview_Play\n- the output track no longer exists"
	},
	"CF_EnumMediaSourceCues lua": {
		"prefix": "r.CF_EnumMediaSourceCues",
		"scope": "lua",
		"body": "r.CF_EnumMediaSourceCues({1:src}, {2:index})$0"
		"description": "Enumerate the source's media cues. Returns the next index or 0 when finished."
	},
	"CF_EnumSelectedFX lua": {
		"prefix": "r.CF_EnumSelectedFX",
		"scope": "lua",
		"body": "r.CF_EnumSelectedFX({1:hwnd}, {2:index})$0"
		"description": "Return the index of the next selected effect in the given FX chain. Start index should be -1. Returns -1 if there are no more selected effects."
	},
	"CF_EnumerateActions lua": {
		"prefix": "r.CF_EnumerateActions",
		"scope": "lua",
		"body": "r.CF_EnumerateActions({1:section}, {2:index})$0"
		"description": "Deprecated, see kbd_enumerateActions (v6.71+). Wrapper for the unexposed kbd_enumerateActions API function.\nMain=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063"
	},
	"CF_ExportMediaSource lua": {
		"prefix": "r.CF_ExportMediaSource",
		"scope": "lua",
		"body": "r.CF_ExportMediaSource({1:src}, {2:fn})$0"
		"description": "Export the source to the given file (MIDI only)."
	},
	"CF_GetClipboard lua": {
		"prefix": "r.CF_GetClipboard",
		"scope": "lua",
		"body": "r.CF_GetClipboard()$0"
		"description": "Read the contents of the system clipboard."
	},
	"CF_GetClipboardBig lua": {
		"prefix": "r.CF_GetClipboardBig",
		"scope": "lua",
		"body": "r.CF_GetClipboardBig({1:output})$0"
		"description": "[DEPRECATED: Use CF_GetClipboard] Read the contents of the system clipboard. See SNM_CreateFastString and SNM_DeleteFastString."
	},
	"CF_GetCommandText lua": {
		"prefix": "r.CF_GetCommandText",
		"scope": "lua",
		"body": "r.CF_GetCommandText({1:section}, {2:command})$0"
		"description": "Deprecated, see kbd_getTextFromCmd (v6.71+). Wrapper for the unexposed kbd_getTextFromCmd API function. See CF_EnumerateActions for common section IDs."
	},
	"CF_GetCustomColor lua": {
		"prefix": "r.CF_GetCustomColor",
		"scope": "lua",
		"body": "r.CF_GetCustomColor({1:index})$0"
		"description": "Get one of 16 SWS custom colors (0xBBGGRR on Windows, 0xRRGGBB everyhwere else). Index is zero-based."
	},
	"CF_GetFocusedFXChain lua": {
		"prefix": "r.CF_GetFocusedFXChain",
		"scope": "lua",
		"body": "r.CF_GetFocusedFXChain()$0"
		"description": "Return a handle to the currently focused FX chain window."
	},
	"CF_GetMediaSourceBitDepth lua": {
		"prefix": "r.CF_GetMediaSourceBitDepth",
		"scope": "lua",
		"body": "r.CF_GetMediaSourceBitDepth({1:src})$0"
		"description": "Returns the bit depth if available (0 otherwise)."
	},
	"CF_GetMediaSourceBitRate lua": {
		"prefix": "r.CF_GetMediaSourceBitRate",
		"scope": "lua",
		"body": "r.CF_GetMediaSourceBitRate({1:src})$0"
		"description": "Returns the bit rate for WAVE (wav, aif) and streaming/variable formats (mp3, ogg, opus). REAPER v6.19 or later is required for non-WAVE formats."
	},
	"CF_GetMediaSourceMetadata lua": {
		"prefix": "r.CF_GetMediaSourceMetadata",
		"scope": "lua",
		"body": "r.CF_GetMediaSourceMetadata({1:src}, {2:name}, {3:out})$0"
		"description": "Get the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF)."
	},
	"CF_GetMediaSourceOnline lua": {
		"prefix": "r.CF_GetMediaSourceOnline",
		"scope": "lua",
		"body": "r.CF_GetMediaSourceOnline({1:src})$0"
		"description": "Returns the online/offline status of the given source."
	},
	"CF_GetMediaSourceRPP lua": {
		"prefix": "r.CF_GetMediaSourceRPP",
		"scope": "lua",
		"body": "r.CF_GetMediaSourceRPP({1:src})$0"
		"description": "Get the project associated with this source (BWF, subproject...)."
	},
	"CF_GetSWSVersion lua": {
		"prefix": "r.CF_GetSWSVersion",
		"scope": "lua",
		"body": "r.CF_GetSWSVersion()$0"
		"description": "Return the current SWS version number."
	},
	"CF_GetTakeFXChain lua": {
		"prefix": "r.CF_GetTakeFXChain",
		"scope": "lua",
		"body": "r.CF_GetTakeFXChain({1:take})$0"
		"description": "Return a handle to the given take FX chain window. HACK: This temporarily renames the take in order to disambiguate the take FX chain window from similarily named takes."
	},
	"CF_GetTrackFXChain lua": {
		"prefix": "r.CF_GetTrackFXChain",
		"scope": "lua",
		"body": "r.CF_GetTrackFXChain({1:track})$0"
		"description": "Return a handle to the given track FX chain window."
	},
	"CF_GetTrackFXChainEx lua": {
		"prefix": "r.CF_GetTrackFXChainEx",
		"scope": "lua",
		"body": "r.CF_GetTrackFXChainEx({1:project}, {2:track}, {3:wantInputChain})$0"
		"description": "Return a handle to the given track FX chain window. Set wantInputChain to get the track's input/monitoring FX chain."
	},
	"CF_LocateInExplorer lua": {
		"prefix": "r.CF_LocateInExplorer",
		"scope": "lua",
		"body": "r.CF_LocateInExplorer({1:file})$0"
		"description": "Select the given file in explorer/finder."
	},
	"CF_NormalizeUTF8 lua": {
		"prefix": "r.CF_NormalizeUTF8",
		"scope": "lua",
		"body": "r.CF_NormalizeUTF8({1:input}, {2:mode})$0"
		"description": "Apply Unicode normalization to the provided UTF-8 string.\n\nMode values:\n- Bit 0 (composition mode):\n  * 0 = decomposition only\n  * 1 = decomposition + canonical composition\n- Bit 1 (decomposition mode):\n  * 0 = canonical decomposition\n  * 1 = compatibility decomposition\n\nWarning: this function is no-op on Windows XP (the input string is returned as-is)."
	},
	"CF_PCM_Source_SetSectionInfo lua": {
		"prefix": "r.CF_PCM_Source_SetSectionInfo",
		"scope": "lua",
		"body": "r.CF_PCM_Source_SetSectionInfo({1:section}, {2:source}, {3:offset}, {4:length}, {5:reverse}, {6:fadeIn})$0"
		"description": "Give a section source created using PCM_Source_CreateFromType('SECTION'). Offset and length are ignored if 0. Negative length to subtract from the total length of the source."
	},
	"CF_Preview_GetOutputTrack lua": {
		"prefix": "r.CF_Preview_GetOutputTrack",
		"scope": "lua",
		"body": "r.CF_Preview_GetOutputTrack({1:preview})$0"
		"description": ""
	},
	"CF_Preview_GetPeak lua": {
		"prefix": "r.CF_Preview_GetPeak",
		"scope": "lua",
		"body": "r.CF_Preview_GetPeak({1:preview}, {2:channel})$0"
		"description": "Return the maximum sample value played since the last read. Refresh speed depends on buffer size."
	},
	"CF_Preview_GetValue lua": {
		"prefix": "r.CF_Preview_GetValue",
		"scope": "lua",
		"body": "r.CF_Preview_GetValue({1:preview}, {2:name})$0"
		"description": "Supported attributes:\nB_LOOP         seek to the beginning when reaching the end of the source\nB_PPITCH       preserve pitch when changing playback rate\nD_FADEINLEN    length in seconds of playback fade in\nD_FADEOUTLEN   length in seconds of playback fade out\nD_LENGTH       (read only) length of the source * playback rate\nD_MEASUREALIGN >0 = wait until the next bar before starting playback (note: this causes playback to silently continue when project is paused and previewing through a track)\nD_PAN          playback pan\nD_PITCH        pitch adjustment in semitones\nD_PLAYRATE     playback rate (0.01..100)\nD_POSITION     current playback position\nD_VOLUME       playback volume\nI_OUTCHAN      first hardware output channel (&1024=mono, reads -1 when playing through a track, see CF_Preview_SetOutputTrack)\nI_PITCHMODE    highest 16 bits=pitch shift mode (see EnumPitchShiftModes), lower 16 bits=pitch shift submode (see EnumPitchShiftSubModes)"
	},
	"CF_Preview_Play lua": {
		"prefix": "r.CF_Preview_Play",
		"scope": "lua",
		"body": "r.CF_Preview_Play({1:preview})$0"
		"description": "Start playback of the configured preview object."
	},
	"CF_Preview_SetOutputTrack lua": {
		"prefix": "r.CF_Preview_SetOutputTrack",
		"scope": "lua",
		"body": "r.CF_Preview_SetOutputTrack({1:preview}, {2:project}, {3:track})$0"
		"description": ""
	},
	"CF_Preview_SetValue lua": {
		"prefix": "r.CF_Preview_SetValue",
		"scope": "lua",
		"body": "r.CF_Preview_SetValue({1:preview}, {2:name}, {3:newValue})$0"
		"description": "See CF_Preview_GetValue."
	},
	"CF_Preview_Stop lua": {
		"prefix": "r.CF_Preview_Stop",
		"scope": "lua",
		"body": "r.CF_Preview_Stop({1:preview})$0"
		"description": "Stop and destroy a preview object."
	},
	"CF_Preview_StopAll lua": {
		"prefix": "r.CF_Preview_StopAll",
		"scope": "lua",
		"body": "r.CF_Preview_StopAll()$0"
		"description": "Stop and destroy all currently active preview objects."
	},
	"CF_SelectTakeFX lua": {
		"prefix": "r.CF_SelectTakeFX",
		"scope": "lua",
		"body": "r.CF_SelectTakeFX({1:take}, {2:index})$0"
		"description": "Set which take effect is active in the take's FX chain. The FX chain window does not have to be open."
	},
	"CF_SelectTrackFX lua": {
		"prefix": "r.CF_SelectTrackFX",
		"scope": "lua",
		"body": "r.CF_SelectTrackFX({1:track}, {2:index})$0"
		"description": "Set which track effect is active in the track's FX chain. The FX chain window does not have to be open."
	},
	"CF_SendActionShortcut lua": {
		"prefix": "r.CF_SendActionShortcut",
		"scope": "lua",
		"body": "r.CF_SendActionShortcut({1:hwnd}, {2:section}, {3:key}, {4:modifiersIn})$0"
		"description": "Run in the specified window the action command ID associated with the shortcut key in the given section. See CF_EnumerateActions for common section IDs.\n\n\tKeys are Windows virtual key codes. &0x8000 for an extended key (eg. Numpad Enter = VK_RETURN & 0x8000).\n\tModifier values: nil = read from keyboard, 0 = no modifier, &4 = Control (Cmd on macOS), &8 = Shift, &16 = Alt, &32 = Super"
	},
	"CF_SetClipboard lua": {
		"prefix": "r.CF_SetClipboard",
		"scope": "lua",
		"body": "r.CF_SetClipboard({1:str})$0"
		"description": "Write the given string into the system clipboard."
	},
	"CF_SetCustomColor lua": {
		"prefix": "r.CF_SetCustomColor",
		"scope": "lua",
		"body": "r.CF_SetCustomColor({1:index}, {2:color})$0"
		"description": "Set one of 16 SWS custom colors (0xBBGGRR on Windows, 0xRRGGBB everyhwere else). Index is zero-based."
	},
	"CF_SetMediaSourceOnline lua": {
		"prefix": "r.CF_SetMediaSourceOnline",
		"scope": "lua",
		"body": "r.CF_SetMediaSourceOnline({1:src}, {2:set})$0"
		"description": "Set the online/offline status of the given source (closes files when set=false)."
	},
	"CF_ShellExecute lua": {
		"prefix": "r.CF_ShellExecute",
		"scope": "lua",
		"body": "r.CF_ShellExecute({1:file})$0"
		"description": "Open the given file or URL in the default application. See also CF_LocateInExplorer."
	},
	"CSurf_FlushUndo lua": {
		"prefix": "r.CSurf_FlushUndo",
		"scope": "lua",
		"body": "r.CSurf_FlushUndo({1:force})$0"
		"description": "call this to force flushing of the undo states after using CSurf_On*Change()"
	},
	"CSurf_GetTouchState lua": {
		"prefix": "r.CSurf_GetTouchState",
		"scope": "lua",
		"body": "r.CSurf_GetTouchState({1:trackid}, {2:isPan})$0"
		"description": ""
	},
	"CSurf_GoEnd lua": {
		"prefix": "r.CSurf_GoEnd",
		"scope": "lua",
		"body": "r.CSurf_GoEnd()$0"
		"description": ""
	},
	"CSurf_GoStart lua": {
		"prefix": "r.CSurf_GoStart",
		"scope": "lua",
		"body": "r.CSurf_GoStart()$0"
		"description": ""
	},
	"CSurf_NumTracks lua": {
		"prefix": "r.CSurf_NumTracks",
		"scope": "lua",
		"body": "r.CSurf_NumTracks({1:mcpView})$0"
		"description": ""
	},
	"CSurf_OnArrow lua": {
		"prefix": "r.CSurf_OnArrow",
		"scope": "lua",
		"body": "r.CSurf_OnArrow({1:whichdir}, {2:wantzoom})$0"
		"description": ""
	},
	"CSurf_OnFXChange lua": {
		"prefix": "r.CSurf_OnFXChange",
		"scope": "lua",
		"body": "r.CSurf_OnFXChange({1:trackid}, {2:en})$0"
		"description": ""
	},
	"CSurf_OnFwd lua": {
		"prefix": "r.CSurf_OnFwd",
		"scope": "lua",
		"body": "r.CSurf_OnFwd({1:seekplay})$0"
		"description": ""
	},
	"CSurf_OnInputMonitorChange lua": {
		"prefix": "r.CSurf_OnInputMonitorChange",
		"scope": "lua",
		"body": "r.CSurf_OnInputMonitorChange({1:trackid}, {2:monitor})$0"
		"description": ""
	},
	"CSurf_OnInputMonitorChangeEx lua": {
		"prefix": "r.CSurf_OnInputMonitorChangeEx",
		"scope": "lua",
		"body": "r.CSurf_OnInputMonitorChangeEx({1:trackid}, {2:monitor}, {3:allowgang})$0"
		"description": ""
	},
	"CSurf_OnMuteChange lua": {
		"prefix": "r.CSurf_OnMuteChange",
		"scope": "lua",
		"body": "r.CSurf_OnMuteChange({1:trackid}, {2:mute})$0"
		"description": ""
	},
	"CSurf_OnMuteChangeEx lua": {
		"prefix": "r.CSurf_OnMuteChangeEx",
		"scope": "lua",
		"body": "r.CSurf_OnMuteChangeEx({1:trackid}, {2:mute}, {3:allowgang})$0"
		"description": ""
	},
	"CSurf_OnPanChange lua": {
		"prefix": "r.CSurf_OnPanChange",
		"scope": "lua",
		"body": "r.CSurf_OnPanChange({1:trackid}, {2:pan}, {3:relative})$0"
		"description": ""
	},
	"CSurf_OnPanChangeEx lua": {
		"prefix": "r.CSurf_OnPanChangeEx",
		"scope": "lua",
		"body": "r.CSurf_OnPanChangeEx({1:trackid}, {2:pan}, {3:relative}, {4:allowGang})$0"
		"description": ""
	},
	"CSurf_OnPause lua": {
		"prefix": "r.CSurf_OnPause",
		"scope": "lua",
		"body": "r.CSurf_OnPause()$0"
		"description": ""
	},
	"CSurf_OnPlay lua": {
		"prefix": "r.CSurf_OnPlay",
		"scope": "lua",
		"body": "r.CSurf_OnPlay()$0"
		"description": ""
	},
	"CSurf_OnPlayRateChange lua": {
		"prefix": "r.CSurf_OnPlayRateChange",
		"scope": "lua",
		"body": "r.CSurf_OnPlayRateChange({1:playrate})$0"
		"description": ""
	},
	"CSurf_OnRecArmChange lua": {
		"prefix": "r.CSurf_OnRecArmChange",
		"scope": "lua",
		"body": "r.CSurf_OnRecArmChange({1:trackid}, {2:recarm})$0"
		"description": ""
	},
	"CSurf_OnRecArmChangeEx lua": {
		"prefix": "r.CSurf_OnRecArmChangeEx",
		"scope": "lua",
		"body": "r.CSurf_OnRecArmChangeEx({1:trackid}, {2:recarm}, {3:allowgang})$0"
		"description": ""
	},
	"CSurf_OnRecord lua": {
		"prefix": "r.CSurf_OnRecord",
		"scope": "lua",
		"body": "r.CSurf_OnRecord()$0"
		"description": ""
	},
	"CSurf_OnRecvPanChange lua": {
		"prefix": "r.CSurf_OnRecvPanChange",
		"scope": "lua",
		"body": "r.CSurf_OnRecvPanChange({1:trackid}, {2:recv_index}, {3:pan}, {4:relative})$0"
		"description": ""
	},
	"CSurf_OnRecvVolumeChange lua": {
		"prefix": "r.CSurf_OnRecvVolumeChange",
		"scope": "lua",
		"body": "r.CSurf_OnRecvVolumeChange({1:trackid}, {2:recv_index}, {3:volume}, {4:relative})$0"
		"description": ""
	},
	"CSurf_OnRew lua": {
		"prefix": "r.CSurf_OnRew",
		"scope": "lua",
		"body": "r.CSurf_OnRew({1:seekplay})$0"
		"description": ""
	},
	"CSurf_OnRewFwd lua": {
		"prefix": "r.CSurf_OnRewFwd",
		"scope": "lua",
		"body": "r.CSurf_OnRewFwd({1:seekplay}, {2:dir})$0"
		"description": ""
	},
	"CSurf_OnScroll lua": {
		"prefix": "r.CSurf_OnScroll",
		"scope": "lua",
		"body": "r.CSurf_OnScroll({1:xdir}, {2:ydir})$0"
		"description": ""
	},
	"CSurf_OnSelectedChange lua": {
		"prefix": "r.CSurf_OnSelectedChange",
		"scope": "lua",
		"body": "r.CSurf_OnSelectedChange({1:trackid}, {2:selected})$0"
		"description": ""
	},
	"CSurf_OnSendPanChange lua": {
		"prefix": "r.CSurf_OnSendPanChange",
		"scope": "lua",
		"body": "r.CSurf_OnSendPanChange({1:trackid}, {2:send_index}, {3:pan}, {4:relative})$0"
		"description": ""
	},
	"CSurf_OnSendVolumeChange lua": {
		"prefix": "r.CSurf_OnSendVolumeChange",
		"scope": "lua",
		"body": "r.CSurf_OnSendVolumeChange({1:trackid}, {2:send_index}, {3:volume}, {4:relative})$0"
		"description": ""
	},
	"CSurf_OnSoloChange lua": {
		"prefix": "r.CSurf_OnSoloChange",
		"scope": "lua",
		"body": "r.CSurf_OnSoloChange({1:trackid}, {2:solo})$0"
		"description": ""
	},
	"CSurf_OnSoloChangeEx lua": {
		"prefix": "r.CSurf_OnSoloChangeEx",
		"scope": "lua",
		"body": "r.CSurf_OnSoloChangeEx({1:trackid}, {2:solo}, {3:allowgang})$0"
		"description": ""
	},
	"CSurf_OnStop lua": {
		"prefix": "r.CSurf_OnStop",
		"scope": "lua",
		"body": "r.CSurf_OnStop()$0"
		"description": ""
	},
	"CSurf_OnTempoChange lua": {
		"prefix": "r.CSurf_OnTempoChange",
		"scope": "lua",
		"body": "r.CSurf_OnTempoChange({1:bpm})$0"
		"description": ""
	},
	"CSurf_OnTrackSelection lua": {
		"prefix": "r.CSurf_OnTrackSelection",
		"scope": "lua",
		"body": "r.CSurf_OnTrackSelection({1:trackid})$0"
		"description": ""
	},
	"CSurf_OnVolumeChange lua": {
		"prefix": "r.CSurf_OnVolumeChange",
		"scope": "lua",
		"body": "r.CSurf_OnVolumeChange({1:trackid}, {2:volume}, {3:relative})$0"
		"description": ""
	},
	"CSurf_OnVolumeChangeEx lua": {
		"prefix": "r.CSurf_OnVolumeChangeEx",
		"scope": "lua",
		"body": "r.CSurf_OnVolumeChangeEx({1:trackid}, {2:volume}, {3:relative}, {4:allowGang})$0"
		"description": ""
	},
	"CSurf_OnWidthChange lua": {
		"prefix": "r.CSurf_OnWidthChange",
		"scope": "lua",
		"body": "r.CSurf_OnWidthChange({1:trackid}, {2:width}, {3:relative})$0"
		"description": ""
	},
	"CSurf_OnWidthChangeEx lua": {
		"prefix": "r.CSurf_OnWidthChangeEx",
		"scope": "lua",
		"body": "r.CSurf_OnWidthChangeEx({1:trackid}, {2:width}, {3:relative}, {4:allowGang})$0"
		"description": ""
	},
	"CSurf_OnZoom lua": {
		"prefix": "r.CSurf_OnZoom",
		"scope": "lua",
		"body": "r.CSurf_OnZoom({1:xdir}, {2:ydir})$0"
		"description": ""
	},
	"CSurf_ResetAllCachedVolPanStates lua": {
		"prefix": "r.CSurf_ResetAllCachedVolPanStates",
		"scope": "lua",
		"body": "r.CSurf_ResetAllCachedVolPanStates()$0"
		"description": ""
	},
	"CSurf_ScrubAmt lua": {
		"prefix": "r.CSurf_ScrubAmt",
		"scope": "lua",
		"body": "r.CSurf_ScrubAmt({1:amt})$0"
		"description": ""
	},
	"CSurf_SetAutoMode lua": {
		"prefix": "r.CSurf_SetAutoMode",
		"scope": "lua",
		"body": "r.CSurf_SetAutoMode({1:mode}, {2:ignoresurf})$0"
		"description": ""
	},
	"CSurf_SetPlayState lua": {
		"prefix": "r.CSurf_SetPlayState",
		"scope": "lua",
		"body": "r.CSurf_SetPlayState({1:play}, {2:pause}, {3:rec}, {4:ignoresurf})$0"
		"description": ""
	},
	"CSurf_SetRepeatState lua": {
		"prefix": "r.CSurf_SetRepeatState",
		"scope": "lua",
		"body": "r.CSurf_SetRepeatState({1:rep}, {2:ignoresurf})$0"
		"description": ""
	},
	"CSurf_SetSurfaceMute lua": {
		"prefix": "r.CSurf_SetSurfaceMute",
		"scope": "lua",
		"body": "r.CSurf_SetSurfaceMute({1:trackid}, {2:mute}, {3:ignoresurf})$0"
		"description": ""
	},
	"CSurf_SetSurfacePan lua": {
		"prefix": "r.CSurf_SetSurfacePan",
		"scope": "lua",
		"body": "r.CSurf_SetSurfacePan({1:trackid}, {2:pan}, {3:ignoresurf})$0"
		"description": ""
	},
	"CSurf_SetSurfaceRecArm lua": {
		"prefix": "r.CSurf_SetSurfaceRecArm",
		"scope": "lua",
		"body": "r.CSurf_SetSurfaceRecArm({1:trackid}, {2:recarm}, {3:ignoresurf})$0"
		"description": ""
	},
	"CSurf_SetSurfaceSelected lua": {
		"prefix": "r.CSurf_SetSurfaceSelected",
		"scope": "lua",
		"body": "r.CSurf_SetSurfaceSelected({1:trackid}, {2:selected}, {3:ignoresurf})$0"
		"description": ""
	},
	"CSurf_SetSurfaceSolo lua": {
		"prefix": "r.CSurf_SetSurfaceSolo",
		"scope": "lua",
		"body": "r.CSurf_SetSurfaceSolo({1:trackid}, {2:solo}, {3:ignoresurf})$0"
		"description": ""
	},
	"CSurf_SetSurfaceVolume lua": {
		"prefix": "r.CSurf_SetSurfaceVolume",
		"scope": "lua",
		"body": "r.CSurf_SetSurfaceVolume({1:trackid}, {2:volume}, {3:ignoresurf})$0"
		"description": ""
	},
	"CSurf_SetTrackListChange lua": {
		"prefix": "r.CSurf_SetTrackListChange",
		"scope": "lua",
		"body": "r.CSurf_SetTrackListChange()$0"
		"description": ""
	},
	"CSurf_TrackFromID lua": {
		"prefix": "r.CSurf_TrackFromID",
		"scope": "lua",
		"body": "r.CSurf_TrackFromID({1:idx}, {2:mcpView})$0"
		"description": ""
	},
	"CSurf_TrackToID lua": {
		"prefix": "r.CSurf_TrackToID",
		"scope": "lua",
		"body": "r.CSurf_TrackToID({1:track}, {2:mcpView})$0"
		"description": ""
	},
	"CalcMediaSrcLoudness lua": {
		"prefix": "r.CalcMediaSrcLoudness",
		"scope": "lua",
		"body": "r.CalcMediaSrcLoudness({1:mediasource})$0"
		"description": "Calculates loudness statistics of media via dry run render. Statistics will be displayed to the user; call GetSetProjectInfo_String('RENDER_STATS') to retrieve via API. Returns 1 if loudness was calculated successfully, -1 if user canceled the dry run render."
	},
	"CalculateNormalization lua": {
		"prefix": "r.CalculateNormalization",
		"scope": "lua",
		"body": "r.CalculateNormalization({1:source}, {2:normalizeTo}, {3:normalizeTarget}, {4:normalizeStart}, {5:normalizeEnd})$0"
		"description": "Calculate normalize adjustment for source media. normalizeTo: 0=LUFS-I, 1=RMS-I, 2=peak, 3=true peak, 4=LUFS-M max, 5=LUFS-S max. normalizeTarget: dBFS or LUFS value. normalizeStart, normalizeEnd: time bounds within source media for normalization calculation. If normalizationStart=0 and normalizationEnd=0, the full duration of the media will be used for the calculation."
	},
	"ClearAllRecArmed lua": {
		"prefix": "r.ClearAllRecArmed",
		"scope": "lua",
		"body": "r.ClearAllRecArmed()$0"
		"description": ""
	},
	"ClearConsole lua": {
		"prefix": "r.ClearConsole",
		"scope": "lua",
		"body": "r.ClearConsole()$0"
		"description": "Clear the ReaScript console. See ShowConsoleMsg"
	},
	"ClearPeakCache lua": {
		"prefix": "r.ClearPeakCache",
		"scope": "lua",
		"body": "r.ClearPeakCache()$0"
		"description": "resets the global peak caches"
	},
	"ColorFromNative lua": {
		"prefix": "r.ColorFromNative",
		"scope": "lua",
		"body": "r.ColorFromNative({1:col})$0"
		"description": "Extract RGB values from an OS dependent color. See ColorToNative."
	},
	"ColorToNative lua": {
		"prefix": "r.ColorToNative",
		"scope": "lua",
		"body": "r.ColorToNative({1:r}, {2:g}, {3:b})$0"
		"description": "Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative."
	},
	"CountActionShortcuts lua": {
		"prefix": "r.CountActionShortcuts",
		"scope": "lua",
		"body": "r.CountActionShortcuts({1:section}, {2:cmdID})$0"
		"description": "Returns the number of shortcuts that exist for the given command ID.\nsee GetActionShortcutDesc, DeleteActionShortcut, DoActionShortcutDialog."
	},
	"CountAutomationItems lua": {
		"prefix": "r.CountAutomationItems",
		"scope": "lua",
		"body": "r.CountAutomationItems({1:env})$0"
		"description": "Returns the number of automation items on this envelope. See GetSetAutomationItemInfo"
	},
	"CountEnvelopePoints lua": {
		"prefix": "r.CountEnvelopePoints",
		"scope": "lua",
		"body": "r.CountEnvelopePoints({1:envelope})$0"
		"description": "Returns the number of points in the envelope. See CountEnvelopePointsEx."
	},
	"CountEnvelopePointsEx lua": {
		"prefix": "r.CountEnvelopePointsEx",
		"scope": "lua",
		"body": "r.CountEnvelopePointsEx({1:envelope}, {2:autoitem_idx})$0"
		"description": "Returns the number of points in the envelope.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx."
	},
	"CountMediaItems lua": {
		"prefix": "r.CountMediaItems",
		"scope": "lua",
		"body": "r.CountMediaItems({1:proj})$0"
		"description": "count the number of items in the project (proj=0 for active project)"
	},
	"CountProjectMarkers lua": {
		"prefix": "r.CountProjectMarkers",
		"scope": "lua",
		"body": "r.CountProjectMarkers({1:proj})$0"
		"description": "num_markersOut and num_regionsOut may be NULL."
	},
	"CountSelectedMediaItems lua": {
		"prefix": "r.CountSelectedMediaItems",
		"scope": "lua",
		"body": "r.CountSelectedMediaItems({1:proj})$0"
		"description": "Discouraged, because GetSelectedMediaItem can be inefficient if media items are added, rearranged, or deleted in between calls. Instead see CountMediaItems, GetMediaItem, IsMediaItemSelected."
	},
	"CountSelectedTracks lua": {
		"prefix": "r.CountSelectedTracks",
		"scope": "lua",
		"body": "r.CountSelectedTracks({1:proj})$0"
		"description": "Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2."
	},
	"CountSelectedTracks2 lua": {
		"prefix": "r.CountSelectedTracks2",
		"scope": "lua",
		"body": "r.CountSelectedTracks2({1:proj}, {2:wantmaster})$0"
		"description": "Count the number of selected tracks in the project (proj=0 for active project)."
	},
	"CountTCPFXParms lua": {
		"prefix": "r.CountTCPFXParms",
		"scope": "lua",
		"body": "r.CountTCPFXParms({1:project}, {2:track})$0"
		"description": "Count the number of FX parameter knobs displayed on the track control panel."
	},
	"CountTakeEnvelopes lua": {
		"prefix": "r.CountTakeEnvelopes",
		"scope": "lua",
		"body": "r.CountTakeEnvelopes({1:take})$0"
		"description": "See GetTakeEnvelope"
	},
	"CountTakes lua": {
		"prefix": "r.CountTakes",
		"scope": "lua",
		"body": "r.CountTakes({1:item})$0"
		"description": "count the number of takes in the item"
	},
	"CountTempoTimeSigMarkers lua": {
		"prefix": "r.CountTempoTimeSigMarkers",
		"scope": "lua",
		"body": "r.CountTempoTimeSigMarkers({1:proj})$0"
		"description": "Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker."
	},
	"CountTrackEnvelopes lua": {
		"prefix": "r.CountTrackEnvelopes",
		"scope": "lua",
		"body": "r.CountTrackEnvelopes({1:track})$0"
		"description": "see GetTrackEnvelope"
	},
	"CountTrackMediaItems lua": {
		"prefix": "r.CountTrackMediaItems",
		"scope": "lua",
		"body": "r.CountTrackMediaItems({1:track})$0"
		"description": "count the number of items in the track"
	},
	"CountTracks lua": {
		"prefix": "r.CountTracks",
		"scope": "lua",
		"body": "r.CountTracks({1:proj})$0"
		"description": "count the number of tracks in the project (proj=0 for active project)"
	},
	"CreateNewMIDIItemInProj lua": {
		"prefix": "r.CreateNewMIDIItemInProj",
		"scope": "lua",
		"body": "r.CreateNewMIDIItemInProj({1:track}, {2:starttime}, {3:endtime}, {4:qnIn})$0"
		"description": "Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set."
	},
	"CreateTakeAudioAccessor lua": {
		"prefix": "r.CreateTakeAudioAccessor",
		"scope": "lua",
		"body": "r.CreateTakeAudioAccessor({1:take})$0"
		"description": "Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"CreateTrackAudioAccessor lua": {
		"prefix": "r.CreateTrackAudioAccessor",
		"scope": "lua",
		"body": "r.CreateTrackAudioAccessor({1:track})$0"
		"description": "Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"CreateTrackSend lua": {
		"prefix": "r.CreateTrackSend",
		"scope": "lua",
		"body": "r.CreateTrackSend({1:tr}, {2:desttrIn})$0"
		"description": "Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value."
	},
	"DB2SLIDER lua": {
		"prefix": "r.DB2SLIDER",
		"scope": "lua",
		"body": "r.DB2SLIDER({1:x})$0"
		"description": ""
	},
	"DeleteActionShortcut lua": {
		"prefix": "r.DeleteActionShortcut",
		"scope": "lua",
		"body": "r.DeleteActionShortcut({1:section}, {2:cmdID}, {3:shortcutidx})$0"
		"description": "Delete the specific shortcut for the given command ID.\nSee CountActionShortcuts, GetActionShortcutDesc, DoActionShortcutDialog."
	},
	"DeleteEnvelopePointEx lua": {
		"prefix": "r.DeleteEnvelopePointEx",
		"scope": "lua",
		"body": "r.DeleteEnvelopePointEx({1:envelope}, {2:autoitem_idx}, {3:ptidx})$0"
		"description": "Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx."
	},
	"DeleteEnvelopePointRange lua": {
		"prefix": "r.DeleteEnvelopePointRange",
		"scope": "lua",
		"body": "r.DeleteEnvelopePointRange({1:envelope}, {2:time_start}, {3:time_end})$0"
		"description": "Delete a range of envelope points. See DeleteEnvelopePointRangeEx, DeleteEnvelopePointEx."
	},
	"DeleteEnvelopePointRangeEx lua": {
		"prefix": "r.DeleteEnvelopePointRangeEx",
		"scope": "lua",
		"body": "r.DeleteEnvelopePointRangeEx({1:envelope}, {2:autoitem_idx}, {3:time_start}, {4:time_end})$0"
		"description": "Delete a range of envelope points. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc."
	},
	"DeleteExtState lua": {
		"prefix": "r.DeleteExtState",
		"scope": "lua",
		"body": "r.DeleteExtState({1:section}, {2:key}, {3:persist})$0"
		"description": "Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See SetExtState, GetExtState, HasExtState."
	},
	"DeleteProjectMarker lua": {
		"prefix": "r.DeleteProjectMarker",
		"scope": "lua",
		"body": "r.DeleteProjectMarker({1:proj}, {2:markrgnindexnumber}, {3:isrgn})$0"
		"description": "Delete a marker.  proj==NULL for the active project."
	},
	"DeleteProjectMarkerByIndex lua": {
		"prefix": "r.DeleteProjectMarkerByIndex",
		"scope": "lua",
		"body": "r.DeleteProjectMarkerByIndex({1:proj}, {2:markrgnidx})$0"
		"description": "Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4)."
	},
	"DeleteTakeMarker lua": {
		"prefix": "r.DeleteTakeMarker",
		"scope": "lua",
		"body": "r.DeleteTakeMarker({1:take}, {2:idx})$0"
		"description": "Delete a take marker. Note that idx will change for all following take markers. See GetNumTakeMarkers, GetTakeMarker, SetTakeMarker"
	},
	"DeleteTakeStretchMarkers lua": {
		"prefix": "r.DeleteTakeStretchMarkers",
		"scope": "lua",
		"body": "r.DeleteTakeStretchMarkers({1:take}, {2:idx}, {3:countIn})$0"
		"description": "Deletes one or more stretch markers. Returns number of stretch markers deleted."
	},
	"DeleteTempoTimeSigMarker lua": {
		"prefix": "r.DeleteTempoTimeSigMarker",
		"scope": "lua",
		"body": "r.DeleteTempoTimeSigMarker({1:project}, {2:markerindex})$0"
		"description": "Delete a tempo/time signature marker."
	},
	"DeleteTrack lua": {
		"prefix": "r.DeleteTrack",
		"scope": "lua",
		"body": "r.DeleteTrack({1:tr})$0"
		"description": "deletes a track"
	},
	"DeleteTrackMediaItem lua": {
		"prefix": "r.DeleteTrackMediaItem",
		"scope": "lua",
		"body": "r.DeleteTrackMediaItem({1:tr}, {2:it})$0"
		"description": ""
	},
	"DestroyAudioAccessor lua": {
		"prefix": "r.DestroyAudioAccessor",
		"scope": "lua",
		"body": "r.DestroyAudioAccessor({1:accessor})$0"
		"description": "Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"DoActionShortcutDialog lua": {
		"prefix": "r.DoActionShortcutDialog",
		"scope": "lua",
		"body": "r.DoActionShortcutDialog({1:hwnd}, {2:section}, {3:cmdID}, {4:shortcutidx})$0"
		"description": "Open the action shortcut dialog to edit or add a shortcut for the given command ID. If (shortcutidx >= 0 && shortcutidx < CountActionShortcuts()), that specific shortcut will be replaced, otherwise a new shortcut will be added.\nSee CountActionShortcuts, GetActionShortcutDesc, DeleteActionShortcut."
	},
	"DockGetPosition lua": {
		"prefix": "r.DockGetPosition",
		"scope": "lua",
		"body": "r.DockGetPosition({1:whichDock})$0"
		"description": "-1=not found, 0=bottom, 1=left, 2=top, 3=right, 4=floating"
	},
	"DockIsChildOfDock lua": {
		"prefix": "r.DockIsChildOfDock",
		"scope": "lua",
		"body": "r.DockIsChildOfDock({1:hwnd})$0"
		"description": "returns dock index that contains hwnd, or -1"
	},
	"DockWindowActivate lua": {
		"prefix": "r.DockWindowActivate",
		"scope": "lua",
		"body": "r.DockWindowActivate({1:hwnd})$0"
		"description": ""
	},
	"DockWindowAdd lua": {
		"prefix": "r.DockWindowAdd",
		"scope": "lua",
		"body": "r.DockWindowAdd({1:hwnd}, {2:name}, {3:pos}, {4:allowShow})$0"
		"description": ""
	},
	"DockWindowAddEx lua": {
		"prefix": "r.DockWindowAddEx",
		"scope": "lua",
		"body": "r.DockWindowAddEx({1:hwnd}, {2:name}, {3:identstr}, {4:allowShow})$0"
		"description": ""
	},
	"DockWindowRefresh lua": {
		"prefix": "r.DockWindowRefresh",
		"scope": "lua",
		"body": "r.DockWindowRefresh()$0"
		"description": ""
	},
	"DockWindowRefreshForHWND lua": {
		"prefix": "r.DockWindowRefreshForHWND",
		"scope": "lua",
		"body": "r.DockWindowRefreshForHWND({1:hwnd})$0"
		"description": ""
	},
	"DockWindowRemove lua": {
		"prefix": "r.DockWindowRemove",
		"scope": "lua",
		"body": "r.DockWindowRemove({1:hwnd})$0"
		"description": ""
	},
	"Dock_UpdateDockID lua": {
		"prefix": "r.Dock_UpdateDockID",
		"scope": "lua",
		"body": "r.Dock_UpdateDockID({1:ident_str}, {2:whichDock})$0"
		"description": "updates preference for docker window ident_str to be in dock whichDock on next open"
	},
	"EditTempoTimeSigMarker lua": {
		"prefix": "r.EditTempoTimeSigMarker",
		"scope": "lua",
		"body": "r.EditTempoTimeSigMarker({1:project}, {2:markerindex})$0"
		"description": "Open the tempo/time signature marker editor dialog."
	},
	"EnsureNotCompletelyOffscreen lua": {
		"prefix": "r.EnsureNotCompletelyOffscreen",
		"scope": "lua",
		"body": "r.EnsureNotCompletelyOffscreen({1:r_left}, {2:r_top}, {3:r_right}, {4:r_bot})$0"
		"description": "call with a saved window rect for your window and it'll correct any positioning info."
	},
	"EnumInstalledFX lua": {
		"prefix": "r.EnumInstalledFX",
		"scope": "lua",
		"body": "r.EnumInstalledFX({1:index})$0"
		"description": "Enumerates installed FX. Returns true if successful, sets nameOut and identOut to name and ident of FX at index."
	},
	"EnumPitchShiftModes lua": {
		"prefix": "r.EnumPitchShiftModes",
		"scope": "lua",
		"body": "r.EnumPitchShiftModes({1:mode})$0"
		"description": "Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported"
	},
	"EnumPitchShiftSubModes lua": {
		"prefix": "r.EnumPitchShiftSubModes",
		"scope": "lua",
		"body": "r.EnumPitchShiftSubModes({1:mode}, {2:submode})$0"
		"description": "Returns submode name, or NULL"
	},
	"EnumProjExtState lua": {
		"prefix": "r.EnumProjExtState",
		"scope": "lua",
		"body": "r.EnumProjExtState({1:proj}, {2:extname}, {3:idx})$0"
		"description": "Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState."
	},
	"EnumProjectMarkers lua": {
		"prefix": "r.EnumProjectMarkers",
		"scope": "lua",
		"body": "r.EnumProjectMarkers({1:idx})$0"
		"description": ""
	},
	"EnumProjectMarkers2 lua": {
		"prefix": "r.EnumProjectMarkers2",
		"scope": "lua",
		"body": "r.EnumProjectMarkers2({1:proj}, {2:idx})$0"
		"description": ""
	},
	"EnumProjectMarkers3 lua": {
		"prefix": "r.EnumProjectMarkers3",
		"scope": "lua",
		"body": "r.EnumProjectMarkers3({1:proj}, {2:idx})$0"
		"description": ""
	},
	"EnumProjects lua": {
		"prefix": "r.EnumProjects",
		"scope": "lua",
		"body": "r.EnumProjects({1:idx})$0"
		"description": "idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any."
	},
	"EnumRegionRenderMatrix lua": {
		"prefix": "r.EnumRegionRenderMatrix",
		"scope": "lua",
		"body": "r.EnumRegionRenderMatrix({1:proj}, {2:regionindex}, {3:rendertrack})$0"
		"description": "Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region."
	},
	"EnumTrackMIDIProgramNames lua": {
		"prefix": "r.EnumTrackMIDIProgramNames",
		"scope": "lua",
		"body": "r.EnumTrackMIDIProgramNames({1:track}, {2:programNumber}, {3:programName})$0"
		"description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated"
	},
	"EnumTrackMIDIProgramNamesEx lua": {
		"prefix": "r.EnumTrackMIDIProgramNamesEx",
		"scope": "lua",
		"body": "r.EnumTrackMIDIProgramNamesEx({1:proj}, {2:track}, {3:programNumber}, {4:programName})$0"
		"description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated"
	},
	"EnumerateFiles lua": {
		"prefix": "r.EnumerateFiles",
		"scope": "lua",
		"body": "r.EnumerateFiles({1:path}, {2:fileindex})$0"
		"description": "List the files in the 'path' directory. Returns NULL/nil when all files have been listed. Use fileindex = -1 to force re-read of directory (invalidate cache). See EnumerateSubdirectories"
	},
	"EnumerateSubdirectories lua": {
		"prefix": "r.EnumerateSubdirectories",
		"scope": "lua",
		"body": "r.EnumerateSubdirectories({1:path}, {2:subdirindex})$0"
		"description": "List the subdirectories in the 'path' directory. Use subdirindex = -1 to force re-read of directory (invalidate cache). Returns NULL/nil when all subdirectories have been listed. See EnumerateFiles"
	},
	"Envelope_Evaluate lua": {
		"prefix": "r.Envelope_Evaluate",
		"scope": "lua",
		"body": "r.Envelope_Evaluate({1:envelope}, {2:time}, {3:samplerate}, {4:samplesRequested})$0"
		"description": "Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the second derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode."
	},
	"Envelope_FormatValue lua": {
		"prefix": "r.Envelope_FormatValue",
		"scope": "lua",
		"body": "r.Envelope_FormatValue({1:env}, {2:value})$0"
		"description": "Formats the value of an envelope to a user-readable form"
	},
	"Envelope_GetParentTake lua": {
		"prefix": "r.Envelope_GetParentTake",
		"scope": "lua",
		"body": "r.Envelope_GetParentTake({1:env})$0"
		"description": "If take envelope, gets the take from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1."
	},
	"Envelope_GetParentTrack lua": {
		"prefix": "r.Envelope_GetParentTrack",
		"scope": "lua",
		"body": "r.Envelope_GetParentTrack({1:env})$0"
		"description": "If track envelope, gets the track from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1."
	},
	"Envelope_SortPoints lua": {
		"prefix": "r.Envelope_SortPoints",
		"scope": "lua",
		"body": "r.Envelope_SortPoints({1:envelope})$0"
		"description": "Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint."
	},
	"Envelope_SortPointsEx lua": {
		"prefix": "r.Envelope_SortPointsEx",
		"scope": "lua",
		"body": "r.Envelope_SortPointsEx({1:envelope}, {2:autoitem_idx})$0"
		"description": "Sort envelope points by time. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint."
	},
	"ExecProcess lua": {
		"prefix": "r.ExecProcess",
		"scope": "lua",
		"body": "r.ExecProcess({1:cmdline}, {2:timeoutmsec})$0"
		"description": "Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize"
	},
	"FNG_AddMidiNote lua": {
		"prefix": "r.FNG_AddMidiNote",
		"scope": "lua",
		"body": "r.FNG_AddMidiNote({1:midiTake})$0"
		"description": "[FNG] Add MIDI note to MIDI take"
	},
	"FNG_AllocMidiTake lua": {
		"prefix": "r.FNG_AllocMidiTake",
		"scope": "lua",
		"body": "r.FNG_AllocMidiTake({1:take})$0"
		"description": "[FNG] Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take"
	},
	"FNG_CountMidiNotes lua": {
		"prefix": "r.FNG_CountMidiNotes",
		"scope": "lua",
		"body": "r.FNG_CountMidiNotes({1:midiTake})$0"
		"description": "[FNG] Count of how many MIDI notes are in the MIDI take"
	},
	"FNG_FreeMidiTake lua": {
		"prefix": "r.FNG_FreeMidiTake",
		"scope": "lua",
		"body": "r.FNG_FreeMidiTake({1:midiTake})$0"
		"description": "[FNG] Commit changes to MIDI take and free allocated memory"
	},
	"FNG_GetMidiNote lua": {
		"prefix": "r.FNG_GetMidiNote",
		"scope": "lua",
		"body": "r.FNG_GetMidiNote({1:midiTake}, {2:index})$0"
		"description": "[FNG] Get a MIDI note from a MIDI take at specified index"
	},
	"FNG_GetMidiNoteIntProperty lua": {
		"prefix": "r.FNG_GetMidiNoteIntProperty",
		"scope": "lua",
		"body": "r.FNG_GetMidiNoteIntProperty({1:midiNote}, {2:property})$0"
		"description": "[FNG] Get MIDI note property"
	},
	"FNG_SetMidiNoteIntProperty lua": {
		"prefix": "r.FNG_SetMidiNoteIntProperty",
		"scope": "lua",
		"body": "r.FNG_SetMidiNoteIntProperty({1:midiNote}, {2:property}, {3:value})$0"
		"description": "[FNG] Set MIDI note property"
	},
	"Fab_Clear lua": {
		"prefix": "r.Fab_Clear",
		"scope": "lua",
		"body": "r.Fab_Clear({1:idStringIn})$0"
		"description": "Clears ReaFab control map, optionally based on matching idString. Returns true on success."
	},
	"Fab_Do lua": {
		"prefix": "r.Fab_Do",
		"scope": "lua",
		"body": "r.Fab_Do({1:command}, {2:val})$0"
		"description": "Runs ReaFab actions/commands. First parameter (command) is ReaFab command number, e.g. 3 for 3rd encoder rotation. Second parameter (val) is MIDI CC Relative value. Value 1 is increment of 1, 127 is decrement of 1. 2 is inc 2, 126 is dec 2 and so on. For button press (commands 9-32) a value of 127 is recommended."
	},
	"Fab_Dump lua": {
		"prefix": "r.Fab_Dump",
		"scope": "lua",
		"body": "r.Fab_Dump()$0"
		"description": "Dumps current control mapping into .lua file under ResourcePath/Scripts/reafab_dump-timestamp.lua"
	},
	"Fab_Get lua": {
		"prefix": "r.Fab_Get",
		"scope": "lua",
		"body": "r.Fab_Get({1:command})$0"
		"description": "Returns target FX and parameter index for given ReaFab command in context of selected track and ReaFab FX index. Valid command range 1 ... 24. Returns false if no such command mapping is found. Returns param index -1 for ReaFab internal band change command."
	},
	"Fab_Map lua": {
		"prefix": "r.Fab_Map",
		"scope": "lua",
		"body": "r.Fab_Map({1:fxId}, {2:command}, {3:paramId}, {4:control}, {5:bandsIn}, {6:stepIn}, {7:accelIn}, {8:minvalIn}, {9:maxvalIn})$0"
		"description": "Creates control mapping for ReaFab command.\nfxId e.g. 'ReaComp'.\ncommand 1-8 for encoders, 9-24 for buttons.\nparamId e.g. 'Ratio'.\ncontrol 1 = direct, 2 = band selector, 3 = cycle, 4 = invert, 5 = force toggle, 6 = force range, 7 = 5 and 6, 8 = force continuous.\nbands define, if target fx has multiple identical target bands. In this case, paramId must include 00 placeholder, e.g. 'Band 00 Gain'.\nstep overrides built-in default step of ~0.001 for continuous parameters.\naccel overrides built-in default control acceleration step of 1.0.\nminval & maxval override default detected target param value range.\nPrefixing paramId with '-' reverses direction; useful for creating separate next/previous mappings for bands or list type value navigation."
	},
	"FindTempoTimeSigMarker lua": {
		"prefix": "r.FindTempoTimeSigMarker",
		"scope": "lua",
		"body": "r.FindTempoTimeSigMarker({1:project}, {2:time})$0"
		"description": "Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position)."
	},
	"GR_SelectColor lua": {
		"prefix": "r.GR_SelectColor",
		"scope": "lua",
		"body": "r.GR_SelectColor({1:hwnd})$0"
		"description": "Runs the system color chooser dialog.  Returns 0 if the user cancels the dialog."
	},
	"GSC_mainwnd lua": {
		"prefix": "r.GSC_mainwnd",
		"scope": "lua",
		"body": "r.GSC_mainwnd({1:t})$0"
		"description": "this is just like win32 GetSysColor() but can have overrides."
	},
	"GU_Config_Read lua": {
		"prefix": "r.GU_Config_Read",
		"scope": "lua",
		"body": "r.GU_Config_Read({1:fileName}, {2:category}, {3:key})$0"
		"description": "Reads from a config file in the GUtilities folder in Reaper's resource folder"
	},
	"GU_Config_Write lua": {
		"prefix": "r.GU_Config_Write",
		"scope": "lua",
		"body": "r.GU_Config_Write({1:fileName}, {2:category}, {3:key}, {4:value})$0"
		"description": "Writes a config file to the GUtilities folder in Reaper's resource folder"
	},
	"GU_Filesystem_CountMediaFiles lua": {
		"prefix": "r.GU_Filesystem_CountMediaFiles",
		"scope": "lua",
		"body": "r.GU_Filesystem_CountMediaFiles({1:path}, {2:flags})$0"
		"description": "Returns count and filesize in megabytes for all valid media files within the path. Returns -1 if path is invalid. Flags can be passed as an argument to determine which media files are valid. A flag with a value of -1 will reset the cache, otherwise, the following flags can be used: ALL = 0, WAV = 1, AIFF = 2, FLAC = 4, MP3 = 8, OGG = 16, BWF = 32, W64 = 64, WAVPACK = 128, GIF = 256, MP4 = 512"
	},
	"GU_Filesystem_EnumerateMediaFiles lua": {
		"prefix": "r.GU_Filesystem_EnumerateMediaFiles",
		"scope": "lua",
		"body": "r.GU_Filesystem_EnumerateMediaFiles({1:path}, {2:flags})$0"
		"description": "Returns the next valid file in a directory each time this function is called with the same path. Returns an empty string if path does not contain any more valid files. Flags can be passed as an argument to determine which media files are valid. A flag with a value of -1 will reset the cache, otherwise, the following flags can be used: ALL = 0, WAV = 1, AIFF = 2, FLAC = 4, MP3 = 8, OGG = 16, BWF = 32, W64 = 64, WAVPACK = 128, GIF = 256, MP4 = 512"
	},
	"GU_Filesystem_FindFileInPath lua": {
		"prefix": "r.GU_Filesystem_FindFileInPath",
		"scope": "lua",
		"body": "r.GU_Filesystem_FindFileInPath({1:path}, {2:fileName})$0"
		"description": "Returns the first found file's path from within a given path. Returns an empty string if not found"
	},
	"GU_Filesystem_PathExists lua": {
		"prefix": "r.GU_Filesystem_PathExists",
		"scope": "lua",
		"body": "r.GU_Filesystem_PathExists({1:path})$0"
		"description": "Checks if file or directory exists"
	},
	"GU_GUtilitiesAPI_GetVersion lua": {
		"prefix": "r.GU_GUtilitiesAPI_GetVersion",
		"scope": "lua",
		"body": "r.GU_GUtilitiesAPI_GetVersion()$0"
		"description": "Gets the current GUtilitiesAPI version"
	},
	"GU_PCM_Source_GetSampleValue lua": {
		"prefix": "r.GU_PCM_Source_GetSampleValue",
		"scope": "lua",
		"body": "r.GU_PCM_Source_GetSampleValue({1:source}, {2:time})$0"
		"description": "Gets a PCM_source's sample value at a point in time (seconds)"
	},
	"GU_PCM_Source_HasRegion lua": {
		"prefix": "r.GU_PCM_Source_HasRegion",
		"scope": "lua",
		"body": "r.GU_PCM_Source_HasRegion({1:source})$0"
		"description": "Checks if PCM_source has embedded Media Cue Markers"
	},
	"GU_PCM_Source_IsMono lua": {
		"prefix": "r.GU_PCM_Source_IsMono",
		"scope": "lua",
		"body": "r.GU_PCM_Source_IsMono({1:source})$0"
		"description": "Checks if PCM_source is mono by comparing all channels"
	},
	"GU_PCM_Source_TimeToPeak lua": {
		"prefix": "r.GU_PCM_Source_TimeToPeak",
		"scope": "lua",
		"body": "r.GU_PCM_Source_TimeToPeak({1:source}, {2:bufferSize}, {3:threshold})$0"
		"description": "Returns duration in seconds for PCM_source from start til peak threshold is breached. Returns -1 if invalid"
	},
	"GU_PCM_Source_TimeToPeakR lua": {
		"prefix": "r.GU_PCM_Source_TimeToPeakR",
		"scope": "lua",
		"body": "r.GU_PCM_Source_TimeToPeakR({1:source}, {2:bufferSize}, {3:threshold})$0"
		"description": "Returns duration in seconds for PCM_source from end til peak threshold is breached in reverse. Returns -1 if invalid"
	},
	"GU_PCM_Source_TimeToRMS lua": {
		"prefix": "r.GU_PCM_Source_TimeToRMS",
		"scope": "lua",
		"body": "r.GU_PCM_Source_TimeToRMS({1:source}, {2:bufferSize}, {3:threshold})$0"
		"description": "Returns duration in seconds for PCM_source from start til RMS threshold is breached. Returns -1 if invalid"
	},
	"GU_PCM_Source_TimeToRMSR lua": {
		"prefix": "r.GU_PCM_Source_TimeToRMSR",
		"scope": "lua",
		"body": "r.GU_PCM_Source_TimeToRMSR({1:source}, {2:bufferSize}, {3:threshold})$0"
		"description": "Returns duration in seconds for PCM_source from end til RMS threshold is breached in reverse. Returns -1 if invalid"
	},
	"GU_WildcardParseTake lua": {
		"prefix": "r.GU_WildcardParseTake",
		"scope": "lua",
		"body": "r.GU_WildcardParseTake({1:take}, {2:input})$0"
		"description": "Returns a string by parsing wildcards relative to the supplied MediaItem_Take"
	},
	"GetActionShortcutDesc lua": {
		"prefix": "r.GetActionShortcutDesc",
		"scope": "lua",
		"body": "r.GetActionShortcutDesc({1:section}, {2:cmdID}, {3:shortcutidx})$0"
		"description": "Get the text description of a specific shortcut for the given command ID.\nSee CountActionShortcuts,DeleteActionShortcut,DoActionShortcutDialog."
	},
	"GetActiveTake lua": {
		"prefix": "r.GetActiveTake",
		"scope": "lua",
		"body": "r.GetActiveTake({1:item})$0"
		"description": "get the active take in this item"
	},
	"GetAllProjectPlayStates lua": {
		"prefix": "r.GetAllProjectPlayStates",
		"scope": "lua",
		"body": "r.GetAllProjectPlayStates({1:ignoreProject})$0"
		"description": "returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)"
	},
	"GetAppVersion lua": {
		"prefix": "r.GetAppVersion",
		"scope": "lua",
		"body": "r.GetAppVersion()$0"
		"description": "Returns app version which may include an OS/arch signifier, such as: '6.17' (windows 32-bit), '6.17/x64' (windows 64-bit), '6.17/OSX64' (macOS 64-bit Intel), '6.17/OSX' (macOS 32-bit), '6.17/macOS-arm64', '6.17/linux-x86_64', '6.17/linux-i686', '6.17/linux-aarch64', '6.17/linux-armv7l', etc"
	},
	"GetArmedCommand lua": {
		"prefix": "r.GetArmedCommand",
		"scope": "lua",
		"body": "r.GetArmedCommand()$0"
		"description": "gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section."
	},
	"GetAudioAccessorEndTime lua": {
		"prefix": "r.GetAudioAccessorEndTime",
		"scope": "lua",
		"body": "r.GetAudioAccessorEndTime({1:accessor})$0"
		"description": "Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples."
	},
	"GetAudioAccessorHash lua": {
		"prefix": "r.GetAudioAccessorHash",
		"scope": "lua",
		"body": "r.GetAudioAccessorHash({1:accessor}, {2:hashNeed128})$0"
		"description": "Deprecated. See AudioAccessorStateChanged instead."
	},
	"GetAudioAccessorSamples lua": {
		"prefix": "r.GetAudioAccessorSamples",
		"scope": "lua",
		"body": "r.GetAudioAccessorSamples({1:accessor}, {2:samplerate}, {3:numchannels}, {4:starttime_sec}, {5:numsamplesperchannel}, {6:samplebuffer})$0"
		"description": "Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.\n\nThis function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:\n\ntr = RPR_GetTrack(0, 0)\naa = RPR_CreateTrackAudioAccessor(tr)\nbuf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero\npos = 0.0\n(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)\n# buf now holds the first 2*1024 audio samples from the track.\n# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time."
	},
	"GetAudioAccessorStartTime lua": {
		"prefix": "r.GetAudioAccessorStartTime",
		"scope": "lua",
		"body": "r.GetAudioAccessorStartTime({1:accessor})$0"
		"description": "Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"GetAudioDeviceInfo lua": {
		"prefix": "r.GetAudioDeviceInfo",
		"scope": "lua",
		"body": "r.GetAudioDeviceInfo({1:attribute})$0"
		"description": "get information about the currently open audio device. attribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown attribute or device not open."
	},
	"GetConfigWantsDock lua": {
		"prefix": "r.GetConfigWantsDock",
		"scope": "lua",
		"body": "r.GetConfigWantsDock({1:ident_str})$0"
		"description": "gets the dock ID desired by ident_str, if any"
	},
	"GetCurrentProjectInLoadSave lua": {
		"prefix": "r.GetCurrentProjectInLoadSave",
		"scope": "lua",
		"body": "r.GetCurrentProjectInLoadSave()$0"
		"description": "returns current project if in load/save (usually only used from project_config_extension_t)"
	},
	"GetCursorContext lua": {
		"prefix": "r.GetCursorContext",
		"scope": "lua",
		"body": "r.GetCursorContext()$0"
		"description": "return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown"
	},
	"GetCursorContext2 lua": {
		"prefix": "r.GetCursorContext2",
		"scope": "lua",
		"body": "r.GetCursorContext2({1:want_last_valid})$0"
		"description": "0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)"
	},
	"GetCursorPosition lua": {
		"prefix": "r.GetCursorPosition",
		"scope": "lua",
		"body": "r.GetCursorPosition()$0"
		"description": "edit cursor position"
	},
	"GetCursorPositionEx lua": {
		"prefix": "r.GetCursorPositionEx",
		"scope": "lua",
		"body": "r.GetCursorPositionEx({1:proj})$0"
		"description": "edit cursor position"
	},
	"GetDisplayedMediaItemColor lua": {
		"prefix": "r.GetDisplayedMediaItemColor",
		"scope": "lua",
		"body": "r.GetDisplayedMediaItemColor({1:item})$0"
		"description": "see GetDisplayedMediaItemColor2."
	},
	"GetDisplayedMediaItemColor2 lua": {
		"prefix": "r.GetDisplayedMediaItemColor2",
		"scope": "lua",
		"body": "r.GetDisplayedMediaItemColor2({1:item}, {2:take})$0"
		"description": "Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means 'no color', not black."
	},
	"GetEnvelopeInfo_Value lua": {
		"prefix": "r.GetEnvelopeInfo_Value",
		"scope": "lua",
		"body": "r.GetEnvelopeInfo_Value({1:env}, {2:parmname})$0"
		"description": "Gets an envelope numerical-value attribute:\nI_TCPY : int : Y offset of envelope relative to parent track (may be separate lane or overlap with track contents)\nI_TCPH : int : visible height of envelope\nI_TCPY_USED : int : Y offset of envelope relative to parent track, exclusive of padding\nI_TCPH_USED : int : visible height of envelope, exclusive of padding\nP_TRACK : MediaTrack * : parent track pointer (if any)\nP_DESTTRACK : MediaTrack * : destination track pointer, if on a send\nP_ITEM : MediaItem * : parent item pointer (if any)\nP_TAKE : MediaItem_Take * : parent take pointer (if any)\nI_SEND_IDX : int : 1-based index of send in P_TRACK, or 0 if not a send\nI_HWOUT_IDX : int : 1-based index of hardware output in P_TRACK or 0 if not a hardware output\nI_RECV_IDX : int : 1-based index of receive in P_DESTTRACK or 0 if not a send/receive"
	},
	"GetEnvelopeName lua": {
		"prefix": "r.GetEnvelopeName",
		"scope": "lua",
		"body": "r.GetEnvelopeName({1:env})$0"
		"description": ""
	},
	"GetEnvelopePoint lua": {
		"prefix": "r.GetEnvelopePoint",
		"scope": "lua",
		"body": "r.GetEnvelopePoint({1:envelope}, {2:ptidx})$0"
		"description": "Get the attributes of an envelope point. See GetEnvelopePointEx."
	},
	"GetEnvelopePointByTime lua": {
		"prefix": "r.GetEnvelopePointByTime",
		"scope": "lua",
		"body": "r.GetEnvelopePointByTime({1:envelope}, {2:time})$0"
		"description": "Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePointByTimeEx."
	},
	"GetEnvelopePointByTimeEx lua": {
		"prefix": "r.GetEnvelopePointByTimeEx",
		"scope": "lua",
		"body": "r.GetEnvelopePointByTimeEx({1:envelope}, {2:autoitem_idx}, {3:time})$0"
		"description": "Returns the envelope point at or immediately prior to the given time position.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx."
	},
	"GetEnvelopePointEx lua": {
		"prefix": "r.GetEnvelopePointEx",
		"scope": "lua",
		"body": "r.GetEnvelopePointEx({1:envelope}, {2:autoitem_idx}, {3:ptidx})$0"
		"description": "Get the attributes of an envelope point.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx."
	},
	"GetEnvelopeScalingMode lua": {
		"prefix": "r.GetEnvelopeScalingMode",
		"scope": "lua",
		"body": "r.GetEnvelopeScalingMode({1:env})$0"
		"description": "Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode."
	},
	"GetEnvelopeStateChunk lua": {
		"prefix": "r.GetEnvelopeStateChunk",
		"scope": "lua",
		"body": "r.GetEnvelopeStateChunk({1:env}, {2:str}, {3:isundo})$0"
		"description": "Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint."
	},
	"GetEnvelopeUIState lua": {
		"prefix": "r.GetEnvelopeUIState",
		"scope": "lua",
		"body": "r.GetEnvelopeUIState({1:env})$0"
		"description": "gets information on the UI state of an envelope: returns &1 if automation/modulation is playing back, &2 if automation is being actively written, &4 if the envelope recently had an effective automation mode change"
	},
	"GetExePath lua": {
		"prefix": "r.GetExePath",
		"scope": "lua",
		"body": "r.GetExePath()$0"
		"description": "returns path of REAPER.exe (not including EXE), i.e. C:\Program Files\REAPER"
	},
	"GetExtState lua": {
		"prefix": "r.GetExtState",
		"scope": "lua",
		"body": "r.GetExtState({1:section}, {2:key})$0"
		"description": "Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState."
	},
	"GetFXEnvelope lua": {
		"prefix": "r.GetFXEnvelope",
		"scope": "lua",
		"body": "r.GetFXEnvelope({1:track}, {2:fxindex}, {3:parameterindex}, {4:create})$0"
		"description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created. If the envelope already exists and is bypassed and create=true, then the envelope will be unbypassed."
	},
	"GetFocusedFX lua": {
		"prefix": "r.GetFocusedFX",
		"scope": "lua",
		"body": "r.GetFocusedFX()$0"
		"description": "This function is deprecated (returns GetFocusedFX2()&3), see GetTouchedOrFocusedFX."
	},
	"GetFocusedFX2 lua": {
		"prefix": "r.GetFocusedFX2",
		"scope": "lua",
		"body": "r.GetFocusedFX2()$0"
		"description": "Return value has 1 set if track FX, 2 if take/item FX, 4 set if FX is no longer focused but still open. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber is zero-based (or -1 if not an item). For interpretation of fxnumber, see GetLastTouchedFX. Deprecated, see GetTouchedOrFocusedFX"
	},
	"GetFreeDiskSpaceForRecordPath lua": {
		"prefix": "r.GetFreeDiskSpaceForRecordPath",
		"scope": "lua",
		"body": "r.GetFreeDiskSpaceForRecordPath({1:proj}, {2:pathidx})$0"
		"description": "returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate."
	},
	"GetGlobalAutomationOverride lua": {
		"prefix": "r.GetGlobalAutomationOverride",
		"scope": "lua",
		"body": "r.GetGlobalAutomationOverride()$0"
		"description": "return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass"
	},
	"GetHZoomLevel lua": {
		"prefix": "r.GetHZoomLevel",
		"scope": "lua",
		"body": "r.GetHZoomLevel()$0"
		"description": "returns pixels/second"
	},
	"GetInputActivityLevel lua": {
		"prefix": "r.GetInputActivityLevel",
		"scope": "lua",
		"body": "r.GetInputActivityLevel({1:input_id})$0"
		"description": "returns approximate input level if available, 0-511 mono inputs, |1024 for stereo pairs, 4096+devidx*32 for MIDI devices"
	},
	"GetInputChannelName lua": {
		"prefix": "r.GetInputChannelName",
		"scope": "lua",
		"body": "r.GetInputChannelName({1:channelIndex})$0"
		"description": ""
	},
	"GetInputOutputLatency lua": {
		"prefix": "r.GetInputOutputLatency",
		"scope": "lua",
		"body": "r.GetInputOutputLatency()$0"
		"description": "Gets the audio device input/output latency in samples"
	},
	"GetItemEditingTime2 lua": {
		"prefix": "r.GetItemEditingTime2",
		"scope": "lua",
		"body": "r.GetItemEditingTime2()$0"
		"description": "returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)"
	},
	"GetItemFromPoint lua": {
		"prefix": "r.GetItemFromPoint",
		"scope": "lua",
		"body": "r.GetItemFromPoint({1:screen_x}, {2:screen_y}, {3:allow_locked})$0"
		"description": "Returns the first item at the screen coordinates specified. If allow_locked is false, locked items are ignored. If takeOutOptional specified, returns the take hit. See GetThingFromPoint."
	},
	"GetItemProjectContext lua": {
		"prefix": "r.GetItemProjectContext",
		"scope": "lua",
		"body": "r.GetItemProjectContext({1:item})$0"
		"description": ""
	},
	"GetItemStateChunk lua": {
		"prefix": "r.GetItemStateChunk",
		"scope": "lua",
		"body": "r.GetItemStateChunk({1:item}, {2:str}, {3:isundo})$0"
		"description": "Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint."
	},
	"GetLastColorThemeFile lua": {
		"prefix": "r.GetLastColorThemeFile",
		"scope": "lua",
		"body": "r.GetLastColorThemeFile()$0"
		"description": ""
	},
	"GetLastMarkerAndCurRegion lua": {
		"prefix": "r.GetLastMarkerAndCurRegion",
		"scope": "lua",
		"body": "r.GetLastMarkerAndCurRegion({1:proj}, {2:time})$0"
		"description": "Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See EnumProjectMarkers."
	},
	"GetLastTouchedFX lua": {
		"prefix": "r.GetLastTouchedFX",
		"scope": "lua",
		"body": "r.GetLastTouchedFX()$0"
		"description": "Returns true if the last touched FX parameter is valid, false otherwise. The low word of tracknumber is the 1-based track index -- 0 means the master track, 1 means track 1, etc. If the high word of tracknumber is nonzero, it refers to the 1-based item index (1 is the first item on the track, etc). For track FX, the low 24 bits of fxnumber refer to the FX index in the chain, and if the next 8 bits are 01, then the FX is record FX. For item FX, the low word defines the FX index in the chain, and the high word defines the take number. Deprecated, see GetTouchedOrFocusedFX."
	},
	"GetLastTouchedTrack lua": {
		"prefix": "r.GetLastTouchedTrack",
		"scope": "lua",
		"body": "r.GetLastTouchedTrack()$0"
		"description": ""
	},
	"GetMIDIInputName lua": {
		"prefix": "r.GetMIDIInputName",
		"scope": "lua",
		"body": "r.GetMIDIInputName({1:dev}, {2:nameout})$0"
		"description": "returns true if device present"
	},
	"GetMIDIOutputName lua": {
		"prefix": "r.GetMIDIOutputName",
		"scope": "lua",
		"body": "r.GetMIDIOutputName({1:dev}, {2:nameout})$0"
		"description": "returns true if device present"
	},
	"GetMainHwnd lua": {
		"prefix": "r.GetMainHwnd",
		"scope": "lua",
		"body": "r.GetMainHwnd()$0"
		"description": ""
	},
	"GetMasterMuteSoloFlags lua": {
		"prefix": "r.GetMasterMuteSoloFlags",
		"scope": "lua",
		"body": "r.GetMasterMuteSoloFlags()$0"
		"description": "&1=master mute,&2=master solo. This is deprecated as you can just query the master track as well."
	},
	"GetMasterTrack lua": {
		"prefix": "r.GetMasterTrack",
		"scope": "lua",
		"body": "r.GetMasterTrack({1:proj})$0"
		"description": ""
	},
	"GetMasterTrackVisibility lua": {
		"prefix": "r.GetMasterTrackVisibility",
		"scope": "lua",
		"body": "r.GetMasterTrackVisibility()$0"
		"description": "returns &1 if the master track is visible in the TCP, &2 if NOT visible in the mixer. See SetMasterTrackVisibility."
	},
	"GetMaxMidiInputs lua": {
		"prefix": "r.GetMaxMidiInputs",
		"scope": "lua",
		"body": "r.GetMaxMidiInputs()$0"
		"description": "returns max dev for midi inputs/outputs"
	},
	"GetMaxMidiOutputs lua": {
		"prefix": "r.GetMaxMidiOutputs",
		"scope": "lua",
		"body": "r.GetMaxMidiOutputs()$0"
		"description": ""
	},
	"GetMediaFileMetadata lua": {
		"prefix": "r.GetMediaFileMetadata",
		"scope": "lua",
		"body": "r.GetMediaFileMetadata({1:mediaSource}, {2:identifier})$0"
		"description": "Get text-based metadata from a media file for a given identifier. Call with identifier='' to list all identifiers contained in the file, separated by newlines. May return '[Binary data]' for metadata that REAPER doesn't handle."
	},
	"GetMediaItem lua": {
		"prefix": "r.GetMediaItem",
		"scope": "lua",
		"body": "r.GetMediaItem({1:proj}, {2:itemidx})$0"
		"description": "get an item from a project by item count (zero-based) (proj=0 for active project)"
	},
	"GetMediaItemInfo_Value lua": {
		"prefix": "r.GetMediaItemInfo_Value",
		"scope": "lua",
		"body": "r.GetMediaItemInfo_Value({1:item}, {2:parmname})$0"
		"description": "Get media item numerical-value attributes.\nB_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_LANEPLAYS : char * : on fixed lane tracks, 0=this item lane does not play, 1=this item lane plays exclusively, 2=this item lane plays and other lanes also play, -1=this item is on a non-visible, non-playing lane on a formerly fixed-lane track (read-only)\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * : free item positioning or fixed lane Y-position. 0=top of track, 1.0=bottom of track\nF_FREEMODE_H : float * : free item positioning or fixed lane height. 0.5=half the track height, 1.0=full track height\nI_FIXEDLANE : int * : fixed lane of item (fine to call with setNewValue, but returned value is read-only)\nB_FIXEDLANE_HIDDEN : bool * : true if displaying only one fixed lane and this item is in a different lane (read-only)\nP_TRACK : MediaTrack * : (read-only)"
	},
	"GetMediaItemNumTakes lua": {
		"prefix": "r.GetMediaItemNumTakes",
		"scope": "lua",
		"body": "r.GetMediaItemNumTakes({1:item})$0"
		"description": ""
	},
	"GetMediaItemTake lua": {
		"prefix": "r.GetMediaItemTake",
		"scope": "lua",
		"body": "r.GetMediaItemTake({1:item}, {2:tk})$0"
		"description": ""
	},
	"GetMediaItemTakeByGUID lua": {
		"prefix": "r.GetMediaItemTakeByGUID",
		"scope": "lua",
		"body": "r.GetMediaItemTakeByGUID({1:project}, {2:guidGUID})$0"
		"description": ""
	},
	"GetMediaItemTakeInfo_Value lua": {
		"prefix": "r.GetMediaItemTakeInfo_Value",
		"scope": "lua",
		"body": "r.GetMediaItemTakeInfo_Value({1:take}, {2:parmname})$0"
		"description": "Get media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=project default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_STRETCHFLAGS : int * : stretch marker flags (&7 mask for mode override: 0=default, 1=balanced, 2/3/6=tonal, 4=transient, 5=no pre-echo)\nF_STRETCHFADESIZE : float * : stretch marker fade size in seconds (0.0025 default)\nI_RECPASSID : int * : record pass ID\nI_TAKEFX_NCH : int * : number of internal audio channels for per-take FX to use (OK to call with setNewValue, but the returned value is read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)\nP_TRACK : pointer to MediaTrack (read-only)\nP_ITEM : pointer to MediaItem (read-only)\nP_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old."
	},
	"GetMediaItemTake_Item lua": {
		"prefix": "r.GetMediaItemTake_Item",
		"scope": "lua",
		"body": "r.GetMediaItemTake_Item({1:take})$0"
		"description": "Get parent item of media item take"
	},
	"GetMediaItemTake_Peaks lua": {
		"prefix": "r.GetMediaItemTake_Peaks",
		"scope": "lua",
		"body": "r.GetMediaItemTake_Peaks({1:take}, {2:peakrate}, {3:starttime}, {4:numchannels}, {5:numsamplesperchannel}, {6:want_extra_type}, {7:buf})$0"
		"description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality."
	},
	"GetMediaItemTake_Source lua": {
		"prefix": "r.GetMediaItemTake_Source",
		"scope": "lua",
		"body": "r.GetMediaItemTake_Source({1:take})$0"
		"description": "Get media source of media item take"
	},
	"GetMediaItemTake_Track lua": {
		"prefix": "r.GetMediaItemTake_Track",
		"scope": "lua",
		"body": "r.GetMediaItemTake_Track({1:take})$0"
		"description": "Get parent track of media item take"
	},
	"GetMediaItemTrack lua": {
		"prefix": "r.GetMediaItemTrack",
		"scope": "lua",
		"body": "r.GetMediaItemTrack({1:item})$0"
		"description": ""
	},
	"GetMediaItem_Track lua": {
		"prefix": "r.GetMediaItem_Track",
		"scope": "lua",
		"body": "r.GetMediaItem_Track({1:item})$0"
		"description": "Get parent track of media item"
	},
	"GetMediaSourceFileName lua": {
		"prefix": "r.GetMediaSourceFileName",
		"scope": "lua",
		"body": "r.GetMediaSourceFileName({1:source})$0"
		"description": "Copies the media source filename to filenamebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent."
	},
	"GetMediaSourceLength lua": {
		"prefix": "r.GetMediaSourceLength",
		"scope": "lua",
		"body": "r.GetMediaSourceLength({1:source})$0"
		"description": "Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds."
	},
	"GetMediaSourceNumChannels lua": {
		"prefix": "r.GetMediaSourceNumChannels",
		"scope": "lua",
		"body": "r.GetMediaSourceNumChannels({1:source})$0"
		"description": "Returns the number of channels in the source media."
	},
	"GetMediaSourceParent lua": {
		"prefix": "r.GetMediaSourceParent",
		"scope": "lua",
		"body": "r.GetMediaSourceParent({1:src})$0"
		"description": "Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example."
	},
	"GetMediaSourceSampleRate lua": {
		"prefix": "r.GetMediaSourceSampleRate",
		"scope": "lua",
		"body": "r.GetMediaSourceSampleRate({1:source})$0"
		"description": "Returns the sample rate. MIDI source media will return zero."
	},
	"GetMediaSourceType lua": {
		"prefix": "r.GetMediaSourceType",
		"scope": "lua",
		"body": "r.GetMediaSourceType({1:source})$0"
		"description": "copies the media source type ('WAV', 'MIDI', etc) to typebuf"
	},
	"GetMediaTrackInfo_Value lua": {
		"prefix": "r.GetMediaTrackInfo_Value",
		"scope": "lua",
		"body": "r.GetMediaTrackInfo_Value({1:tr}, {2:parmname})$0"
		"description": "Get track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-128, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)\nI_MCPW : int * : current MCP width in pixels (read-only)\nI_MCPH : int * : current MCP height in pixels (read-only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder collapsed state (only valid on folders), 0=normal, 1=collapsed, 2=fully collapsed\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_MIDI_INPUT_CHANMAP : int * : -1 maps to source channel, otherwise 1-16 to map to MIDI channel\nI_MIDI_CTL_CHAN : int * : -1 no link, 0-15 link to MIDI volume/pan on channel, 16 link to MIDI volume/pan on all channels\nI_MIDI_TRACKSEL_FLAG : int * : MIDI editor track list options: &1=expand media items, &2=exclude from list, &4=auto-pruned\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nI_SPACER : int * : 1=TCP track spacer above this trackB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper\nP_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)\nI_NUMFIXEDLANES : int * : number of track fixed lanes (fine to call with setNewValue, but returned value is read-only)\nC_LANESCOLLAPSED : char * : fixed lane collapse state (1=lanes collapsed, 2=track displays as non-fixed-lanes but hidden lanes exist)\nC_LANESETTINGS : char * : fixed lane settings (&1=auto-remove empty lanes at bottom, &2=do not auto-comp new recording, &4=newly recorded lanes play exclusively (else add lanes in layers), &8=big lanes (else small lanes), &16=add new recording at bottom (else record into first available lane), &32=hide lane buttons\nC_LANEPLAYS:N : char * :  on fixed lane tracks, 0=lane N does not play, 1=lane N plays exclusively, 2=lane N plays and other lanes also play (fine to call with setNewValue, but returned value is read-only)\nC_ALLLANESPLAY : char * : on fixed lane tracks, 0=no lanes play, 1=all lanes play, 2=some lanes play (fine to call with setNewValue 0 or 1, but returned value is read-only)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG\nP_PARTRACK : MediaTrack * : parent track (read-only)\nP_PROJECT : ReaProject * : parent project (read-only)"
	},
	"GetMixerScroll lua": {
		"prefix": "r.GetMixerScroll",
		"scope": "lua",
		"body": "r.GetMixerScroll()$0"
		"description": "Get the leftmost track visible in the mixer"
	},
	"GetMouseModifier lua": {
		"prefix": "r.GetMouseModifier",
		"scope": "lua",
		"body": "r.GetMouseModifier({1:context}, {2:modifier_flag})$0"
		"description": "Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.\naction will be filled in with the command ID number for a built-in mouse modifier\nor built-in REAPER command ID, or the custom action ID string.\nNote: the action string may have a space and 'c' or 'm' appended to it to specify command ID vs mouse modifier ID.\nSee SetMouseModifier for more information."
	},
	"GetMousePosition lua": {
		"prefix": "r.GetMousePosition",
		"scope": "lua",
		"body": "r.GetMousePosition()$0"
		"description": "get mouse position in screen coordinates"
	},
	"GetNumAudioInputs lua": {
		"prefix": "r.GetNumAudioInputs",
		"scope": "lua",
		"body": "r.GetNumAudioInputs()$0"
		"description": "Return number of normal audio hardware inputs available"
	},
	"GetNumAudioOutputs lua": {
		"prefix": "r.GetNumAudioOutputs",
		"scope": "lua",
		"body": "r.GetNumAudioOutputs()$0"
		"description": "Return number of normal audio hardware outputs available"
	},
	"GetNumMIDIInputs lua": {
		"prefix": "r.GetNumMIDIInputs",
		"scope": "lua",
		"body": "r.GetNumMIDIInputs()$0"
		"description": "returns max number of real midi hardware inputs"
	},
	"GetNumMIDIOutputs lua": {
		"prefix": "r.GetNumMIDIOutputs",
		"scope": "lua",
		"body": "r.GetNumMIDIOutputs()$0"
		"description": "returns max number of real midi hardware outputs"
	},
	"GetNumTakeMarkers lua": {
		"prefix": "r.GetNumTakeMarkers",
		"scope": "lua",
		"body": "r.GetNumTakeMarkers({1:take})$0"
		"description": "Returns number of take markers. See GetTakeMarker, SetTakeMarker, DeleteTakeMarker"
	},
	"GetNumTracks lua": {
		"prefix": "r.GetNumTracks",
		"scope": "lua",
		"body": "r.GetNumTracks()$0"
		"description": "Returns number of tracks in current project, see CountTracks()"
	},
	"GetOS lua": {
		"prefix": "r.GetOS",
		"scope": "lua",
		"body": "r.GetOS()$0"
		"description": "Returns 'Win32', 'Win64', 'OSX32', 'OSX64', 'macOS-arm64', or 'Other'."
	},
	"GetOutputChannelName lua": {
		"prefix": "r.GetOutputChannelName",
		"scope": "lua",
		"body": "r.GetOutputChannelName({1:channelIndex})$0"
		"description": ""
	},
	"GetOutputLatency lua": {
		"prefix": "r.GetOutputLatency",
		"scope": "lua",
		"body": "r.GetOutputLatency()$0"
		"description": "returns output latency in seconds"
	},
	"GetParentTrack lua": {
		"prefix": "r.GetParentTrack",
		"scope": "lua",
		"body": "r.GetParentTrack({1:track})$0"
		"description": ""
	},
	"GetPeakFileName lua": {
		"prefix": "r.GetPeakFileName",
		"scope": "lua",
		"body": "r.GetPeakFileName({1:fn})$0"
		"description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)"
	},
	"GetPeakFileNameEx lua": {
		"prefix": "r.GetPeakFileNameEx",
		"scope": "lua",
		"body": "r.GetPeakFileNameEx({1:fn}, {2:buf}, {3:forWrite})$0"
		"description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)"
	},
	"GetPeakFileNameEx2 lua": {
		"prefix": "r.GetPeakFileNameEx2",
		"scope": "lua",
		"body": "r.GetPeakFileNameEx2({1:fn}, {2:buf}, {3:forWrite}, {4:peaksfileextension})$0"
		"description": "Like GetPeakFileNameEx, but you can specify peaksfileextension such as '.reapeaks'"
	},
	"GetPlayPosition lua": {
		"prefix": "r.GetPlayPosition",
		"scope": "lua",
		"body": "r.GetPlayPosition()$0"
		"description": "returns latency-compensated actual-what-you-hear position"
	},
	"GetPlayPosition2 lua": {
		"prefix": "r.GetPlayPosition2",
		"scope": "lua",
		"body": "r.GetPlayPosition2()$0"
		"description": "returns position of next audio block being processed"
	},
	"GetPlayPosition2Ex lua": {
		"prefix": "r.GetPlayPosition2Ex",
		"scope": "lua",
		"body": "r.GetPlayPosition2Ex({1:proj})$0"
		"description": "returns position of next audio block being processed"
	},
	"GetPlayPositionEx lua": {
		"prefix": "r.GetPlayPositionEx",
		"scope": "lua",
		"body": "r.GetPlayPositionEx({1:proj})$0"
		"description": "returns latency-compensated actual-what-you-hear position"
	},
	"GetPlayState lua": {
		"prefix": "r.GetPlayState",
		"scope": "lua",
		"body": "r.GetPlayState()$0"
		"description": "&1=playing, &2=paused, &4=is recording"
	},
	"GetPlayStateEx lua": {
		"prefix": "r.GetPlayStateEx",
		"scope": "lua",
		"body": "r.GetPlayStateEx({1:proj})$0"
		"description": "&1=playing, &2=paused, &4=is recording"
	},
	"GetProjExtState lua": {
		"prefix": "r.GetProjExtState",
		"scope": "lua",
		"body": "r.GetProjExtState({1:proj}, {2:extname}, {3:key})$0"
		"description": "Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState."
	},
	"GetProjectLength lua": {
		"prefix": "r.GetProjectLength",
		"scope": "lua",
		"body": "r.GetProjectLength({1:proj})$0"
		"description": "returns length of project (maximum of end of media item, markers, end of regions, tempo map"
	},
	"GetProjectName lua": {
		"prefix": "r.GetProjectName",
		"scope": "lua",
		"body": "r.GetProjectName({1:proj})$0"
		"description": ""
	},
	"GetProjectPath lua": {
		"prefix": "r.GetProjectPath",
		"scope": "lua",
		"body": "r.GetProjectPath()$0"
		"description": "Get the project recording path."
	},
	"GetProjectPathEx lua": {
		"prefix": "r.GetProjectPathEx",
		"scope": "lua",
		"body": "r.GetProjectPathEx({1:proj})$0"
		"description": "Get the project recording path."
	},
	"GetProjectStateChangeCount lua": {
		"prefix": "r.GetProjectStateChangeCount",
		"scope": "lua",
		"body": "r.GetProjectStateChangeCount({1:proj})$0"
		"description": "returns an integer that changes when the project state changes"
	},
	"GetProjectTimeOffset lua": {
		"prefix": "r.GetProjectTimeOffset",
		"scope": "lua",
		"body": "r.GetProjectTimeOffset({1:proj}, {2:rndframe})$0"
		"description": "Gets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size."
	},
	"GetProjectTimeSignature lua": {
		"prefix": "r.GetProjectTimeSignature",
		"scope": "lua",
		"body": "r.GetProjectTimeSignature()$0"
		"description": "deprecated"
	},
	"GetProjectTimeSignature2 lua": {
		"prefix": "r.GetProjectTimeSignature2",
		"scope": "lua",
		"body": "r.GetProjectTimeSignature2({1:proj})$0"
		"description": "Gets basic time signature (beats per minute, numerator of time signature in bpi)\nthis does not reflect tempo envelopes but is purely what is set in the project settings."
	},
	"GetResourcePath lua": {
		"prefix": "r.GetResourcePath",
		"scope": "lua",
		"body": "r.GetResourcePath()$0"
		"description": "returns path where ini files are stored, other things are in subdirectories."
	},
	"GetSelectedEnvelope lua": {
		"prefix": "r.GetSelectedEnvelope",
		"scope": "lua",
		"body": "r.GetSelectedEnvelope({1:proj})$0"
		"description": "get the currently selected envelope, returns NULL/nil if no envelope is selected"
	},
	"GetSelectedMediaItem lua": {
		"prefix": "r.GetSelectedMediaItem",
		"scope": "lua",
		"body": "r.GetSelectedMediaItem({1:proj}, {2:selitem})$0"
		"description": "Discouraged, because GetSelectedMediaItem can be inefficient if media items are added, rearranged, or deleted in between calls. Instead see CountMediaItems, GetMediaItem, IsMediaItemSelected."
	},
	"GetSelectedTrack lua": {
		"prefix": "r.GetSelectedTrack",
		"scope": "lua",
		"body": "r.GetSelectedTrack({1:proj}, {2:seltrackidx})$0"
		"description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see GetSelectedTrack2."
	},
	"GetSelectedTrack2 lua": {
		"prefix": "r.GetSelectedTrack2",
		"scope": "lua",
		"body": "r.GetSelectedTrack2({1:proj}, {2:seltrackidx}, {3:wantmaster})$0"
		"description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based)."
	},
	"GetSelectedTrackEnvelope lua": {
		"prefix": "r.GetSelectedTrackEnvelope",
		"scope": "lua",
		"body": "r.GetSelectedTrackEnvelope({1:proj})$0"
		"description": "get the currently selected track envelope, returns NULL/nil if no envelope is selected"
	},
	"GetSetAutomationItemInfo lua": {
		"prefix": "r.GetSetAutomationItemInfo",
		"scope": "lua",
		"body": "r.GetSetAutomationItemInfo({1:env}, {2:autoitem_idx}, {3:desc}, {4:value}, {5:is_set})$0"
		"description": "Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:\nD_POOL_ID : double * : automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID\nD_POSITION : double * : automation item timeline position in seconds\nD_LENGTH : double * : automation item length in seconds\nD_STARTOFFS : double * : automation item start offset in seconds\nD_PLAYRATE : double * : automation item playback rate\nD_BASELINE : double * : automation item baseline value in the range [0,1]\nD_AMPLITUDE : double * : automation item amplitude in the range [-1,1]\nD_LOOPSRC : double * : nonzero if the automation item contents are looped\nD_UISEL : double * : nonzero if the automation item is selected in the arrange view\nD_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)"
	},
	"GetSetAutomationItemInfo_String lua": {
		"prefix": "r.GetSetAutomationItemInfo_String",
		"scope": "lua",
		"body": "r.GetSetAutomationItemInfo_String({1:env}, {2:autoitem_idx}, {3:desc}, {4:valuestrNeedBig}, {5:is_set})$0"
		"description": "Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. returns true on success. desc can be any of the following:\nP_POOL_NAME : char * : name of the underlying automation item pool\nP_POOL_EXT:xyz : char * : extension-specific persistent data"
	},
	"GetSetEnvelopeInfo_String lua": {
		"prefix": "r.GetSetEnvelopeInfo_String",
		"scope": "lua",
		"body": "r.GetSetEnvelopeInfo_String({1:env}, {2:parmname}, {3:stringNeedBig}, {4:setNewValue})$0"
		"description": "Gets/sets an attribute string:\nACTIVE : active state (bool as a string '0' or '1')\nARM : armed state (bool...)\nVISIBLE : visible state (bool...)\nSHOWLANE : show envelope in separate lane (bool...)\nGUID : (read-only) GUID as a string {xyz-....}\nP_EXT:xyz : extension-specific persistent data\nNote that when writing some of these attributes you will need to manually update the arrange and/or track panels, see TrackList_AdjustWindows"
	},
	"GetSetEnvelopeState lua": {
		"prefix": "r.GetSetEnvelopeState",
		"scope": "lua",
		"body": "r.GetSetEnvelopeState({1:env}, {2:str})$0"
		"description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk"
	},
	"GetSetEnvelopeState2 lua": {
		"prefix": "r.GetSetEnvelopeState2",
		"scope": "lua",
		"body": "r.GetSetEnvelopeState2({1:env}, {2:str}, {3:isundo})$0"
		"description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk"
	},
	"GetSetItemState lua": {
		"prefix": "r.GetSetItemState",
		"scope": "lua",
		"body": "r.GetSetItemState({1:item}, {2:str})$0"
		"description": "deprecated -- see SetItemStateChunk, GetItemStateChunk"
	},
	"GetSetItemState2 lua": {
		"prefix": "r.GetSetItemState2",
		"scope": "lua",
		"body": "r.GetSetItemState2({1:item}, {2:str}, {3:isundo})$0"
		"description": "deprecated -- see SetItemStateChunk, GetItemStateChunk"
	},
	"GetSetMediaItemInfo_String lua": {
		"prefix": "r.GetSetMediaItemInfo_String",
		"scope": "lua",
		"body": "r.GetSetMediaItemInfo_String({1:item}, {2:parmname}, {3:stringNeedBig}, {4:setNewValue})$0"
		"description": "Gets/sets an item attribute string:\nP_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
	},
	"GetSetMediaItemTakeInfo_String lua": {
		"prefix": "r.GetSetMediaItemTakeInfo_String",
		"scope": "lua",
		"body": "r.GetSetMediaItemTakeInfo_String({1:tk}, {2:parmname}, {3:stringNeedBig}, {4:setNewValue})$0"
		"description": "Gets/sets a take attribute string:\nP_NAME : char * : take name\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
	},
	"GetSetMediaTrackInfo_String lua": {
		"prefix": "r.GetSetMediaTrackInfo_String",
		"scope": "lua",
		"body": "r.GetSetMediaTrackInfo_String({1:tr}, {2:parmname}, {3:stringNeedBig}, {4:setNewValue})$0"
		"description": "Get or set track string attributes.\nP_NAME : char * : track name (on master returns NULL)\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\nP_LANENAME:n : char * : lane name (returns NULL for non-fixed-lane-tracks)\nP_MCP_LAYOUT : const char * : layout name\nP_RAZOREDITS : const char * : list of razor edit areas, as space-separated triples of start time, end time, and envelope GUID string.\n  Example: '0.0 1.0 '' 0.0 1.0 '{xyz-...}'\nP_RAZOREDITS_EXT : const char * : list of razor edit areas, as comma-separated sets of space-separated tuples of start time, end time, optional: envelope GUID string, fixed/fipm top y-position, fixed/fipm bottom y-position.\n  Example: '0.0 1.0,0.0 1.0 '{xyz-...}',1.0 2.0 '' 0.25 0.75'\nP_TCP_LAYOUT : const char * : layout name\nP_EXT:xyz : char * : extension-specific persistent data\nP_UI_RECT:tcp.mute : char * : read-only, allows querying screen position + size of track WALTER elements (tcp.size queries screen position and size of entire TCP, etc).\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
	},
	"GetSetProjectAuthor lua": {
		"prefix": "r.GetSetProjectAuthor",
		"scope": "lua",
		"body": "r.GetSetProjectAuthor({1:proj}, {2:set}, {3:author})$0"
		"description": "deprecated, see GetSetProjectInfo_String with desc='PROJECT_AUTHOR'"
	},
	"GetSetProjectGrid lua": {
		"prefix": "r.GetSetProjectGrid",
		"scope": "lua",
		"body": "r.GetSetProjectGrid({1:project}, {2:set}, {3:division}, {4:swingmode}, {5:swingamt})$0"
		"description": "Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags"
	},
	"GetSetProjectInfo lua": {
		"prefix": "r.GetSetProjectInfo",
		"scope": "lua",
		"body": "r.GetSetProjectInfo({1:project}, {2:desc}, {3:value}, {4:is_set})$0"
		"description": "Get or set project information.\nRENDER_SETTINGS : &(1|2)=0:master mix, &1=stems+master mix, &2=stems only, &4=multichannel tracks to multichannel files, &8=use render matrix, &16=tracks with only mono media to mono files, &32=selected media items, &64=selected media items via master, &128=selected tracks via master, &256=embed transients if format supports, &512=embed metadata if format supports, &1024=embed take markers if format supports, &2048=2nd pass render\nRENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time selection, 3=all project regions, 4=selected media items, 5=selected project regions, 6=all project markers, 7=selected project markers\nRENDER_CHANNELS : number of channels in rendered file\nRENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)\nRENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0\nRENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0\nRENDER_TAILFLAG : apply render tail setting when rendering: &1=custom time bounds, &2=entire project, &4=time selection, &8=all project markers/regions, &16=selected media items, &32=selected project markers/regions\nRENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)\nRENDER_ADDTOPROJ : &1=add rendered files to project, &2=do not render files that are likely silent\nRENDER_DITHER : &1=dither, &2=noise shaping, &4=dither stems, &8=noise shaping on stems\nRENDER_NORMALIZE: &1=enable, (&14==0)=LUFS-I, (&14==2)=RMS, (&14==4)=peak, (&14==6)=true peak, (&14==8)=LUFS-M max, (&14==10)=LUFS-S max, (&4128==32)=normalize stems to common gain based on master, &64=enable brickwall limit, &128=brickwall limit true peak, (&2304==256)=only normalize files that are too loud, (&2304==2048)=only normalize files that are too quiet, &512=apply fade-in, &1024=apply fade-out, (&4128==4096)=normalize to loudest file, (&4128==4128)=normalize as if one long file, &8192=adjust mono media additional -3dB\nRENDER_NORMALIZE_TARGET: render normalization target as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc\nRENDER_BRICKWALL: render brickwall limit as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc\nRENDER_FADEIN: render fade-in (0.001 means 1 ms, requires RENDER_NORMALIZE&512)\nRENDER_FADEOUT: render fade-out (0.001 means 1 ms, requires RENDER_NORMALIZE&1024)\nRENDER_FADEINSHAPE: render fade-in shape\nRENDER_FADEOUTSHAPE: render fade-out shape\nPROJECT_SRATE : sample rate (ignored unless PROJECT_SRATE_USE set)\nPROJECT_SRATE_USE : set to 1 if project sample rate is used"
	},
	"GetSetProjectInfo_String lua": {
		"prefix": "r.GetSetProjectInfo_String",
		"scope": "lua",
		"body": "r.GetSetProjectInfo_String({1:project}, {2:desc}, {3:valuestrNeedBig}, {4:is_set})$0"
		"description": "Get or set project information.\nPROJECT_NAME : project file name (read-only, is_set will be ignored)\nPROJECT_TITLE : title field from Project Settings/Notes dialog\nPROJECT_AUTHOR : author field from Project Settings/Notes dialog\nTRACK_GROUP_NAME:X : track group name, X should be 1..64\nMARKER_GUID:X : get the GUID (unique ID) of the marker or region with index X, where X is the index passed to EnumProjectMarkers, not necessarily the displayed number (read-only)\nMARKER_INDEX_FROM_GUID:{GUID} : get the GUID index of the marker or region with GUID {GUID} (read-only)\nOPENCOPY_CFGIDX : integer for the configuration of format to use when creating copies/applying FX. 0=wave (auto-depth), 1=APPLYFX_FORMAT, 2=RECORD_FORMAT\nRECORD_PATH : recording directory -- may be blank or a relative path, to get the effective path see GetProjectPathEx()\nRECORD_PATH_SECONDARY : secondary recording directory\nRECORD_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. 'evaw' or 'l3pm', to use default settings for that sink type.\nAPPLYFX_FORMAT : base64-encoded sink configuration (see project files, etc). Used only if RECFMT_OPENCOPY is set to 1. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. 'evaw' or 'l3pm', to use default settings for that sink type.\nRENDER_FILE : render directory\nRENDER_PATTERN : render file name (may contain wildcards)\nRENDER_METADATA : get or set the metadata saved with the project (not metadata embedded in project media). Example, ID3 album name metadata: valuestr='ID3:TALB' to get, valuestr='ID3:TALB|my album name' to set. Call with valuestr='' and is_set=false to get a semicolon-separated list of defined project metadata identifiers.\nRENDER_TARGETS : semicolon separated list of files that would be written if the project is rendered using the most recent render settings\nRENDER_STATS : (read-only) semicolon separated list of statistics for the most recently rendered files. call with valuestr='XXX' to run an action (for example, '42437'=dry run render selected items) before returning statistics.\nRENDER_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. 'evaw' or 'l3pm', to use default settings for that sink type.\nRENDER_FORMAT2 : base64-encoded secondary sink configuration. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. 'evaw' or 'l3pm', to use default settings for that sink type, or '' to disable secondary render.\n&nbsp;&nbsp;&nbsp;&nbsp;Formats available on this machine:\n&nbsp;&nbsp;&nbsp;&nbsp;'wave' 'aiff' 'caff' 'raw ' 'mp3l' 'wvpk' 'OggS' 'flac' 'ddp ' 'iso ' 'oggv' 'FFMP' 'XAVF' 'GIF ' 'LCF '"
	},
	"GetSetProjectNotes lua": {
		"prefix": "r.GetSetProjectNotes",
		"scope": "lua",
		"body": "r.GetSetProjectNotes({1:proj}, {2:set}, {3:notes})$0"
		"description": "gets or sets project notes, notesNeedBig_sz is ignored when setting"
	},
	"GetSetRepeat lua": {
		"prefix": "r.GetSetRepeat",
		"scope": "lua",
		"body": "r.GetSetRepeat({1:val})$0"
		"description": "-1 == query,0=clear,1=set,>1=toggle . returns new value"
	},
	"GetSetRepeatEx lua": {
		"prefix": "r.GetSetRepeatEx",
		"scope": "lua",
		"body": "r.GetSetRepeatEx({1:proj}, {2:val})$0"
		"description": "-1 == query,0=clear,1=set,>1=toggle . returns new value"
	},
	"GetSetTempoTimeSigMarkerFlag lua": {
		"prefix": "r.GetSetTempoTimeSigMarkerFlag",
		"scope": "lua",
		"body": "r.GetSetTempoTimeSigMarkerFlag({1:project}, {2:point_index}, {3:flag}, {4:is_set})$0"
		"description": "Gets or sets the attribute flag of a tempo/time signature marker. flag &1=sets time signature and starts new measure, &2=does not set tempo, &4=allow previous partial measure if starting new measure, &8=set new metronome pattern if starting new measure, &16=reset ruler grid if starting new measure"
	},
	"GetSetTrackGroupMembership lua": {
		"prefix": "r.GetSetTrackGroupMembership",
		"scope": "lua",
		"body": "r.GetSetTrackGroupMembership({1:tr}, {2:groupname}, {3:setmask}, {4:setvalue})$0"
		"description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\n\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings)."
	},
	"GetSetTrackGroupMembershipEx lua": {
		"prefix": "r.GetSetTrackGroupMembershipEx",
		"scope": "lua",
		"body": "r.GetSetTrackGroupMembershipEx({1:tr}, {2:groupname}, {3:offset}, {4:setmask}, {5:setvalue})$0"
		"description": "Gets or modifies 32 bits (at offset, where 0 is the low 32 bits of the grouping) of the group membership for a track. Returns group state prior to call. if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\n\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings)."
	},
	"GetSetTrackGroupMembershipHigh lua": {
		"prefix": "r.GetSetTrackGroupMembershipHigh",
		"scope": "lua",
		"body": "r.GetSetTrackGroupMembershipHigh({1:tr}, {2:groupname}, {3:setmask}, {4:setvalue})$0"
		"description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\n\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings)."
	},
	"GetSetTrackSendInfo_String lua": {
		"prefix": "r.GetSetTrackSendInfo_String",
		"scope": "lua",
		"body": "r.GetSetTrackSendInfo_String({1:tr}, {2:category}, {3:sendidx}, {4:parmname}, {5:stringNeedBig}, {6:setNewValue})$0"
		"description": "Gets/sets a send attribute string:\nP_EXT:xyz : char * : extension-specific persistent data"
	},
	"GetSetTrackState lua": {
		"prefix": "r.GetSetTrackState",
		"scope": "lua",
		"body": "r.GetSetTrackState({1:track}, {2:str})$0"
		"description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk"
	},
	"GetSetTrackState2 lua": {
		"prefix": "r.GetSetTrackState2",
		"scope": "lua",
		"body": "r.GetSetTrackState2({1:track}, {2:str}, {3:isundo})$0"
		"description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk"
	},
	"GetSet_ArrangeView2 lua": {
		"prefix": "r.GetSet_ArrangeView2",
		"scope": "lua",
		"body": "r.GetSet_ArrangeView2({1:proj}, {2:isSet}, {3:screen_x_start}, {4:screen_x_end}, {5:start_time}, {6:end_time})$0"
		"description": "Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time"
	},
	"GetSet_LoopTimeRange lua": {
		"prefix": "r.GetSet_LoopTimeRange",
		"scope": "lua",
		"body": "r.GetSet_LoopTimeRange({1:isSet}, {2:isLoop}, {3:start}, {4:end}, {5:allowautoseek})$0"
		"description": ""
	},
	"GetSet_LoopTimeRange2 lua": {
		"prefix": "r.GetSet_LoopTimeRange2",
		"scope": "lua",
		"body": "r.GetSet_LoopTimeRange2({1:proj}, {2:isSet}, {3:isLoop}, {4:start}, {5:end}, {6:allowautoseek})$0"
		"description": ""
	},
	"GetSubProjectFromSource lua": {
		"prefix": "r.GetSubProjectFromSource",
		"scope": "lua",
		"body": "r.GetSubProjectFromSource({1:src})$0"
		"description": ""
	},
	"GetTCPFXParm lua": {
		"prefix": "r.GetTCPFXParm",
		"scope": "lua",
		"body": "r.GetTCPFXParm({1:project}, {2:track}, {3:index})$0"
		"description": "Get information about a specific FX parameter knob (see CountTCPFXParms)."
	},
	"GetTake lua": {
		"prefix": "r.GetTake",
		"scope": "lua",
		"body": "r.GetTake({1:item}, {2:takeidx})$0"
		"description": "get a take from an item by take count (zero-based)"
	},
	"GetTakeEnvelope lua": {
		"prefix": "r.GetTakeEnvelope",
		"scope": "lua",
		"body": "r.GetTakeEnvelope({1:take}, {2:envidx})$0"
		"description": ""
	},
	"GetTakeEnvelopeByName lua": {
		"prefix": "r.GetTakeEnvelopeByName",
		"scope": "lua",
		"body": "r.GetTakeEnvelopeByName({1:take}, {2:envname})$0"
		"description": ""
	},
	"GetTakeMarker lua": {
		"prefix": "r.GetTakeMarker",
		"scope": "lua",
		"body": "r.GetTakeMarker({1:take}, {2:idx})$0"
		"description": "Get information about a take marker. Returns the position in media item source time, or -1 if the take marker does not exist. See GetNumTakeMarkers, SetTakeMarker, DeleteTakeMarker"
	},
	"GetTakeName lua": {
		"prefix": "r.GetTakeName",
		"scope": "lua",
		"body": "r.GetTakeName({1:take})$0"
		"description": "returns NULL if the take is not valid"
	},
	"GetTakeNumStretchMarkers lua": {
		"prefix": "r.GetTakeNumStretchMarkers",
		"scope": "lua",
		"body": "r.GetTakeNumStretchMarkers({1:take})$0"
		"description": "Returns number of stretch markers in take"
	},
	"GetTakeStretchMarker lua": {
		"prefix": "r.GetTakeStretchMarker",
		"scope": "lua",
		"body": "r.GetTakeStretchMarker({1:take}, {2:idx})$0"
		"description": "Gets information on a stretch marker, idx is 0..n. Returns -1 if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, the following marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated."
	},
	"GetTakeStretchMarkerSlope lua": {
		"prefix": "r.GetTakeStretchMarkerSlope",
		"scope": "lua",
		"body": "r.GetTakeStretchMarkerSlope({1:take}, {2:idx})$0"
		"description": "See SetTakeStretchMarkerSlope"
	},
	"GetTempoMatchPlayRate lua": {
		"prefix": "r.GetTempoMatchPlayRate",
		"scope": "lua",
		"body": "r.GetTempoMatchPlayRate({1:source}, {2:srcscale}, {3:position}, {4:mult})$0"
		"description": "finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256"
	},
	"GetTempoTimeSigMarker lua": {
		"prefix": "r.GetTempoTimeSigMarker",
		"scope": "lua",
		"body": "r.GetTempoTimeSigMarker({1:proj}, {2:ptidx})$0"
		"description": "Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker."
	},
	"GetThemeColor lua": {
		"prefix": "r.GetThemeColor",
		"scope": "lua",
		"body": "r.GetThemeColor({1:ini_key}, {2:flags})$0"
		"description": "Returns the theme color specified, or -1 on failure. If the low bit of flags is set, the color as originally specified by the theme (before any transformations) is returned, otherwise the current (possibly transformed and modified) color is returned. See SetThemeColor for a list of valid ini_key."
	},
	"GetThingFromPoint lua": {
		"prefix": "r.GetThingFromPoint",
		"scope": "lua",
		"body": "r.GetThingFromPoint({1:screen_x}, {2:screen_y})$0"
		"description": "Hit tests a point in screen coordinates. Updates infoOut with information such as 'arrange', 'fx_chain', 'fx_0' (first FX in chain, floating), 'spacer_0' (spacer before first track). If a track panel is hit, string will begin with 'tcp' or 'mcp' or 'tcp.mute' etc (future versions may append additional information). May return NULL with valid info string to indicate non-track thing."
	},
	"GetToggleCommandState lua": {
		"prefix": "r.GetToggleCommandState",
		"scope": "lua",
		"body": "r.GetToggleCommandState({1:command_id})$0"
		"description": "See GetToggleCommandStateEx."
	},
	"GetToggleCommandStateEx lua": {
		"prefix": "r.GetToggleCommandStateEx",
		"scope": "lua",
		"body": "r.GetToggleCommandStateEx({1:section_id}, {2:command_id})$0"
		"description": "For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned."
	},
	"GetTooltipWindow lua": {
		"prefix": "r.GetTooltipWindow",
		"scope": "lua",
		"body": "r.GetTooltipWindow()$0"
		"description": "gets a tooltip window,in case you want to ask it for font information. Can return NULL."
	},
	"GetTouchedOrFocusedFX lua": {
		"prefix": "r.GetTouchedOrFocusedFX",
		"scope": "lua",
		"body": "r.GetTouchedOrFocusedFX({1:mode})$0"
		"description": "mode can be 0 to query last touched parameter, or 1 to query currently focused FX. Returns false if failed. If successful, trackIdxOut will be track index (-1 is master track, 0 is first track). itemidxOut will be 0-based item index if an item, or -1 if not an item. takeidxOut will be 0-based take index. fxidxOut will be FX index, potentially with 0x2000000 set to signify container-addressing, or with 0x1000000 set to signify record-input FX. parmOut will be set to the parameter index if querying last-touched. parmOut will have 1 set if querying focused state and FX is no longer focused but still open."
	},
	"GetTrack lua": {
		"prefix": "r.GetTrack",
		"scope": "lua",
		"body": "r.GetTrack({1:proj}, {2:trackidx})$0"
		"description": "get a track from a project by track count (zero-based) (proj=0 for active project)"
	},
	"GetTrackAutomationMode lua": {
		"prefix": "r.GetTrackAutomationMode",
		"scope": "lua",
		"body": "r.GetTrackAutomationMode({1:tr})$0"
		"description": "return the track mode, regardless of global override"
	},
	"GetTrackColor lua": {
		"prefix": "r.GetTrackColor",
		"scope": "lua",
		"body": "r.GetTrackColor({1:track})$0"
		"description": "Returns the track custom color as OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). Black is returned as 0x1000000, no color setting is returned as 0."
	},
	"GetTrackDepth lua": {
		"prefix": "r.GetTrackDepth",
		"scope": "lua",
		"body": "r.GetTrackDepth({1:track})$0"
		"description": ""
	},
	"GetTrackEnvelope lua": {
		"prefix": "r.GetTrackEnvelope",
		"scope": "lua",
		"body": "r.GetTrackEnvelope({1:track}, {2:envidx})$0"
		"description": ""
	},
	"GetTrackEnvelopeByChunkName lua": {
		"prefix": "r.GetTrackEnvelopeByChunkName",
		"scope": "lua",
		"body": "r.GetTrackEnvelopeByChunkName({1:tr}, {2:cfgchunkname_or_guid})$0"
		"description": "Gets a built-in track envelope by configuration chunk name, like '<VOLENV', or GUID string, like '{B577250D-146F-B544-9B34-F24FBE488F1F}'."
	},
	"GetTrackEnvelopeByName lua": {
		"prefix": "r.GetTrackEnvelopeByName",
		"scope": "lua",
		"body": "r.GetTrackEnvelopeByName({1:track}, {2:envname})$0"
		"description": ""
	},
	"GetTrackFromPoint lua": {
		"prefix": "r.GetTrackFromPoint",
		"scope": "lua",
		"body": "r.GetTrackFromPoint({1:screen_x}, {2:screen_y})$0"
		"description": "Returns the track from the screen coordinates specified. If the screen coordinates refer to a window associated to the track (such as FX), the track will be returned. infoOutOptional will be set to 1 if it is likely an envelope, 2 if it is likely a track FX. For a free item positioning or fixed lane track, the second byte of infoOutOptional will be set to the (approximate, for fipm tracks) item lane underneath the mouse. See GetThingFromPoint."
	},
	"GetTrackGUID lua": {
		"prefix": "r.GetTrackGUID",
		"scope": "lua",
		"body": "r.GetTrackGUID({1:tr})$0"
		"description": ""
	},
	"GetTrackMIDILyrics lua": {
		"prefix": "r.GetTrackMIDILyrics",
		"scope": "lua",
		"body": "r.GetTrackMIDILyrics({1:track}, {2:flag})$0"
		"description": "Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&1: double tabs at the end of each measure and triple tabs when skipping measures, flag&2: each lyric is preceded by its beat position in the project (example with flag=2: '1.1.2\tLyric for measure 1 beat 2\t2.1.1\tLyric for measure 2 beat 1\t'). See SetTrackMIDILyrics"
	},
	"GetTrackMIDINoteName lua": {
		"prefix": "r.GetTrackMIDINoteName",
		"scope": "lua",
		"body": "r.GetTrackMIDINoteName({1:track}, {2:pitch}, {3:chan})$0"
		"description": "see GetTrackMIDINoteNameEx"
	},
	"GetTrackMIDINoteNameEx lua": {
		"prefix": "r.GetTrackMIDINoteNameEx",
		"scope": "lua",
		"body": "r.GetTrackMIDINoteNameEx({1:proj}, {2:track}, {3:pitch}, {4:chan})$0"
		"description": "Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx"
	},
	"GetTrackMIDINoteRange lua": {
		"prefix": "r.GetTrackMIDINoteRange",
		"scope": "lua",
		"body": "r.GetTrackMIDINoteRange({1:proj}, {2:track})$0"
		"description": ""
	},
	"GetTrackMediaItem lua": {
		"prefix": "r.GetTrackMediaItem",
		"scope": "lua",
		"body": "r.GetTrackMediaItem({1:tr}, {2:itemidx})$0"
		"description": ""
	},
	"GetTrackName lua": {
		"prefix": "r.GetTrackName",
		"scope": "lua",
		"body": "r.GetTrackName({1:track})$0"
		"description": "Returns 'MASTER' for master track, 'Track N' if track has no name."
	},
	"GetTrackNumMediaItems lua": {
		"prefix": "r.GetTrackNumMediaItems",
		"scope": "lua",
		"body": "r.GetTrackNumMediaItems({1:tr})$0"
		"description": ""
	},
	"GetTrackNumSends lua": {
		"prefix": "r.GetTrackNumSends",
		"scope": "lua",
		"body": "r.GetTrackNumSends({1:tr}, {2:category})$0"
		"description": "returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs"
	},
	"GetTrackReceiveName lua": {
		"prefix": "r.GetTrackReceiveName",
		"scope": "lua",
		"body": "r.GetTrackReceiveName({1:track}, {2:recv_index})$0"
		"description": "See GetTrackSendName."
	},
	"GetTrackReceiveUIMute lua": {
		"prefix": "r.GetTrackReceiveUIMute",
		"scope": "lua",
		"body": "r.GetTrackReceiveUIMute({1:track}, {2:recv_index})$0"
		"description": "See GetTrackSendUIMute."
	},
	"GetTrackReceiveUIVolPan lua": {
		"prefix": "r.GetTrackReceiveUIVolPan",
		"scope": "lua",
		"body": "r.GetTrackReceiveUIVolPan({1:track}, {2:recv_index})$0"
		"description": "See GetTrackSendUIVolPan."
	},
	"GetTrackSendInfo_Value lua": {
		"prefix": "r.GetTrackSendInfo_Value",
		"scope": "lua",
		"body": "r.GetTrackSendInfo_Value({1:tr}, {2:category}, {3:sendidx}, {4:parmname})$0"
		"description": "Get send/receive/hardware output numerical-value attributes.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\nB_MUTE : bool *\nB_PHASE : bool * : true to flip phase\nB_MONO : bool *\nD_VOL : double * : 1.0 = +0dB etc\nD_PAN : double * : -1..+1\nD_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\nI_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.\nI_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.\nI_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, 31=MIDI send disabled, next 5 bits=dest channel, 0=orig, 1-16=chan. &1024 for faders-send MIDI vol/pan. (>>14)&255 = src bus (0 for all, 1 for normal, 2+). (>>22)&255=destination bus (0 for all, 1 for normal, 2+)\nP_DESTTRACK : MediaTrack * : destination track, only applies for sends/recvs (read-only)\nP_SRCTRACK : MediaTrack * : source track, only applies for sends/recvs (read-only)\nP_ENV:<envchunkname : TrackEnvelope * : call with :<VOLENV, :<PANENV, etc appended (read-only)\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends."
	},
	"GetTrackSendName lua": {
		"prefix": "r.GetTrackSendName",
		"scope": "lua",
		"body": "r.GetTrackSendName({1:track}, {2:send_index})$0"
		"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName."
	},
	"GetTrackSendUIMute lua": {
		"prefix": "r.GetTrackSendUIMute",
		"scope": "lua",
		"body": "r.GetTrackSendUIMute({1:track}, {2:send_index})$0"
		"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute."
	},
	"GetTrackSendUIVolPan lua": {
		"prefix": "r.GetTrackSendUIVolPan",
		"scope": "lua",
		"body": "r.GetTrackSendUIVolPan({1:track}, {2:send_index})$0"
		"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan."
	},
	"GetTrackState lua": {
		"prefix": "r.GetTrackState",
		"scope": "lua",
		"body": "r.GetTrackState({1:track})$0"
		"description": "Gets track state, returns track name.\nflags will be set to:\n&1=folder\n&2=selected\n&4=has fx enabled\n&8=muted\n&16=soloed\n&32=SIP'd (with &16)\n&64=rec armed\n&128=rec monitoring on\n&256=rec monitoring auto\n&512=hide from TCP\n&1024=hide from MCP"
	},
	"GetTrackStateChunk lua": {
		"prefix": "r.GetTrackStateChunk",
		"scope": "lua",
		"body": "r.GetTrackStateChunk({1:track}, {2:str}, {3:isundo})$0"
		"description": "Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint."
	},
	"GetTrackUIMute lua": {
		"prefix": "r.GetTrackUIMute",
		"scope": "lua",
		"body": "r.GetTrackUIMute({1:track})$0"
		"description": ""
	},
	"GetTrackUIPan lua": {
		"prefix": "r.GetTrackUIPan",
		"scope": "lua",
		"body": "r.GetTrackUIPan({1:track})$0"
		"description": ""
	},
	"GetTrackUIVolPan lua": {
		"prefix": "r.GetTrackUIVolPan",
		"scope": "lua",
		"body": "r.GetTrackUIVolPan({1:track})$0"
		"description": ""
	},
	"GetUnderrunTime lua": {
		"prefix": "r.GetUnderrunTime",
		"scope": "lua",
		"body": "r.GetUnderrunTime()$0"
		"description": "retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)"
	},
	"GetUserFileNameForRead lua": {
		"prefix": "r.GetUserFileNameForRead",
		"scope": "lua",
		"body": "r.GetUserFileNameForRead({1:filenameNeed4096}, {2:title}, {3:defext})$0"
		"description": "returns true if the user selected a valid file, false if the user canceled the dialog"
	},
	"GetUserInputs lua": {
		"prefix": "r.GetUserInputs",
		"scope": "lua",
		"body": "r.GetUserInputs({1:title}, {2:num_inputs}, {3:captions_csv}, {4:retvals_csv})$0"
		"description": "Get values from the user.\nIf a caption begins with *, for example '*password', the edit field will not display the input text.\nMaximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. You can supply special extra information via additional caption fields: extrawidth=XXX to increase text field width, separator=X to use a different separator for returned fields."
	},
	"GoToMarker lua": {
		"prefix": "r.GoToMarker",
		"scope": "lua",
		"body": "r.GoToMarker({1:proj}, {2:marker_index}, {3:use_timeline_order})$0"
		"description": "Go to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline.  If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1."
	},
	"GoToRegion lua": {
		"prefix": "r.GoToRegion",
		"scope": "lua",
		"body": "r.GoToRegion({1:proj}, {2:region_index}, {3:use_timeline_order})$0"
		"description": "Seek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline.  If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1."
	},
	"HasExtState lua": {
		"prefix": "r.HasExtState",
		"scope": "lua",
		"body": "r.HasExtState({1:section}, {2:key})$0"
		"description": "Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState."
	},
	"HasTrackMIDIPrograms lua": {
		"prefix": "r.HasTrackMIDIPrograms",
		"scope": "lua",
		"body": "r.HasTrackMIDIPrograms({1:track})$0"
		"description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none"
	},
	"HasTrackMIDIProgramsEx lua": {
		"prefix": "r.HasTrackMIDIProgramsEx",
		"scope": "lua",
		"body": "r.HasTrackMIDIProgramsEx({1:proj}, {2:track})$0"
		"description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none"
	},
	"Help_Set lua": {
		"prefix": "r.Help_Set",
		"scope": "lua",
		"body": "r.Help_Set({1:helpstring}, {2:is_temporary_help})$0"
		"description": ""
	},
	"ImGui_GetBuiltinPath lua": {
		"prefix": "r.ImGui_GetBuiltinPath",
		"scope": "lua",
		"body": "r.ImGui_GetBuiltinPath()$0"
		"description": "Returns the path to the directory containing imgui.lua, imgui.py and gfx2imgui.lua."
	},
	"InsertAutomationItem lua": {
		"prefix": "r.InsertAutomationItem",
		"scope": "lua",
		"body": "r.InsertAutomationItem({1:env}, {2:pool_id}, {3:position}, {4:length})$0"
		"description": "Insert a new automation item. pool_id < 0 collects existing envelope points into the automation item; if pool_id is >= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). Returns the index of the item, suitable for passing to other automation item API functions. See GetSetAutomationItemInfo."
	},
	"InsertEnvelopePoint lua": {
		"prefix": "r.InsertEnvelopePoint",
		"scope": "lua",
		"body": "r.InsertEnvelopePoint({1:envelope}, {2:time}, {3:value}, {4:shape}, {5:tension}, {6:selected}, {7:noSortIn})$0"
		"description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See InsertEnvelopePointEx."
	},
	"InsertEnvelopePointEx lua": {
		"prefix": "r.InsertEnvelopePointEx",
		"scope": "lua",
		"body": "r.InsertEnvelopePointEx({1:envelope}, {2:autoitem_idx}, {3:time}, {4:value}, {5:shape}, {6:tension}, {7:selected}, {8:noSortIn})$0"
		"description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, DeleteEnvelopePointEx."
	},
	"InsertMedia lua": {
		"prefix": "r.InsertMedia",
		"scope": "lua",
		"body": "r.InsertMedia({1:file}, {2:mode})$0"
		"description": "mode: 0=add to current track, 1=add new track, 3=add to selected items as takes, &4=stretch/loop to fit time sel, &8=try to match tempo 1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x, &64=don't preserve pitch when matching tempo, &128=no loop/section if startpct/endpct set, &256=force loop regardless of global preference for looping imported items, &512=use high word as absolute track index if mode&3==0 or mode&2048, &1024=insert into reasamplomatic on a new track (add 1 to insert on last selected track), &2048=insert into open reasamplomatic instance (add 512 to use high word as absolute track index), &4096=move to source preferred position (BWF start offset), &8192=reverse. &16384=apply ripple according to project setting"
	},
	"InsertMediaSection lua": {
		"prefix": "r.InsertMediaSection",
		"scope": "lua",
		"body": "r.InsertMediaSection({1:file}, {2:mode}, {3:startpct}, {4:endpct}, {5:pitchshift})$0"
		"description": "See InsertMedia."
	},
	"InsertTrackAtIndex lua": {
		"prefix": "r.InsertTrackAtIndex",
		"scope": "lua",
		"body": "r.InsertTrackAtIndex({1:idx}, {2:wantDefaults})$0"
		"description": "inserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env. Superseded, see InsertTrackInProject"
	},
	"InsertTrackInProject lua": {
		"prefix": "r.InsertTrackInProject",
		"scope": "lua",
		"body": "r.InsertTrackInProject({1:proj}, {2:idx}, {3:flags})$0"
		"description": "inserts a track in project proj at idx, this will be clamped to 0..CountTracks(proj). flags&1 for default envelopes/FX, otherwise no enabled fx/envelopes will be added."
	},
	"IsMediaExtension lua": {
		"prefix": "r.IsMediaExtension",
		"scope": "lua",
		"body": "r.IsMediaExtension({1:ext}, {2:wantOthers})$0"
		"description": "Tests a file extension (i.e. 'wav' or 'mid') to see if it's a media extension.\nIf wantOthers is set, then 'RPP', 'TXT' and other project-type formats will also pass."
	},
	"IsMediaItemSelected lua": {
		"prefix": "r.IsMediaItemSelected",
		"scope": "lua",
		"body": "r.IsMediaItemSelected({1:item})$0"
		"description": ""
	},
	"IsProjectDirty lua": {
		"prefix": "r.IsProjectDirty",
		"scope": "lua",
		"body": "r.IsProjectDirty({1:proj})$0"
		"description": "Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences."
	},
	"IsTrackSelected lua": {
		"prefix": "r.IsTrackSelected",
		"scope": "lua",
		"body": "r.IsTrackSelected({1:track})$0"
		"description": ""
	},
	"IsTrackVisible lua": {
		"prefix": "r.IsTrackVisible",
		"scope": "lua",
		"body": "r.IsTrackVisible({1:track}, {2:mixer})$0"
		"description": "If mixer==true, returns true if the track is visible in the mixer.  If mixer==false, returns true if the track is visible in the track control panel."
	},
	"JB_GetSWSExtraProjectNotes lua": {
		"prefix": "r.JB_GetSWSExtraProjectNotes",
		"scope": "lua",
		"body": "r.JB_GetSWSExtraProjectNotes({1:project})$0"
		"description": ""
	},
	"JB_SetSWSExtraProjectNotes lua": {
		"prefix": "r.JB_SetSWSExtraProjectNotes",
		"scope": "lua",
		"body": "r.JB_SetSWSExtraProjectNotes({1:project}, {2:str})$0"
		"description": ""
	},
	"JS_Actions_CountShortcuts lua": {
		"prefix": "r.JS_Actions_CountShortcuts",
		"scope": "lua",
		"body": "r.JS_Actions_CountShortcuts({1:section}, {2:cmdID})$0"
		"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer."
	},
	"JS_Actions_DeleteShortcut lua": {
		"prefix": "r.JS_Actions_DeleteShortcut",
		"scope": "lua",
		"body": "r.JS_Actions_DeleteShortcut({1:section}, {2:cmdID}, {3:shortcutidx})$0"
		"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer."
	},
	"JS_Actions_DoShortcutDialog lua": {
		"prefix": "r.JS_Actions_DoShortcutDialog",
		"scope": "lua",
		"body": "r.JS_Actions_DoShortcutDialog({1:section}, {2:cmdID}, {3:shortcutidx})$0"
		"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.\n\nIf the shortcut index is higher than the current number of shortcuts, it will add a new shortcut."
	},
	"JS_Actions_GetShortcutDesc lua": {
		"prefix": "r.JS_Actions_GetShortcutDesc",
		"scope": "lua",
		"body": "r.JS_Actions_GetShortcutDesc({1:section}, {2:cmdID}, {3:shortcutidx})$0"
		"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer."
	},
	"JS_Byte lua": {
		"prefix": "r.JS_Byte",
		"scope": "lua",
		"body": "r.JS_Byte({1:pointer}, {2:offset})$0"
		"description": "Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each."
	},
	"JS_Composite lua": {
		"prefix": "r.JS_Composite",
		"scope": "lua",
		"body": "r.JS_Composite({1:windowHWND}, {2:dstx}, {3:dsty}, {4:dstw}, {5:dsth}, {6:sysBitmap}, {7:srcx}, {8:srcy}, {9:srcw}, {10:srch}, {11:autoUpdate})$0"
		"description": "Composites a LICE bitmap with a REAPER window.  Each time that the window is re-drawn, the bitmap will be blitted over the window's client area (with per-pixel alpha blending).\n\n * If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.\n\n * autoUpdate is an optional parameter that is false by default. If true, JS_Composite will automatically invalidate and re-draw the part of the window that covers the current position of the bitmap, and if the bitmap is being moved, also the previous position. (If only one or a handful of bitmaps are being moved across the screen, autoUpdate should result in smoother animation on WindowsOS; if numerous bitmaps are spread over the entire window, it may be faster to disable autoUpdate and instead call JS_Window_InvalidateRect explicitly once all bitmaps have been moved.)\n\n * InvalidateRect should also be called whenever the contents of the bitmap contents have been changed, but not the position, to trigger a window update.\n\n * On WindowsOS, the key to reducing flickering is to slow down the frequency at which the window is re-drawn. InvalidateRect should only be called when absolutely necessary, preferably not more than 20 times per second.  (Also refer to the JS_Composite_Delay function.)\n\n * On WindowsOS, flickering can further be reduced by keeping the invalidated area as small as possible, covering only the bitmaps that have been edited or moved.  However, if numerous bitmaps are spread over the entire window, it may be faster to simply invalidate the entire client area. \n\n * This function should not be applied directly to top-level windows, but rather to child windows.\n\n * Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.\n\n * On WindowsOS, GDI blitting does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.\n\nReturns:\n1 if successful, otherwise -1 = windowHWND is not a window, -3 = Could not obtain the original window process, -4 = sysBitmap is not a LICE bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the window HDC, -7 = Error when subclassing to new window process."
	},
	"JS_Composite_Delay lua": {
		"prefix": "r.JS_Composite_Delay",
		"scope": "lua",
		"body": "r.JS_Composite_Delay({1:windowHWND}, {2:minTime}, {3:maxTime}, {4:numBitmapsWhenMax})$0"
		"description": "On WindowsOS, flickering of composited images can be improved considerably by slowing the refresh rate of the window.  The optimal refresh rate may depend on the number of composited bitmaps.\n\nminTime is the minimum refresh delay, in seconds, when only one bitmap is composited onto the window.  The delay time will increase linearly with the number of bitmaps, up to a maximum of maxTime when numBitmapsWhenMax is reached.\n\nIf both minTime and maxTime are 0, all delay settings for the window are cleared.\n\nReturns:\n * retval = 1 if successful, 0 if arguments are invalid (i.e. if maxTime < minTime, or maxBitmaps < 1).\n * If delay times have not previously been set for this window, prev time values are 0."
	},
	"JS_Composite_ListBitmaps lua": {
		"prefix": "r.JS_Composite_ListBitmaps",
		"scope": "lua",
		"body": "r.JS_Composite_ListBitmaps({1:windowHWND})$0"
		"description": "Returns all bitmaps composited to the given window.\n\nThe list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap* pointer.\n\nretval is the number of linked bitmaps found, or negative if an error occured."
	},
	"JS_Composite_Unlink lua": {
		"prefix": "r.JS_Composite_Unlink",
		"scope": "lua",
		"body": "r.JS_Composite_Unlink({1:windowHWND}, {2:bitmap}, {3:autoUpdate})$0"
		"description": "Unlinks the window and bitmap.\n\n * autoUpdate is an optional parameter. If unlinking a single bitmap and autoUpdate is true, the function will automatically re-draw the window to remove the blitted image.\n\nIf no bitmap is specified, all bitmaps composited to the window will be unlinked -- even those by other scripts."
	},
	"JS_Dialog_BrowseForFolder lua": {
		"prefix": "r.JS_Dialog_BrowseForFolder",
		"scope": "lua",
		"body": "r.JS_Dialog_BrowseForFolder({1:caption}, {2:initialFolder})$0"
		"description": "retval is 1 if a file was selected, 0 if the user cancelled the dialog, and -1 if an error occurred."
	},
	"JS_Dialog_BrowseForOpenFiles lua": {
		"prefix": "r.JS_Dialog_BrowseForOpenFiles",
		"scope": "lua",
		"body": "r.JS_Dialog_BrowseForOpenFiles({1:windowTitle}, {2:initialFolder}, {3:initialFile}, {4:extensionList}, {5:allowMultiple})$0"
		"description": "If allowMultiple is true, multiple files may be selected. The returned string is \0-separated, with the first substring containing the folder path and subsequent substrings containing the file names.\n * On macOS, the first substring may be empty, and each file name will then contain its entire path.\n * This function only allows selection of existing files, and does not allow creation of new files.\n\nextensionList is a string containing pairs of \0-terminated substrings. The last substring must be terminated by two \0 characters. Each pair defines one filter pattern:\n * The first substring in each pair describes the filter in user-readable form (for example, 'Lua script files (*.lua)') and will be displayed in the dialog box.\n * The second substring specifies the filter that the operating system must use to search for the files (for example, '*.txt'; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, '*.lua;*.eel').\n\nAn example of an extensionList string:\n'ReaScript files\0*.lua;*.eel\0Lua files (.lua)\0*.lua\0EEL files (.eel)\0*.eel\0\0'.\n\nOn macOS, file dialogs do not accept empty extensionLists, nor wildcard extensions (such as 'All files\0*.*\0\0'), so each acceptable extension must be listed explicitly. On Linux and Windows, wildcard extensions are acceptable, and if the extensionList string is empty, the dialog will display a default 'All files (*.*)' filter.\n\nretval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.\n\nDisplaying \0-separated strings:\n * REAPER's IDE and ShowConsoleMsg only display strings up to the first \0 byte. If multiple files were selected, only the first substring containing the path will be displayed. This is not a problem for Lua or EEL, which can access the full string beyond the first \0 byte as usual."
	},
	"JS_Dialog_BrowseForSaveFile lua": {
		"prefix": "r.JS_Dialog_BrowseForSaveFile",
		"scope": "lua",
		"body": "r.JS_Dialog_BrowseForSaveFile({1:windowTitle}, {2:initialFolder}, {3:initialFile}, {4:extensionList})$0"
		"description": "retval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.\n\nextensionList is as described for JS_Dialog_BrowseForOpenFiles."
	},
	"JS_Double lua": {
		"prefix": "r.JS_Double",
		"scope": "lua",
		"body": "r.JS_Double({1:pointer}, {2:offset})$0"
		"description": "Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each."
	},
	"JS_File_Stat lua": {
		"prefix": "r.JS_File_Stat",
		"scope": "lua",
		"body": "r.JS_File_Stat({1:filePath})$0"
		"description": "Returns information about a file.\n\ncTime is not implemented on all systems. If it does return a time, the value may differ depending on the OS: on WindowsOS, it may refer to the time that the file was either created or copied, whereas on Linux and macOS, it may refer to the time of last status change.\n\nretval is 0 if successful, negative if not."
	},
	"JS_GDI_Blit lua": {
		"prefix": "r.JS_GDI_Blit",
		"scope": "lua",
		"body": "r.JS_GDI_Blit({1:destHDC}, {2:dstx}, {3:dsty}, {4:sourceHDC}, {5:srcx}, {6:srxy}, {7:width}, {8:height}, {9:mode})$0"
		"description": "Blits between two device contexts, which may include LICE 'system bitmaps'.\n\nmode: Optional parameter. 'SRCCOPY' by default, or specify 'ALPHA' to enable per-pixel alpha blending.\n\nWARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect."
	},
	"JS_GDI_CreateFillBrush lua": {
		"prefix": "r.JS_GDI_CreateFillBrush",
		"scope": "lua",
		"body": "r.JS_GDI_CreateFillBrush({1:color})$0"
		"description": ""
	},
	"JS_GDI_CreateFont lua": {
		"prefix": "r.JS_GDI_CreateFont",
		"scope": "lua",
		"body": "r.JS_GDI_CreateFont({1:height}, {2:weight}, {3:angle}, {4:italic}, {5:underline}, {6:strike}, {7:fontName})$0"
		"description": "Parameters:\n * weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.\n * angle: the angle, in tenths of degrees, between the text and the x-axis of the device.\n * fontName: If empty string '', uses first font that matches the other specified attributes.\n\nNote: Text color must be set separately."
	},
	"JS_GDI_CreatePen lua": {
		"prefix": "r.JS_GDI_CreatePen",
		"scope": "lua",
		"body": "r.JS_GDI_CreatePen({1:width}, {2:color})$0"
		"description": ""
	},
	"JS_GDI_DeleteObject lua": {
		"prefix": "r.JS_GDI_DeleteObject",
		"scope": "lua",
		"body": "r.JS_GDI_DeleteObject({1:GDIObject})$0"
		"description": ""
	},
	"JS_GDI_DrawText lua": {
		"prefix": "r.JS_GDI_DrawText",
		"scope": "lua",
		"body": "r.JS_GDI_DrawText({1:deviceHDC}, {2:text}, {3:len}, {4:left}, {5:top}, {6:right}, {7:bottom}, {8:align})$0"
		"description": "Parameters:\n * align: Combination of: 'TOP', 'VCENTER', 'LEFT', 'HCENTER', 'RIGHT', 'BOTTOM', 'WORDBREAK', 'SINGLELINE', 'NOCLIP', 'CALCRECT', 'NOPREFIX' or 'ELLIPSIS'"
	},
	"JS_GDI_FillEllipse lua": {
		"prefix": "r.JS_GDI_FillEllipse",
		"scope": "lua",
		"body": "r.JS_GDI_FillEllipse({1:deviceHDC}, {2:left}, {3:top}, {4:right}, {5:bottom})$0"
		"description": ""
	},
	"JS_GDI_FillPolygon lua": {
		"prefix": "r.JS_GDI_FillPolygon",
		"scope": "lua",
		"body": "r.JS_GDI_FillPolygon({1:deviceHDC}, {2:packedX}, {3:packedY}, {4:numPoints})$0"
		"description": "packedX and packedY are strings of points, each packed as '<i4'."
	},
	"JS_GDI_FillRect lua": {
		"prefix": "r.JS_GDI_FillRect",
		"scope": "lua",
		"body": "r.JS_GDI_FillRect({1:deviceHDC}, {2:left}, {3:top}, {4:right}, {5:bottom})$0"
		"description": ""
	},
	"JS_GDI_FillRoundRect lua": {
		"prefix": "r.JS_GDI_FillRoundRect",
		"scope": "lua",
		"body": "r.JS_GDI_FillRoundRect({1:deviceHDC}, {2:left}, {3:top}, {4:right}, {5:bottom}, {6:xrnd}, {7:yrnd})$0"
		"description": ""
	},
	"JS_GDI_GetClientDC lua": {
		"prefix": "r.JS_GDI_GetClientDC",
		"scope": "lua",
		"body": "r.JS_GDI_GetClientDC({1:windowHWND})$0"
		"description": "Returns the device context for the client area of the specified window."
	},
	"JS_GDI_GetScreenDC lua": {
		"prefix": "r.JS_GDI_GetScreenDC",
		"scope": "lua",
		"body": "r.JS_GDI_GetScreenDC()$0"
		"description": "Returns a device context for the entire screen.\n\nWARNING: Only available on Windows, not Linux or macOS."
	},
	"JS_GDI_GetSysColor lua": {
		"prefix": "r.JS_GDI_GetSysColor",
		"scope": "lua",
		"body": "r.JS_GDI_GetSysColor({1:GUIElement})$0"
		"description": ""
	},
	"JS_GDI_GetTextColor lua": {
		"prefix": "r.JS_GDI_GetTextColor",
		"scope": "lua",
		"body": "r.JS_GDI_GetTextColor({1:deviceHDC})$0"
		"description": ""
	},
	"JS_GDI_GetWindowDC lua": {
		"prefix": "r.JS_GDI_GetWindowDC",
		"scope": "lua",
		"body": "r.JS_GDI_GetWindowDC({1:windowHWND})$0"
		"description": "Returns the device context for the entire window, including title bar and frame."
	},
	"JS_GDI_Line lua": {
		"prefix": "r.JS_GDI_Line",
		"scope": "lua",
		"body": "r.JS_GDI_Line({1:deviceHDC}, {2:x1}, {3:y1}, {4:x2}, {5:y2})$0"
		"description": ""
	},
	"JS_GDI_Polyline lua": {
		"prefix": "r.JS_GDI_Polyline",
		"scope": "lua",
		"body": "r.JS_GDI_Polyline({1:deviceHDC}, {2:packedX}, {3:packedY}, {4:numPoints})$0"
		"description": "packedX and packedY are strings of points, each packed as '<i4'."
	},
	"JS_GDI_ReleaseDC lua": {
		"prefix": "r.JS_GDI_ReleaseDC",
		"scope": "lua",
		"body": "r.JS_GDI_ReleaseDC({1:deviceHDC}, {2:windowHWND})$0"
		"description": "To release a window HDC, both arguments must be supplied: the HWND as well as the HDC.  To release a screen DC, only the HDC needs to be supplied.  \n\nFor compatibility with previous versions, the HWND and HDC can be supplied in any order.\n\nNOTE: Any GDI HDC should be released immediately after drawing, and deferred scripts should get and release new DCs in each cycle."
	},
	"JS_GDI_SelectObject lua": {
		"prefix": "r.JS_GDI_SelectObject",
		"scope": "lua",
		"body": "r.JS_GDI_SelectObject({1:deviceHDC}, {2:GDIObject})$0"
		"description": "Activates a font, pen, or fill brush for subsequent drawing in the specified device context."
	},
	"JS_GDI_SetPixel lua": {
		"prefix": "r.JS_GDI_SetPixel",
		"scope": "lua",
		"body": "r.JS_GDI_SetPixel({1:deviceHDC}, {2:x}, {3:y}, {4:color})$0"
		"description": ""
	},
	"JS_GDI_SetTextBkColor lua": {
		"prefix": "r.JS_GDI_SetTextBkColor",
		"scope": "lua",
		"body": "r.JS_GDI_SetTextBkColor({1:deviceHDC}, {2:color})$0"
		"description": ""
	},
	"JS_GDI_SetTextBkMode lua": {
		"prefix": "r.JS_GDI_SetTextBkMode",
		"scope": "lua",
		"body": "r.JS_GDI_SetTextBkMode({1:deviceHDC}, {2:mode})$0"
		"description": ""
	},
	"JS_GDI_SetTextColor lua": {
		"prefix": "r.JS_GDI_SetTextColor",
		"scope": "lua",
		"body": "r.JS_GDI_SetTextColor({1:deviceHDC}, {2:color})$0"
		"description": ""
	},
	"JS_GDI_StretchBlit lua": {
		"prefix": "r.JS_GDI_StretchBlit",
		"scope": "lua",
		"body": "r.JS_GDI_StretchBlit({1:destHDC}, {2:dstx}, {3:dsty}, {4:dstw}, {5:dsth}, {6:sourceHDC}, {7:srcx}, {8:srxy}, {9:srcw}, {10:srch}, {11:mode})$0"
		"description": "Blits between two device contexts, which may include LICE 'system bitmaps'.\n\nmodeOptional: 'SRCCOPY' by default, or specify 'ALPHA' to enable per-pixel alpha blending.\n\nWARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect."
	},
	"JS_Header_GetItemCount lua": {
		"prefix": "r.JS_Header_GetItemCount",
		"scope": "lua",
		"body": "r.JS_Header_GetItemCount({1:headerHWND})$0"
		"description": ""
	},
	"JS_Int lua": {
		"prefix": "r.JS_Int",
		"scope": "lua",
		"body": "r.JS_Int({1:pointer}, {2:offset})$0"
		"description": "Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each."
	},
	"JS_LICE_AlterBitmapHSV lua": {
		"prefix": "r.JS_LICE_AlterBitmapHSV",
		"scope": "lua",
		"body": "r.JS_LICE_AlterBitmapHSV({1:bitmap}, {2:hue}, {3:saturation}, {4:value})$0"
		"description": "Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)"
	},
	"JS_LICE_AlterRectHSV lua": {
		"prefix": "r.JS_LICE_AlterRectHSV",
		"scope": "lua",
		"body": "r.JS_LICE_AlterRectHSV({1:bitmap}, {2:x}, {3:y}, {4:w}, {5:h}, {6:hue}, {7:saturation}, {8:value})$0"
		"description": "Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)"
	},
	"JS_LICE_Arc lua": {
		"prefix": "r.JS_LICE_Arc",
		"scope": "lua",
		"body": "r.JS_LICE_Arc({1:bitmap}, {2:cx}, {3:cy}, {4:r}, {5:minAngle}, {6:maxAngle}, {7:color}, {8:alpha}, {9:mode}, {10:antialias})$0"
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_ArrayAllBitmaps lua": {
		"prefix": "r.JS_LICE_ArrayAllBitmaps",
		"scope": "lua",
		"body": "r.JS_LICE_ArrayAllBitmaps({1:reaperarray})$0"
		"description": ""
	},
	"JS_LICE_Bezier lua": {
		"prefix": "r.JS_LICE_Bezier",
		"scope": "lua",
		"body": "r.JS_LICE_Bezier({1:bitmap}, {2:xstart}, {3:ystart}, {4:xctl1}, {5:yctl1}, {6:xctl2}, {7:yctl2}, {8:xend}, {9:yend}, {10:tol}, {11:color}, {12:alpha}, {13:mode}, {14:antialias})$0"
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_Blit lua": {
		"prefix": "r.JS_LICE_Blit",
		"scope": "lua",
		"body": "r.JS_LICE_Blit({1:destBitmap}, {2:dstx}, {3:dsty}, {4:sourceBitmap}, {5:srcx}, {6:srcy}, {7:width}, {8:height}, {9:alpha}, {10:mode})$0"
		"description": "Standard LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\n\nIn addition to the standard LICE modes, LICE_Blit also offers:\n * 'CHANCOPY_XTOY', with X and Y any of the four channels, A, R, G or B. (CHANCOPY_ATOA is similar to MASK mode.)\n * 'BLUR'\n * 'ALPHAMUL', which overwrites the destination with a per-pixel alpha-multiplied copy of the source. (Similar to first clearing the destination with 0x00000000 and then blitting with 'COPY,ALPHA'.)"
	},
	"JS_LICE_Circle lua": {
		"prefix": "r.JS_LICE_Circle",
		"scope": "lua",
		"body": "r.JS_LICE_Circle({1:bitmap}, {2:cx}, {3:cy}, {4:r}, {5:color}, {6:alpha}, {7:mode}, {8:antialias})$0"
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_Clear lua": {
		"prefix": "r.JS_LICE_Clear",
		"scope": "lua",
		"body": "r.JS_LICE_Clear({1:bitmap}, {2:color})$0"
		"description": ""
	},
	"JS_LICE_CreateBitmap lua": {
		"prefix": "r.JS_LICE_CreateBitmap",
		"scope": "lua",
		"body": "r.JS_LICE_CreateBitmap({1:isSysBitmap}, {2:width}, {3:height})$0"
		"description": ""
	},
	"JS_LICE_CreateFont lua": {
		"prefix": "r.JS_LICE_CreateFont",
		"scope": "lua",
		"body": "r.JS_LICE_CreateFont()$0"
		"description": ""
	},
	"JS_LICE_DestroyBitmap lua": {
		"prefix": "r.JS_LICE_DestroyBitmap",
		"scope": "lua",
		"body": "r.JS_LICE_DestroyBitmap({1:bitmap})$0"
		"description": "Deletes the bitmap, and also unlinks bitmap from any composited window."
	},
	"JS_LICE_DestroyFont lua": {
		"prefix": "r.JS_LICE_DestroyFont",
		"scope": "lua",
		"body": "r.JS_LICE_DestroyFont({1:LICEFont})$0"
		"description": ""
	},
	"JS_LICE_DrawChar lua": {
		"prefix": "r.JS_LICE_DrawChar",
		"scope": "lua",
		"body": "r.JS_LICE_DrawChar({1:bitmap}, {2:x}, {3:y}, {4:c}, {5:color}, {6:alpha}, {7:mode})$0"
		"description": ""
	},
	"JS_LICE_DrawText lua": {
		"prefix": "r.JS_LICE_DrawText",
		"scope": "lua",
		"body": "r.JS_LICE_DrawText({1:bitmap}, {2:LICEFont}, {3:text}, {4:textLen}, {5:x1}, {6:y1}, {7:x2}, {8:y2})$0"
		"description": ""
	},
	"JS_LICE_FillCircle lua": {
		"prefix": "r.JS_LICE_FillCircle",
		"scope": "lua",
		"body": "r.JS_LICE_FillCircle({1:bitmap}, {2:cx}, {3:cy}, {4:r}, {5:color}, {6:alpha}, {7:mode}, {8:antialias})$0"
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_FillPolygon lua": {
		"prefix": "r.JS_LICE_FillPolygon",
		"scope": "lua",
		"body": "r.JS_LICE_FillPolygon({1:bitmap}, {2:packedX}, {3:packedY}, {4:numPoints}, {5:color}, {6:alpha}, {7:mode})$0"
		"description": "packedX and packedY are two strings of coordinates, each packed as '<i4'.\n\nLICE modes : 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_FillRect lua": {
		"prefix": "r.JS_LICE_FillRect",
		"scope": "lua",
		"body": "r.JS_LICE_FillRect({1:bitmap}, {2:x}, {3:y}, {4:w}, {5:h}, {6:color}, {7:alpha}, {8:mode})$0"
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_FillTriangle lua": {
		"prefix": "r.JS_LICE_FillTriangle",
		"scope": "lua",
		"body": "r.JS_LICE_FillTriangle({1:bitmap}, {2:x1}, {3:y1}, {4:x2}, {5:y2}, {6:x3}, {7:y3}, {8:color}, {9:alpha}, {10:mode})$0"
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_GetDC lua": {
		"prefix": "r.JS_LICE_GetDC",
		"scope": "lua",
		"body": "r.JS_LICE_GetDC({1:bitmap})$0"
		"description": ""
	},
	"JS_LICE_GetHeight lua": {
		"prefix": "r.JS_LICE_GetHeight",
		"scope": "lua",
		"body": "r.JS_LICE_GetHeight({1:bitmap})$0"
		"description": ""
	},
	"JS_LICE_GetPixel lua": {
		"prefix": "r.JS_LICE_GetPixel",
		"scope": "lua",
		"body": "r.JS_LICE_GetPixel({1:bitmap}, {2:x}, {3:y})$0"
		"description": "Returns the color of the specified pixel."
	},
	"JS_LICE_GetWidth lua": {
		"prefix": "r.JS_LICE_GetWidth",
		"scope": "lua",
		"body": "r.JS_LICE_GetWidth({1:bitmap})$0"
		"description": ""
	},
	"JS_LICE_GradRect lua": {
		"prefix": "r.JS_LICE_GradRect",
		"scope": "lua",
		"body": "r.JS_LICE_GradRect({1:bitmap}, {2:dstx}, {3:dsty}, {4:dstw}, {5:dsth}, {6:ir}, {7:ig}, {8:ib}, {9:ia}, {10:drdx}, {11:dgdx}, {12:dbdx}, {13:dadx}, {14:drdy}, {15:dgdy}, {16:dbdy}, {17:dady}, {18:mode})$0"
		"description": ""
	},
	"JS_LICE_IsFlipped lua": {
		"prefix": "r.JS_LICE_IsFlipped",
		"scope": "lua",
		"body": "r.JS_LICE_IsFlipped({1:bitmap})$0"
		"description": ""
	},
	"JS_LICE_Line lua": {
		"prefix": "r.JS_LICE_Line",
		"scope": "lua",
		"body": "r.JS_LICE_Line({1:bitmap}, {2:x1}, {3:y1}, {4:x2}, {5:y2}, {6:color}, {7:alpha}, {8:mode}, {9:antialias})$0"
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_ListAllBitmaps lua": {
		"prefix": "r.JS_LICE_ListAllBitmaps",
		"scope": "lua",
		"body": "r.JS_LICE_ListAllBitmaps()$0"
		"description": ""
	},
	"JS_LICE_LoadJPG lua": {
		"prefix": "r.JS_LICE_LoadJPG",
		"scope": "lua",
		"body": "r.JS_LICE_LoadJPG({1:filename})$0"
		"description": "Returns a system LICE bitmap containing the JPEG."
	},
	"JS_LICE_LoadJPGFromMemory lua": {
		"prefix": "r.JS_LICE_LoadJPGFromMemory",
		"scope": "lua",
		"body": "r.JS_LICE_LoadJPGFromMemory({1:buffer}, {2:bufsize})$0"
		"description": "Returns a system LICE bitmap containing the JPEG."
	},
	"JS_LICE_LoadPNG lua": {
		"prefix": "r.JS_LICE_LoadPNG",
		"scope": "lua",
		"body": "r.JS_LICE_LoadPNG({1:filename})$0"
		"description": "Returns a system LICE bitmap containing the PNG."
	},
	"JS_LICE_LoadPNGFromMemory lua": {
		"prefix": "r.JS_LICE_LoadPNGFromMemory",
		"scope": "lua",
		"body": "r.JS_LICE_LoadPNGFromMemory({1:buffer}, {2:bufsize})$0"
		"description": "Returns a system LICE bitmap containing the PNG."
	},
	"JS_LICE_MeasureText lua": {
		"prefix": "r.JS_LICE_MeasureText",
		"scope": "lua",
		"body": "r.JS_LICE_MeasureText({1:text})$0"
		"description": ""
	},
	"JS_LICE_ProcessRect lua": {
		"prefix": "r.JS_LICE_ProcessRect",
		"scope": "lua",
		"body": "r.JS_LICE_ProcessRect({1:bitmap}, {2:x}, {3:y}, {4:w}, {5:h}, {6:mode}, {7:operand})$0"
		"description": "Applies bitwise operations to each pixel in the target rectangle.\n\noperand: a color in 0xAARRGGBB format.\n\nmodes:\n * 'XOR', 'OR' or 'AND'.\n * 'SET_XYZ', with XYZ any combination of A, R, G, and B: copies the specified channels from operand to the bitmap. (Useful for setting the alpha values of a bitmap.)\n * 'ALPHAMUL': Performs alpha pre-multiplication on each pixel in the rect. operand is ignored in this mode. (On WindowsOS, GDI_Blit does not perform alpha multiplication on the fly, and a separate alpha pre-multiplication step is therefore required.)\n\nNOTE:\nLICE_Blit and LICE_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5:\nreaper.JS_LICE_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, 'ADD')."
	},
	"JS_LICE_PutPixel lua": {
		"prefix": "r.JS_LICE_PutPixel",
		"scope": "lua",
		"body": "r.JS_LICE_PutPixel({1:bitmap}, {2:x}, {3:y}, {4:color}, {5:alpha}, {6:mode})$0"
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_Resize lua": {
		"prefix": "r.JS_LICE_Resize",
		"scope": "lua",
		"body": "r.JS_LICE_Resize({1:bitmap}, {2:width}, {3:height})$0"
		"description": ""
	},
	"JS_LICE_RotatedBlit lua": {
		"prefix": "r.JS_LICE_RotatedBlit",
		"scope": "lua",
		"body": "r.JS_LICE_RotatedBlit({1:destBitmap}, {2:dstx}, {3:dsty}, {4:dstw}, {5:dsth}, {6:sourceBitmap}, {7:srcx}, {8:srcy}, {9:srcw}, {10:srch}, {11:angle}, {12:rotxcent}, {13:rotycent}, {14:cliptosourcerect}, {15:alpha}, {16:mode})$0"
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending."
	},
	"JS_LICE_RoundRect lua": {
		"prefix": "r.JS_LICE_RoundRect",
		"scope": "lua",
		"body": "r.JS_LICE_RoundRect({1:bitmap}, {2:x}, {3:y}, {4:w}, {5:h}, {6:cornerradius}, {7:color}, {8:alpha}, {9:mode}, {10:antialias})$0"
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_ScaledBlit lua": {
		"prefix": "r.JS_LICE_ScaledBlit",
		"scope": "lua",
		"body": "r.JS_LICE_ScaledBlit({1:destBitmap}, {2:dstx}, {3:dsty}, {4:dstw}, {5:dsth}, {6:srcBitmap}, {7:srcx}, {8:srcy}, {9:srcw}, {10:srch}, {11:alpha}, {12:mode})$0"
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending."
	},
	"JS_LICE_SetAlphaFromColorMask lua": {
		"prefix": "r.JS_LICE_SetAlphaFromColorMask",
		"scope": "lua",
		"body": "r.JS_LICE_SetAlphaFromColorMask({1:bitmap}, {2:colorRGB})$0"
		"description": "Sets all pixels that match the given color's RGB values to fully transparent, and all other pixels to fully opaque.  (All pixels' RGB values remain unchanged.)"
	},
	"JS_LICE_SetFontBkColor lua": {
		"prefix": "r.JS_LICE_SetFontBkColor",
		"scope": "lua",
		"body": "r.JS_LICE_SetFontBkColor({1:LICEFont}, {2:color})$0"
		"description": "Sets the color of the font background."
	},
	"JS_LICE_SetFontColor lua": {
		"prefix": "r.JS_LICE_SetFontColor",
		"scope": "lua",
		"body": "r.JS_LICE_SetFontColor({1:LICEFont}, {2:color})$0"
		"description": ""
	},
	"JS_LICE_SetFontFXColor lua": {
		"prefix": "r.JS_LICE_SetFontFXColor",
		"scope": "lua",
		"body": "r.JS_LICE_SetFontFXColor({1:LICEFont}, {2:color})$0"
		"description": "Sets the color of font FX such as shadow."
	},
	"JS_LICE_SetFontFromGDI lua": {
		"prefix": "r.JS_LICE_SetFontFromGDI",
		"scope": "lua",
		"body": "r.JS_LICE_SetFontFromGDI({1:LICEFont}, {2:GDIFont}, {3:moreFormats})$0"
		"description": "Converts a GDI font into a LICE font.\n\nThe font can be modified by the following flags, in a comma-separated list:\n'VERTICAL', 'BOTTOMUP', 'NATIVE', 'BLUR', 'INVERT', 'MONO', 'SHADOW' or 'OUTLINE'."
	},
	"JS_LICE_WriteJPG lua": {
		"prefix": "r.JS_LICE_WriteJPG",
		"scope": "lua",
		"body": "r.JS_LICE_WriteJPG({1:filename}, {2:bitmap}, {3:quality}, {4:forceBaseline})$0"
		"description": "Parameters:\n\n * quality is an integer in the range 1..100.\n * forceBaseline is an optional boolean parameter that ensures compatibility with all JPEG viewers by preventing too low quality, 'cubist' settings."
	},
	"JS_LICE_WritePNG lua": {
		"prefix": "r.JS_LICE_WritePNG",
		"scope": "lua",
		"body": "r.JS_LICE_WritePNG({1:filename}, {2:bitmap}, {3:wantAlpha})$0"
		"description": ""
	},
	"JS_ListView_EnsureVisible lua": {
		"prefix": "r.JS_ListView_EnsureVisible",
		"scope": "lua",
		"body": "r.JS_ListView_EnsureVisible({1:listviewHWND}, {2:index}, {3:partialOK})$0"
		"description": ""
	},
	"JS_ListView_EnumSelItems lua": {
		"prefix": "r.JS_ListView_EnumSelItems",
		"scope": "lua",
		"body": "r.JS_ListView_EnumSelItems({1:listviewHWND}, {2:index})$0"
		"description": "Returns the index of the next selected list item with index greater that the specified number. Returns -1 if no selected items left."
	},
	"JS_ListView_GetFocusedItem lua": {
		"prefix": "r.JS_ListView_GetFocusedItem",
		"scope": "lua",
		"body": "r.JS_ListView_GetFocusedItem({1:listviewHWND})$0"
		"description": "Returns the index and text of the focused item, if any."
	},
	"JS_ListView_GetHeader lua": {
		"prefix": "r.JS_ListView_GetHeader",
		"scope": "lua",
		"body": "r.JS_ListView_GetHeader({1:listviewHWND})$0"
		"description": ""
	},
	"JS_ListView_GetItem lua": {
		"prefix": "r.JS_ListView_GetItem",
		"scope": "lua",
		"body": "r.JS_ListView_GetItem({1:listviewHWND}, {2:index}, {3:subItem})$0"
		"description": "Returns the text and state of specified item."
	},
	"JS_ListView_GetItemCount lua": {
		"prefix": "r.JS_ListView_GetItemCount",
		"scope": "lua",
		"body": "r.JS_ListView_GetItemCount({1:listviewHWND})$0"
		"description": ""
	},
	"JS_ListView_GetItemRect lua": {
		"prefix": "r.JS_ListView_GetItemRect",
		"scope": "lua",
		"body": "r.JS_ListView_GetItemRect({1:listviewHWND}, {2:index})$0"
		"description": "Returns client coordinates of the item."
	},
	"JS_ListView_GetItemState lua": {
		"prefix": "r.JS_ListView_GetItemState",
		"scope": "lua",
		"body": "r.JS_ListView_GetItemState({1:listviewHWND}, {2:index})$0"
		"description": "State is a bitmask:\n1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\n\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell."
	},
	"JS_ListView_GetItemText lua": {
		"prefix": "r.JS_ListView_GetItemText",
		"scope": "lua",
		"body": "r.JS_ListView_GetItemText({1:listviewHWND}, {2:index}, {3:subItem})$0"
		"description": ""
	},
	"JS_ListView_GetSelectedCount lua": {
		"prefix": "r.JS_ListView_GetSelectedCount",
		"scope": "lua",
		"body": "r.JS_ListView_GetSelectedCount({1:listviewHWND})$0"
		"description": ""
	},
	"JS_ListView_GetTopIndex lua": {
		"prefix": "r.JS_ListView_GetTopIndex",
		"scope": "lua",
		"body": "r.JS_ListView_GetTopIndex({1:listviewHWND})$0"
		"description": ""
	},
	"JS_ListView_HitTest lua": {
		"prefix": "r.JS_ListView_HitTest",
		"scope": "lua",
		"body": "r.JS_ListView_HitTest({1:listviewHWND}, {2:clientX}, {3:clientY})$0"
		"description": ""
	},
	"JS_ListView_ListAllSelItems lua": {
		"prefix": "r.JS_ListView_ListAllSelItems",
		"scope": "lua",
		"body": "r.JS_ListView_ListAllSelItems({1:listviewHWND})$0"
		"description": "Returns the indices of all selected items as a comma-separated list.\n\n * retval: Number of selected items found; negative or zero if an error occured."
	},
	"JS_ListView_SetItemState lua": {
		"prefix": "r.JS_ListView_SetItemState",
		"scope": "lua",
		"body": "r.JS_ListView_SetItemState({1:listviewHWND}, {2:index}, {3:state}, {4:mask})$0"
		"description": "The mask parameter specifies the state bits that must be set, and the state parameter specifies the new values for those bits.\n\n1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\n\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell."
	},
	"JS_ListView_SetItemText lua": {
		"prefix": "r.JS_ListView_SetItemText",
		"scope": "lua",
		"body": "r.JS_ListView_SetItemText({1:listviewHWND}, {2:index}, {3:subItem}, {4:text})$0"
		"description": "Currently, this fuction only accepts ASCII text."
	},
	"JS_Localize lua": {
		"prefix": "r.JS_Localize",
		"scope": "lua",
		"body": "r.JS_Localize({1:USEnglish}, {2:LangPackSection})$0"
		"description": "Returns the translation of the given US English text, according to the currently loaded Language Pack.\n\nParameters:\n * LangPackSection: Language Packs are divided into sections such as 'common' or 'DLG_102'.\n * In Lua, by default, text of up to 1024 chars can be returned. To increase (or reduce) the default buffer size, a string and size can be included as optional 3rd and 4th arguments.\n\nExample: reaper.JS_Localize('Actions', 'common', '', 20)"
	},
	"JS_MIDIEditor_ArrayAll lua": {
		"prefix": "r.JS_MIDIEditor_ArrayAll",
		"scope": "lua",
		"body": "r.JS_MIDIEditor_ArrayAll({1:reaperarray})$0"
		"description": "Finds all open MIDI windows (whether docked or not).\n\n * retval: The number of MIDI editor windows found; negative if an error occurred.\n\n * The address of each MIDI editor window is stored in the provided reaper.array. Each address can be converted to a REAPER object (HWND) by the function JS_Window_HandleFromAddress."
	},
	"JS_MIDIEditor_ListAll lua": {
		"prefix": "r.JS_MIDIEditor_ListAll",
		"scope": "lua",
		"body": "r.JS_MIDIEditor_ListAll()$0"
		"description": "Finds all open MIDI windows (whether docked or not).\n\n * retval: The number of MIDI editor windows found; negative if an error occurred.\n\n * list: Comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress."
	},
	"JS_Mem_Alloc lua": {
		"prefix": "r.JS_Mem_Alloc",
		"scope": "lua",
		"body": "r.JS_Mem_Alloc({1:sizeBytes})$0"
		"description": "Allocates memory for general use by functions that require memory buffers."
	},
	"JS_Mem_Free lua": {
		"prefix": "r.JS_Mem_Free",
		"scope": "lua",
		"body": "r.JS_Mem_Free({1:mallocPointer})$0"
		"description": "Frees memory that was previously allocated by JS_Mem_Alloc."
	},
	"JS_Mem_FromString lua": {
		"prefix": "r.JS_Mem_FromString",
		"scope": "lua",
		"body": "r.JS_Mem_FromString({1:mallocPointer}, {2:offset}, {3:packedString}, {4:stringLength})$0"
		"description": "Copies a packed string into a memory buffer."
	},
	"JS_Mouse_GetCursor lua": {
		"prefix": "r.JS_Mouse_GetCursor",
		"scope": "lua",
		"body": "r.JS_Mouse_GetCursor()$0"
		"description": "On Windows, retrieves a handle to the current mouse cursor.\nOn Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL."
	},
	"JS_Mouse_GetState lua": {
		"prefix": "r.JS_Mouse_GetState",
		"scope": "lua",
		"body": "r.JS_Mouse_GetState({1:flags})$0"
		"description": "Retrieves the states of mouse buttons and modifiers keys.\n\nParameters:\n * flags, state: The parameter and the return value both use the same format as gfx.mouse_cap. For example, to get the states of the left mouse button and the ctrl key, use flags = 0b00000101."
	},
	"JS_Mouse_LoadCursor lua": {
		"prefix": "r.JS_Mouse_LoadCursor",
		"scope": "lua",
		"body": "r.JS_Mouse_LoadCursor({1:cursorNumber})$0"
		"description": "Loads a cursor by number.\n\ncursorNumber: Same as used for gfx.setcursor, and includes some of Windows' predefined cursors (with numbers > 32000; refer to documentation for the Win32 C++ function LoadCursor), and REAPER's own cursors (with numbers < 2000).\n\nIf successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor."
	},
	"JS_Mouse_LoadCursorFromFile lua": {
		"prefix": "r.JS_Mouse_LoadCursorFromFile",
		"scope": "lua",
		"body": "r.JS_Mouse_LoadCursorFromFile({1:pathAndFileName}, {2:forceNewLoad})$0"
		"description": "Loads a cursor from a .cur file.\n\nforceNewLoad is an optional boolean parameter:\n * If omitted or false, and if the cursor file has already been loaded previously during the REAPER session by any script, the file will not be re-loaded, and the existing handle will be returned.\n * If true, the file will be re-loaded and a new handle will be returned.\n * WARNING: Each time that a cursor file is re-loaded, the number of GDI objects increases for the entire duration of the REAPER session.\n\nIf successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor."
	},
	"JS_Mouse_SetCursor lua": {
		"prefix": "r.JS_Mouse_SetCursor",
		"scope": "lua",
		"body": "r.JS_Mouse_SetCursor({1:cursorHandle})$0"
		"description": "Sets the mouse cursor.  (Only lasts while script is running, and for a single 'defer' cycle.)"
	},
	"JS_Mouse_SetPosition lua": {
		"prefix": "r.JS_Mouse_SetPosition",
		"scope": "lua",
		"body": "r.JS_Mouse_SetPosition({1:x}, {2:y})$0"
		"description": "Moves the mouse cursor to the specified screen coordinates.\n\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward."
	},
	"JS_ReaScriptAPI_Version lua": {
		"prefix": "r.JS_ReaScriptAPI_Version",
		"scope": "lua",
		"body": "r.JS_ReaScriptAPI_Version()$0"
		"description": "Returns the version of the js_ReaScriptAPI extension."
	},
	"JS_String lua": {
		"prefix": "r.JS_String",
		"scope": "lua",
		"body": "r.JS_String({1:pointer}, {2:offset}, {3:lengthChars})$0"
		"description": "Returns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each."
	},
	"JS_VKeys_GetDown lua": {
		"prefix": "r.JS_VKeys_GetDown",
		"scope": "lua",
		"body": "r.JS_VKeys_GetDown({1:cutoffTime})$0"
		"description": "Returns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.\n\nNotes:\n * Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.\n * Auto-repeated KEYDOWN messages are ignored."
	},
	"JS_VKeys_GetState lua": {
		"prefix": "r.JS_VKeys_GetState",
		"scope": "lua",
		"body": "r.JS_VKeys_GetState({1:cutoffTime})$0"
		"description": "Retrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.\n\ncutoffTime: A key is only regarded as down if it sent a KEYDOWN message after the cut-off time, not followed by KEYUP. (This is useful for excluding old KEYDOWN messages that weren't properly followed by KEYUP.) \nIf cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise().\nIf cutoffTime is negative, it is relative to the current time.\n\nNotes:\n * Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.\n * Auto-repeated KEYDOWN messages are ignored."
	},
	"JS_VKeys_GetUp lua": {
		"prefix": "r.JS_VKeys_GetUp",
		"scope": "lua",
		"body": "r.JS_VKeys_GetUp({1:cutoffTime})$0"
		"description": "Return a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.\n\nNote: Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead."
	},
	"JS_VKeys_Intercept lua": {
		"prefix": "r.JS_VKeys_Intercept",
		"scope": "lua",
		"body": "r.JS_VKeys_Intercept({1:keyCode}, {2:intercept})$0"
		"description": "Intercepting (blocking) virtual keys work similar to the native function PreventUIRefresh:  Each key has a (non-negative) intercept state, and the key is passed through as usual if the state equals 0, or blocked if the state is greater than 0.\n\nkeyCode: The virtual key code of the key, or -1 to change the state of all keys.\n\nintercept: A script can increase the intercept state by passing +1, or lower the state by passing -1.  Multiple scripts can block the same key, and the intercept state may reach up to 255. If zero is passed, the intercept state is not changed, but the current state is returned.\n\nReturns: If keyCode refers to a single key, the intercept state of that key is returned.  If keyCode = -1, the state of the key that is most strongly blocked (highest intercept state) is returned."
	},
	"JS_WindowMessage_Intercept lua": {
		"prefix": "r.JS_WindowMessage_Intercept",
		"scope": "lua",
		"body": "r.JS_WindowMessage_Intercept({1:windowHWND}, {2:message}, {3:passThrough})$0"
		"description": "Begins intercepting a window message type to specified window.\n\nParameters:\n * message: a single message type to be intercepted, either in WM_ or hexadecimal format. For example 'WM_SETCURSOR' or '0x0020'.\n * passThrough: Whether message should be blocked (false) or passed through (true) to the window.\n    For more information on message codes, refer to the Win32 C++ API documentation.\n    All WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.\n\nReturns:\n * 1: Success.\n * 0: The message type is already being intercepted by another script.\n * -2: message string could not be parsed.\n * -3: Failure getting original window process / window not valid.\n * -6: Could not obtain the window client HDC.\n\nNotes:\n * Intercepted messages can be polled using JS_WindowMessage_Peek.\n * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.\n * Mouse events are typically received by the child window under the mouse, not the parent window.\nKeyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions."
	},
	"JS_WindowMessage_InterceptList lua": {
		"prefix": "r.JS_WindowMessage_InterceptList",
		"scope": "lua",
		"body": "r.JS_WindowMessage_InterceptList({1:windowHWND}, {2:messages})$0"
		"description": "Begins intercepting window messages to specified window.\n\nParameters:\n * messages: comma-separated string of message types to be intercepted (either in WM_ or hexadecimal format), each with a 'block' or 'passthrough' modifier to specify whether the message should be blocked or passed through to the window. For example 'WM_SETCURSOR:block, 0x0201:passthrough'.\n    For more information on message codes, refer to the Win32 C++ API documentation.\n    All WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.\n\nReturns:\n * 1: Success.\n * 0: The message type is already being intercepted by another script.\n * -1: windowHWND is not a valid window.\n * -2: message string could not be parsed.\n * -3: Failure getting original window process.\n * -6: COuld not obtain the window client HDC.\n\nNotes:\n * Intercepted messages can be polled using JS_WindowMessage_Peek.\n * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts."
	},
	"JS_WindowMessage_ListIntercepts lua": {
		"prefix": "r.JS_WindowMessage_ListIntercepts",
		"scope": "lua",
		"body": "r.JS_WindowMessage_ListIntercepts({1:windowHWND})$0"
		"description": "Returns a string with a list of all message types currently being intercepted for the specified window."
	},
	"JS_WindowMessage_PassThrough lua": {
		"prefix": "r.JS_WindowMessage_PassThrough",
		"scope": "lua",
		"body": "r.JS_WindowMessage_PassThrough({1:windowHWND}, {2:message}, {3:passThrough})$0"
		"description": "Changes the passthrough setting of a message type that is already being intercepted.\n\nReturns 1 if successful, 0 if the message type is not yet being intercepted, or -2 if the argument could not be parsed."
	},
	"JS_WindowMessage_Peek lua": {
		"prefix": "r.JS_WindowMessage_Peek",
		"scope": "lua",
		"body": "r.JS_WindowMessage_Peek({1:windowHWND}, {2:message})$0"
		"description": "Polls the state of an intercepted message.\n\nParameters:\n * message: String containing a single message name, such as 'WM_SETCURSOR', or in hexadecimal format, '0x0020'.\n (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n\nReturns:\n * A retval of false indicates that the message type is not being intercepted in the specified window.\n * All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.\n * For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.\n * For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.\n * wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned."
	},
	"JS_WindowMessage_Post lua": {
		"prefix": "r.JS_WindowMessage_Post",
		"scope": "lua",
		"body": "r.JS_WindowMessage_Post({1:windowHWND}, {2:message}, {3:wParam}, {4:wParamHighWord}, {5:lParam}, {6:lParamHighWord})$0"
		"description": "If the specified window and message type are not currently being intercepted by a script, this function will post the message in the message queue of the specified window, and return without waiting.\n\nIf the window and message type are currently being intercepted, the message will be sent directly to the original window process, similar to WindowMessage_Send, thereby skipping any intercepts.\n\nParameters:\n * message: String containing a single message name, such as 'WM_SETCURSOR', or in hexadecimal format, '0x0020'.\n (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n * wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\n\nNotes:\n * For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.\n * Messages should only be sent to windows that were created from the main thread.\n * Useful for simulating mouse clicks and calling mouse modifier actions from scripts."
	},
	"JS_WindowMessage_Release lua": {
		"prefix": "r.JS_WindowMessage_Release",
		"scope": "lua",
		"body": "r.JS_WindowMessage_Release({1:windowHWND}, {2:messages})$0"
		"description": "Release intercepts of specified message types.\n\nParameters:\n * messages: 'WM_SETCURSOR,WM_MOUSEHWHEEL' or '0x0020,0x020E', for example."
	},
	"JS_WindowMessage_ReleaseAll lua": {
		"prefix": "r.JS_WindowMessage_ReleaseAll",
		"scope": "lua",
		"body": "r.JS_WindowMessage_ReleaseAll()$0"
		"description": "Release script intercepts of window messages for all windows."
	},
	"JS_WindowMessage_ReleaseWindow lua": {
		"prefix": "r.JS_WindowMessage_ReleaseWindow",
		"scope": "lua",
		"body": "r.JS_WindowMessage_ReleaseWindow({1:windowHWND})$0"
		"description": "Release script intercepts of window messages for specified window."
	},
	"JS_WindowMessage_Send lua": {
		"prefix": "r.JS_WindowMessage_Send",
		"scope": "lua",
		"body": "r.JS_WindowMessage_Send({1:windowHWND}, {2:message}, {3:wParam}, {4:wParamHighWord}, {5:lParam}, {6:lParamHighWord})$0"
		"description": "Sends a message to the specified window by calling the window process directly, and only returns after the message has been processed. Any intercepts of the message by scripts will be skipped, and the message can therefore not be blocked.\n\nParameters:\n * message: String containing a single message name, such as 'WM_SETCURSOR', or in hexadecimal format, '0x0020'.\n (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n * wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\n\nNotes:\n * For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.\n * Messages should only be sent to windows that were created from the main thread.\n * Useful for simulating mouse clicks and calling mouse modifier actions from scripts."
	},
	"JS_Window_AddressFromHandle lua": {
		"prefix": "r.JS_Window_AddressFromHandle",
		"scope": "lua",
		"body": "r.JS_Window_AddressFromHandle({1:handle})$0"
		"description": ""
	},
	"JS_Window_ArrayAllChild lua": {
		"prefix": "r.JS_Window_ArrayAllChild",
		"scope": "lua",
		"body": "r.JS_Window_ArrayAllChild({1:parentHWND}, {2:reaperarray})$0"
		"description": "Finds all child windows of the specified parent.\n\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress."
	},
	"JS_Window_ArrayAllTop lua": {
		"prefix": "r.JS_Window_ArrayAllTop",
		"scope": "lua",
		"body": "r.JS_Window_ArrayAllTop({1:reaperarray})$0"
		"description": "Finds all top-level windows.\n\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress."
	},
	"JS_Window_ArrayFind lua": {
		"prefix": "r.JS_Window_ArrayFind",
		"scope": "lua",
		"body": "r.JS_Window_ArrayFind({1:title}, {2:exact}, {3:reaperarray})$0"
		"description": "Finds all windows, whether top-level or child, whose titles match the specified string.\n\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.\n\nParameters:\n * exact: Match entire title exactly, or match substring of title."
	},
	"JS_Window_AttachResizeGrip lua": {
		"prefix": "r.JS_Window_AttachResizeGrip",
		"scope": "lua",
		"body": "r.JS_Window_AttachResizeGrip({1:windowHWND})$0"
		"description": ""
	},
	"JS_Window_AttachTopmostPin lua": {
		"prefix": "r.JS_Window_AttachTopmostPin",
		"scope": "lua",
		"body": "r.JS_Window_AttachTopmostPin({1:windowHWND})$0"
		"description": "Attaches a 'pin on top' button to the window frame. The button should remember its state when closing and re-opening the window.\n\nWARNING: This function does not yet work on Linux."
	},
	"JS_Window_ClientToScreen lua": {
		"prefix": "r.JS_Window_ClientToScreen",
		"scope": "lua",
		"body": "r.JS_Window_ClientToScreen({1:windowHWND}, {2:x}, {3:y})$0"
		"description": "Converts the client-area coordinates of a specified point to screen coordinates.\n\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n * On all platforms, client coordinates are relative to the upper left corner of the client area."
	},
	"JS_Window_Create lua": {
		"prefix": "r.JS_Window_Create",
		"scope": "lua",
		"body": "r.JS_Window_Create({1:title}, {2:className}, {3:x}, {4:y}, {5:w}, {6:h}, {7:style}, {8:ownerHWND})$0"
		"description": "Creates a modeless window with WS_OVERLAPPEDWINDOW style and only rudimentary features. Scripts can paint into the window using GDI or LICE/Composite functions (and JS_Window_InvalidateRect to trigger re-painting).\n\nstyle: An optional parameter that overrides the default style. The string may include any combination of standard window styles, such as 'POPUP' for a frameless window, or 'CAPTION,SIZEBOX,SYSMENU' for a standard framed window.\n\nOn Linux and macOS, 'MAXIMIZE' has not yet been implemented, and the remaining styles may appear slightly different from their WindowsOS counterparts.\n\nclassName: On Windows, only standard ANSI characters are supported.\n\nownerHWND: Optional parameter, only available on WindowsOS.  Usually either the REAPER main window or another script window, and useful for ensuring that the created window automatically closes when the owner is closed.\n\nNOTE: On Linux and macOS, the window contents are only updated *between* defer cycles, so the window cannot be animated by for/while loops within a single defer cycle."
	},
	"JS_Window_Destroy lua": {
		"prefix": "r.JS_Window_Destroy",
		"scope": "lua",
		"body": "r.JS_Window_Destroy({1:windowHWND})$0"
		"description": "Destroys the specified window."
	},
	"JS_Window_Enable lua": {
		"prefix": "r.JS_Window_Enable",
		"scope": "lua",
		"body": "r.JS_Window_Enable({1:windowHWND}, {2:enable})$0"
		"description": "Enables or disables mouse and keyboard input to the specified window or control."
	},
	"JS_Window_EnableMetal lua": {
		"prefix": "r.JS_Window_EnableMetal",
		"scope": "lua",
		"body": "r.JS_Window_EnableMetal({1:windowHWND})$0"
		"description": "On macOS, returns the Metal graphics setting:\n2 = Metal enabled and support GetDC()/ReleaseDC() for drawing (more overhead).\n1 = Metal enabled.\n0 = N/A (Windows and Linux).\n-1 = non-metal async layered mode.\n-2 = non-metal non-async layered mode.\n\nWARNING: If using mode -1, any BitBlt()/StretchBlt() MUST have the source bitmap persist. If it is resized after Blit it could cause crashes."
	},
	"JS_Window_Find lua": {
		"prefix": "r.JS_Window_Find",
		"scope": "lua",
		"body": "r.JS_Window_Find({1:title}, {2:exact})$0"
		"description": "Returns a HWND to a window whose title matches the specified string.\n * Unlike the Win32 function FindWindow, this function searches top-level as well as child windows, so that the target window can be found irrespective of docked state.\n * In addition, the function can optionally match substrings of the title.\n * Matching is not case sensitive.\n\nParameters:\n * exact: Match entire title, or match substring of title."
	},
	"JS_Window_FindChild lua": {
		"prefix": "r.JS_Window_FindChild",
		"scope": "lua",
		"body": "r.JS_Window_FindChild({1:parentHWND}, {2:title}, {3:exact})$0"
		"description": "Returns a HWND to a child window whose title matches the specified string.\n\nParameters:\n * exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive."
	},
	"JS_Window_FindChildByID lua": {
		"prefix": "r.JS_Window_FindChildByID",
		"scope": "lua",
		"body": "r.JS_Window_FindChildByID({1:parentHWND}, {2:ID})$0"
		"description": "Similar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.\n\n(The ID of a window may be retrieved by JS_Window_GetLongPtr.)"
	},
	"JS_Window_FindEx lua": {
		"prefix": "r.JS_Window_FindEx",
		"scope": "lua",
		"body": "r.JS_Window_FindEx({1:parentHWND}, {2:childHWND}, {3:className}, {4:title})$0"
		"description": "Returns a handle to a child window whose class and title match the specified strings.\n\nParameters: * childWindow: The function searches child windows, beginning with the window *after* the specified child window. If childHWND is equal to parentHWND, the search begins with the first child window of parentHWND.\n * title: An empty string, '', will match all windows. (Search is not case sensitive.)"
	},
	"JS_Window_FindTop lua": {
		"prefix": "r.JS_Window_FindTop",
		"scope": "lua",
		"body": "r.JS_Window_FindTop({1:title}, {2:exact})$0"
		"description": "Returns a HWND to a top-level window whose title matches the specified string.\n\nParameters:\n * exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive."
	},
	"JS_Window_FromPoint lua": {
		"prefix": "r.JS_Window_FromPoint",
		"scope": "lua",
		"body": "r.JS_Window_FromPoint({1:x}, {2:y})$0"
		"description": "Retrieves a HWND to the window that contains the specified point.\n\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward."
	},
	"JS_Window_GetClassName lua": {
		"prefix": "r.JS_Window_GetClassName",
		"scope": "lua",
		"body": "r.JS_Window_GetClassName({1:windowHWND})$0"
		"description": "WARNING: May not be fully implemented on macOS and Linux."
	},
	"JS_Window_GetClientRect lua": {
		"prefix": "r.JS_Window_GetClientRect",
		"scope": "lua",
		"body": "r.JS_Window_GetClientRect({1:windowHWND})$0"
		"description": "Retrieves the screen coordinates of the client area rectangle of the specified window.\n\nNOTES:\n * Unlike the C++ function GetClientRect, this function returns the screen coordinates, not the width and height. To get the client size, use GetClientSize.\n * The pixel at (right, bottom) lies immediately outside the rectangle.\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward."
	},
	"JS_Window_GetClientSize lua": {
		"prefix": "r.JS_Window_GetClientSize",
		"scope": "lua",
		"body": "r.JS_Window_GetClientSize({1:windowHWND})$0"
		"description": ""
	},
	"JS_Window_GetFocus lua": {
		"prefix": "r.JS_Window_GetFocus",
		"scope": "lua",
		"body": "r.JS_Window_GetFocus()$0"
		"description": "Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue."
	},
	"JS_Window_GetForeground lua": {
		"prefix": "r.JS_Window_GetForeground",
		"scope": "lua",
		"body": "r.JS_Window_GetForeground()$0"
		"description": "Retrieves a HWND to the top-level foreground window (the window with which the user is currently working)."
	},
	"JS_Window_GetLong lua": {
		"prefix": "r.JS_Window_GetLong",
		"scope": "lua",
		"body": "r.JS_Window_GetLong({1:windowHWND}, {2:info})$0"
		"description": "Similar to JS_Window_GetLongPtr, but returns the information as a number instead of a pointer. \n\nIn the case of 'DLGPROC' and 'WNDPROC', the return values can be converted to pointers by JS_Window_HandleFromAddress.\n\nIf the function fails, the return value is 0."
	},
	"JS_Window_GetLongPtr lua": {
		"prefix": "r.JS_Window_GetLongPtr",
		"scope": "lua",
		"body": "r.JS_Window_GetLongPtr({1:windowHWND}, {2:info})$0"
		"description": "Returns information about the specified window.\n\ninfo: 'USERDATA', 'WNDPROC', 'DLGPROC', 'ID', 'EXSTYLE' or 'STYLE'.\n\nFor documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.\n\nThe values returned by 'DLGPROC' and 'WNDPROC' are typically used as-is, as pointers, whereas the others should first be converted to integers.\n\nIf the function fails, a null pointer is returned."
	},
	"JS_Window_GetParent lua": {
		"prefix": "r.JS_Window_GetParent",
		"scope": "lua",
		"body": "r.JS_Window_GetParent({1:windowHWND})$0"
		"description": "Retrieves a HWND to the specified window's parent or owner.\nReturns NULL if the window is unowned or if the function otherwise fails."
	},
	"JS_Window_GetRect lua": {
		"prefix": "r.JS_Window_GetRect",
		"scope": "lua",
		"body": "r.JS_Window_GetRect({1:windowHWND})$0"
		"description": "Retrieves the screen coordinates of the bounding rectangle of the specified window.\n\nNOTES:\n * On Windows and Linux, coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n * The pixel at (right, bottom) lies immediately outside the rectangle."
	},
	"JS_Window_GetRelated lua": {
		"prefix": "r.JS_Window_GetRelated",
		"scope": "lua",
		"body": "r.JS_Window_GetRelated({1:windowHWND}, {2:relation})$0"
		"description": "Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.\nrelation: 'LAST', 'NEXT', 'PREV', 'OWNER' or 'CHILD'.\n(Refer to documentation for Win32 C++ function GetWindow.)"
	},
	"JS_Window_GetScrollInfo lua": {
		"prefix": "r.JS_Window_GetScrollInfo",
		"scope": "lua",
		"body": "r.JS_Window_GetScrollInfo({1:windowHWND}, {2:scrollbar})$0"
		"description": "Retrieves the scroll information of a window.\n\nParameters:\n * windowHWND: The window that contains the scrollbar. This is usually a child window, not a top-level, framed window.\n * scrollbar: 'v' (or 'SB_VERT', or 'VERT') for vertical scroll, 'h' (or 'SB_HORZ' or 'HORZ') for horizontal.\n\nReturns:\n * Leftmost or topmost visible pixel position, as well as the visible page size, the range minimum and maximum, and scroll box tracking position."
	},
	"JS_Window_GetTitle lua": {
		"prefix": "r.JS_Window_GetTitle",
		"scope": "lua",
		"body": "r.JS_Window_GetTitle({1:windowHWND})$0"
		"description": "Returns the title (if any) of the specified window."
	},
	"JS_Window_GetViewportFromRect lua": {
		"prefix": "r.JS_Window_GetViewportFromRect",
		"scope": "lua",
		"body": "r.JS_Window_GetViewportFromRect({1:x1}, {2:y1}, {3:x2}, {4:y2}, {5:wantWork})$0"
		"description": "Retrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.\n\nIf the monitor is not the primary display, some of the rectangle's coordinates may be negative.\n\nwantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars."
	},
	"JS_Window_HandleFromAddress lua": {
		"prefix": "r.JS_Window_HandleFromAddress",
		"scope": "lua",
		"body": "r.JS_Window_HandleFromAddress({1:address})$0"
		"description": "Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions."
	},
	"JS_Window_InvalidateRect lua": {
		"prefix": "r.JS_Window_InvalidateRect",
		"scope": "lua",
		"body": "r.JS_Window_InvalidateRect({1:windowHWND}, {2:left}, {3:top}, {4:right}, {5:bottom}, {6:eraseBackground})$0"
		"description": "Similar to the Win32 function InvalidateRect."
	},
	"JS_Window_IsChild lua": {
		"prefix": "r.JS_Window_IsChild",
		"scope": "lua",
		"body": "r.JS_Window_IsChild({1:parentHWND}, {2:childHWND})$0"
		"description": "Determines whether a window is a child window or descendant window of a specified parent window."
	},
	"JS_Window_IsVisible lua": {
		"prefix": "r.JS_Window_IsVisible",
		"scope": "lua",
		"body": "r.JS_Window_IsVisible({1:windowHWND})$0"
		"description": "Determines the visibility state of the window."
	},
	"JS_Window_IsWindow lua": {
		"prefix": "r.JS_Window_IsWindow",
		"scope": "lua",
		"body": "r.JS_Window_IsWindow({1:windowHWND})$0"
		"description": "Determines whether the specified window handle identifies an existing window.\n\nOn macOS and Linux, only windows that were created by WDL/swell will be identified (and only such windows should be acted on by scripts).\n\nNOTE: Since REAPER v5.974, windows can be checked using the native function ValidatePtr(windowHWND, 'HWND')."
	},
	"JS_Window_ListAllChild lua": {
		"prefix": "r.JS_Window_ListAllChild",
		"scope": "lua",
		"body": "r.JS_Window_ListAllChild({1:parentHWND})$0"
		"description": "Finds all child windows of the specified parent.\n\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * list: A comma-separated string of hexadecimal values.\nEach value is an address that can be converted to a HWND by the function Window_HandleFromAddress."
	},
	"JS_Window_ListAllTop lua": {
		"prefix": "r.JS_Window_ListAllTop",
		"scope": "lua",
		"body": "r.JS_Window_ListAllTop()$0"
		"description": "Finds all top-level windows.\n\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress."
	},
	"JS_Window_ListFind lua": {
		"prefix": "r.JS_Window_ListFind",
		"scope": "lua",
		"body": "r.JS_Window_ListFind({1:title}, {2:exact})$0"
		"description": "Finds all windows (whether top-level or child) whose titles match the specified string.\n\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.\n\nParameters:\n * exact: Match entire title exactly, or match substring of title."
	},
	"JS_Window_MonitorFromRect lua": {
		"prefix": "r.JS_Window_MonitorFromRect",
		"scope": "lua",
		"body": "r.JS_Window_MonitorFromRect({1:x1}, {2:y1}, {3:x2}, {4:y2}, {5:wantWork})$0"
		"description": "Deprecated - use GetViewportFromRect instead."
	},
	"JS_Window_Move lua": {
		"prefix": "r.JS_Window_Move",
		"scope": "lua",
		"body": "r.JS_Window_Move({1:windowHWND}, {2:left}, {3:top})$0"
		"description": "Changes the position of the specified window, keeping its size constant.\n\nNOTES:\n * For top-level windows, position is relative to the primary display.\n * On Windows and Linux, position is calculated as the coordinates of the upper left corner of the window, relative to upper left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, position is calculated as the coordinates of the bottom left corner of the window, relative to bottom left corner of the display, and the positive Y-axis points upward.\n * For a child window, on all platforms, position is relative to the upper-left corner of the parent window's client area.\n * Equivalent to calling JS_Window_SetPosition with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set."
	},
	"JS_Window_OnCommand lua": {
		"prefix": "r.JS_Window_OnCommand",
		"scope": "lua",
		"body": "r.JS_Window_OnCommand({1:windowHWND}, {2:commandID})$0"
		"description": "Sends a 'WM_COMMAND' message to the specified window, which simulates a user selecting a command in the window menu.\n\nThis function is similar to Main_OnCommand and MIDIEditor_OnCommand, but can send commands to any window that has a menu.\n\nIn the case of windows that are listed among the Action list's contexts (such as the Media Explorer), the commandIDs of the actions in the Actions list may be used."
	},
	"JS_Window_Resize lua": {
		"prefix": "r.JS_Window_Resize",
		"scope": "lua",
		"body": "r.JS_Window_Resize({1:windowHWND}, {2:width}, {3:height})$0"
		"description": "Changes the dimensions of the specified window, keeping the top left corner position constant.\n * If resizing script GUIs, call gfx.update() after resizing.\n* Equivalent to calling JS_Window_SetPosition with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set."
	},
	"JS_Window_ScreenToClient lua": {
		"prefix": "r.JS_Window_ScreenToClient",
		"scope": "lua",
		"body": "r.JS_Window_ScreenToClient({1:windowHWND}, {2:x}, {3:y})$0"
		"description": "Converts the screen coordinates of a specified point on the screen to client-area coordinates.\n\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n * On all platforms, client coordinates are relative to the upper left corner of the client area."
	},
	"JS_Window_SetFocus lua": {
		"prefix": "r.JS_Window_SetFocus",
		"scope": "lua",
		"body": "r.JS_Window_SetFocus({1:windowHWND})$0"
		"description": "Sets the keyboard focus to the specified window."
	},
	"JS_Window_SetForeground lua": {
		"prefix": "r.JS_Window_SetForeground",
		"scope": "lua",
		"body": "r.JS_Window_SetForeground({1:windowHWND})$0"
		"description": "Brings the specified window into the foreground, activates the window, and directs keyboard input to it."
	},
	"JS_Window_SetLong lua": {
		"prefix": "r.JS_Window_SetLong",
		"scope": "lua",
		"body": "r.JS_Window_SetLong({1:windowHWND}, {2:info}, {3:value})$0"
		"description": "Similar to the Win32 function SetWindowLongPtr. \n\ninfo: 'USERDATA', 'WNDPROC', 'DLGPROC', 'ID', 'EXSTYLE' or 'STYLE', and only on WindowOS, 'INSTANCE' and 'PARENT'."
	},
	"JS_Window_SetOpacity lua": {
		"prefix": "r.JS_Window_SetOpacity",
		"scope": "lua",
		"body": "r.JS_Window_SetOpacity({1:windowHWND}, {2:mode}, {3:value})$0"
		"description": "Sets the window opacity.\n\nParameters:\nmode: either 'ALPHA' or 'COLOR'. \nvalue: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included. \nIf COLOR, value specifies a 0xRRGGBB color, and all pixels of this color will be made transparent. (All mouse clicks over transparent pixels will pass through, too).  WARNING:\nCOLOR mode is only available in Windows, not Linux or macOS.\n\nTransparency can only be applied to top-level windows. If windowHWND refers to a child window, the entire top-level window that contains windowHWND will be made transparent."
	},
	"JS_Window_SetParent lua": {
		"prefix": "r.JS_Window_SetParent",
		"scope": "lua",
		"body": "r.JS_Window_SetParent({1:childHWND}, {2:parentHWND})$0"
		"description": "If successful, returns a handle to the previous parent window.\n\nOnly on WindowsOS: If parentHWND is not specified, the desktop window becomes the new parent window."
	},
	"JS_Window_SetPosition lua": {
		"prefix": "r.JS_Window_SetPosition",
		"scope": "lua",
		"body": "r.JS_Window_SetPosition({1:windowHWND}, {2:left}, {3:top}, {4:width}, {5:height}, {6:ZOrder}, {7:flags})$0"
		"description": "Interface to the Win32/swell function SetWindowPos, with which window position, size, Z-order and visibility can be set, and new frame styles can be applied.\n\nZOrder and flags are optional parameters. If no arguments are supplied, the window will simply be moved and resized, as if the NOACTIVATE, NOZORDER, NOOWNERZORDER flags were set.\n * ZOrder: 'BOTTOM', 'TOPMOST', 'NOTOPMOST', 'TOP' or a window HWND converted to a string, for example by the Lua function tostring.\n * flags: Any combination of the standard flags, of which 'NOMOVE', 'NOSIZE', 'NOZORDER', 'NOACTIVATE', 'SHOWWINDOW', 'FRAMECHANGED' and 'NOCOPYBITS' should be valid cross-platform."
	},
	"JS_Window_SetScrollPos lua": {
		"prefix": "r.JS_Window_SetScrollPos",
		"scope": "lua",
		"body": "r.JS_Window_SetScrollPos({1:windowHWND}, {2:scrollbar}, {3:position})$0"
		"description": "Parameters:\n * scrollbar: 'v' (or 'SB_VERT', or 'VERT') for vertical scroll, 'h' (or 'SB_HORZ' or 'HORZ') for horizontal.\n\nNOTE: API functions can scroll REAPER's windows, but cannot zoom them.  Instead, use actions such as 'View: Zoom to one loop iteration'."
	},
	"JS_Window_SetStyle lua": {
		"prefix": "r.JS_Window_SetStyle",
		"scope": "lua",
		"body": "r.JS_Window_SetStyle({1:windowHWND}, {2:style})$0"
		"description": "Sets and applies a window style.\n\nstyle may include any combination of standard window styles, such as 'POPUP' for a frameless window, or 'CAPTION,SIZEBOX,SYSMENU' for a standard framed window.\n\nOn Linux and macOS, 'MAXIMIZE' has not yet been implmented, and the remaining styles may appear slightly different from their WindowsOS counterparts."
	},
	"JS_Window_SetTitle lua": {
		"prefix": "r.JS_Window_SetTitle",
		"scope": "lua",
		"body": "r.JS_Window_SetTitle({1:windowHWND}, {2:title})$0"
		"description": "Changes the title of the specified window. Returns true if successful."
	},
	"JS_Window_SetZOrder lua": {
		"prefix": "r.JS_Window_SetZOrder",
		"scope": "lua",
		"body": "r.JS_Window_SetZOrder({1:windowHWND}, {2:ZOrder}, {3:insertAfterHWND})$0"
		"description": "Sets the window Z order.\n * Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.\n * Not all the Z orders have been implemented in Linux yet.\n\nParameters:\n * ZOrder: 'BOTTOM', 'TOPMOST', 'NOTOPMOST', 'TOP', or a window HWND converted to a string, for example by the Lua function tostring.\n\n* InsertAfterHWND: For compatibility with older versions, this parameter is still available, and is optional. If ZOrder is 'INSERTAFTER', insertAfterHWND must be a handle to the window behind which windowHWND will be placed in the Z order, equivalent to setting ZOrder to this HWND; otherwise, insertAfterHWND is ignored and can be left out (or it can simply be set to the same value as windowHWND)."
	},
	"JS_Window_Show lua": {
		"prefix": "r.JS_Window_Show",
		"scope": "lua",
		"body": "r.JS_Window_Show({1:windowHWND}, {2:state})$0"
		"description": "Sets the specified window's show state.\n\nParameters:\n * state: One of the following options: 'SHOW', 'SHOWNA' (or 'SHOWNOACTIVATE'), 'SHOWMINIMIZED', 'HIDE', 'NORMAL', 'SHOWNORMAL', 'SHOWMAXIMIZED', 'SHOWDEFAULT' or 'RESTORE'. On Linux and macOS, only the first four options are fully implemented."
	},
	"JS_Window_Update lua": {
		"prefix": "r.JS_Window_Update",
		"scope": "lua",
		"body": "r.JS_Window_Update({1:windowHWND})$0"
		"description": "Similar to the Win32 function UpdateWindow."
	},
	"JS_Zip_Close lua": {
		"prefix": "r.JS_Zip_Close",
		"scope": "lua",
		"body": "r.JS_Zip_Close({1:zipFile}, {2:zipHandle})$0"
		"description": "Closes the zip archive, using either the file name or the zip handle. Finalizes entries and releases resources."
	},
	"JS_Zip_CountEntries lua": {
		"prefix": "r.JS_Zip_CountEntries",
		"scope": "lua",
		"body": "r.JS_Zip_CountEntries({1:zipHandle})$0"
		"description": ""
	},
	"JS_Zip_DeleteEntries lua": {
		"prefix": "r.JS_Zip_DeleteEntries",
		"scope": "lua",
		"body": "r.JS_Zip_DeleteEntries({1:zipHandle}, {2:entryNames}, {3:entryNamesStrLen})$0"
		"description": "Deletes the specified entries from an existing Zip file.\n\nentryNames is zero-separated and double-zero-terminated.\n\nReturns the number of deleted entries on success, negative number (< 0) on error."
	},
	"JS_Zip_Entry_Close lua": {
		"prefix": "r.JS_Zip_Entry_Close",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_Close({1:zipHandle})$0"
		"description": "Closes a zip entry, flushes buffer and releases resources. In WRITE mode, entries must be closed in order to apply and save changes.\n\nReturns 0 on success, negative number (< 0) on error."
	},
	"JS_Zip_Entry_CompressFile lua": {
		"prefix": "r.JS_Zip_Entry_CompressFile",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_CompressFile({1:zipHandle}, {2:inputFile})$0"
		"description": "Compresses the specified file into the zip archive's open entry.\n\nReturns 0 on success, negative number (< 0) on error."
	},
	"JS_Zip_Entry_CompressMemory lua": {
		"prefix": "r.JS_Zip_Entry_CompressMemory",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_CompressMemory({1:zipHandle}, {2:buf}, {3:buf_size})$0"
		"description": "Compresses the specified memory buffer into the zip archive's open entry.\n\nReturns 0 on success, negative number (< 0) on error."
	},
	"JS_Zip_Entry_ExtractToFile lua": {
		"prefix": "r.JS_Zip_Entry_ExtractToFile",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_ExtractToFile({1:zipHandle}, {2:outputFile})$0"
		"description": "Extracts the zip archive's open entry.\n\nReturns 0 on success, negative number (< 0) on error."
	},
	"JS_Zip_Entry_ExtractToMemory lua": {
		"prefix": "r.JS_Zip_Entry_ExtractToMemory",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_ExtractToMemory({1:zipHandle})$0"
		"description": "Extracts and returns the zip archive's open entry.\n\nReturns the number of bytes extracted on success, negative number (< 0) on error."
	},
	"JS_Zip_Entry_Info lua": {
		"prefix": "r.JS_Zip_Entry_Info",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_Info({1:zipHandle})$0"
		"description": "Returns information about the zip archive's open entry."
	},
	"JS_Zip_Entry_OpenByIndex lua": {
		"prefix": "r.JS_Zip_Entry_OpenByIndex",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_OpenByIndex({1:zipHandle}, {2:index})$0"
		"description": "Opens a new entry by index in the zip archive.\n\nThis function is only valid if zip archive was opened in 'r' (readonly) mode.\n\nReturns 0 on success, negative number on error."
	},
	"JS_Zip_Entry_OpenByName lua": {
		"prefix": "r.JS_Zip_Entry_OpenByName",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_OpenByName({1:zipHandle}, {2:entryName})$0"
		"description": "Opens an entry by name in the zip archive.\n\nFor zip archive opened in 'w' or 'a' mode the function will append a new entry. In readonly mode the function tries to locate an existing entry.\n\nReturns 0 on success, negative number (< 0) on error."
	},
	"JS_Zip_ErrorString lua": {
		"prefix": "r.JS_Zip_ErrorString",
		"scope": "lua",
		"body": "r.JS_Zip_ErrorString({1:errorNum})$0"
		"description": "Returns a descriptive string for the given error code."
	},
	"JS_Zip_Extract lua": {
		"prefix": "r.JS_Zip_Extract",
		"scope": "lua",
		"body": "r.JS_Zip_Extract({1:zipFile}, {2:outputFolder})$0"
		"description": "Extracts an existing Zip file to the specified folder.\n\nReturns the number of extracted files on success, negative number (< 0) on error."
	},
	"JS_Zip_ListAllEntries lua": {
		"prefix": "r.JS_Zip_ListAllEntries",
		"scope": "lua",
		"body": "r.JS_Zip_ListAllEntries({1:zipHandle})$0"
		"description": "Returns the number of entries and a zero-separated and double-zero-terminated string of entry names.\n\nOn error, returns a negative number (< 0)."
	},
	"JS_Zip_Open lua": {
		"prefix": "r.JS_Zip_Open",
		"scope": "lua",
		"body": "r.JS_Zip_Open({1:zipFile}, {2:mode}, {3:compressionLevel})$0"
		"description": "Opens a zip archive using the given mode, which can be either 'READ' or 'WRITE' (or simply 'r' or 'w').\n\n * READ: Opens an existing archive for reading/extracting.\n * WRITE: Opens an archive for writing/deleting. If the file doesn't exist, an empty archive will created.\n\ncompressionLevel is only relevant for WRITE mode, and ranges from 0 (fastest, no compression) to 9 (slowest, best compression), with a default of 6.\n\nIf successful, returns 0 and a handle to the Zip archive. If failed, returns a negative error code. If the file is already open -- in the given mode -- the existing handle will be returned.\n\nNOTES:\n * The Zip API functions support Unicode file names and entry names.\n * The original zip specification did not support Unicode. Some applications still use this outdated specification by default, or try to use the local code page. This may lead to incompatibility and incorrect retrieval of file or entry names."
	},
	"LICE_ClipLine lua": {
		"prefix": "r.LICE_ClipLine",
		"scope": "lua",
		"body": "r.LICE_ClipLine({1:pX1}, {2:pY1}, {3:pX2}, {4:pY2}, {5:xLo}, {6:yLo}, {7:xHi}, {8:yHi})$0"
		"description": "Returns false if the line is entirely offscreen."
	},
	"Llm_Do lua": {
		"prefix": "r.Llm_Do",
		"scope": "lua",
		"body": "r.Llm_Do()$0"
		"description": "Do. Call this function to run one ReaLlm cycle. Use this function to run ReaLlm on arbitrary time intervals e.g. from a deferred script."
	},
	"Llm_GetPaths lua": {
		"prefix": "r.Llm_GetPaths",
		"scope": "lua",
		"body": "r.Llm_GetPaths({1:includeFx}, {2:startIn}, {3:endIn})$0"
		"description": "Get paths. Returns a string of the form 'start:fx#1.fx#2...;track:fxs;...;end:fxs' where track is the track number and fx is the fx index. The string is truncated to pathStringOut_sz. 1-based indexing is used. If no MediaTrack* start is provided, all monitored input tracks are used. If no MediaTrack* end is provided, all hardware output tracks are used. If includeFx is true, the fx indices are included."
	},
	"Llm_GetSafed lua": {
		"prefix": "r.Llm_GetSafed",
		"scope": "lua",
		"body": "r.Llm_GetSafed()$0"
		"description": "Get safed. Returns a string of the form 'track:fx;track:fx;...' where track is the track number and fx is the fx index. The string is truncated to safeStringOut_sz. 1-based indexing is used. The string is followed by a | delimited list of fx names that have been set safed."
	},
	"Llm_GetVersion lua": {
		"prefix": "r.Llm_GetVersion",
		"scope": "lua",
		"body": "r.Llm_GetVersion()$0"
		"description": "Get version. Returns the version of the plugin as integers and the commit hash as a string. The string is truncated to commitOut_sz."
	},
	"Llm_SetClearSafe lua": {
		"prefix": "r.Llm_SetClearSafe",
		"scope": "lua",
		"body": "r.Llm_SetClearSafe({1:clear_manually_safed_fx})$0"
		"description": "Set clear safe. Set clear_manually_safed_fx = true to clear manually safed fx"
	},
	"Llm_SetKeepPdc lua": {
		"prefix": "r.Llm_SetKeepPdc",
		"scope": "lua",
		"body": "r.Llm_SetKeepPdc({1:enable})$0"
		"description": "Set keep pdc"
	},
	"Llm_SetMonitoringFX lua": {
		"prefix": "r.Llm_SetMonitoringFX",
		"scope": "lua",
		"body": "r.Llm_SetMonitoringFX({1:enable})$0"
		"description": "Set to include MonitoringFX. In REAPER land this means the fx on the master track record fx chain. Indexed as fx# + 0x1000000, 0-based."
	},
	"Llm_SetParameterChange lua": {
		"prefix": "r.Llm_SetParameterChange",
		"scope": "lua",
		"body": "r.Llm_SetParameterChange({1:fx_name}, {2:parameter_index}, {3:val1}, {4:val2})$0"
		"description": "Set parameter change. Set val1 = val2 to clear change. Set parameter_index = -666 to clear all changes. Use this function to set parameter changes between values val1 and val2 for fx_name and parameter_index instead of disabling the effect. Use custom fx names to identify individual fx."
	},
	"Llm_SetPdcLimit lua": {
		"prefix": "r.Llm_SetPdcLimit",
		"scope": "lua",
		"body": "r.Llm_SetPdcLimit({1:pdc_factor})$0"
		"description": "Set pdc limit as factor of audio buffer size."
	},
	"Llm_SetSafed lua": {
		"prefix": "r.Llm_SetSafed",
		"scope": "lua",
		"body": "r.Llm_SetSafed({1:fx_name}, {2:isSet})$0"
		"description": "Set safed. Set isSet = true to safe fx name. Set isSet = false to unsafe fx name."
	},
	"LocalizeString lua": {
		"prefix": "r.LocalizeString",
		"scope": "lua",
		"body": "r.LocalizeString({1:src_string}, {2:section}, {3:flags})$0"
		"description": "Returns a localized version of src_string, in section section. flags can have 1 set to only localize if sprintf-style formatting matches the original."
	},
	"Loop_OnArrow lua": {
		"prefix": "r.Loop_OnArrow",
		"scope": "lua",
		"body": "r.Loop_OnArrow({1:project}, {2:direction})$0"
		"description": "Move the loop selection left or right. Returns true if snap is enabled."
	},
	"MB lua": {
		"prefix": "r.MB",
		"scope": "lua",
		"body": "r.MB({1:msg}, {2:title}, {3:type})$0"
		"description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO"
	},
	"MCULive_GetButtonValue lua": {
		"prefix": "r.MCULive_GetButtonValue",
		"scope": "lua",
		"body": "r.MCULive_GetButtonValue({1:device}, {2:button})$0"
		"description": "Get current button state."
	},
	"MCULive_GetDevice lua": {
		"prefix": "r.MCULive_GetDevice",
		"scope": "lua",
		"body": "r.MCULive_GetDevice({1:device}, {2:type})$0"
		"description": "Get MIDI input or output dev ID. type 0 is input dev, type 1 is output dev. device < 0 returns number of MCULive devices."
	},
	"MCULive_GetEncoderValue lua": {
		"prefix": "r.MCULive_GetEncoderValue",
		"scope": "lua",
		"body": "r.MCULive_GetEncoderValue({1:device}, {2:encIdx}, {3:param})$0"
		"description": "Returns zero-indexed encoder parameter value. 0 = lastpos, 1 = lasttouch"
	},
	"MCULive_GetFaderValue lua": {
		"prefix": "r.MCULive_GetFaderValue",
		"scope": "lua",
		"body": "r.MCULive_GetFaderValue({1:device}, {2:faderIdx}, {3:param})$0"
		"description": "Returns zero-indexed fader parameter value. 0 = lastpos, 1 = lasttouch, 2 = lastmove (any fader)"
	},
	"MCULive_GetMIDIMessage lua": {
		"prefix": "r.MCULive_GetMIDIMessage",
		"scope": "lua",
		"body": "r.MCULive_GetMIDIMessage({1:device}, {2:msgIdx})$0"
		"description": "Gets MIDI message from input buffer/queue. Gets (pops/pulls) indexed message (status, data1, data2 and frame_offset) from queue and retval is total size/length left in queue. E.g. continuously read all indiviual messages with deferred script. Frame offset resolution is 1/1024000 seconds, not audio samples. Long messages are returned as optional strings of byte characters. msgIdx -1 returns size (length) of buffer. Read also non-MCU devices by creating MCULive device with their input."
	},
	"MCULive_Map lua": {
		"prefix": "r.MCULive_Map",
		"scope": "lua",
		"body": "r.MCULive_Map({1:device}, {2:button}, {3:command_id}, {4:isRemap})$0"
		"description": "Maps MCU Live device# button# to REAPER command ID. E.g. reaper.MCULive_Map(0,0x5b, 40340) maps MCU Rewind to 'Track: Unsolo all tracks'. Or remap button to another button if your MCU button layout doesnt play nicely with default MCULive mappings. By default range 0x00 .. 0x2d is in use. Button numbers are second column (prefixed with 0x) e.g. '90 5e' 0x5e for 'transport : play', roughly. \n\nmcu documentation: \nmcu=>pc: \n  the mcu seems to send, when it boots (or is reset) f0 00 00 66 14 01 58 59 5a 57 18 61 05 57 18 61 05 f7 \n  ex vv vv    :   volume fader move, x=0..7, 8=master, vv vv is int14 \n  b0 1x vv    :   pan fader move, x=0..7, vv has 40 set if negative, low bits 0-31 are move amount \n  b0 3c vv    :   jog wheel move, 01 or 41 \n  to the extent the buttons below have leds, you can set them by sending these messages, with 7f for on, 1 for blink, 0 for off. \n  90 0x vv    :   rec arm push x=0..7 (vv:..) \n  90 0x vv    :   solo push x=8..f (vv:..) \n  90 1x vv    :   mute push x=0..7 (vv:..) \n  90 1x vv    :   selected push x=8..f (vv:..) \n  90 2x vv    :   pan knob push, x=0..7 (vv:..) \n  90 28 vv    :   assignment track \n  90 29 vv    :   assignment send \n  90 2a vv    :   assignment pan/surround \n  90 2b vv    :   assignment plug-in \n  90 2c vv    :   assignment eq \n  90 2d vv    :   assignment instrument \n  90 2e vv    :   bank down button (vv: 00=release, 7f=push) \n  90 2f vv    :   channel down button (vv: ..) \n  90 30 vv    :   bank up button (vv:..) \n  90 31 vv    :   channel up button (vv:..) \n  90 32 vv    :   flip button \n  90 33 vv    :   global view button \n  90 34 vv    :   name/value display button \n  90 35 vv    :   smpte/beats mode switch (vv:..) \n  90 36 vv    :   f1 \n  90 37 vv    :   f2 \n  90 38 vv    :   f3 \n  90 39 vv    :   f4 \n  90 3a vv    :   f5 \n  90 3b vv    :   f6 \n  90 3c vv    :   f7 \n  90 3d vv    :   f8 \n  90 3e vv    :   global view : midi tracks \n  90 3f vv    :   global view : inputs \n  90 40 vv    :   global view : audio tracks \n  90 41 vv    :   global view : audio instrument \n  90 42 vv    :   global view : aux \n  90 43 vv    :   global view : busses \n  90 44 vv    :   global view : outputs \n  90 45 vv    :   global view : user \n  90 46 vv    :   shift modifier (vv:..) \n  90 47 vv    :   option modifier \n  90 48 vv    :   control modifier \n  90 49 vv    :   alt modifier \n  90 4a vv    :   automation read/off \n  90 4b vv    :   automation write \n  90 4c vv    :   automation trim \n  90 4d vv    :   automation touch \n  90 4e vv    :   automation latch \n  90 4f vv    :   automation group \n  90 50 vv    :   utilities save \n  90 51 vv    :   utilities undo \n  90 52 vv    :   utilities cancel \n  90 53 vv    :   utilities enter \n  90 54 vv    :   marker \n  90 55 vv    :   nudge \n  90 56 vv    :   cycle \n  90 57 vv    :   drop \n  90 58 vv    :   replace \n  90 59 vv    :   click \n  90 5a vv    :   solo \n  90 5b vv    :   transport rewind (vv:..) \n  90 5c vv    :   transport ffwd (vv:..) \n  90 5d vv    :   transport pause (vv:..) \n  90 5e vv    :   transport play (vv:..) \n  90 5f vv    :   transport record (vv:..) \n  90 60 vv    :   up arrow button  (vv:..) \n  90 61 vv    :   down arrow button 1 (vv:..) \n  90 62 vv    :   left arrow button 1 (vv:..) \n  90 63 vv    :   right arrow button 1 (vv:..) \n  90 64 vv    :   zoom button (vv:..) \n  90 65 vv    :   scrub button (vv:..) \n  90 6x vv    :   fader touch x=8..f \n  90 70 vv    :   master fader touch \npc=>mcu: \n  f0 00 00 66 14 12 xx <data> f7   : update lcd. xx=offset (0-112), string. display is 55 chars wide, second line begins at 56, though. \n  f0 00 00 66 14 08 00 f7          : reset mcu \n  f0 00 00 66 14 20 0x 03 f7       : put track in vu meter mode, x=track   \n  90 73 vv : rude solo light (vv: 7f=on, 00=off, 01=blink) \n  b0 3x vv : pan display, x=0..7, vv=1..17 (hex) or so \n  b0 4x vv : right to left of leds. if 0x40 set in vv, dot below char is set (x=0..11) \n  d0 yx    : update vu meter, y=track, x=0..d=volume, e=clip on, f=clip off \n  ex vv vv : set volume fader, x=track index, 8=master"
	},
	"MCULive_Reset lua": {
		"prefix": "r.MCULive_Reset",
		"scope": "lua",
		"body": "r.MCULive_Reset({1:device})$0"
		"description": "Reset device. device < 0 resets all and returns number of devices."
	},
	"MCULive_SendMIDIMessage lua": {
		"prefix": "r.MCULive_SendMIDIMessage",
		"scope": "lua",
		"body": "r.MCULive_SendMIDIMessage({1:device}, {2:status}, {3:data1}, {4:data2}, {5:msgIn})$0"
		"description": "Sends MIDI message to device. If string is provided, individual bytes are not sent. Returns number of sent bytes."
	},
	"MCULive_SetButtonPassthrough lua": {
		"prefix": "r.MCULive_SetButtonPassthrough",
		"scope": "lua",
		"body": "r.MCULive_SetButtonPassthrough({1:device}, {2:button}, {3:isSet})$0"
		"description": "Set button as MIDI passthrough."
	},
	"MCULive_SetButtonPressOnly lua": {
		"prefix": "r.MCULive_SetButtonPressOnly",
		"scope": "lua",
		"body": "r.MCULive_SetButtonPressOnly({1:device}, {2:button}, {3:isSet})$0"
		"description": "Buttons function as press only by default. Set false for press and release function."
	},
	"MCULive_SetButtonValue lua": {
		"prefix": "r.MCULive_SetButtonValue",
		"scope": "lua",
		"body": "r.MCULive_SetButtonValue({1:device}, {2:button}, {3:value})$0"
		"description": "Set button led/mode/state. Value 0 = off,1 = blink, 0x7f = on, usually."
	},
	"MCULive_SetDefault lua": {
		"prefix": "r.MCULive_SetDefault",
		"scope": "lua",
		"body": "r.MCULive_SetDefault({1:device}, {2:isSet})$0"
		"description": "Enables/disables default out-of-the-box operation."
	},
	"MCULive_SetDisplay lua": {
		"prefix": "r.MCULive_SetDisplay",
		"scope": "lua",
		"body": "r.MCULive_SetDisplay({1:device}, {2:pos}, {3:message}, {4:pad})$0"
		"description": "Write to display. 112 characters, 56 per row."
	},
	"MCULive_SetEncoderValue lua": {
		"prefix": "r.MCULive_SetEncoderValue",
		"scope": "lua",
		"body": "r.MCULive_SetEncoderValue({1:device}, {2:encIdx}, {3:val}, {4:type})$0"
		"description": "Set encoder to value 0 ... 1.0. Type 0 = linear, 1 = track volume, 2 = pan. Returns scaled value."
	},
	"MCULive_SetFaderValue lua": {
		"prefix": "r.MCULive_SetFaderValue",
		"scope": "lua",
		"body": "r.MCULive_SetFaderValue({1:device}, {2:faderIdx}, {3:val}, {4:type})$0"
		"description": "Set fader to value 0 ... 1.0. Type 0 = linear, 1 = track volume, 2 = pan. Returns scaled value."
	},
	"MCULive_SetMeterValue lua": {
		"prefix": "r.MCULive_SetMeterValue",
		"scope": "lua",
		"body": "r.MCULive_SetMeterValue({1:device}, {2:meterIdx}, {3:val}, {4:type})$0"
		"description": "Set meter value 0 ... 1.0. Type 0 = linear, 1 = track volume (with decay)."
	},
	"MCULive_SetOption lua": {
		"prefix": "r.MCULive_SetOption",
		"scope": "lua",
		"body": "r.MCULive_SetOption({1:option}, {2:value})$0"
		"description": "1 : surface split point device index \n2 : 'mode-is-global' bitmask/flags, first 6 bits"
	},
	"MIDIEditorFlagsForTrack lua": {
		"prefix": "r.MIDIEditorFlagsForTrack",
		"scope": "lua",
		"body": "r.MIDIEditorFlagsForTrack({1:track}, {2:pitchwheelrange}, {3:flags}, {4:is_set})$0"
		"description": "Get or set MIDI editor settings for this track. pitchwheelrange: semitones up or down. flags &1: snap pitch lane edits to semitones if pitchwheel range is defined."
	},
	"MIDIEditor_EnumTakes lua": {
		"prefix": "r.MIDIEditor_EnumTakes",
		"scope": "lua",
		"body": "r.MIDIEditor_EnumTakes({1:midieditor}, {2:takeindex}, {3:editable_only})$0"
		"description": "list the takes that are currently being edited in this MIDI editor, starting with the active take. See MIDIEditor_GetTake"
	},
	"MIDIEditor_GetActive lua": {
		"prefix": "r.MIDIEditor_GetActive",
		"scope": "lua",
		"body": "r.MIDIEditor_GetActive()$0"
		"description": "get a pointer to the focused MIDI editor window\nsee MIDIEditor_GetMode, MIDIEditor_OnCommand"
	},
	"MIDIEditor_GetMode lua": {
		"prefix": "r.MIDIEditor_GetMode",
		"scope": "lua",
		"body": "r.MIDIEditor_GetMode({1:midieditor})$0"
		"description": "get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\nsee MIDIEditor_GetActive, MIDIEditor_OnCommand"
	},
	"MIDIEditor_GetSetting_int lua": {
		"prefix": "r.MIDIEditor_GetSetting_int",
		"scope": "lua",
		"body": "r.MIDIEditor_GetSetting_int({1:midieditor}, {2:setting_desc})$0"
		"description": "Get settings from a MIDI editor. setting_desc can be:\nsnap_enabled: returns 0 or 1\nactive_note_row: returns 0-127\nlast_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events, 0x210=media item lane\ndefault_note_vel: returns 0-127\ndefault_note_chan: returns 0-15\ndefault_note_len: returns default length in MIDI ticks\nscale_enabled: returns 0-1\nscale_root: returns 0-12 (0=C)\nlist_cnt: if viewing list view, returns event count\nif setting_desc is unsupported, the function returns -1.\nSee MIDIEditor_SetSetting_int, MIDIEditor_GetActive, MIDIEditor_GetSetting_str"
	},
	"MIDIEditor_GetSetting_str lua": {
		"prefix": "r.MIDIEditor_GetSetting_str",
		"scope": "lua",
		"body": "r.MIDIEditor_GetSetting_str({1:midieditor}, {2:setting_desc})$0"
		"description": "Get settings from a MIDI editor. setting_desc can be:\nlast_clicked_cc_lane: returns text description ('velocity', 'pitch', etc)\nscale: returns the scale record, for example '102034050607' for a major scale\nlist_X: if viewing list view, returns string describing event at row X (0-based). String will have a list of key=value pairs, e.g. 'pos=4.0 len=4.0 offvel=127 msg=90317F'. pos/len times are in QN, len/offvel may not be present if event is not a note. other keys which may be present include pos_pq/len_pq, sel, mute, ccval14, ccshape, ccbeztension.\nif setting_desc is unsupported, the function returns false.\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_int"
	},
	"MIDIEditor_GetTake lua": {
		"prefix": "r.MIDIEditor_GetTake",
		"scope": "lua",
		"body": "r.MIDIEditor_GetTake({1:midieditor})$0"
		"description": "get the take that is currently being edited in this MIDI editor. see MIDIEditor_EnumTakes"
	},
	"MIDIEditor_LastFocused_OnCommand lua": {
		"prefix": "r.MIDIEditor_LastFocused_OnCommand",
		"scope": "lua",
		"body": "r.MIDIEditor_LastFocused_OnCommand({1:command_id}, {2:islistviewcommand})$0"
		"description": "Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.\nsee MIDIEditor_OnCommand"
	},
	"MIDIEditor_OnCommand lua": {
		"prefix": "r.MIDIEditor_OnCommand",
		"scope": "lua",
		"body": "r.MIDIEditor_OnCommand({1:midieditor}, {2:command_id})$0"
		"description": "Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).\nsee MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand"
	},
	"MIDIEditor_SetSetting_int lua": {
		"prefix": "r.MIDIEditor_SetSetting_int",
		"scope": "lua",
		"body": "r.MIDIEditor_SetSetting_int({1:midieditor}, {2:setting_desc}, {3:setting})$0"
		"description": "Set settings for a MIDI editor. setting_desc can be:\nactive_note_row: 0-127\nSee MIDIEditor_GetSetting_int"
	},
	"MIDI_CountEvts lua": {
		"prefix": "r.MIDI_CountEvts",
		"scope": "lua",
		"body": "r.MIDI_CountEvts({1:take})$0"
		"description": "Count the number of notes, CC events, and text/sysex events in a given MIDI item."
	},
	"MIDI_DeleteCC lua": {
		"prefix": "r.MIDI_DeleteCC",
		"scope": "lua",
		"body": "r.MIDI_DeleteCC({1:take}, {2:ccidx})$0"
		"description": "Delete a MIDI CC event."
	},
	"MIDI_DeleteEvt lua": {
		"prefix": "r.MIDI_DeleteEvt",
		"scope": "lua",
		"body": "r.MIDI_DeleteEvt({1:take}, {2:evtidx})$0"
		"description": "Delete a MIDI event."
	},
	"MIDI_DeleteNote lua": {
		"prefix": "r.MIDI_DeleteNote",
		"scope": "lua",
		"body": "r.MIDI_DeleteNote({1:take}, {2:noteidx})$0"
		"description": "Delete a MIDI note."
	},
	"MIDI_DeleteTextSysexEvt lua": {
		"prefix": "r.MIDI_DeleteTextSysexEvt",
		"scope": "lua",
		"body": "r.MIDI_DeleteTextSysexEvt({1:take}, {2:textsyxevtidx})$0"
		"description": "Delete a MIDI text or sysex event."
	},
	"MIDI_DisableSort lua": {
		"prefix": "r.MIDI_DisableSort",
		"scope": "lua",
		"body": "r.MIDI_DisableSort({1:take})$0"
		"description": "Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called."
	},
	"MIDI_EnumSelCC lua": {
		"prefix": "r.MIDI_EnumSelCC",
		"scope": "lua",
		"body": "r.MIDI_EnumSelCC({1:take}, {2:ccidx})$0"
		"description": "Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events)."
	},
	"MIDI_EnumSelEvts lua": {
		"prefix": "r.MIDI_EnumSelEvts",
		"scope": "lua",
		"body": "r.MIDI_EnumSelEvts({1:take}, {2:evtidx})$0"
		"description": "Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events)."
	},
	"MIDI_EnumSelNotes lua": {
		"prefix": "r.MIDI_EnumSelNotes",
		"scope": "lua",
		"body": "r.MIDI_EnumSelNotes({1:take}, {2:noteidx})$0"
		"description": "Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events)."
	},
	"MIDI_EnumSelTextSysexEvts lua": {
		"prefix": "r.MIDI_EnumSelTextSysexEvts",
		"scope": "lua",
		"body": "r.MIDI_EnumSelTextSysexEvts({1:take}, {2:textsyxidx})$0"
		"description": "Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events)."
	},
	"MIDI_GetAllEvts lua": {
		"prefix": "r.MIDI_GetAllEvts",
		"scope": "lua",
		"body": "r.MIDI_GetAllEvts({1:take})$0"
		"description": "Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\noffset: MIDI ticks from previous event\nflag: &1=selected &2=muted\nflag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\nmsg: the MIDI message.\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\nSee MIDI_SetAllEvts."
	},
	"MIDI_GetCC lua": {
		"prefix": "r.MIDI_GetCC",
		"scope": "lua",
		"body": "r.MIDI_GetCC({1:take}, {2:ccidx})$0"
		"description": "Get MIDI CC event properties."
	},
	"MIDI_GetCCShape lua": {
		"prefix": "r.MIDI_GetCCShape",
		"scope": "lua",
		"body": "r.MIDI_GetCCShape({1:take}, {2:ccidx})$0"
		"description": "Get CC shape and bezier tension. See MIDI_GetCC, MIDI_SetCCShape"
	},
	"MIDI_GetEvt lua": {
		"prefix": "r.MIDI_GetEvt",
		"scope": "lua",
		"body": "r.MIDI_GetEvt({1:take}, {2:evtidx})$0"
		"description": "Get MIDI event properties."
	},
	"MIDI_GetGrid lua": {
		"prefix": "r.MIDI_GetGrid",
		"scope": "lua",
		"body": "r.MIDI_GetGrid({1:take})$0"
		"description": "Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size."
	},
	"MIDI_GetHash lua": {
		"prefix": "r.MIDI_GetHash",
		"scope": "lua",
		"body": "r.MIDI_GetHash({1:take}, {2:notesonly})$0"
		"description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetTrackHash"
	},
	"MIDI_GetNote lua": {
		"prefix": "r.MIDI_GetNote",
		"scope": "lua",
		"body": "r.MIDI_GetNote({1:take}, {2:noteidx})$0"
		"description": "Get MIDI note properties."
	},
	"MIDI_GetPPQPosFromProjQN lua": {
		"prefix": "r.MIDI_GetPPQPosFromProjQN",
		"scope": "lua",
		"body": "r.MIDI_GetPPQPosFromProjQN({1:take}, {2:projqn})$0"
		"description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes."
	},
	"MIDI_GetPPQPosFromProjTime lua": {
		"prefix": "r.MIDI_GetPPQPosFromProjTime",
		"scope": "lua",
		"body": "r.MIDI_GetPPQPosFromProjTime({1:take}, {2:projtime})$0"
		"description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds."
	},
	"MIDI_GetPPQPos_EndOfMeasure lua": {
		"prefix": "r.MIDI_GetPPQPos_EndOfMeasure",
		"scope": "lua",
		"body": "r.MIDI_GetPPQPos_EndOfMeasure({1:take}, {2:ppqpos})$0"
		"description": "Returns the MIDI tick (ppq) position corresponding to the end of the measure."
	},
	"MIDI_GetPPQPos_StartOfMeasure lua": {
		"prefix": "r.MIDI_GetPPQPos_StartOfMeasure",
		"scope": "lua",
		"body": "r.MIDI_GetPPQPos_StartOfMeasure({1:take}, {2:ppqpos})$0"
		"description": "Returns the MIDI tick (ppq) position corresponding to the start of the measure."
	},
	"MIDI_GetProjQNFromPPQPos lua": {
		"prefix": "r.MIDI_GetProjQNFromPPQPos",
		"scope": "lua",
		"body": "r.MIDI_GetProjQNFromPPQPos({1:take}, {2:ppqpos})$0"
		"description": "Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position."
	},
	"MIDI_GetProjTimeFromPPQPos lua": {
		"prefix": "r.MIDI_GetProjTimeFromPPQPos",
		"scope": "lua",
		"body": "r.MIDI_GetProjTimeFromPPQPos({1:take}, {2:ppqpos})$0"
		"description": "Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position."
	},
	"MIDI_GetRecentInputEvent lua": {
		"prefix": "r.MIDI_GetRecentInputEvent",
		"scope": "lua",
		"body": "r.MIDI_GetRecentInputEvent({1:idx})$0"
		"description": "Gets a recent MIDI input event from the global history. idx=0 for the most recent event, which also latches to the latest MIDI event state (to get a more recent list, calling with idx=0 is necessary). idx=1 next most recent event, returns a non-zero sequence number for the event, or zero if no more events. tsOut will be set to the timestamp in samples relative to the current position (0 is current, -48000 is one second ago, etc). devIdxOut will have the low 16 bits set to the input device index, and 0x10000 will be set if device was enabled only for control. projPosOut will be set to project position in seconds if project was playing back at time of event, otherwise -1. Large SysEx events will not be included in this event list."
	},
	"MIDI_GetScale lua": {
		"prefix": "r.MIDI_GetScale",
		"scope": "lua",
		"body": "r.MIDI_GetScale({1:take})$0"
		"description": "Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd, &0x8=minor 3rd, &0xF=fourth, etc."
	},
	"MIDI_GetTextSysexEvt lua": {
		"prefix": "r.MIDI_GetTextSysexEvt",
		"scope": "lua",
		"body": "r.MIDI_GetTextSysexEvt({1:take}, {2:textsyxevtidx}, {3:selected}, {4:muted}, {5:ppqpos}, {6:type}, {7:msg})$0"
		"description": "Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. For all other meta-messages, type is returned as -2 and msg returned as all zeroes. See MIDI_GetEvt."
	},
	"MIDI_GetTrackHash lua": {
		"prefix": "r.MIDI_GetTrackHash",
		"scope": "lua",
		"body": "r.MIDI_GetTrackHash({1:track}, {2:notesonly})$0"
		"description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetHash"
	},
	"MIDI_InsertCC lua": {
		"prefix": "r.MIDI_InsertCC",
		"scope": "lua",
		"body": "r.MIDI_InsertCC({1:take}, {2:selected}, {3:muted}, {4:ppqpos}, {5:chanmsg}, {6:chan}, {7:msg2}, {8:msg3})$0"
		"description": "Insert a new MIDI CC event."
	},
	"MIDI_InsertEvt lua": {
		"prefix": "r.MIDI_InsertEvt",
		"scope": "lua",
		"body": "r.MIDI_InsertEvt({1:take}, {2:selected}, {3:muted}, {4:ppqpos}, {5:bytestr})$0"
		"description": "Insert a new MIDI event."
	},
	"MIDI_InsertNote lua": {
		"prefix": "r.MIDI_InsertNote",
		"scope": "lua",
		"body": "r.MIDI_InsertNote({1:take}, {2:selected}, {3:muted}, {4:startppqpos}, {5:endppqpos}, {6:chan}, {7:pitch}, {8:vel}, {9:noSortIn})$0"
		"description": "Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done."
	},
	"MIDI_InsertTextSysexEvt lua": {
		"prefix": "r.MIDI_InsertTextSysexEvt",
		"scope": "lua",
		"body": "r.MIDI_InsertTextSysexEvt({1:take}, {2:selected}, {3:muted}, {4:ppqpos}, {5:type}, {6:bytestr})$0"
		"description": "Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event."
	},
	"MIDI_RefreshEditors lua": {
		"prefix": "r.MIDI_RefreshEditors",
		"scope": "lua",
		"body": "r.MIDI_RefreshEditors({1:tk})$0"
		"description": "Synchronously updates any open MIDI editors for MIDI take"
	},
	"MIDI_SelectAll lua": {
		"prefix": "r.MIDI_SelectAll",
		"scope": "lua",
		"body": "r.MIDI_SelectAll({1:take}, {2:select})$0"
		"description": "Select or deselect all MIDI content."
	},
	"MIDI_SetAllEvts lua": {
		"prefix": "r.MIDI_SetAllEvts",
		"scope": "lua",
		"body": "r.MIDI_SetAllEvts({1:take}, {2:buf})$0"
		"description": "Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\noffset: MIDI ticks from previous event\nflag: &1=selected &2=muted\nflag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\nmsg: the MIDI message.\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\nSee MIDI_GetAllEvts."
	},
	"MIDI_SetCC lua": {
		"prefix": "r.MIDI_SetCC",
		"scope": "lua",
		"body": "r.MIDI_SetCC({1:take}, {2:ccidx}, {3:selectedIn}, {4:mutedIn}, {5:ppqposIn}, {6:chanmsgIn}, {7:chanIn}, {8:msg2In}, {9:msg3In}, {10:noSortIn})$0"
		"description": "Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done."
	},
	"MIDI_SetCCShape lua": {
		"prefix": "r.MIDI_SetCCShape",
		"scope": "lua",
		"body": "r.MIDI_SetCCShape({1:take}, {2:ccidx}, {3:shape}, {4:beztension}, {5:noSortIn})$0"
		"description": "Set CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. See MIDI_SetCC, MIDI_GetCCShape"
	},
	"MIDI_SetEvt lua": {
		"prefix": "r.MIDI_SetEvt",
		"scope": "lua",
		"body": "r.MIDI_SetEvt({1:take}, {2:evtidx}, {3:selectedIn}, {4:mutedIn}, {5:ppqposIn}, {6:msg}, {7:noSortIn})$0"
		"description": "Set MIDI event properties. Properties passed as NULL will not be set.  set noSort if setting multiple events, then call MIDI_Sort when done."
	},
	"MIDI_SetItemExtents lua": {
		"prefix": "r.MIDI_SetItemExtents",
		"scope": "lua",
		"body": "r.MIDI_SetItemExtents({1:item}, {2:startQN}, {3:endQN})$0"
		"description": "Set the start/end positions of a media item that contains a MIDI take."
	},
	"MIDI_SetNote lua": {
		"prefix": "r.MIDI_SetNote",
		"scope": "lua",
		"body": "r.MIDI_SetNote({1:take}, {2:noteidx}, {3:selectedIn}, {4:mutedIn}, {5:startppqposIn}, {6:endppqposIn}, {7:chanIn}, {8:pitchIn}, {9:velIn}, {10:noSortIn})$0"
		"description": "Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes."
	},
	"MIDI_SetTextSysexEvt lua": {
		"prefix": "r.MIDI_SetTextSysexEvt",
		"scope": "lua",
		"body": "r.MIDI_SetTextSysexEvt({1:take}, {2:textsyxevtidx}, {3:selectedIn}, {4:mutedIn}, {5:ppqposIn}, {6:typeIn}, {7:msg}, {8:noSortIn})$0"
		"description": "Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. set noSort if setting multiple events, then call MIDI_Sort when done."
	},
	"MIDI_Sort lua": {
		"prefix": "r.MIDI_Sort",
		"scope": "lua",
		"body": "r.MIDI_Sort({1:take})$0"
		"description": "Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc."
	},
	"Main_OnCommand lua": {
		"prefix": "r.Main_OnCommand",
		"scope": "lua",
		"body": "r.Main_OnCommand({1:command}, {2:flag})$0"
		"description": "See Main_OnCommandEx."
	},
	"Main_OnCommandEx lua": {
		"prefix": "r.Main_OnCommandEx",
		"scope": "lua",
		"body": "r.Main_OnCommandEx({1:command}, {2:flag}, {3:proj})$0"
		"description": "Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup()."
	},
	"Main_SaveProject lua": {
		"prefix": "r.Main_SaveProject",
		"scope": "lua",
		"body": "r.Main_SaveProject({1:proj}, {2:forceSaveAsIn})$0"
		"description": "Save the project."
	},
	"Main_SaveProjectEx lua": {
		"prefix": "r.Main_SaveProjectEx",
		"scope": "lua",
		"body": "r.Main_SaveProjectEx({1:proj}, {2:filename}, {3:options})$0"
		"description": "Save the project. options: &1=save selected tracks as track template, &2=include media with track template, &4=include envelopes with track template. See Main_openProject, Main_SaveProject."
	},
	"Main_UpdateLoopInfo lua": {
		"prefix": "r.Main_UpdateLoopInfo",
		"scope": "lua",
		"body": "r.Main_UpdateLoopInfo({1:ignoremask})$0"
		"description": ""
	},
	"Main_openProject lua": {
		"prefix": "r.Main_openProject",
		"scope": "lua",
		"body": "r.Main_openProject({1:name})$0"
		"description": "opens a project. will prompt the user to save unless name is prefixed with 'noprompt:'. If name is prefixed with 'template:', project file will be loaded as a template.\nIf passed a .RTrackTemplate file, adds the template to the existing project."
	},
	"MarkProjectDirty lua": {
		"prefix": "r.MarkProjectDirty",
		"scope": "lua",
		"body": "r.MarkProjectDirty({1:proj})$0"
		"description": "Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences."
	},
	"MarkTrackItemsDirty lua": {
		"prefix": "r.MarkTrackItemsDirty",
		"scope": "lua",
		"body": "r.MarkTrackItemsDirty({1:track}, {2:item})$0"
		"description": "If track is supplied, item is ignored"
	},
	"Master_GetPlayRate lua": {
		"prefix": "r.Master_GetPlayRate",
		"scope": "lua",
		"body": "r.Master_GetPlayRate({1:project})$0"
		"description": ""
	},
	"Master_GetPlayRateAtTime lua": {
		"prefix": "r.Master_GetPlayRateAtTime",
		"scope": "lua",
		"body": "r.Master_GetPlayRateAtTime({1:time_s}, {2:proj})$0"
		"description": ""
	},
	"Master_GetTempo lua": {
		"prefix": "r.Master_GetTempo",
		"scope": "lua",
		"body": "r.Master_GetTempo()$0"
		"description": ""
	},
	"Master_NormalizePlayRate lua": {
		"prefix": "r.Master_NormalizePlayRate",
		"scope": "lua",
		"body": "r.Master_NormalizePlayRate({1:playrate}, {2:isnormalized})$0"
		"description": "Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider."
	},
	"Master_NormalizeTempo lua": {
		"prefix": "r.Master_NormalizeTempo",
		"scope": "lua",
		"body": "r.Master_NormalizeTempo({1:bpm}, {2:isnormalized})$0"
		"description": "Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm."
	},
	"MediaItemDescendsFromTrack lua": {
		"prefix": "r.MediaItemDescendsFromTrack",
		"scope": "lua",
		"body": "r.MediaItemDescendsFromTrack({1:item}, {2:track})$0"
		"description": "Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc."
	},
	"Menu_GetHash lua": {
		"prefix": "r.Menu_GetHash",
		"scope": "lua",
		"body": "r.Menu_GetHash({1:menuname}, {2:flag})$0"
		"description": "Get a string that only changes when menu/toolbar entries are added or removed (not re-ordered). Can be used to determine if a customized menu/toolbar differs from the default, or if the default changed after a menu/toolbar was customized. flag==0: current default menu/toolbar; flag==1: current customized menu/toolbar; flag==2: default menu/toolbar at the time the current menu/toolbar was most recently customized, if it was customized in REAPER v7.08 or later."
	},
	"MoveEditCursor lua": {
		"prefix": "r.MoveEditCursor",
		"scope": "lua",
		"body": "r.MoveEditCursor({1:adjamt}, {2:dosel})$0"
		"description": ""
	},
	"MoveMediaItemToTrack lua": {
		"prefix": "r.MoveMediaItemToTrack",
		"scope": "lua",
		"body": "r.MoveMediaItemToTrack({1:item}, {2:desttr})$0"
		"description": "returns TRUE if move succeeded"
	},
	"MuteAllTracks lua": {
		"prefix": "r.MuteAllTracks",
		"scope": "lua",
		"body": "r.MuteAllTracks({1:mute})$0"
		"description": ""
	},
	"NF_AnalyzeMediaItemPeakAndRMS lua": {
		"prefix": "r.NF_AnalyzeMediaItemPeakAndRMS",
		"scope": "lua",
		"body": "r.NF_AnalyzeMediaItemPeakAndRMS({1:item}, {2:windowSize}, {3:reaper_array_peaks}, {4:reaper_array_peakpositions}, {5:reaper_array_RMSs}, {6:reaper_array_RMSpositions})$0"
		"description": "This function combines all other NF_Peak/RMS functions in a single one and additionally returns peak RMS positions. Lua example code here. Note: It's recommended to use this function with ReaScript/Lua as it provides reaper.array objects. If using this function with other scripting languages, you must provide arrays in the reaper.array format."
	},
	"NF_AnalyzeTakeLoudness lua": {
		"prefix": "r.NF_AnalyzeTakeLoudness",
		"scope": "lua",
		"body": "r.NF_AnalyzeTakeLoudness({1:take}, {2:analyzeTruePeak})$0"
		"description": "Full loudness analysis. retval: returns true on successful analysis, false on MIDI take or when analysis failed for some reason. analyzeTruePeak=true: Also do true peak analysis. Returns true peak value in dBTP and true peak position (relative to item position). Considerably slower than without true peak analysis (since it uses oversampling). Note: Short term uses a time window of 3 sec. for calculation. So for items shorter than this shortTermMaxOut can't be calculated correctly. Momentary uses a time window of 0.4 sec."
	},
	"NF_AnalyzeTakeLoudness2 lua": {
		"prefix": "r.NF_AnalyzeTakeLoudness2",
		"scope": "lua",
		"body": "r.NF_AnalyzeTakeLoudness2({1:take}, {2:analyzeTruePeak})$0"
		"description": "Same as NF_AnalyzeTakeLoudness but additionally returns shortTermMaxPos and momentaryMaxPos (in absolute project time). Note: shortTermMaxPos and momentaryMaxPos indicate the beginning of time intervalls, (3 sec. and 0.4 sec. resp.)."
	},
	"NF_AnalyzeTakeLoudness_IntegratedOnly lua": {
		"prefix": "r.NF_AnalyzeTakeLoudness_IntegratedOnly",
		"scope": "lua",
		"body": "r.NF_AnalyzeTakeLoudness_IntegratedOnly({1:take})$0"
		"description": "Does LUFS integrated analysis only. Faster than full loudness analysis (NF_AnalyzeTakeLoudness) . Use this if only LUFS integrated is required. Take vol. env. is taken into account. See: Signal flow"
	},
	"NF_Base64_Decode lua": {
		"prefix": "r.NF_Base64_Decode",
		"scope": "lua",
		"body": "r.NF_Base64_Decode({1:base64Str})$0"
		"description": "Returns true on success."
	},
	"NF_Base64_Encode lua": {
		"prefix": "r.NF_Base64_Encode",
		"scope": "lua",
		"body": "r.NF_Base64_Encode({1:str}, {2:usePadding})$0"
		"description": "Input string may contain null bytes in REAPER 6.44 or newer. Note: Doesn't allow padding in the middle (e.g. concatenated encoded strings), doesn't allow newlines."
	},
	"NF_ClearGlobalStartupAction lua": {
		"prefix": "r.NF_ClearGlobalStartupAction",
		"scope": "lua",
		"body": "r.NF_ClearGlobalStartupAction()$0"
		"description": "Returns true if global startup action was cleared successfully."
	},
	"NF_ClearProjectStartupAction lua": {
		"prefix": "r.NF_ClearProjectStartupAction",
		"scope": "lua",
		"body": "r.NF_ClearProjectStartupAction()$0"
		"description": "Returns true if project startup action was cleared successfully."
	},
	"NF_ClearProjectTrackSelectionAction lua": {
		"prefix": "r.NF_ClearProjectTrackSelectionAction",
		"scope": "lua",
		"body": "r.NF_ClearProjectTrackSelectionAction()$0"
		"description": "Returns true if project track selection action was cleared successfully."
	},
	"NF_DeleteTakeFromItem lua": {
		"prefix": "r.NF_DeleteTakeFromItem",
		"scope": "lua",
		"body": "r.NF_DeleteTakeFromItem({1:item}, {2:takeIdx})$0"
		"description": "Deletes a take from an item. takeIdx is zero-based. Returns true on success."
	},
	"NF_GetGlobalStartupAction lua": {
		"prefix": "r.NF_GetGlobalStartupAction",
		"scope": "lua",
		"body": "r.NF_GetGlobalStartupAction()$0"
		"description": "Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if global startup action is set, otherwise empty string. Returns false on failure."
	},
	"NF_GetMediaItemAverageRMS lua": {
		"prefix": "r.NF_GetMediaItemAverageRMS",
		"scope": "lua",
		"body": "r.NF_GetMediaItemAverageRMS({1:item})$0"
		"description": "Returns the average overall (non-windowed) dB RMS level of active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Returns -150.0 if MIDI take or empty item."
	},
	"NF_GetMediaItemMaxPeak lua": {
		"prefix": "r.NF_GetMediaItemMaxPeak",
		"scope": "lua",
		"body": "r.NF_GetMediaItemMaxPeak({1:item})$0"
		"description": "Returns the greatest max. peak value in dBFS of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Returns -150.0 if MIDI take or empty item."
	},
	"NF_GetMediaItemMaxPeakAndMaxPeakPos lua": {
		"prefix": "r.NF_GetMediaItemMaxPeakAndMaxPeakPos",
		"scope": "lua",
		"body": "r.NF_GetMediaItemMaxPeakAndMaxPeakPos({1:item})$0"
		"description": "See NF_GetMediaItemMaxPeak, additionally returns maxPeakPos (relative to item position)."
	},
	"NF_GetMediaItemPeakRMS_NonWindowed lua": {
		"prefix": "r.NF_GetMediaItemPeakRMS_NonWindowed",
		"scope": "lua",
		"body": "r.NF_GetMediaItemPeakRMS_NonWindowed({1:item})$0"
		"description": "Returns the greatest overall (non-windowed) dB RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Returns -150.0 if MIDI take or empty item."
	},
	"NF_GetMediaItemPeakRMS_Windowed lua": {
		"prefix": "r.NF_GetMediaItemPeakRMS_Windowed",
		"scope": "lua",
		"body": "r.NF_GetMediaItemPeakRMS_Windowed({1:item})$0"
		"description": "Returns the average dB RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Obeys 'Window size for peak RMS' setting in 'SWS: Set RMS analysis/normalize options' for calculation. Returns -150.0 if MIDI take or empty item."
	},
	"NF_GetProjectStartupAction lua": {
		"prefix": "r.NF_GetProjectStartupAction",
		"scope": "lua",
		"body": "r.NF_GetProjectStartupAction()$0"
		"description": "Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if project startup action is set, otherwise empty string. Returns false on failure."
	},
	"NF_GetProjectTrackSelectionAction lua": {
		"prefix": "r.NF_GetProjectTrackSelectionAction",
		"scope": "lua",
		"body": "r.NF_GetProjectTrackSelectionAction()$0"
		"description": "Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if project track selection action is set, otherwise empty string. Returns false on failure."
	},
	"NF_GetSWSMarkerRegionSub lua": {
		"prefix": "r.NF_GetSWSMarkerRegionSub",
		"scope": "lua",
		"body": "r.NF_GetSWSMarkerRegionSub({1:markerRegionIdx})$0"
		"description": "Returns SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers (not displayed marker/region index). Returns empty string if marker/region with specified index not found or marker/region subtitle not set. Lua code example here."
	},
	"NF_GetSWSTrackNotes lua": {
		"prefix": "r.NF_GetSWSTrackNotes",
		"scope": "lua",
		"body": "r.NF_GetSWSTrackNotes({1:track})$0"
		"description": ""
	},
	"NF_GetSWS_RMSoptions lua": {
		"prefix": "r.NF_GetSWS_RMSoptions",
		"scope": "lua",
		"body": "r.NF_GetSWS_RMSoptions()$0"
		"description": "Get SWS analysis/normalize options. See NF_SetSWS_RMSoptions."
	},
	"NF_GetThemeDefaultTCPHeights lua": {
		"prefix": "r.NF_GetThemeDefaultTCPHeights",
		"scope": "lua",
		"body": "r.NF_GetThemeDefaultTCPHeights()$0"
		"description": ""
	},
	"NF_ReadAudioFileBitrate lua": {
		"prefix": "r.NF_ReadAudioFileBitrate",
		"scope": "lua",
		"body": "r.NF_ReadAudioFileBitrate({1:fn})$0"
		"description": "Returns the bitrate of an audio file in kb/s if available (0 otherwise). For supported filetypes see TagLib::AudioProperties::bitrate."
	},
	"NF_ScrollHorizontallyByPercentage lua": {
		"prefix": "r.NF_ScrollHorizontallyByPercentage",
		"scope": "lua",
		"body": "r.NF_ScrollHorizontallyByPercentage({1:amount})$0"
		"description": "100 means scroll one page. Negative values scroll left."
	},
	"NF_SetGlobalStartupAction lua": {
		"prefix": "r.NF_SetGlobalStartupAction",
		"scope": "lua",
		"body": "r.NF_SetGlobalStartupAction({1:str})$0"
		"description": "Returns true if global startup action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. '_SWS_ABOUT', '_f506bc780a0ab34b8fdedb67ed5d3649'), not command IDs (e.g. '47145').\nTip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.\nNOnly works for actions / scripts from Main action section."
	},
	"NF_SetProjectStartupAction lua": {
		"prefix": "r.NF_SetProjectStartupAction",
		"scope": "lua",
		"body": "r.NF_SetProjectStartupAction({1:str})$0"
		"description": "Returns true if project startup action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. '_SWS_ABOUT', '_f506bc780a0ab34b8fdedb67ed5d3649'), not command IDs (e.g. '47145').\nTip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.\nOnly works for actions / scripts from Main action section. Project must be saved after setting project startup action to be persistent."
	},
	"NF_SetProjectTrackSelectionAction lua": {
		"prefix": "r.NF_SetProjectTrackSelectionAction",
		"scope": "lua",
		"body": "r.NF_SetProjectTrackSelectionAction({1:str})$0"
		"description": "Returns true if project track selection action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. '_SWS_ABOUT', '_f506bc780a0ab34b8fdedb67ed5d3649'), not command IDs (e.g. '47145').\nTip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.\nOnly works for actions / scripts from Main action section. Project must be saved after setting project track selection action to be persistent."
	},
	"NF_SetSWSMarkerRegionSub lua": {
		"prefix": "r.NF_SetSWSMarkerRegionSub",
		"scope": "lua",
		"body": "r.NF_SetSWSMarkerRegionSub({1:markerRegionSub}, {2:markerRegionIdx})$0"
		"description": "Set SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers (not displayed marker/region index). Returns true if subtitle is set successfully (i.e. marker/region with specified index is present in project). Lua code example here."
	},
	"NF_SetSWSTrackNotes lua": {
		"prefix": "r.NF_SetSWSTrackNotes",
		"scope": "lua",
		"body": "r.NF_SetSWSTrackNotes({1:track}, {2:str})$0"
		"description": ""
	},
	"NF_SetSWS_RMSoptions lua": {
		"prefix": "r.NF_SetSWS_RMSoptions",
		"scope": "lua",
		"body": "r.NF_SetSWS_RMSoptions({1:targetLevel}, {2:windowSize})$0"
		"description": "Set SWS analysis/normalize options (same as running action 'SWS: Set RMS analysis/normalize options'). targetLevel: target RMS normalize level (dB), windowSize: window size for peak RMS (sec.)"
	},
	"NF_TakeFX_GetFXModuleName lua": {
		"prefix": "r.NF_TakeFX_GetFXModuleName",
		"scope": "lua",
		"body": "r.NF_TakeFX_GetFXModuleName({1:item}, {2:fx})$0"
		"description": "Deprecated, see TakeFX_GetNamedConfigParm/'fx_ident' (v6.37+). See BR_TrackFX_GetFXModuleName. fx: counted consecutively across all takes (zero-based)."
	},
	"NF_UpdateSWSMarkerRegionSubWindow lua": {
		"prefix": "r.NF_UpdateSWSMarkerRegionSubWindow",
		"scope": "lua",
		"body": "r.NF_UpdateSWSMarkerRegionSubWindow()$0"
		"description": "Redraw the Notes window (call if you've changed a subtitle via NF_SetSWSMarkerRegionSub which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)"
	},
	"NF_Win32_GetSystemMetrics lua": {
		"prefix": "r.NF_Win32_GetSystemMetrics",
		"scope": "lua",
		"body": "r.NF_Win32_GetSystemMetrics({1:nIndex})$0"
		"description": "Equivalent to win32 API GetSystemMetrics(). Note: Only SM_C[XY]SCREEN, SM_C[XY][HV]SCROLL and SM_CYMENU are currently supported on macOS and Linux as of REAPER 6.68. Check the SWELL source code for up-to-date support information (swell-wnd.mm, swell-wnd-generic.cpp)."
	},
	"NVK_CountFolderItemChildren lua": {
		"prefix": "r.NVK_CountFolderItemChildren",
		"scope": "lua",
		"body": "r.NVK_CountFolderItemChildren({1:folderItem})$0"
		"description": "[NVK] Counts the number of child items under the given NVK Folder Item."
	},
	"NVK_CountFolderItems lua": {
		"prefix": "r.NVK_CountFolderItems",
		"scope": "lua",
		"body": "r.NVK_CountFolderItems({1:project})$0"
		"description": "[NVK] Counts the number of NVK Folder Items in a given project. 0 = active project."
	},
	"NVK_CountSelectedFolderItems lua": {
		"prefix": "r.NVK_CountSelectedFolderItems",
		"scope": "lua",
		"body": "r.NVK_CountSelectedFolderItems({1:project})$0"
		"description": "[NVK] Counts the number of selected NVK Folder Items in a given project. 0 = active project."
	},
	"NVK_CountTrackFolderItems lua": {
		"prefix": "r.NVK_CountTrackFolderItems",
		"scope": "lua",
		"body": "r.NVK_CountTrackFolderItems({1:track})$0"
		"description": "[NVK] Counts the number of NVK Folder Items on a given track."
	},
	"NVK_GetClipboardText lua": {
		"prefix": "r.NVK_GetClipboardText",
		"scope": "lua",
		"body": "r.NVK_GetClipboardText()$0"
		"description": "[NVK] Gets the clipboard text."
	},
	"NVK_GetFolderItem lua": {
		"prefix": "r.NVK_GetFolderItem",
		"scope": "lua",
		"body": "r.NVK_GetFolderItem({1:project}, {2:index})$0"
		"description": "[NVK] Gets the NVK Folder Item at the given index in the given project. 0 = active project."
	},
	"NVK_GetFolderItemChild lua": {
		"prefix": "r.NVK_GetFolderItemChild",
		"scope": "lua",
		"body": "r.NVK_GetFolderItemChild({1:folderItem}, {2:index})$0"
		"description": "[NVK] Gets the child item of the given NVK Folder Item at the given index."
	},
	"NVK_GetSelectedFolderItem lua": {
		"prefix": "r.NVK_GetSelectedFolderItem",
		"scope": "lua",
		"body": "r.NVK_GetSelectedFolderItem({1:project}, {2:index})$0"
		"description": "[NVK] Gets the selected NVK Folder Item at the given index in the given project. 0 = active project."
	},
	"NVK_GetTrackFolderItem lua": {
		"prefix": "r.NVK_GetTrackFolderItem",
		"scope": "lua",
		"body": "r.NVK_GetTrackFolderItem({1:track}, {2:index})$0"
		"description": "[NVK] Gets the NVK Folder Item at the given index on the given track."
	},
	"NVK_GetVersion lua": {
		"prefix": "r.NVK_GetVersion",
		"scope": "lua",
		"body": "r.NVK_GetVersion()$0"
		"description": "[NVK] Returns the version of the NVK Reaper API."
	},
	"NVK_IsFolderItem lua": {
		"prefix": "r.NVK_IsFolderItem",
		"scope": "lua",
		"body": "r.NVK_IsFolderItem({1:item})$0"
		"description": "[NVK] Checks if the given item is an NVK Folder Item."
	},
	"NVK_IsFolderItemSelected lua": {
		"prefix": "r.NVK_IsFolderItemSelected",
		"scope": "lua",
		"body": "r.NVK_IsFolderItemSelected({1:item})$0"
		"description": "[NVK] Checks if the given NVK Folder Item is selected."
	},
	"NVK_SaveClipboardImageToFile lua": {
		"prefix": "r.NVK_SaveClipboardImageToFile",
		"scope": "lua",
		"body": "r.NVK_SaveClipboardImageToFile({1:filename})$0"
		"description": "[NVK] Saves the clipboard image to a specified file path and returns the file path if successful."
	},
	"NVK_SelectAllFolderItems lua": {
		"prefix": "r.NVK_SelectAllFolderItems",
		"scope": "lua",
		"body": "r.NVK_SelectAllFolderItems({1:project}, {2:selectedIn})$0"
		"description": "[NVK] Selects all NVK Folder Items in the given project. 0 = active project. selected = true to select, false to unselect, defaults to true."
	},
	"NVK_SetClipboardText lua": {
		"prefix": "r.NVK_SetClipboardText",
		"scope": "lua",
		"body": "r.NVK_SetClipboardText({1:str})$0"
		"description": "[NVK] Sets the clipboard text to the given string."
	},
	"NVK_SetFolderItemSelected lua": {
		"prefix": "r.NVK_SetFolderItemSelected",
		"scope": "lua",
		"body": "r.NVK_SetFolderItemSelected({1:item}, {2:selected})$0"
		"description": "[NVK] Sets the given NVK Folder Item to be selected (true) or unselected (false)."
	},
	"NamedCommandLookup lua": {
		"prefix": "r.NamedCommandLookup",
		"scope": "lua",
		"body": "r.NamedCommandLookup({1:command_name})$0"
		"description": "Get the command ID number for named command that was registered by an extension such as '_SWS_ABOUT' or '_113088d11ae641c193a2b7ede3041ad5' for a ReaScript or a custom action."
	},
	"OnPauseButton lua": {
		"prefix": "r.OnPauseButton",
		"scope": "lua",
		"body": "r.OnPauseButton()$0"
		"description": "direct way to simulate pause button hit"
	},
	"OnPauseButtonEx lua": {
		"prefix": "r.OnPauseButtonEx",
		"scope": "lua",
		"body": "r.OnPauseButtonEx({1:proj})$0"
		"description": "direct way to simulate pause button hit"
	},
	"OnPlayButton lua": {
		"prefix": "r.OnPlayButton",
		"scope": "lua",
		"body": "r.OnPlayButton()$0"
		"description": "direct way to simulate play button hit"
	},
	"OnPlayButtonEx lua": {
		"prefix": "r.OnPlayButtonEx",
		"scope": "lua",
		"body": "r.OnPlayButtonEx({1:proj})$0"
		"description": "direct way to simulate play button hit"
	},
	"OnStopButton lua": {
		"prefix": "r.OnStopButton",
		"scope": "lua",
		"body": "r.OnStopButton()$0"
		"description": "direct way to simulate stop button hit"
	},
	"OnStopButtonEx lua": {
		"prefix": "r.OnStopButtonEx",
		"scope": "lua",
		"body": "r.OnStopButtonEx({1:proj})$0"
		"description": "direct way to simulate stop button hit"
	},
	"OpenColorThemeFile lua": {
		"prefix": "r.OpenColorThemeFile",
		"scope": "lua",
		"body": "r.OpenColorThemeFile({1:fn})$0"
		"description": ""
	},
	"OpenMediaExplorer lua": {
		"prefix": "r.OpenMediaExplorer",
		"scope": "lua",
		"body": "r.OpenMediaExplorer({1:mediafn}, {2:play})$0"
		"description": "Opens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it."
	},
	"OscLocalMessageToHost lua": {
		"prefix": "r.OscLocalMessageToHost",
		"scope": "lua",
		"body": "r.OscLocalMessageToHost({1:message}, {2:valueIn})$0"
		"description": "Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns."
	},
	"PCM_Sink_Enum lua": {
		"prefix": "r.PCM_Sink_Enum",
		"scope": "lua",
		"body": "r.PCM_Sink_Enum({1:idx})$0"
		"description": ""
	},
	"PCM_Sink_GetExtension lua": {
		"prefix": "r.PCM_Sink_GetExtension",
		"scope": "lua",
		"body": "r.PCM_Sink_GetExtension({1:data})$0"
		"description": ""
	},
	"PCM_Sink_ShowConfig lua": {
		"prefix": "r.PCM_Sink_ShowConfig",
		"scope": "lua",
		"body": "r.PCM_Sink_ShowConfig({1:cfg}, {2:hwndParent})$0"
		"description": ""
	},
	"PCM_Source_BuildPeaks lua": {
		"prefix": "r.PCM_Source_BuildPeaks",
		"scope": "lua",
		"body": "r.PCM_Source_BuildPeaks({1:src}, {2:mode})$0"
		"description": "Calls and returns PCM_source::PeaksBuild_Begin() if mode=0, PeaksBuild_Run() if mode=1, and PeaksBuild_Finish() if mode=2. Normal use is to call PCM_Source_BuildPeaks(src,0), and if that returns nonzero, call PCM_Source_BuildPeaks(src,1) periodically until it returns zero (it returns the percentage of the file remaining), then call PCM_Source_BuildPeaks(src,2) to finalize. If PCM_Source_BuildPeaks(src,0) returns zero, then no further action is necessary."
	},
	"PCM_Source_CreateFromFile lua": {
		"prefix": "r.PCM_Source_CreateFromFile",
		"scope": "lua",
		"body": "r.PCM_Source_CreateFromFile({1:filename})$0"
		"description": "See PCM_Source_CreateFromFileEx."
	},
	"PCM_Source_CreateFromFileEx lua": {
		"prefix": "r.PCM_Source_CreateFromFileEx",
		"scope": "lua",
		"body": "r.PCM_Source_CreateFromFileEx({1:filename}, {2:forcenoMidiImp})$0"
		"description": "Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events."
	},
	"PCM_Source_CreateFromType lua": {
		"prefix": "r.PCM_Source_CreateFromType",
		"scope": "lua",
		"body": "r.PCM_Source_CreateFromType({1:sourcetype})$0"
		"description": "Create a PCM_source from a 'type' (use this if you're going to load its state via LoadState/ProjectStateContext).\nValid types include 'WAVE', 'MIDI', or whatever plug-ins define as well."
	},
	"PCM_Source_Destroy lua": {
		"prefix": "r.PCM_Source_Destroy",
		"scope": "lua",
		"body": "r.PCM_Source_Destroy({1:src})$0"
		"description": "Deletes a PCM_source -- be sure that you remove any project reference before deleting a source"
	},
	"PCM_Source_GetPeaks lua": {
		"prefix": "r.PCM_Source_GetPeaks",
		"scope": "lua",
		"body": "r.PCM_Source_GetPeaks({1:src}, {2:peakrate}, {3:starttime}, {4:numchannels}, {5:numsamplesperchannel}, {6:want_extra_type}, {7:buf})$0"
		"description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality."
	},
	"PCM_Source_GetSectionInfo lua": {
		"prefix": "r.PCM_Source_GetSectionInfo",
		"scope": "lua",
		"body": "r.PCM_Source_GetSectionInfo({1:src})$0"
		"description": "If a section/reverse block, retrieves offset/len/reverse. return true if success"
	},
	"PluginWantsAlwaysRunFx lua": {
		"prefix": "r.PluginWantsAlwaysRunFx",
		"scope": "lua",
		"body": "r.PluginWantsAlwaysRunFx({1:amt})$0"
		"description": ""
	},
	"PreventUIRefresh lua": {
		"prefix": "r.PreventUIRefresh",
		"scope": "lua",
		"body": "r.PreventUIRefresh({1:prevent_count})$0"
		"description": "adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur"
	},
	"PromptForAction lua": {
		"prefix": "r.PromptForAction",
		"scope": "lua",
		"body": "r.PromptForAction({1:session_mode}, {2:init_id}, {3:section_id})$0"
		"description": "Uses the action list to choose an action. Call with session_mode=1 to create a session (init_id will be the initial action to select, or 0), then poll with session_mode=0, checking return value for user-selected action (will return 0 if no action selected yet, or -1 if the action window is no longer available). When finished, call with session_mode=-1."
	},
	"ReaPack_AboutInstalledPackage lua": {
		"prefix": "r.ReaPack_AboutInstalledPackage",
		"scope": "lua",
		"body": "r.ReaPack_AboutInstalledPackage({1:entry})$0"
		"description": "Show the about dialog of the given package entry.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week."
	},
	"ReaPack_AboutRepository lua": {
		"prefix": "r.ReaPack_AboutRepository",
		"scope": "lua",
		"body": "r.ReaPack_AboutRepository({1:repoName})$0"
		"description": "Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week."
	},
	"ReaPack_AddSetRepository lua": {
		"prefix": "r.ReaPack_AddSetRepository",
		"scope": "lua",
		"body": "r.ReaPack_AddSetRepository({1:name}, {2:url}, {3:enable}, {4:autoInstall})$0"
		"description": "Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. Call ReaPack_ProcessQueue(true) when done to process the new list and update the GUI.\n\nautoInstall: usually set to 2 (obey user setting)."
	},
	"ReaPack_BrowsePackages lua": {
		"prefix": "r.ReaPack_BrowsePackages",
		"scope": "lua",
		"body": "r.ReaPack_BrowsePackages({1:filter})$0"
		"description": "Opens the package browser with the given filter string."
	},
	"ReaPack_CompareVersions lua": {
		"prefix": "r.ReaPack_CompareVersions",
		"scope": "lua",
		"body": "r.ReaPack_CompareVersions({1:ver1}, {2:ver2})$0"
		"description": "Returns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise."
	},
	"ReaPack_EnumOwnedFiles lua": {
		"prefix": "r.ReaPack_EnumOwnedFiles",
		"scope": "lua",
		"body": "r.ReaPack_EnumOwnedFiles({1:entry}, {2:index})$0"
		"description": "Enumerate the files owned by the given package. Returns false when there is no more data.\n\nsections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor\ntype: see ReaPack_GetEntryInfo."
	},
	"ReaPack_FreeEntry lua": {
		"prefix": "r.ReaPack_FreeEntry",
		"scope": "lua",
		"body": "r.ReaPack_FreeEntry({1:entry})$0"
		"description": "Free resources allocated for the given package entry."
	},
	"ReaPack_GetEntryInfo lua": {
		"prefix": "r.ReaPack_GetEntryInfo",
		"scope": "lua",
		"body": "r.ReaPack_GetEntryInfo({1:entry})$0"
		"description": "Get the repository name, category, package name, package description, package type, the currently installed version, author name, flags (&1=Pinned, &2=BleedingEdge) and how many files are owned by the given package entry.\n\ntype: 1=script, 2=extension, 3=effect, 4=data, 5=theme, 6=langpack, 7=webinterface"
	},
	"ReaPack_GetOwner lua": {
		"prefix": "r.ReaPack_GetOwner",
		"scope": "lua",
		"body": "r.ReaPack_GetOwner({1:fn})$0"
		"description": "Returns the package entry owning the given file.\nDelete the returned object from memory after use with ReaPack_FreeEntry."
	},
	"ReaPack_GetRepositoryInfo lua": {
		"prefix": "r.ReaPack_GetRepositoryInfo",
		"scope": "lua",
		"body": "r.ReaPack_GetRepositoryInfo({1:name})$0"
		"description": "Get the infos of the given repository.\n\nautoInstall: 0=manual, 1=when sychronizing, 2=obey user setting"
	},
	"ReaPack_ProcessQueue lua": {
		"prefix": "r.ReaPack_ProcessQueue",
		"scope": "lua",
		"body": "r.ReaPack_ProcessQueue({1:refreshUI})$0"
		"description": "Run pending operations and save the configuration file. If refreshUI is true the browser and manager windows are guaranteed to be refreshed (otherwise it depends on which operations are in the queue)."
	},
	"ReaScriptError lua": {
		"prefix": "r.ReaScriptError",
		"scope": "lua",
		"body": "r.ReaScriptError({1:errmsg})$0"
		"description": "Causes REAPER to display the error message after the current ReaScript finishes. If called within a Lua context and errmsg has a ! prefix, script execution will be terminated."
	},
	"RecursiveCreateDirectory lua": {
		"prefix": "r.RecursiveCreateDirectory",
		"scope": "lua",
		"body": "r.RecursiveCreateDirectory({1:path}, {2:ignored})$0"
		"description": "returns positive value on success, 0 on failure."
	},
	"RefreshToolbar lua": {
		"prefix": "r.RefreshToolbar",
		"scope": "lua",
		"body": "r.RefreshToolbar({1:command_id})$0"
		"description": "See RefreshToolbar2."
	},
	"RefreshToolbar2 lua": {
		"prefix": "r.RefreshToolbar2",
		"scope": "lua",
		"body": "r.RefreshToolbar2({1:section_id}, {2:command_id})$0"
		"description": "Refresh the toolbar button states of a toggle action."
	},
	"RemoveTrackSend lua": {
		"prefix": "r.RemoveTrackSend",
		"scope": "lua",
		"body": "r.RemoveTrackSend({1:tr}, {2:category}, {3:sendidx})$0"
		"description": "Remove a send/receive/hardware output, return true on success. category is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends."
	},
	"RenderFileSection lua": {
		"prefix": "r.RenderFileSection",
		"scope": "lua",
		"body": "r.RenderFileSection({1:source_filename}, {2:target_filename}, {3:start_percent}, {4:end_percent}, {5:playrate})$0"
		"description": "Not available while playing back."
	},
	"ReorderSelectedTracks lua": {
		"prefix": "r.ReorderSelectedTracks",
		"scope": "lua",
		"body": "r.ReorderSelectedTracks({1:beforeTrackIdx}, {2:makePrevFolder})$0"
		"description": "Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder"
	},
	"Resample_EnumModes lua": {
		"prefix": "r.Resample_EnumModes",
		"scope": "lua",
		"body": "r.Resample_EnumModes({1:mode})$0"
		"description": ""
	},
	"ReverseNamedCommandLookup lua": {
		"prefix": "r.ReverseNamedCommandLookup",
		"scope": "lua",
		"body": "r.ReverseNamedCommandLookup({1:command_id})$0"
		"description": "Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return 'SWS_ABOUT'), it will be NULL if command_id is a native action."
	},
	"SLIDER2DB lua": {
		"prefix": "r.SLIDER2DB",
		"scope": "lua",
		"body": "r.SLIDER2DB({1:y})$0"
		"description": ""
	},
	"SNM_AddReceive lua": {
		"prefix": "r.SNM_AddReceive",
		"scope": "lua",
		"body": "r.SNM_AddReceive({1:src}, {2:dest}, {3:type})$0"
		"description": "[S&M] Deprecated, see CreateTrackSend (v5.15pre1+). Adds a receive. Returns false if nothing updated.\ntype -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).\nNote: obeys default sends preferences, supports frozen tracks, etc.."
	},
	"SNM_AddTCPFXParm lua": {
		"prefix": "r.SNM_AddTCPFXParm",
		"scope": "lua",
		"body": "r.SNM_AddTCPFXParm({1:tr}, {2:fxId}, {3:prmId})$0"
		"description": "[S&M] Add an FX parameter knob in the TCP. Returns false if nothing updated (invalid parameters, knob already present, etc..)"
	},
	"SNM_CreateFastString lua": {
		"prefix": "r.SNM_CreateFastString",
		"scope": "lua",
		"body": "r.SNM_CreateFastString({1:str})$0"
		"description": "[S&M] Instantiates a new 'fast string'. You must delete this string, see SNM_DeleteFastString."
	},
	"SNM_DeleteFastString lua": {
		"prefix": "r.SNM_DeleteFastString",
		"scope": "lua",
		"body": "r.SNM_DeleteFastString({1:str})$0"
		"description": "[S&M] Deletes a 'fast string' instance."
	},
	"SNM_GetDoubleConfigVar lua": {
		"prefix": "r.SNM_GetDoubleConfigVar",
		"scope": "lua",
		"body": "r.SNM_GetDoubleConfigVar({1:varname}, {2:errvalue})$0"
		"description": "[S&M] Returns a floating-point preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found)."
	},
	"SNM_GetDoubleConfigVarEx lua": {
		"prefix": "r.SNM_GetDoubleConfigVarEx",
		"scope": "lua",
		"body": "r.SNM_GetDoubleConfigVarEx({1:proj}, {2:varname}, {3:errvalue})$0"
		"description": "[S&M] See SNM_GetDoubleConfigVar."
	},
	"SNM_GetFastString lua": {
		"prefix": "r.SNM_GetFastString",
		"scope": "lua",
		"body": "r.SNM_GetFastString({1:str})$0"
		"description": "[S&M] Gets the 'fast string' content."
	},
	"SNM_GetFastStringLength lua": {
		"prefix": "r.SNM_GetFastStringLength",
		"scope": "lua",
		"body": "r.SNM_GetFastStringLength({1:str})$0"
		"description": "[S&M] Gets the 'fast string' length."
	},
	"SNM_GetIntConfigVar lua": {
		"prefix": "r.SNM_GetIntConfigVar",
		"scope": "lua",
		"body": "r.SNM_GetIntConfigVar({1:varname}, {2:errvalue})$0"
		"description": "[S&M] Returns an integer preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found)."
	},
	"SNM_GetIntConfigVarEx lua": {
		"prefix": "r.SNM_GetIntConfigVarEx",
		"scope": "lua",
		"body": "r.SNM_GetIntConfigVarEx({1:proj}, {2:varname}, {3:errvalue})$0"
		"description": "[S&M] See SNM_GetIntConfigVar."
	},
	"SNM_GetLongConfigVar lua": {
		"prefix": "r.SNM_GetLongConfigVar",
		"scope": "lua",
		"body": "r.SNM_GetLongConfigVar({1:varname})$0"
		"description": "[S&M] Reads a 64-bit integer preference split in two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found)."
	},
	"SNM_GetLongConfigVarEx lua": {
		"prefix": "r.SNM_GetLongConfigVarEx",
		"scope": "lua",
		"body": "r.SNM_GetLongConfigVarEx({1:proj}, {2:varname})$0"
		"description": "[S&M] See SNM_GetLongConfigVar."
	},
	"SNM_GetMediaItemTakeByGUID lua": {
		"prefix": "r.SNM_GetMediaItemTakeByGUID",
		"scope": "lua",
		"body": "r.SNM_GetMediaItemTakeByGUID({1:project}, {2:guid})$0"
		"description": "[S&M] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see BR_GetMediaItemTakeGUID"
	},
	"SNM_GetProjectMarkerName lua": {
		"prefix": "r.SNM_GetProjectMarkerName",
		"scope": "lua",
		"body": "r.SNM_GetProjectMarkerName({1:proj}, {2:num}, {3:isrgn}, {4:name})$0"
		"description": "[S&M] Gets a marker/region name. Returns true if marker/region found."
	},
	"SNM_GetSetObjectState lua": {
		"prefix": "r.SNM_GetSetObjectState",
		"scope": "lua",
		"body": "r.SNM_GetSetObjectState({1:obj}, {2:state}, {3:setnewvalue}, {4:wantminimalstate})$0"
		"description": "[S&M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.\nWhen getting a track state (and when you are not interested in FX data), you can use wantminimalstate=true to radically reduce the length of the state. Do not set such minimal states back though, this is for read-only applications!\nNote: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required."
	},
	"SNM_GetSetSourceState lua": {
		"prefix": "r.SNM_GetSetSourceState",
		"scope": "lua",
		"body": "r.SNM_GetSetSourceState({1:item}, {2:takeidx}, {3:state}, {4:setnewvalue})$0"
		"description": "[S&M] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.\nNote: this function does not use a MediaItem_Take* param in order to manage empty takes (i.e. takes with MediaItem_Take*==NULL), see SNM_GetSetSourceState2."
	},
	"SNM_GetSetSourceState2 lua": {
		"prefix": "r.SNM_GetSetSourceState2",
		"scope": "lua",
		"body": "r.SNM_GetSetSourceState2({1:take}, {2:state}, {3:setnewvalue})$0"
		"description": "[S&M] Gets or sets a take source state. Returns false if failed.\nNote: this function cannot deal with empty takes, see SNM_GetSetSourceState."
	},
	"SNM_GetSourceType lua": {
		"prefix": "r.SNM_GetSourceType",
		"scope": "lua",
		"body": "r.SNM_GetSourceType({1:take}, {2:type})$0"
		"description": "[S&M] Deprecated, see GetMediaSourceType. Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)"
	},
	"SNM_MoveOrRemoveTrackFX lua": {
		"prefix": "r.SNM_MoveOrRemoveTrackFX",
		"scope": "lua",
		"body": "r.SNM_MoveOrRemoveTrackFX({1:tr}, {2:fxId}, {3:what})$0"
		"description": "[S&M] Deprecated, see TrackFX_{CopyToTrack,Delete} (v5.95+). Move or removes a track FX. Returns true if tr has been updated.\nfxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain."
	},
	"SNM_ReadMediaFileTag lua": {
		"prefix": "r.SNM_ReadMediaFileTag",
		"scope": "lua",
		"body": "r.SNM_ReadMediaFileTag({1:fn}, {2:tag})$0"
		"description": "[S&M] Reads a media file tag. Supported tags: 'artist', 'album', 'genre', 'comment', 'title', 'track' (track number) or 'year'. Returns false if tag was not found. See SNM_TagMediaFile."
	},
	"SNM_RemoveReceive lua": {
		"prefix": "r.SNM_RemoveReceive",
		"scope": "lua",
		"body": "r.SNM_RemoveReceive({1:tr}, {2:rcvidx})$0"
		"description": "[S&M] Deprecated, see RemoveTrackSend (v5.15pre1+). Removes a receive. Returns false if nothing updated."
	},
	"SNM_RemoveReceivesFrom lua": {
		"prefix": "r.SNM_RemoveReceivesFrom",
		"scope": "lua",
		"body": "r.SNM_RemoveReceivesFrom({1:tr}, {2:srctr})$0"
		"description": "[S&M] Removes all receives from srctr. Returns false if nothing updated."
	},
	"SNM_SelectResourceBookmark lua": {
		"prefix": "r.SNM_SelectResourceBookmark",
		"scope": "lua",
		"body": "r.SNM_SelectResourceBookmark({1:name})$0"
		"description": "[S&M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed)."
	},
	"SNM_SetDoubleConfigVar lua": {
		"prefix": "r.SNM_SetDoubleConfigVar",
		"scope": "lua",
		"body": "r.SNM_SetDoubleConfigVar({1:varname}, {2:newvalue})$0"
		"description": "[S&M] Sets a floating-point preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range)."
	},
	"SNM_SetDoubleConfigVarEx lua": {
		"prefix": "r.SNM_SetDoubleConfigVarEx",
		"scope": "lua",
		"body": "r.SNM_SetDoubleConfigVarEx({1:proj}, {2:varname}, {3:newvalue})$0"
		"description": "[S&M] See SNM_SetDoubleConfigVar."
	},
	"SNM_SetFastString lua": {
		"prefix": "r.SNM_SetFastString",
		"scope": "lua",
		"body": "r.SNM_SetFastString({1:str}, {2:newstr})$0"
		"description": "[S&M] Sets the 'fast string' content. Returns str for facility."
	},
	"SNM_SetIntConfigVar lua": {
		"prefix": "r.SNM_SetIntConfigVar",
		"scope": "lua",
		"body": "r.SNM_SetIntConfigVar({1:varname}, {2:newvalue})$0"
		"description": "[S&M] Sets an integer preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range)."
	},
	"SNM_SetIntConfigVarEx lua": {
		"prefix": "r.SNM_SetIntConfigVarEx",
		"scope": "lua",
		"body": "r.SNM_SetIntConfigVarEx({1:proj}, {2:varname}, {3:newvalue})$0"
		"description": "[S&M] See SNM_SetIntConfigVar."
	},
	"SNM_SetLongConfigVar lua": {
		"prefix": "r.SNM_SetLongConfigVar",
		"scope": "lua",
		"body": "r.SNM_SetLongConfigVar({1:varname}, {2:newHighValue}, {3:newLowValue})$0"
		"description": "[S&M] Sets a 64-bit integer preference from two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found)."
	},
	"SNM_SetLongConfigVarEx lua": {
		"prefix": "r.SNM_SetLongConfigVarEx",
		"scope": "lua",
		"body": "r.SNM_SetLongConfigVarEx({1:proj}, {2:varname}, {3:newHighValue}, {4:newLowValue})$0"
		"description": "[S&M] SNM_SetLongConfigVar."
	},
	"SNM_SetProjectMarker lua": {
		"prefix": "r.SNM_SetProjectMarker",
		"scope": "lua",
		"body": "r.SNM_SetProjectMarker({1:proj}, {2:num}, {3:isrgn}, {4:pos}, {5:rgnend}, {6:name}, {7:color})$0"
		"description": "[S&M] Deprecated, see SetProjectMarker4 -- Same function as SetProjectMarker3() except it can set empty names ''."
	},
	"SNM_SetStringConfigVar lua": {
		"prefix": "r.SNM_SetStringConfigVar",
		"scope": "lua",
		"body": "r.SNM_SetStringConfigVar({1:varname}, {2:newvalue})$0"
		"description": "[S&M] Sets a string preference (general prefs only). Returns false if failed (e.g. varname not found or value too long). See get_config_var_string."
	},
	"SNM_TagMediaFile lua": {
		"prefix": "r.SNM_TagMediaFile",
		"scope": "lua",
		"body": "r.SNM_TagMediaFile({1:fn}, {2:tag}, {3:tagval})$0"
		"description": "[S&M] Tags a media file thanks to TagLib. Supported tags: 'artist', 'album', 'genre', 'comment', 'title', 'track' (track number) or 'year'. Use an empty tagval to clear a tag. When a file is opened in REAPER, turn it offline before using this function. Returns false if nothing updated. See SNM_ReadMediaFileTag."
	},
	"SNM_TieResourceSlotActions lua": {
		"prefix": "r.SNM_TieResourceSlotActions",
		"scope": "lua",
		"body": "r.SNM_TieResourceSlotActions({1:bookmarkId})$0"
		"description": "[S&M] Attach Resources slot actions to a given bookmark."
	},
	"SN_FocusMIDIEditor lua": {
		"prefix": "r.SN_FocusMIDIEditor",
		"scope": "lua",
		"body": "r.SN_FocusMIDIEditor()$0"
		"description": "Focuses the active/open MIDI editor."
	},
	"ScaleFromEnvelopeMode lua": {
		"prefix": "r.ScaleFromEnvelopeMode",
		"scope": "lua",
		"body": "r.ScaleFromEnvelopeMode({1:scaling_mode}, {2:val})$0"
		"description": "See GetEnvelopeScalingMode."
	},
	"ScaleToEnvelopeMode lua": {
		"prefix": "r.ScaleToEnvelopeMode",
		"scope": "lua",
		"body": "r.ScaleToEnvelopeMode({1:scaling_mode}, {2:val})$0"
		"description": "See GetEnvelopeScalingMode."
	},
	"SectionFromUniqueID lua": {
		"prefix": "r.SectionFromUniqueID",
		"scope": "lua",
		"body": "r.SectionFromUniqueID({1:uniqueID})$0"
		"description": ""
	},
	"SelectAllMediaItems lua": {
		"prefix": "r.SelectAllMediaItems",
		"scope": "lua",
		"body": "r.SelectAllMediaItems({1:proj}, {2:selected})$0"
		"description": ""
	},
	"SelectProjectInstance lua": {
		"prefix": "r.SelectProjectInstance",
		"scope": "lua",
		"body": "r.SelectProjectInstance({1:proj})$0"
		"description": ""
	},
	"SendMIDIMessageToHardware lua": {
		"prefix": "r.SendMIDIMessageToHardware",
		"scope": "lua",
		"body": "r.SendMIDIMessageToHardware({1:output}, {2:msg})$0"
		"description": "Sends a MIDI message to output device specified by output. Message is sent in immediate mode. Lua example of how to pack the message string:\nsysex = { 0xF0, 0x00, 0xF7 }\nmsg = ''\nfor i=1, #sysex do msg = msg .. string.char(sysex[i]) end"
	},
	"SetActiveTake lua": {
		"prefix": "r.SetActiveTake",
		"scope": "lua",
		"body": "r.SetActiveTake({1:take})$0"
		"description": "set this take active in this media item"
	},
	"SetAutomationMode lua": {
		"prefix": "r.SetAutomationMode",
		"scope": "lua",
		"body": "r.SetAutomationMode({1:mode}, {2:onlySel})$0"
		"description": "sets all or selected tracks to mode."
	},
	"SetCurrentBPM lua": {
		"prefix": "r.SetCurrentBPM",
		"scope": "lua",
		"body": "r.SetCurrentBPM({1:__proj}, {2:bpm}, {3:wantUndo})$0"
		"description": "set current BPM in project, set wantUndo=true to add undo point"
	},
	"SetCursorContext lua": {
		"prefix": "r.SetCursorContext",
		"scope": "lua",
		"body": "r.SetCursorContext({1:mode}, {2:envIn})$0"
		"description": "You must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)"
	},
	"SetEditCurPos lua": {
		"prefix": "r.SetEditCurPos",
		"scope": "lua",
		"body": "r.SetEditCurPos({1:time}, {2:moveview}, {3:seekplay})$0"
		"description": ""
	},
	"SetEditCurPos2 lua": {
		"prefix": "r.SetEditCurPos2",
		"scope": "lua",
		"body": "r.SetEditCurPos2({1:proj}, {2:time}, {3:moveview}, {4:seekplay})$0"
		"description": ""
	},
	"SetEnvelopePoint lua": {
		"prefix": "r.SetEnvelopePoint",
		"scope": "lua",
		"body": "r.SetEnvelopePoint({1:envelope}, {2:ptidx}, {3:timeIn}, {4:valueIn}, {5:shapeIn}, {6:tensionIn}, {7:selectedIn}, {8:noSortIn})$0"
		"description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See SetEnvelopePointEx."
	},
	"SetEnvelopePointEx lua": {
		"prefix": "r.SetEnvelopePointEx",
		"scope": "lua",
		"body": "r.SetEnvelopePointEx({1:envelope}, {2:autoitem_idx}, {3:ptidx}, {4:timeIn}, {5:valueIn}, {6:shapeIn}, {7:tensionIn}, {8:selectedIn}, {9:noSortIn})$0"
		"description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx."
	},
	"SetEnvelopeStateChunk lua": {
		"prefix": "r.SetEnvelopeStateChunk",
		"scope": "lua",
		"body": "r.SetEnvelopeStateChunk({1:env}, {2:str}, {3:isundo})$0"
		"description": "Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint."
	},
	"SetExtState lua": {
		"prefix": "r.SetExtState",
		"scope": "lua",
		"body": "r.SetExtState({1:section}, {2:key}, {3:value}, {4:persist})$0"
		"description": "Set the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. See GetExtState, DeleteExtState, HasExtState."
	},
	"SetGlobalAutomationOverride lua": {
		"prefix": "r.SetGlobalAutomationOverride",
		"scope": "lua",
		"body": "r.SetGlobalAutomationOverride({1:mode})$0"
		"description": "mode: see GetGlobalAutomationOverride"
	},
	"SetItemStateChunk lua": {
		"prefix": "r.SetItemStateChunk",
		"scope": "lua",
		"body": "r.SetItemStateChunk({1:item}, {2:str}, {3:isundo})$0"
		"description": "Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint."
	},
	"SetMIDIEditorGrid lua": {
		"prefix": "r.SetMIDIEditorGrid",
		"scope": "lua",
		"body": "r.SetMIDIEditorGrid({1:project}, {2:division})$0"
		"description": "Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc."
	},
	"SetMasterTrackVisibility lua": {
		"prefix": "r.SetMasterTrackVisibility",
		"scope": "lua",
		"body": "r.SetMasterTrackVisibility({1:flag})$0"
		"description": "set &1 to show the master track in the TCP, &2 to HIDE in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility."
	},
	"SetMediaItemInfo_Value lua": {
		"prefix": "r.SetMediaItemInfo_Value",
		"scope": "lua",
		"body": "r.SetMediaItemInfo_Value({1:item}, {2:parmname}, {3:newvalue})$0"
		"description": "Set media item numerical-value attributes.\nB_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_LANEPLAYS : char * : on fixed lane tracks, 0=this item lane does not play, 1=this item lane plays exclusively, 2=this item lane plays and other lanes also play, -1=this item is on a non-visible, non-playing lane on a formerly fixed-lane track (read-only)\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * : free item positioning or fixed lane Y-position. 0=top of track, 1.0=bottom of track\nF_FREEMODE_H : float * : free item positioning or fixed lane height. 0.5=half the track height, 1.0=full track height\nI_FIXEDLANE : int * : fixed lane of item (fine to call with setNewValue, but returned value is read-only)\nB_FIXEDLANE_HIDDEN : bool * : true if displaying only one fixed lane and this item is in a different lane (read-only)"
	},
	"SetMediaItemLength lua": {
		"prefix": "r.SetMediaItemLength",
		"scope": "lua",
		"body": "r.SetMediaItemLength({1:item}, {2:length}, {3:refreshUI})$0"
		"description": "Redraws the screen only if refreshUI == true.\nSee UpdateArrange()."
	},
	"SetMediaItemPosition lua": {
		"prefix": "r.SetMediaItemPosition",
		"scope": "lua",
		"body": "r.SetMediaItemPosition({1:item}, {2:position}, {3:refreshUI})$0"
		"description": "Redraws the screen only if refreshUI == true.\nSee UpdateArrange()."
	},
	"SetMediaItemSelected lua": {
		"prefix": "r.SetMediaItemSelected",
		"scope": "lua",
		"body": "r.SetMediaItemSelected({1:item}, {2:selected})$0"
		"description": ""
	},
	"SetMediaItemTakeInfo_Value lua": {
		"prefix": "r.SetMediaItemTakeInfo_Value",
		"scope": "lua",
		"body": "r.SetMediaItemTakeInfo_Value({1:take}, {2:parmname}, {3:newvalue})$0"
		"description": "Set media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=project default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_STRETCHFLAGS : int * : stretch marker flags (&7 mask for mode override: 0=default, 1=balanced, 2/3/6=tonal, 4=transient, 5=no pre-echo)\nF_STRETCHFADESIZE : float * : stretch marker fade size in seconds (0.0025 default)\nI_RECPASSID : int * : record pass ID\nI_TAKEFX_NCH : int * : number of internal audio channels for per-take FX to use (OK to call with setNewValue, but the returned value is read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)"
	},
	"SetMediaItemTake_Source lua": {
		"prefix": "r.SetMediaItemTake_Source",
		"scope": "lua",
		"body": "r.SetMediaItemTake_Source({1:take}, {2:source})$0"
		"description": "Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly."
	},
	"SetMediaTrackInfo_Value lua": {
		"prefix": "r.SetMediaTrackInfo_Value",
		"scope": "lua",
		"body": "r.SetMediaTrackInfo_Value({1:tr}, {2:parmname}, {3:newvalue})$0"
		"description": "Set track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-128, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)\nI_MCPW : int * : current MCP width in pixels (read-only)\nI_MCPH : int * : current MCP height in pixels (read-only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder collapsed state (only valid on folders), 0=normal, 1=collapsed, 2=fully collapsed\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_MIDI_INPUT_CHANMAP : int * : -1 maps to source channel, otherwise 1-16 to map to MIDI channel\nI_MIDI_CTL_CHAN : int * : -1 no link, 0-15 link to MIDI volume/pan on channel, 16 link to MIDI volume/pan on all channels\nI_MIDI_TRACKSEL_FLAG : int * : MIDI editor track list options: &1=expand media items, &2=exclude from list, &4=auto-pruned\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nI_SPACER : int * : 1=TCP track spacer above this trackB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper\nP_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)\nI_NUMFIXEDLANES : int * : number of track fixed lanes (fine to call with setNewValue, but returned value is read-only)\nC_LANESCOLLAPSED : char * : fixed lane collapse state (1=lanes collapsed, 2=track displays as non-fixed-lanes but hidden lanes exist)\nC_LANESETTINGS : char * : fixed lane settings (&1=auto-remove empty lanes at bottom, &2=do not auto-comp new recording, &4=newly recorded lanes play exclusively (else add lanes in layers), &8=big lanes (else small lanes), &16=add new recording at bottom (else record into first available lane), &32=hide lane buttons\nC_LANEPLAYS:N : char * :  on fixed lane tracks, 0=lane N does not play, 1=lane N plays exclusively, 2=lane N plays and other lanes also play (fine to call with setNewValue, but returned value is read-only)\nC_ALLLANESPLAY : char * : on fixed lane tracks, 0=no lanes play, 1=all lanes play, 2=some lanes play (fine to call with setNewValue 0 or 1, but returned value is read-only)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG"
	},
	"SetMixerScroll lua": {
		"prefix": "r.SetMixerScroll",
		"scope": "lua",
		"body": "r.SetMixerScroll({1:leftmosttrack})$0"
		"description": "Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right."
	},
	"SetMouseModifier lua": {
		"prefix": "r.SetMouseModifier",
		"scope": "lua",
		"body": "r.SetMouseModifier({1:context}, {2:modifier_flag}, {3:action})$0"
		"description": "Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.\nContext is a string like 'MM_CTX_ITEM' (see reaper-mouse.ini) or 'Media item left drag' (unlocalized).\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\nFor left-click and double-click contexts, the action can be any built-in command ID number\nor any custom action ID string. Find built-in command IDs in the REAPER actions window\n(enable 'show command IDs' in the context menu), and find custom action ID strings in reaper-kb.ini.\nThe action string may be a mouse modifier ID (see reaper-mouse.ini) with ' m' appended to it,\nor (for click/double-click contexts) a command ID with ' c' appended to it,\nor the text that appears in the mouse modifiers preferences dialog, like 'Move item' (unlocalized).\nFor example, SetMouseModifier('MM_CTX_ITEM', 0, '1 m') and SetMouseModifier('Media item left drag', 0, 'Move item') are equivalent.\nSetMouseModifier(context, modifier_flag, -1) will reset that mouse modifier to default.\nSetMouseModifier(context, -1, -1) will reset the entire context to default.\nSetMouseModifier(-1, -1, -1) will reset all contexts to default.\nSee GetMouseModifier."
	},
	"SetOnlyTrackSelected lua": {
		"prefix": "r.SetOnlyTrackSelected",
		"scope": "lua",
		"body": "r.SetOnlyTrackSelected({1:track})$0"
		"description": "Set exactly one track selected, deselect all others"
	},
	"SetProjExtState lua": {
		"prefix": "r.SetProjExtState",
		"scope": "lua",
		"body": "r.SetProjExtState({1:proj}, {2:extname}, {3:key}, {4:value})$0"
		"description": "Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or '', all extended data for that extname will be deleted.  If val is NULL or '', the data previously associated with that key will be deleted. Returns the size of the state for this extname. See GetProjExtState, EnumProjExtState."
	},
	"SetProjectGrid lua": {
		"prefix": "r.SetProjectGrid",
		"scope": "lua",
		"body": "r.SetProjectGrid({1:project}, {2:division})$0"
		"description": "Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc."
	},
	"SetProjectMarker lua": {
		"prefix": "r.SetProjectMarker",
		"scope": "lua",
		"body": "r.SetProjectMarker({1:markrgnindexnumber}, {2:isrgn}, {3:pos}, {4:rgnend}, {5:name})$0"
		"description": "Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4."
	},
	"SetProjectMarker2 lua": {
		"prefix": "r.SetProjectMarker2",
		"scope": "lua",
		"body": "r.SetProjectMarker2({1:proj}, {2:markrgnindexnumber}, {3:isrgn}, {4:pos}, {5:rgnend}, {6:name})$0"
		"description": "Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4."
	},
	"SetProjectMarker3 lua": {
		"prefix": "r.SetProjectMarker3",
		"scope": "lua",
		"body": "r.SetProjectMarker3({1:proj}, {2:markrgnindexnumber}, {3:isrgn}, {4:pos}, {5:rgnend}, {6:name}, {7:color})$0"
		"description": "Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4."
	},
	"SetProjectMarker4 lua": {
		"prefix": "r.SetProjectMarker4",
		"scope": "lua",
		"body": "r.SetProjectMarker4({1:proj}, {2:markrgnindexnumber}, {3:isrgn}, {4:pos}, {5:rgnend}, {6:name}, {7:color}, {8:flags})$0"
		"description": "color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name"
	},
	"SetProjectMarkerByIndex lua": {
		"prefix": "r.SetProjectMarkerByIndex",
		"scope": "lua",
		"body": "r.SetProjectMarkerByIndex({1:proj}, {2:markrgnidx}, {3:isrgn}, {4:pos}, {5:rgnend}, {6:IDnumber}, {7:name}, {8:color})$0"
		"description": "See SetProjectMarkerByIndex2."
	},
	"SetProjectMarkerByIndex2 lua": {
		"prefix": "r.SetProjectMarkerByIndex2",
		"scope": "lua",
		"body": "r.SetProjectMarkerByIndex2({1:proj}, {2:markrgnidx}, {3:isrgn}, {4:pos}, {5:rgnend}, {6:IDnumber}, {7:name}, {8:color}, {9:flags})$0"
		"description": "Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags&1 to clear name. If flags&2, markers will not be re-sorted, and after making updates, you MUST call SetProjectMarkerByIndex2 with markrgnidx=-1 and flags&2 to force re-sort/UI updates."
	},
	"SetRegionRenderMatrix lua": {
		"prefix": "r.SetRegionRenderMatrix",
		"scope": "lua",
		"body": "r.SetRegionRenderMatrix({1:proj}, {2:regionindex}, {3:track}, {4:flag})$0"
		"description": "Add (flag > 0) or remove (flag < 0) a track from this region when using the region render matrix. If adding, flag==2 means force mono, flag==4 means force stereo, flag==N means force N/2 channels."
	},
	"SetTakeMarker lua": {
		"prefix": "r.SetTakeMarker",
		"scope": "lua",
		"body": "r.SetTakeMarker({1:take}, {2:idx}, {3:nameIn}, {4:srcposIn}, {5:colorIn})$0"
		"description": "Inserts or updates a take marker. If idx<0, a take marker will be added, otherwise an existing take marker will be updated. Returns the index of the new or updated take marker (which may change if srcPos is updated). See GetNumTakeMarkers, GetTakeMarker, DeleteTakeMarker"
	},
	"SetTakeStretchMarker lua": {
		"prefix": "r.SetTakeStretchMarker",
		"scope": "lua",
		"body": "r.SetTakeStretchMarker({1:take}, {2:idx}, {3:pos}, {4:srcposIn})$0"
		"description": "Adds or updates a stretch marker. If idx<0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time)."
	},
	"SetTakeStretchMarkerSlope lua": {
		"prefix": "r.SetTakeStretchMarkerSlope",
		"scope": "lua",
		"body": "r.SetTakeStretchMarkerSlope({1:take}, {2:idx}, {3:slope})$0"
		"description": "See GetTakeStretchMarkerSlope"
	},
	"SetTempoTimeSigMarker lua": {
		"prefix": "r.SetTempoTimeSigMarker",
		"scope": "lua",
		"body": "r.SetTempoTimeSigMarker({1:proj}, {2:ptidx}, {3:timepos}, {4:measurepos}, {5:beatpos}, {6:bpm}, {7:timesig_num}, {8:timesig_denom}, {9:lineartempo})$0"
		"description": "Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker."
	},
	"SetThemeColor lua": {
		"prefix": "r.SetThemeColor",
		"scope": "lua",
		"body": "r.SetThemeColor({1:ini_key}, {2:color}, {3:flags})$0"
		"description": "Temporarily updates the theme color to the color specified (or the theme default color if -1 is specified). Returns -1 on failure, otherwise returns the color (or transformed-color). Note that the UI is not updated by this, the caller should call UpdateArrange() etc as necessary. If the low bit of flags is set, any color transformations are bypassed. To read a value see GetThemeColor.\nCurrently valid ini_keys:\ncol_main_bg2 : Main window/transport background\n-- current RGB: 40,40,40\ncol_main_text2 : Main window/transport text\n-- current RGB: 108,108,108\ncol_main_textshadow : Main window text shadow (ignored if too close to text color)\n-- current RGB: 51,51,51\ncol_main_3dhl : Main window 3D highlight\n-- current RGB: 40,40,40\ncol_main_3dsh : Main window 3D shadow\n-- current RGB: 40,40,40\ncol_main_resize2 : Main window pane resize mouseover\n-- current RGB: 20,160,140\ncol_main_text : Themed window text\n-- current RGB: 210,210,210\ncol_main_bg : Themed window background\n-- current RGB: 40,40,40\ncol_main_editbk : Themed window edit background\n-- current RGB: 50,50,50\ncol_nodarkmodemiscwnd : Do not use window theming on macOS dark mode\n-- bool 00000000\ncol_transport_editbk : Transport edit background\n-- current RGB: 51,51,51\ncol_toolbar_text : Toolbar button text\n-- current RGB: 159,159,159\ncol_toolbar_text_on : Toolbar button enabled text\n-- current RGB: 26,188,152\ncol_toolbar_frame : Toolbar frame when floating or docked\n-- current RGB: 71,78,78\ntoolbararmed_color : Toolbar button armed color\n-- current RGB: 20,160,140\ntoolbararmed_drawmode : Toolbar button armed fill mode\n-- blendmode 000300fe\nio_text : I/O window text\n-- current RGB: 192,192,192\nio_3dhl : I/O window 3D highlight\n-- current RGB: 40,40,40\nio_3dsh : I/O window 3D shadow\n-- current RGB: 205,205,205\ngenlist_bg : Window list background\n-- current RGB: 37,37,37\ngenlist_fg : Window list text\n-- current RGB: 210,210,210\ngenlist_grid : Window list grid lines\n-- current RGB: 0,0,0\ngenlist_selbg : Window list selected row\n-- current RGB: 35,103,91\ngenlist_selfg : Window list selected text\n-- current RGB: 255,255,255\ngenlist_seliabg : Window list selected row (inactive)\n-- current RGB: 177,177,177\ngenlist_seliafg : Window list selected text (inactive)\n-- current RGB: 0,0,0\ngenlist_hilite : Window list highlighted text\n-- current RGB: 0,0,224\ngenlist_hilite_sel : Window list highlighted selected text\n-- current RGB: 192,192,255\ncol_buttonbg : Button background\n-- current RGB: 0,0,0\ncol_tcp_text : Track panel text\n-- current RGB: 18,26,29\ncol_tcp_textsel : Track panel (selected) text\n-- current RGB: 18,26,29\ncol_seltrack : Selected track control panel background\n-- current RGB: 100,100,100\ncol_seltrack2 : Unselected track control panel background (enabled with a checkbox above)\n-- current RGB: 100,100,100\ntcplocked_color : Locked track control panel overlay color\n-- current RGB: 51,51,51\ntcplocked_drawmode : Locked track control panel fill mode\n-- blendmode 0002c000\ncol_tracklistbg : Empty track list area\n-- current RGB: 40,40,40\ncol_mixerbg : Empty mixer list area\n-- current RGB: 40,40,40\ncol_arrangebg : Empty arrange view area\n-- current RGB: 40,40,40\narrange_vgrid : Empty arrange view area vertical grid shading\n-- current RGB: 40,40,40\ncol_fadearm : Fader background when automation recording\n-- current RGB: 198,17,60\ncol_fadearm2 : Fader background when automation playing\n-- current RGB: 17,168,135\ncol_fadearm3 : Fader background when in inactive touch/latch\n-- current RGB: 168,113,17\ncol_tl_fg : Timeline foreground\n-- current RGB: 116,116,116\ncol_tl_fg2 : Timeline foreground (secondary markings)\n-- current RGB: 92,92,92\ncol_tl_bg : Timeline background\n-- current RGB: 40,40,40\ncol_tl_bgsel : Time selection color\n-- current RGB: 255,255,255\ntimesel_drawmode : Time selection fill mode\n-- blendmode 00021100\ncol_tl_bgsel2 : Timeline background (in loop points)\n-- current RGB: 130,136,136\ncol_trans_bg : Transport status background\n-- current RGB: 255,0,0\ncol_trans_fg : Transport status text\n-- current RGB: 200,200,200\nplayrate_edited : Project play rate control when not 1.0\n-- current RGB: 0,255,172\nselitem_dot : Media item selection indicator\n-- current RGB: 255,255,255\ncol_mi_label : Media item label\n-- current RGB: 210,210,210\ncol_mi_label_sel : Media item label (selected)\n-- current RGB: 255,255,255\ncol_mi_label_float : Floating media item label\n-- current RGB: 172,172,172\ncol_mi_label_float_sel : Floating media item label (selected)\n-- current RGB: 235,235,235\ncol_mi_bg2 : Media item background (odd tracks)\n-- current RGB: 100,100,100\ncol_mi_bg : Media item background (even tracks)\n-- current RGB: 100,100,100\ncol_tr1_itembgsel : Media item background selected (odd tracks)\n-- current RGB: 100,100,100\ncol_tr2_itembgsel : Media item background selected (even tracks)\n-- current RGB: 100,100,100\nitembg_drawmode : Media item background fill mode\n-- blendmode 00030000\ncol_tr1_peaks : Media item peaks (odd tracks)\n-- current RGB: 32,32,32\ncol_tr2_peaks : Media item peaks (even tracks)\n-- current RGB: 32,32,32\ncol_tr1_ps2 : Media item peaks when selected (odd tracks)\n-- current RGB: 0,0,0\ncol_tr2_ps2 : Media item peaks when selected (even tracks)\n-- current RGB: 0,0,0\ncol_peaksedge : Media item peaks edge highlight (odd tracks)\n-- current RGB: 42,42,42\ncol_peaksedge2 : Media item peaks edge highlight (even tracks)\n-- current RGB: 42,42,42\ncol_peaksedgesel : Media item peaks edge highlight when selected (odd tracks)\n-- current RGB: 225,225,225\ncol_peaksedgesel2 : Media item peaks edge highlight when selected (even tracks)\n-- current RGB: 225,225,225\ncc_chase_drawmode : Media item MIDI CC peaks fill mode\n-- blendmode 00024000\ncol_peaksfade : Media item peaks when active in crossfade editor (fade-out)\n-- current RGB: 0,255,0\ncol_peaksfade2 : Media item peaks when active in crossfade editor (fade-in)\n-- current RGB: 255,0,0\ncol_mi_fades : Media item fade/volume controls\n-- current RGB: 128,128,128\nfadezone_color : Media item fade quiet zone fill color\n-- current RGB: 128,140,125\nfadezone_drawmode : Media item fade quiet zone fill mode\n-- blendmode 000300fe\nfadearea_color : Media item fade full area fill color\n-- current RGB: 32,35,31\nfadearea_drawmode : Media item fade full area fill mode\n-- blendmode 00020000\ncol_mi_fade2 : Media item edges of controls\n-- current RGB: 170,170,170\ncol_mi_fade2_drawmode : Media item edges of controls blend mode\n-- blendmode 00020000\nitem_grouphl : Media item edge when selected via grouping\n-- current RGB: 19,118,97\ncol_offlinetext : Media item 'offline' text\n-- current RGB: 48,66,71\ncol_stretchmarker : Media item stretch marker line\n-- current RGB: 197,197,197\ncol_stretchmarker_h0 : Media item stretch marker handle (1x)\n-- current RGB: 157,157,157\ncol_stretchmarker_h1 : Media item stretch marker handle (>1x)\n-- current RGB: 58,134,255\ncol_stretchmarker_h2 : Media item stretch marker handle (-- current RGB: 189,19,19\ncol_stretchmarker_b : Media item stretch marker handle edge\n-- current RGB: 255,255,255\ncol_stretchmarkerm : Media item stretch marker blend mode\n-- blendmode 0002b300\ncol_stretchmarker_text : Media item stretch marker text\n-- current RGB: 174,174,174\ncol_stretchmarker_tm : Media item transient guide handle\n-- current RGB: 0,234,0\ntake_marker : Media item take marker\n-- current RGB: 172,172,172\ntake_marker_sel : Media item take marker when item selected\n-- current RGB: 212,212,212\nselitem_tag : Selected media item bar color\n-- current RGB: 255,255,255\nactivetake_tag : Active media item take bar color\n-- current RGB: 255,255,255\ncol_tr1_bg : Track background (odd tracks)\n-- current RGB: 40,40,40\ncol_tr2_bg : Track background (even tracks)\n-- current RGB: 40,40,40\nselcol_tr1_bg : Selected track background (odd tracks)\n-- current RGB: 45,45,45\nselcol_tr2_bg : Selected track background (even tracks)\n-- current RGB: 45,45,45\ntrack_lane_tabcol : Track fixed lane button\n-- current RGB: 95,127,95\ntrack_lanesolo_tabcol : Track fixed lane button when only this lane plays\n-- current RGB: 240,240,16\ntrack_lanesolo_text : Track fixed lane button text\n-- current RGB: 200,200,200\ntrack_lane_gutter : Track fixed lane add area\n-- current RGB: 128,128,128\ntrack_lane_gutter_drawmode : Track fixed lane add fill mode\n-- blendmode 00024000\ncol_tr1_divline : Track divider line (odd tracks)\n-- current RGB: 28,28,28\ncol_tr2_divline : Track divider line (even tracks)\n-- current RGB: 28,28,28\ncol_envlane1_divline : Envelope lane divider line (odd tracks)\n-- current RGB: 114,120,120\ncol_envlane2_divline : Envelope lane divider line (even tracks)\n-- current RGB: 114,120,120\nmute_overlay_col : Muted/unsoloed track/item overlay color\n-- current RGB: 48,48,48\nmute_overlay_mode : Muted/unsoloed track/item overlay mode\n-- blendmode 00028003\ninactive_take_overlay_col : Inactive take/lane overlay color\n-- current RGB: 48,48,48\ninactive_take_overlay_mode : Inactive take/lane overlay mode\n-- blendmode 00028000\nlocked_overlay_col : Locked track/item overlay color\n-- current RGB: 0,0,0\nlocked_overlay_mode : Locked track/item overlay mode\n-- blendmode 00025c03\nmarquee_fill : Marquee fill\n-- current RGB: 128,128,110\nmarquee_drawmode : Marquee fill mode\n-- blendmode 000299ff\nmarquee_outline : Marquee outline\n-- current RGB: 255,255,255\nmarqueezoom_fill : Marquee zoom fill\n-- current RGB: 255,255,255\nmarqueezoom_drawmode : Marquee zoom fill mode\n-- blendmode 00024002\nmarqueezoom_outline : Marquee zoom outline\n-- current RGB: 0,255,0\nareasel_fill : Razor edit area fill\n-- current RGB: 31,233,192\nareasel_drawmode : Razor edit area fill mode\n-- blendmode 00022601\nareasel_outline : Razor edit area outline\n-- current RGB: 0,251,201\nareasel_outlinemode : Razor edit area outline mode\n-- blendmode 0002c000\nlinkedlane_fill : Fixed lane comp area fill\n-- current RGB: 255,203,0\nlinkedlane_fillmode : Fixed lane comp area fill mode\n-- blendmode 00020c01\nlinkedlane_outline : Fixed lane comp area outline\n-- current RGB: 255,237,164\nlinkedlane_outlinemode : Fixed lane comp area outline mode\n-- blendmode 0002c000\nlinkedlane_unsynced : Fixed lane comp lane unsynced media item\n-- current RGB: 0,198,255\nlinkedlane_unsynced_mode : Fixed lane comp lane unsynced media item mode\n-- blendmode 00028000\ncol_cursor : Edit cursor\n-- current RGB: 51,152,135\ncol_cursor2 : Edit cursor (alternate)\n-- current RGB: 51,152,135\nplaycursor_color : Play cursor\n-- current RGB: 239,200,82\nplaycursor_drawmode : Play cursor mode\n-- blendmode 00028000\ncol_gridlines2 : Grid lines (start of measure)\n-- current RGB: 0,0,0\ncol_gridlines2dm : Grid lines (start of measure) - draw mode\n-- blendmode 00030000\ncol_gridlines3 : Grid lines (start of beats)\n-- current RGB: 0,0,0\ncol_gridlines3dm : Grid lines (start of beats) - draw mode\n-- blendmode 00028000\ncol_gridlines : Grid lines (in between beats)\n-- current RGB: 0,0,0\ncol_gridlines1dm : Grid lines (in between beats) - draw mode\n-- blendmode 00025900\nguideline_color : Editing guide line\n-- current RGB: 0,157,153\nguideline_drawmode : Editing guide mode\n-- blendmode 0002c000\nmouseitem_color : Mouse position indicator\n-- current RGB: 196,255,196\nmouseitem_mode : Mouse position indicator mode\n-- blendmode 00028000\nregion : Regions\n-- current RGB: 103,106,110\nregion_lane_bg : Region lane background\n-- current RGB: 40,40,40\nregion_lane_text : Region text\n-- current RGB: 200,200,200\nregion_edge : Region edge\n-- current RGB: 116,116,116\nregion_edge_sel : Region text and edge (selected)\n-- current RGB: 255,255,255\nmarker : Markers\n-- current RGB: 45,111,220\nmarker_lane_bg : Marker lane background\n-- current RGB: 40,40,40\nmarker_lane_text : Marker text\n-- current RGB: 230,230,230\nmarker_edge : Marker edge\n-- current RGB: 128,128,128\nmarker_edge_sel : Marker text and edge (selected)\n-- current RGB: 255,255,255\ncol_tsigmark : Time signature change marker\n-- current RGB: 14,18,17\nts_lane_bg : Time signature lane background\n-- current RGB: 40,40,40\nts_lane_text : Time signature lane text\n-- current RGB: 165,165,165\ntimesig_sel_bg : Time signature marker selected background\n-- current RGB: 160,0,0\ncol_routinghl1 : Routing matrix row highlight\n-- current RGB: 255,255,192\ncol_routinghl2 : Routing matrix column highlight\n-- current RGB: 128,128,255\ncol_routingact : Routing matrix input activity highlight\n-- current RGB: 64,255,64\ncol_vudoint : Theme has interlaced VU meters\n-- bool 00000000\ncol_vuclip : VU meter clip indicator\n-- current RGB: 187,37,0\ncol_vutop : VU meter top\n-- current RGB: 0,254,149\ncol_vumid : VU meter middle\n-- current RGB: 0,218,173\ncol_vubot : VU meter bottom\n-- current RGB: 0,191,191\ncol_vuintcol : VU meter interlace/edge color\n-- current RGB: 32,32,32\nvu_gr_bgcol : VU meter gain reduction background\n-- current RGB: 32,32,32\nvu_gr_fgcol : VU meter gain reduction indicator\n-- current RGB: 224,224,0\ncol_vumidi : VU meter midi activity\n-- current RGB: 255,196,0\ncol_vuind1 : VU (indicator) - no signal\n-- current RGB: 32,32,32\ncol_vuind2 : VU (indicator) - low signal\n-- current RGB: 0,40,0\ncol_vuind3 : VU (indicator) - med signal\n-- current RGB: 32,255,0\ncol_vuind4 : VU (indicator) - hot signal\n-- current RGB: 255,255,0\nmcp_sends_normal : Sends text: normal\n-- current RGB: 191,191,191\nmcp_sends_muted : Sends text: muted\n-- current RGB: 216,61,61\nmcp_send_midihw : Sends text: MIDI hardware\n-- current RGB: 0,221,176\nmcp_sends_levels : Sends level\n-- current RGB: 48,66,71\nmcp_fx_normal : FX insert text: normal\n-- current RGB: 220,220,220\nmcp_fx_bypassed : FX insert text: bypassed\n-- current RGB: 211,138,65\nmcp_fx_offlined : FX insert text: offline\n-- current RGB: 216,61,61\nmcp_fxparm_normal : FX parameter text: normal\n-- current RGB: 163,163,163\nmcp_fxparm_bypassed : FX parameter text: bypassed\n-- current RGB: 211,120,65\nmcp_fxparm_offlined : FX parameter text: offline\n-- current RGB: 216,61,61\ntcp_list_scrollbar : List scrollbar (track panel)\n-- current RGB: 50,50,50\ntcp_list_scrollbar_mode : List scrollbar (track panel) - draw mode\n-- blendmode 00028000\ntcp_list_scrollbar_mouseover : List scrollbar mouseover (track panel)\n-- current RGB: 30,30,30\ntcp_list_scrollbar_mouseover_mode : List scrollbar mouseover (track panel) - draw mode\n-- blendmode 00028000\nmcp_list_scrollbar : List scrollbar (mixer panel)\n-- current RGB: 140,140,140\nmcp_list_scrollbar_mode : List scrollbar (mixer panel) - draw mode\n-- blendmode 00028000\nmcp_list_scrollbar_mouseover : List scrollbar mouseover (mixer panel)\n-- current RGB: 64,191,159\nmcp_list_scrollbar_mouseover_mode : List scrollbar mouseover (mixer panel) - draw mode\n-- blendmode 00028000\nmidi_rulerbg : MIDI editor ruler background\n-- current RGB: 68,68,68\nmidi_rulerfg : MIDI editor ruler text\n-- current RGB: 154,154,154\nmidi_grid2 : MIDI editor grid line (start of measure)\n-- current RGB: 255,255,255\nmidi_griddm2 : MIDI editor grid line (start of measure) - draw mode\n-- blendmode 00021e00\nmidi_grid3 : MIDI editor grid line (start of beats)\n-- current RGB: 0,0,0\nmidi_griddm3 : MIDI editor grid line (start of beats) - draw mode\n-- blendmode 00023300\nmidi_grid1 : MIDI editor grid line (between beats)\n-- current RGB: 0,0,0\nmidi_griddm1 : MIDI editor grid line (between beats) - draw mode\n-- blendmode 00021e00\nmidi_trackbg1 : MIDI editor background color (naturals)\n-- current RGB: 70,70,70\nmidi_trackbg2 : MIDI editor background color (sharps/flats)\n-- current RGB: 62,62,62\nmidi_trackbg_outer1 : MIDI editor background color, out of bounds (naturals)\n-- current RGB: 51,51,51\nmidi_trackbg_outer2 : MIDI editor background color, out of bounds (sharps/flats)\n-- current RGB: 54,54,54\nmidi_selpitch1 : MIDI editor background color, selected pitch (naturals)\n-- current RGB: 66,100,94\nmidi_selpitch2 : MIDI editor background color, selected pitch (sharps/flats)\n-- current RGB: 71,105,99\nmidi_selbg : MIDI editor time selection color\n-- current RGB: 255,255,255\nmidi_selbg_drawmode : MIDI editor time selection fill mode\n-- blendmode 00021001\nmidi_gridhc : MIDI editor CC horizontal center line\n-- current RGB: 0,0,0\nmidi_gridhcdm : MIDI editor CC horizontal center line - draw mode\n-- blendmode 00030000\nmidi_gridh : MIDI editor CC horizontal line\n-- current RGB: 0,0,0\nmidi_gridhdm : MIDI editor CC horizontal line - draw mode\n-- blendmode 00028000\nmidi_ccbut : MIDI editor CC lane add/remove buttons\n-- current RGB: 180,180,180\nmidi_ccbut_text : MIDI editor CC lane button text\n-- current RGB: 180,180,180\nmidi_ccbut_arrow : MIDI editor CC lane button arrow\n-- current RGB: 180,180,180\nmidioct : MIDI editor octave line color\n-- current RGB: 46,46,46\nmidi_inline_trackbg1 : MIDI inline background color (naturals)\n-- current RGB: 70,70,70\nmidi_inline_trackbg2 : MIDI inline background color (sharps/flats)\n-- current RGB: 62,62,62\nmidioct_inline : MIDI inline octave line color\n-- current RGB: 46,46,46\nmidi_endpt : MIDI editor end marker\n-- current RGB: 19,189,153\nmidi_notebg : MIDI editor note, unselected (midi_note_colormap overrides)\n-- current RGB: 20,20,20\nmidi_notefg : MIDI editor note, selected (midi_note_colormap overrides)\n-- current RGB: 255,255,255\nmidi_notemute : MIDI editor note, muted, unselected (midi_note_colormap overrides)\n-- current RGB: 128,0,0\nmidi_notemute_sel : MIDI editor note, muted, selected (midi_note_colormap overrides)\n-- current RGB: 255,0,0\nmidi_itemctl : MIDI editor note controls\n-- current RGB: 0,0,0\nmidi_ofsn : MIDI editor note (offscreen)\n-- current RGB: 73,73,73\nmidi_ofsnsel : MIDI editor note (offscreen, selected)\n-- current RGB: 19,189,153\nmidi_editcurs : MIDI editor cursor\n-- current RGB: 51,152,135\nmidi_pkey1 : MIDI piano key color (naturals background, sharps/flats text)\n-- current RGB: 235,235,235\nmidi_pkey2 : MIDI piano key color (sharps/flats background, naturals text)\n-- current RGB: 30,30,30\nmidi_pkey3 : MIDI piano key color (selected)\n-- current RGB: 93,93,93\nmidi_noteon_flash : MIDI piano key note-on flash\n-- current RGB: 29,207,169\nmidi_leftbg : MIDI piano pane background\n-- current RGB: 40,40,40\nmidifont_col_light_unsel : MIDI editor note text and control color, unselected (light)\n-- current RGB: 255,255,255\nmidifont_col_dark_unsel : MIDI editor note text and control color, unselected (dark)\n-- current RGB: 0,0,0\nmidifont_mode_unsel : MIDI editor note text and control mode, unselected\n-- blendmode 00028000\nmidifont_col_light : MIDI editor note text and control color (light)\n-- current RGB: 255,255,255\nmidifont_col_dark : MIDI editor note text and control color (dark)\n-- current RGB: 0,0,0\nmidifont_mode : MIDI editor note text and control mode\n-- blendmode 0002c000\nscore_bg : MIDI notation editor background\n-- current RGB: 255,255,255\nscore_fg : MIDI notation editor staff/notation/text\n-- current RGB: 0,0,0\nscore_sel : MIDI notation editor selected staff/notation/text\n-- current RGB: 0,0,255\nscore_timesel : MIDI notation editor time selection\n-- current RGB: 255,255,224\nscore_loop : MIDI notation editor loop points, selected pitch\n-- current RGB: 255,192,0\nmidieditorlist_bg : MIDI list editor background\n-- current RGB: 84,84,84\nmidieditorlist_fg : MIDI list editor text\n-- current RGB: 224,224,224\nmidieditorlist_grid : MIDI list editor grid lines\n-- current RGB: 40,40,40\nmidieditorlist_selbg : MIDI list editor selected row\n-- current RGB: 238,240,240\nmidieditorlist_selfg : MIDI list editor selected text\n-- current RGB: 42,44,44\nmidieditorlist_seliabg : MIDI list editor selected row (inactive)\n-- current RGB: 240,240,240\nmidieditorlist_seliafg : MIDI list editor selected text (inactive)\n-- current RGB: 0,0,0\nmidieditorlist_bg2 : MIDI list editor background (secondary)\n-- current RGB: 170,176,176\nmidieditorlist_fg2 : MIDI list editor text (secondary)\n-- current RGB: 68,70,70\nmidieditorlist_selbg2 : MIDI list editor selected row (secondary)\n-- current RGB: 214,217,217\nmidieditorlist_selfg2 : MIDI list editor selected text (secondary)\n-- current RGB: 75,77,77\ncol_explorer_sel : Media explorer selection\n-- current RGB: 255,255,255\ncol_explorer_seldm : Media explorer selection mode\n-- blendmode 00026600\ncol_explorer_seledge : Media explorer selection edge\n-- current RGB: 201,201,201\nexplorer_grid : Media explorer grid, markers\n-- current RGB: 255,255,255\nexplorer_pitchtext : Media explorer pitch detection text\n-- current RGB: 255,255,255\ndocker_shadow : Tab control shadow\n-- current RGB: 40,40,40\ndocker_selface : Tab control selected tab\n-- current RGB: 40,40,40\ndocker_unselface : Tab control unselected tab\n-- current RGB: 42,42,42\ndocker_text : Tab control text\n-- current RGB: 150,150,150\ndocker_text_sel : Tab control text selected tab\n-- current RGB: 0,0,0\ndocker_bg : Tab control background\n-- current RGB: 60,60,60\nwindowtab_bg : Tab control background in windows\n-- current RGB: 60,60,60\nauto_item_unsel : Envelope: Unselected automation item\n-- current RGB: 109,120,117\ncol_env1 : Envelope: Volume (pre-FX)\n-- current RGB: 29,207,169\ncol_env2 : Envelope: Volume\n-- current RGB: 29,207,169\nenv_trim_vol : Envelope: Trim Volume\n-- current RGB: 0,0,0\ncol_env3 : Envelope: Pan (pre-FX)\n-- current RGB: 255,0,0\ncol_env4 : Envelope: Pan\n-- current RGB: 255,150,0\nenv_track_mute : Envelope: Mute\n-- current RGB: 192,0,0\ncol_env5 : Envelope: Master playrate\n-- current RGB: 157,157,157\ncol_env6 : Envelope: Master tempo\n-- current RGB: 0,255,255\ncol_env7 : Envelope: Width / Send volume\n-- current RGB: 128,0,0\ncol_env8 : Envelope: Send pan\n-- current RGB: 0,128,128\ncol_env9 : Envelope: Send volume 2\n-- current RGB: 0,128,192\ncol_env10 : Envelope: Send pan 2\n-- current RGB: 0,64,0\nenv_sends_mute : Envelope: Send mute\n-- current RGB: 192,192,0\ncol_env11 : Envelope: Audio hardware output volume\n-- current RGB: 0,255,255\ncol_env12 : Envelope: Audio hardware output pan\n-- current RGB: 255,255,0\ncol_env13 : Envelope: FX parameter 1\n-- current RGB: 128,0,255\ncol_env14 : Envelope: FX parameter 2\n-- current RGB: 64,128,128\ncol_env15 : Envelope: FX parameter 3\n-- current RGB: 0,0,255\ncol_env16 : Envelope: FX parameter 4\n-- current RGB: 255,0,128\nenv_item_vol : Envelope: Item take volume\n-- current RGB: 29,207,169\nenv_item_pan : Envelope: Item take pan\n-- current RGB: 216,151,60\nenv_item_mute : Envelope: Item take mute\n-- current RGB: 164,36,59\nenv_item_pitch : Envelope: Item take pitch\n-- current RGB: 58,134,255\nwiring_grid2 : Wiring: Background\n-- current RGB: 46,46,46\nwiring_grid : Wiring: Background grid lines\n-- current RGB: 51,51,51\nwiring_border : Wiring: Box border\n-- current RGB: 153,153,153\nwiring_tbg : Wiring: Box background\n-- current RGB: 38,38,38\nwiring_ticon : Wiring: Box foreground\n-- current RGB: 204,204,204\nwiring_recbg : Wiring: Record section background\n-- current RGB: 101,77,77\nwiring_recitem : Wiring: Record section foreground\n-- current RGB: 63,33,33\nwiring_media : Wiring: Media\n-- current RGB: 32,64,32\nwiring_recv : Wiring: Receives\n-- current RGB: 92,92,92\nwiring_send : Wiring: Sends\n-- current RGB: 92,92,92\nwiring_fader : Wiring: Fader\n-- current RGB: 128,128,192\nwiring_parent : Wiring: Master/Parent\n-- current RGB: 64,128,128\nwiring_parentwire_border : Wiring: Master/Parent wire border\n-- current RGB: 100,100,100\nwiring_parentwire_master : Wiring: Master/Parent to master wire\n-- current RGB: 192,192,192\nwiring_parentwire_folder : Wiring: Master/Parent to parent folder wire\n-- current RGB: 128,128,128\nwiring_pin_normal : Wiring: Pins normal\n-- current RGB: 192,192,192\nwiring_pin_connected : Wiring: Pins connected\n-- current RGB: 96,144,96\nwiring_pin_disconnected : Wiring: Pins disconnected\n-- current RGB: 64,32,32\nwiring_horz_col : Wiring: Horizontal pin connections\n-- current RGB: 72,72,72\nwiring_sendwire : Wiring: Send hanging wire\n-- current RGB: 128,128,128\nwiring_hwoutwire : Wiring: Hardware output wire\n-- current RGB: 128,128,128\nwiring_recinputwire : Wiring: Record input wire\n-- current RGB: 255,128,128\nwiring_hwout : Wiring: System hardware outputs\n-- current RGB: 64,64,64\nwiring_recinput : Wiring: System record inputs\n-- current RGB: 128,64,64\nwiring_activity : Wiring: Activity lights\n-- current RGB: 64,255,64\nautogroup : Automatic track group\n-- current RGB: 255,255,255\ngroup_0 : Group #1\n-- current RGB: 255,0,0\ngroup_1 : Group #2\n-- current RGB: 0,255,0\ngroup_2 : Group #3\n-- current RGB: 0,0,255\ngroup_3 : Group #4\n-- current RGB: 255,255,0\ngroup_4 : Group #5\n-- current RGB: 255,0,255\ngroup_5 : Group #6\n-- current RGB: 0,255,255\ngroup_6 : Group #7\n-- current RGB: 192,0,0\ngroup_7 : Group #8\n-- current RGB: 0,192,0\ngroup_8 : Group #9\n-- current RGB: 0,0,192\ngroup_9 : Group #10\n-- current RGB: 192,192,0\ngroup_10 : Group #11\n-- current RGB: 192,0,192\ngroup_11 : Group #12\n-- current RGB: 0,192,192\ngroup_12 : Group #13\n-- current RGB: 128,0,0\ngroup_13 : Group #14\n-- current RGB: 0,128,0\ngroup_14 : Group #15\n-- current RGB: 0,0,128\ngroup_15 : Group #16\n-- current RGB: 128,128,0\ngroup_16 : Group #17\n-- current RGB: 128,0,128\ngroup_17 : Group #18\n-- current RGB: 0,128,128\ngroup_18 : Group #19\n-- current RGB: 192,128,0\ngroup_19 : Group #20\n-- current RGB: 0,192,128\ngroup_20 : Group #21\n-- current RGB: 0,128,192\ngroup_21 : Group #22\n-- current RGB: 192,128,0\ngroup_22 : Group #23\n-- current RGB: 128,0,192\ngroup_23 : Group #24\n-- current RGB: 128,192,0\ngroup_24 : Group #25\n-- current RGB: 64,0,0\ngroup_25 : Group #26\n-- current RGB: 0,64,0\ngroup_26 : Group #27\n-- current RGB: 0,0,64\ngroup_27 : Group #28\n-- current RGB: 64,64,0\ngroup_28 : Group #29\n-- current RGB: 64,0,64\ngroup_29 : Group #30\n-- current RGB: 0,64,64\ngroup_30 : Group #31\n-- current RGB: 64,0,64\ngroup_31 : Group #32\n-- current RGB: 0,64,64\ngroup_32 : Group #33\n-- current RGB: 128,255,255\ngroup_33 : Group #34\n-- current RGB: 128,0,128\ngroup_34 : Group #35\n-- current RGB: 1,255,128\ngroup_35 : Group #36\n-- current RGB: 128,0,255\ngroup_36 : Group #37\n-- current RGB: 1,255,255\ngroup_37 : Group #38\n-- current RGB: 1,0,128\ngroup_38 : Group #39\n-- current RGB: 128,255,224\ngroup_39 : Group #40\n-- current RGB: 128,63,128\ngroup_40 : Group #41\n-- current RGB: 32,255,128\ngroup_41 : Group #42\n-- current RGB: 128,63,224\ngroup_42 : Group #43\n-- current RGB: 32,255,224\ngroup_43 : Group #44\n-- current RGB: 32,63,128\ngroup_44 : Group #45\n-- current RGB: 128,255,192\ngroup_45 : Group #46\n-- current RGB: 128,127,128\ngroup_46 : Group #47\n-- current RGB: 64,255,128\ngroup_47 : Group #48\n-- current RGB: 128,127,192\ngroup_48 : Group #49\n-- current RGB: 64,255,192\ngroup_49 : Group #50\n-- current RGB: 64,127,128\ngroup_50 : Group #51\n-- current RGB: 128,127,224\ngroup_51 : Group #52\n-- current RGB: 64,63,128\ngroup_52 : Group #53\n-- current RGB: 32,127,128\ngroup_53 : Group #54\n-- current RGB: 128,127,224\ngroup_54 : Group #55\n-- current RGB: 32,255,192\ngroup_55 : Group #56\n-- current RGB: 128,63,192\ngroup_56 : Group #57\n-- current RGB: 128,255,160\ngroup_57 : Group #58\n-- current RGB: 128,191,128\ngroup_58 : Group #59\n-- current RGB: 96,255,128\ngroup_59 : Group #60\n-- current RGB: 128,191,160\ngroup_60 : Group #61\n-- current RGB: 96,255,160\ngroup_61 : Group #62\n-- current RGB: 96,191,128\ngroup_62 : Group #63\n-- current RGB: 96,255,160\ngroup_63 : Group #64\n-- current RGB: 96,191,128"
	},
	"SetToggleCommandState lua": {
		"prefix": "r.SetToggleCommandState",
		"scope": "lua",
		"body": "r.SetToggleCommandState({1:section_id}, {2:command_id}, {3:state})$0"
		"description": "Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2."
	},
	"SetTrackAutomationMode lua": {
		"prefix": "r.SetTrackAutomationMode",
		"scope": "lua",
		"body": "r.SetTrackAutomationMode({1:tr}, {2:mode})$0"
		"description": ""
	},
	"SetTrackColor lua": {
		"prefix": "r.SetTrackColor",
		"scope": "lua",
		"body": "r.SetTrackColor({1:track}, {2:color})$0"
		"description": "Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b). To unset the track color, see SetMediaTrackInfo_Value I_CUSTOMCOLOR"
	},
	"SetTrackMIDILyrics lua": {
		"prefix": "r.SetTrackMIDILyrics",
		"scope": "lua",
		"body": "r.SetTrackMIDILyrics({1:track}, {2:flag}, {3:str})$0"
		"description": "Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: '1.1.2\tLyric for measure 1 beat 2\t2.1.1\tLyric for measure 2 beat 1\t'). See GetTrackMIDILyrics"
	},
	"SetTrackMIDINoteName lua": {
		"prefix": "r.SetTrackMIDINoteName",
		"scope": "lua",
		"body": "r.SetTrackMIDINoteName({1:track}, {2:pitch}, {3:chan}, {4:name})$0"
		"description": "channel < 0 assigns these note names to all channels."
	},
	"SetTrackMIDINoteNameEx lua": {
		"prefix": "r.SetTrackMIDINoteNameEx",
		"scope": "lua",
		"body": "r.SetTrackMIDINoteNameEx({1:proj}, {2:track}, {3:pitch}, {4:chan}, {5:name})$0"
		"description": "channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc."
	},
	"SetTrackSelected lua": {
		"prefix": "r.SetTrackSelected",
		"scope": "lua",
		"body": "r.SetTrackSelected({1:track}, {2:selected})$0"
		"description": ""
	},
	"SetTrackSendInfo_Value lua": {
		"prefix": "r.SetTrackSendInfo_Value",
		"scope": "lua",
		"body": "r.SetTrackSendInfo_Value({1:tr}, {2:category}, {3:sendidx}, {4:parmname}, {5:newvalue})$0"
		"description": "Set send/receive/hardware output numerical-value attributes, return true on success.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\nB_MUTE : bool *\nB_PHASE : bool * : true to flip phase\nB_MONO : bool *\nD_VOL : double * : 1.0 = +0dB etc\nD_PAN : double * : -1..+1\nD_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\nI_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.\nI_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.\nI_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, 31=MIDI send disabled, next 5 bits=dest channel, 0=orig, 1-16=chan. &1024 for faders-send MIDI vol/pan. (>>14)&255 = src bus (0 for all, 1 for normal, 2+). (>>22)&255=destination bus (0 for all, 1 for normal, 2+)\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends."
	},
	"SetTrackSendUIPan lua": {
		"prefix": "r.SetTrackSendUIPan",
		"scope": "lua",
		"body": "r.SetTrackSendUIPan({1:track}, {2:send_idx}, {3:pan}, {4:isend})$0"
		"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak."
	},
	"SetTrackSendUIVol lua": {
		"prefix": "r.SetTrackSendUIVol",
		"scope": "lua",
		"body": "r.SetTrackSendUIVol({1:track}, {2:send_idx}, {3:vol}, {4:isend})$0"
		"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak."
	},
	"SetTrackStateChunk lua": {
		"prefix": "r.SetTrackStateChunk",
		"scope": "lua",
		"body": "r.SetTrackStateChunk({1:track}, {2:str}, {3:isundo})$0"
		"description": "Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint."
	},
	"SetTrackUIInputMonitor lua": {
		"prefix": "r.SetTrackUIInputMonitor",
		"scope": "lua",
		"body": "r.SetTrackUIInputMonitor({1:track}, {2:monitor}, {3:igngroupflags})$0"
		"description": "monitor: 0=no monitoring, 1=monitoring, 2=auto-monitoring. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"SetTrackUIMute lua": {
		"prefix": "r.SetTrackUIMute",
		"scope": "lua",
		"body": "r.SetTrackUIMute({1:track}, {2:mute}, {3:igngroupflags})$0"
		"description": "mute: <0 toggles, >0 sets mute, 0=unsets mute. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"SetTrackUIPan lua": {
		"prefix": "r.SetTrackUIPan",
		"scope": "lua",
		"body": "r.SetTrackUIPan({1:track}, {2:pan}, {3:relative}, {4:done}, {5:igngroupflags})$0"
		"description": "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"SetTrackUIPolarity lua": {
		"prefix": "r.SetTrackUIPolarity",
		"scope": "lua",
		"body": "r.SetTrackUIPolarity({1:track}, {2:polarity}, {3:igngroupflags})$0"
		"description": "polarity (AKA phase): <0 toggles, 0=normal, >0=inverted. returns new value or -1 if error.igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"SetTrackUIRecArm lua": {
		"prefix": "r.SetTrackUIRecArm",
		"scope": "lua",
		"body": "r.SetTrackUIRecArm({1:track}, {2:recarm}, {3:igngroupflags})$0"
		"description": "recarm: <0 toggles, >0 sets recarm, 0=unsets recarm. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"SetTrackUISolo lua": {
		"prefix": "r.SetTrackUISolo",
		"scope": "lua",
		"body": "r.SetTrackUISolo({1:track}, {2:solo}, {3:igngroupflags})$0"
		"description": "solo: <0 toggles, 1 sets solo (default mode), 0=unsets solo, 2 sets solo (non-SIP), 4 sets solo (SIP). returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"SetTrackUIVolume lua": {
		"prefix": "r.SetTrackUIVolume",
		"scope": "lua",
		"body": "r.SetTrackUIVolume({1:track}, {2:volume}, {3:relative}, {4:done}, {5:igngroupflags})$0"
		"description": "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"SetTrackUIWidth lua": {
		"prefix": "r.SetTrackUIWidth",
		"scope": "lua",
		"body": "r.SetTrackUIWidth({1:track}, {2:width}, {3:relative}, {4:done}, {5:igngroupflags})$0"
		"description": "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"ShowActionList lua": {
		"prefix": "r.ShowActionList",
		"scope": "lua",
		"body": "r.ShowActionList({1:section}, {2:callerWnd})$0"
		"description": ""
	},
	"ShowConsoleMsg lua": {
		"prefix": "r.ShowConsoleMsg",
		"scope": "lua",
		"body": "r.ShowConsoleMsg({1:msg})$0"
		"description": "Show a message to the user (also useful for debugging). Send '\n' for newline, '' to clear the console. Prefix string with '!SHOW:' and text will be added to console without opening the window. See ClearConsole"
	},
	"ShowMessageBox lua": {
		"prefix": "r.ShowMessageBox",
		"scope": "lua",
		"body": "r.ShowMessageBox({1:msg}, {2:title}, {3:type})$0"
		"description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO"
	},
	"ShowPopupMenu lua": {
		"prefix": "r.ShowPopupMenu",
		"scope": "lua",
		"body": "r.ShowPopupMenu({1:name}, {2:x}, {3:y}, {4:hwndParent}, {5:ctx}, {6:ctx2}, {7:ctx3})$0"
		"description": "shows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)"
	},
	"SnapToGrid lua": {
		"prefix": "r.SnapToGrid",
		"scope": "lua",
		"body": "r.SnapToGrid({1:project}, {2:time_pos})$0"
		"description": ""
	},
	"SoloAllTracks lua": {
		"prefix": "r.SoloAllTracks",
		"scope": "lua",
		"body": "r.SoloAllTracks({1:solo})$0"
		"description": "solo=2 for SIP"
	},
	"Splash_GetWnd lua": {
		"prefix": "r.Splash_GetWnd",
		"scope": "lua",
		"body": "r.Splash_GetWnd()$0"
		"description": "gets the splash window, in case you want to display a message over it. Returns NULL when the splash window is not displayed."
	},
	"SplitMediaItem lua": {
		"prefix": "r.SplitMediaItem",
		"scope": "lua",
		"body": "r.SplitMediaItem({1:item}, {2:position})$0"
		"description": "the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)"
	},
	"StuffMIDIMessage lua": {
		"prefix": "r.StuffMIDIMessage",
		"scope": "lua",
		"body": "r.StuffMIDIMessage({1:mode}, {2:msg1}, {3:msg2}, {4:msg3})$0"
		"description": "Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName."
	},
	"TakeFX_AddByName lua": {
		"prefix": "r.TakeFX_AddByName",
		"scope": "lua",
		"body": "r.TakeFX_AddByName({1:take}, {2:fxname}, {3:instantiate})$0"
		"description": "Adds or queries the position of a named FX in a take. See TrackFX_AddByName() for information on fxname and instantiate. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_CopyToTake lua": {
		"prefix": "r.TakeFX_CopyToTake",
		"scope": "lua",
		"body": "r.TakeFX_CopyToTake({1:src_take}, {2:src_fx}, {3:dest_take}, {4:dest_fx}, {5:is_move})$0"
		"description": "Copies (or moves) FX from src_take to dest_take. Can be used with src_take=dest_take to reorder. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_CopyToTrack lua": {
		"prefix": "r.TakeFX_CopyToTrack",
		"scope": "lua",
		"body": "r.TakeFX_CopyToTrack({1:src_take}, {2:src_fx}, {3:dest_track}, {4:dest_fx}, {5:is_move})$0"
		"description": "Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_Delete lua": {
		"prefix": "r.TakeFX_Delete",
		"scope": "lua",
		"body": "r.TakeFX_Delete({1:take}, {2:fx})$0"
		"description": "Remove a FX from take chain (returns true on success) FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_EndParamEdit lua": {
		"prefix": "r.TakeFX_EndParamEdit",
		"scope": "lua",
		"body": "r.TakeFX_EndParamEdit({1:take}, {2:fx}, {3:param})$0"
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_FormatParamValue lua": {
		"prefix": "r.TakeFX_FormatParamValue",
		"scope": "lua",
		"body": "r.TakeFX_FormatParamValue({1:take}, {2:fx}, {3:param}, {4:val})$0"
		"description": "Note: only works with FX that support Cockos VST extensions. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_FormatParamValueNormalized lua": {
		"prefix": "r.TakeFX_FormatParamValueNormalized",
		"scope": "lua",
		"body": "r.TakeFX_FormatParamValueNormalized({1:take}, {2:fx}, {3:param}, {4:value}, {5:buf})$0"
		"description": "Note: only works with FX that support Cockos VST extensions. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetChainVisible lua": {
		"prefix": "r.TakeFX_GetChainVisible",
		"scope": "lua",
		"body": "r.TakeFX_GetChainVisible({1:take})$0"
		"description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
	},
	"TakeFX_GetCount lua": {
		"prefix": "r.TakeFX_GetCount",
		"scope": "lua",
		"body": "r.TakeFX_GetCount({1:take})$0"
		"description": ""
	},
	"TakeFX_GetEnabled lua": {
		"prefix": "r.TakeFX_GetEnabled",
		"scope": "lua",
		"body": "r.TakeFX_GetEnabled({1:take}, {2:fx})$0"
		"description": "See TakeFX_SetEnabled FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetEnvelope lua": {
		"prefix": "r.TakeFX_GetEnvelope",
		"scope": "lua",
		"body": "r.TakeFX_GetEnvelope({1:take}, {2:fxindex}, {3:parameterindex}, {4:create})$0"
		"description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created. If the envelope already exists and is bypassed and create=true, then the envelope will be unbypassed. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetFXGUID lua": {
		"prefix": "r.TakeFX_GetFXGUID",
		"scope": "lua",
		"body": "r.TakeFX_GetFXGUID({1:take}, {2:fx})$0"
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetFXName lua": {
		"prefix": "r.TakeFX_GetFXName",
		"scope": "lua",
		"body": "r.TakeFX_GetFXName({1:take}, {2:fx})$0"
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetFloatingWindow lua": {
		"prefix": "r.TakeFX_GetFloatingWindow",
		"scope": "lua",
		"body": "r.TakeFX_GetFloatingWindow({1:take}, {2:index})$0"
		"description": "returns HWND of floating window for effect index, if any FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetFormattedParamValue lua": {
		"prefix": "r.TakeFX_GetFormattedParamValue",
		"scope": "lua",
		"body": "r.TakeFX_GetFormattedParamValue({1:take}, {2:fx}, {3:param})$0"
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetIOSize lua": {
		"prefix": "r.TakeFX_GetIOSize",
		"scope": "lua",
		"body": "r.TakeFX_GetIOSize({1:take}, {2:fx})$0"
		"description": "Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetNamedConfigParm lua": {
		"prefix": "r.TakeFX_GetNamedConfigParm",
		"scope": "lua",
		"body": "r.TakeFX_GetNamedConfigParm({1:take}, {2:fx}, {3:parmname})$0"
		"description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetNumParams lua": {
		"prefix": "r.TakeFX_GetNumParams",
		"scope": "lua",
		"body": "r.TakeFX_GetNumParams({1:take}, {2:fx})$0"
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetOffline lua": {
		"prefix": "r.TakeFX_GetOffline",
		"scope": "lua",
		"body": "r.TakeFX_GetOffline({1:take}, {2:fx})$0"
		"description": "See TakeFX_SetOffline FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetOpen lua": {
		"prefix": "r.TakeFX_GetOpen",
		"scope": "lua",
		"body": "r.TakeFX_GetOpen({1:take}, {2:fx})$0"
		"description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetParam lua": {
		"prefix": "r.TakeFX_GetParam",
		"scope": "lua",
		"body": "r.TakeFX_GetParam({1:take}, {2:fx}, {3:param})$0"
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetParamEx lua": {
		"prefix": "r.TakeFX_GetParamEx",
		"scope": "lua",
		"body": "r.TakeFX_GetParamEx({1:take}, {2:fx}, {3:param})$0"
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetParamFromIdent lua": {
		"prefix": "r.TakeFX_GetParamFromIdent",
		"scope": "lua",
		"body": "r.TakeFX_GetParamFromIdent({1:take}, {2:fx}, {3:ident_str})$0"
		"description": "gets the parameter index from an identifying string (:wet, :bypass, or a string returned from GetParamIdent), or -1 if unknown. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetParamIdent lua": {
		"prefix": "r.TakeFX_GetParamIdent",
		"scope": "lua",
		"body": "r.TakeFX_GetParamIdent({1:take}, {2:fx}, {3:param})$0"
		"description": "gets an identifying string for the parameter FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetParamName lua": {
		"prefix": "r.TakeFX_GetParamName",
		"scope": "lua",
		"body": "r.TakeFX_GetParamName({1:take}, {2:fx}, {3:param})$0"
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetParamNormalized lua": {
		"prefix": "r.TakeFX_GetParamNormalized",
		"scope": "lua",
		"body": "r.TakeFX_GetParamNormalized({1:take}, {2:fx}, {3:param})$0"
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetParameterStepSizes lua": {
		"prefix": "r.TakeFX_GetParameterStepSizes",
		"scope": "lua",
		"body": "r.TakeFX_GetParameterStepSizes({1:take}, {2:fx}, {3:param})$0"
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetPinMappings lua": {
		"prefix": "r.TakeFX_GetPinMappings",
		"scope": "lua",
		"body": "r.TakeFX_GetPinMappings({1:take}, {2:fx}, {3:isoutput}, {4:pin})$0"
		"description": "gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits. Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetPreset lua": {
		"prefix": "r.TakeFX_GetPreset",
		"scope": "lua",
		"body": "r.TakeFX_GetPreset({1:take}, {2:fx})$0"
		"description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). See TakeFX_SetPreset. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetPresetIndex lua": {
		"prefix": "r.TakeFX_GetPresetIndex",
		"scope": "lua",
		"body": "r.TakeFX_GetPresetIndex({1:take}, {2:fx})$0"
		"description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetUserPresetFilename lua": {
		"prefix": "r.TakeFX_GetUserPresetFilename",
		"scope": "lua",
		"body": "r.TakeFX_GetUserPresetFilename({1:take}, {2:fx})$0"
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_NavigatePresets lua": {
		"prefix": "r.TakeFX_NavigatePresets",
		"scope": "lua",
		"body": "r.TakeFX_NavigatePresets({1:take}, {2:fx}, {3:presetmove})$0"
		"description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetEnabled lua": {
		"prefix": "r.TakeFX_SetEnabled",
		"scope": "lua",
		"body": "r.TakeFX_SetEnabled({1:take}, {2:fx}, {3:enabled})$0"
		"description": "See TakeFX_GetEnabled FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetNamedConfigParm lua": {
		"prefix": "r.TakeFX_SetNamedConfigParm",
		"scope": "lua",
		"body": "r.TakeFX_SetNamedConfigParm({1:take}, {2:fx}, {3:parmname}, {4:value})$0"
		"description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_SetNamedConfigParm FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetOffline lua": {
		"prefix": "r.TakeFX_SetOffline",
		"scope": "lua",
		"body": "r.TakeFX_SetOffline({1:take}, {2:fx}, {3:offline})$0"
		"description": "See TakeFX_GetOffline FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetOpen lua": {
		"prefix": "r.TakeFX_SetOpen",
		"scope": "lua",
		"body": "r.TakeFX_SetOpen({1:take}, {2:fx}, {3:open})$0"
		"description": "Open this FX UI. See TakeFX_GetOpen FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetParam lua": {
		"prefix": "r.TakeFX_SetParam",
		"scope": "lua",
		"body": "r.TakeFX_SetParam({1:take}, {2:fx}, {3:param}, {4:val})$0"
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetParamNormalized lua": {
		"prefix": "r.TakeFX_SetParamNormalized",
		"scope": "lua",
		"body": "r.TakeFX_SetParamNormalized({1:take}, {2:fx}, {3:param}, {4:value})$0"
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetPinMappings lua": {
		"prefix": "r.TakeFX_SetPinMappings",
		"scope": "lua",
		"body": "r.TakeFX_SetPinMappings({1:take}, {2:fx}, {3:isoutput}, {4:pin}, {5:low32bits}, {6:hi32bits})$0"
		"description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability). Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetPreset lua": {
		"prefix": "r.TakeFX_SetPreset",
		"scope": "lua",
		"body": "r.TakeFX_SetPreset({1:take}, {2:fx}, {3:presetname})$0"
		"description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetPresetByIndex lua": {
		"prefix": "r.TakeFX_SetPresetByIndex",
		"scope": "lua",
		"body": "r.TakeFX_SetPresetByIndex({1:take}, {2:fx}, {3:idx})$0"
		"description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_Show lua": {
		"prefix": "r.TakeFX_Show",
		"scope": "lua",
		"body": "r.TakeFX_Show({1:take}, {2:index}, {3:showFlag})$0"
		"description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid) FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeIsMIDI lua": {
		"prefix": "r.TakeIsMIDI",
		"scope": "lua",
		"body": "r.TakeIsMIDI({1:take})$0"
		"description": "Returns true if the active take contains MIDI."
	},
	"ThemeLayout_GetLayout lua": {
		"prefix": "r.ThemeLayout_GetLayout",
		"scope": "lua",
		"body": "r.ThemeLayout_GetLayout({1:section}, {2:idx})$0"
		"description": "Gets theme layout information. section can be 'global' for global layout override, 'seclist' to enumerate a list of layout sections, otherwise a layout section such as 'mcp', 'tcp', 'trans', etc. idx can be -1 to query the current value, -2 to get the description of the section (if not global), -3 will return the current context DPI-scaling (256=normal, 512=retina, etc), or 0..x. returns false if failed."
	},
	"ThemeLayout_GetParameter lua": {
		"prefix": "r.ThemeLayout_GetParameter",
		"scope": "lua",
		"body": "r.ThemeLayout_GetParameter({1:wp})$0"
		"description": "returns theme layout parameter. return value is cfg-name, or nil/empty if out of range."
	},
	"ThemeLayout_RefreshAll lua": {
		"prefix": "r.ThemeLayout_RefreshAll",
		"scope": "lua",
		"body": "r.ThemeLayout_RefreshAll()$0"
		"description": "Refreshes all layouts"
	},
	"ThemeLayout_SetLayout lua": {
		"prefix": "r.ThemeLayout_SetLayout",
		"scope": "lua",
		"body": "r.ThemeLayout_SetLayout({1:section}, {2:layout})$0"
		"description": "Sets theme layout override for a particular section -- section can be 'global' or 'mcp' etc. If setting global layout, prefix a ! to the layout string to clear any per-layout overrides. Returns false if failed."
	},
	"ThemeLayout_SetParameter lua": {
		"prefix": "r.ThemeLayout_SetParameter",
		"scope": "lua",
		"body": "r.ThemeLayout_SetParameter({1:wp}, {2:value}, {3:persist})$0"
		"description": "sets theme layout parameter to value. persist=true in order to have change loaded on next theme load. note that the caller should update layouts via ??? to make changes visible."
	},
	"TimeMap2_GetDividedBpmAtTime lua": {
		"prefix": "r.TimeMap2_GetDividedBpmAtTime",
		"scope": "lua",
		"body": "r.TimeMap2_GetDividedBpmAtTime({1:proj}, {2:time})$0"
		"description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)"
	},
	"TimeMap2_GetNextChangeTime lua": {
		"prefix": "r.TimeMap2_GetNextChangeTime",
		"scope": "lua",
		"body": "r.TimeMap2_GetNextChangeTime({1:proj}, {2:time})$0"
		"description": "when does the next time map (tempo or time sig) change occur"
	},
	"TimeMap2_QNToTime lua": {
		"prefix": "r.TimeMap2_QNToTime",
		"scope": "lua",
		"body": "r.TimeMap2_QNToTime({1:proj}, {2:qn})$0"
		"description": "converts project QN position to time."
	},
	"TimeMap2_beatsToTime lua": {
		"prefix": "r.TimeMap2_beatsToTime",
		"scope": "lua",
		"body": "r.TimeMap2_beatsToTime({1:proj}, {2:tpos}, {3:measuresIn})$0"
		"description": "convert a beat position (or optionally a beats+measures if measures is non-NULL) to time."
	},
	"TimeMap2_timeToBeats lua": {
		"prefix": "r.TimeMap2_timeToBeats",
		"scope": "lua",
		"body": "r.TimeMap2_timeToBeats({1:proj}, {2:tpos})$0"
		"description": "convert a time into beats.\nif measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.\nif cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).\nif cdenom is non-NULL, will be set to the current time signature denominator."
	},
	"TimeMap2_timeToQN lua": {
		"prefix": "r.TimeMap2_timeToQN",
		"scope": "lua",
		"body": "r.TimeMap2_timeToQN({1:proj}, {2:tpos})$0"
		"description": "converts project time position to QN position."
	},
	"TimeMap_GetDividedBpmAtTime lua": {
		"prefix": "r.TimeMap_GetDividedBpmAtTime",
		"scope": "lua",
		"body": "r.TimeMap_GetDividedBpmAtTime({1:time})$0"
		"description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)"
	},
	"TimeMap_GetMeasureInfo lua": {
		"prefix": "r.TimeMap_GetMeasureInfo",
		"scope": "lua",
		"body": "r.TimeMap_GetMeasureInfo({1:proj}, {2:measure})$0"
		"description": "Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start."
	},
	"TimeMap_GetMetronomePattern lua": {
		"prefix": "r.TimeMap_GetMetronomePattern",
		"scope": "lua",
		"body": "r.TimeMap_GetMetronomePattern({1:proj}, {2:time}, {3:pattern})$0"
		"description": "Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be 'ABCABCD'. For backwards compatibility, by default the function will return 1 for each primary beat and 2 for each non-primary beat, so '1221222' in this example, and does not support triplets. If buf is set to 'EXTENDED', the function will return the full string as displayed in the pattern editor, including all beat types and triplet representations. Pass in 'SET:string' with a correctly formed pattern string matching the current time signature numerator to set the click pattern. The time signature numerator can be deduced from the returned string, and the function returns the time signature denominator."
	},
	"TimeMap_GetTimeSigAtTime lua": {
		"prefix": "r.TimeMap_GetTimeSigAtTime",
		"scope": "lua",
		"body": "r.TimeMap_GetTimeSigAtTime({1:proj}, {2:time})$0"
		"description": "get the effective time signature and tempo"
	},
	"TimeMap_QNToMeasures lua": {
		"prefix": "r.TimeMap_QNToMeasures",
		"scope": "lua",
		"body": "r.TimeMap_QNToMeasures({1:proj}, {2:qn})$0"
		"description": "Find which measure the given QN position falls in."
	},
	"TimeMap_QNToTime lua": {
		"prefix": "r.TimeMap_QNToTime",
		"scope": "lua",
		"body": "r.TimeMap_QNToTime({1:qn})$0"
		"description": "converts project QN position to time."
	},
	"TimeMap_QNToTime_abs lua": {
		"prefix": "r.TimeMap_QNToTime_abs",
		"scope": "lua",
		"body": "r.TimeMap_QNToTime_abs({1:proj}, {2:qn})$0"
		"description": "Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_QNToTime"
	},
	"TimeMap_curFrameRate lua": {
		"prefix": "r.TimeMap_curFrameRate",
		"scope": "lua",
		"body": "r.TimeMap_curFrameRate({1:proj})$0"
		"description": "Gets project framerate, and optionally whether it is drop-frame timecode"
	},
	"TimeMap_timeToQN lua": {
		"prefix": "r.TimeMap_timeToQN",
		"scope": "lua",
		"body": "r.TimeMap_timeToQN({1:tpos})$0"
		"description": "converts project QN position to time."
	},
	"TimeMap_timeToQN_abs lua": {
		"prefix": "r.TimeMap_timeToQN_abs",
		"scope": "lua",
		"body": "r.TimeMap_timeToQN_abs({1:proj}, {2:tpos})$0"
		"description": "Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN"
	},
	"ToggleTrackSendUIMute lua": {
		"prefix": "r.ToggleTrackSendUIMute",
		"scope": "lua",
		"body": "r.ToggleTrackSendUIMute({1:track}, {2:send_idx})$0"
		"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends."
	},
	"TrackCtl_SetToolTip lua": {
		"prefix": "r.TrackCtl_SetToolTip",
		"scope": "lua",
		"body": "r.TrackCtl_SetToolTip({1:fmt}, {2:xpos}, {3:ypos}, {4:topmost})$0"
		"description": "displays tooltip at location, or removes if empty string"
	},
	"TrackFX_AddByName lua": {
		"prefix": "r.TrackFX_AddByName",
		"scope": "lua",
		"body": "r.TrackFX_AddByName({1:track}, {2:fxname}, {3:recFX}, {4:instantiate})$0"
		"description": "Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. If instantiate is <= -1000, it is used for the insertion position (-1000 is first item in chain, -1001 is second, etc). fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:, or FXADD: which adds selected items from the currently-open FX browser, FXADD:2 to limit to 2 FX added, or FXADD:2e to only succeed if exactly 2 FX are selected. Returns -1 on failure or the new position in chain on success. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_CopyToTake lua": {
		"prefix": "r.TrackFX_CopyToTake",
		"scope": "lua",
		"body": "r.TrackFX_CopyToTake({1:src_track}, {2:src_fx}, {3:dest_take}, {4:dest_fx}, {5:is_move})$0"
		"description": "Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_CopyToTrack lua": {
		"prefix": "r.TrackFX_CopyToTrack",
		"scope": "lua",
		"body": "r.TrackFX_CopyToTrack({1:src_track}, {2:src_fx}, {3:dest_track}, {4:dest_fx}, {5:is_move})$0"
		"description": "Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_Delete lua": {
		"prefix": "r.TrackFX_Delete",
		"scope": "lua",
		"body": "r.TrackFX_Delete({1:track}, {2:fx})$0"
		"description": "Remove a FX from track chain (returns true on success) FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_EndParamEdit lua": {
		"prefix": "r.TrackFX_EndParamEdit",
		"scope": "lua",
		"body": "r.TrackFX_EndParamEdit({1:track}, {2:fx}, {3:param})$0"
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_FormatParamValue lua": {
		"prefix": "r.TrackFX_FormatParamValue",
		"scope": "lua",
		"body": "r.TrackFX_FormatParamValue({1:track}, {2:fx}, {3:param}, {4:val})$0"
		"description": "Note: only works with FX that support Cockos VST extensions. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_FormatParamValueNormalized lua": {
		"prefix": "r.TrackFX_FormatParamValueNormalized",
		"scope": "lua",
		"body": "r.TrackFX_FormatParamValueNormalized({1:track}, {2:fx}, {3:param}, {4:value}, {5:buf})$0"
		"description": "Note: only works with FX that support Cockos VST extensions. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetByName lua": {
		"prefix": "r.TrackFX_GetByName",
		"scope": "lua",
		"body": "r.TrackFX_GetByName({1:track}, {2:fxname}, {3:instantiate})$0"
		"description": "Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName."
	},
	"TrackFX_GetChainVisible lua": {
		"prefix": "r.TrackFX_GetChainVisible",
		"scope": "lua",
		"body": "r.TrackFX_GetChainVisible({1:track})$0"
		"description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
	},
	"TrackFX_GetCount lua": {
		"prefix": "r.TrackFX_GetCount",
		"scope": "lua",
		"body": "r.TrackFX_GetCount({1:track})$0"
		"description": ""
	},
	"TrackFX_GetEQ lua": {
		"prefix": "r.TrackFX_GetEQ",
		"scope": "lua",
		"body": "r.TrackFX_GetEQ({1:track}, {2:instantiate})$0"
		"description": "Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName."
	},
	"TrackFX_GetEQBandEnabled lua": {
		"prefix": "r.TrackFX_GetEQBandEnabled",
		"scope": "lua",
		"body": "r.TrackFX_GetEQBandEnabled({1:track}, {2:fxidx}, {3:bandtype}, {4:bandidx})$0"
		"description": "Returns true if the EQ band is enabled.\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetEQParam lua": {
		"prefix": "r.TrackFX_GetEQParam",
		"scope": "lua",
		"body": "r.TrackFX_GetEQParam({1:track}, {2:fxidx}, {3:paramidx})$0"
		"description": "Returns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetEnabled lua": {
		"prefix": "r.TrackFX_GetEnabled",
		"scope": "lua",
		"body": "r.TrackFX_GetEnabled({1:track}, {2:fx})$0"
		"description": "See TrackFX_SetEnabled FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetFXGUID lua": {
		"prefix": "r.TrackFX_GetFXGUID",
		"scope": "lua",
		"body": "r.TrackFX_GetFXGUID({1:track}, {2:fx})$0"
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetFXName lua": {
		"prefix": "r.TrackFX_GetFXName",
		"scope": "lua",
		"body": "r.TrackFX_GetFXName({1:track}, {2:fx})$0"
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetFloatingWindow lua": {
		"prefix": "r.TrackFX_GetFloatingWindow",
		"scope": "lua",
		"body": "r.TrackFX_GetFloatingWindow({1:track}, {2:index})$0"
		"description": "returns HWND of floating window for effect index, if any FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetFormattedParamValue lua": {
		"prefix": "r.TrackFX_GetFormattedParamValue",
		"scope": "lua",
		"body": "r.TrackFX_GetFormattedParamValue({1:track}, {2:fx}, {3:param})$0"
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetIOSize lua": {
		"prefix": "r.TrackFX_GetIOSize",
		"scope": "lua",
		"body": "r.TrackFX_GetIOSize({1:track}, {2:fx})$0"
		"description": "Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetInstrument lua": {
		"prefix": "r.TrackFX_GetInstrument",
		"scope": "lua",
		"body": "r.TrackFX_GetInstrument({1:track})$0"
		"description": "Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName."
	},
	"TrackFX_GetNamedConfigParm lua": {
		"prefix": "r.TrackFX_GetNamedConfigParm",
		"scope": "lua",
		"body": "r.TrackFX_GetNamedConfigParm({1:track}, {2:fx}, {3:parmname})$0"
		"description": "gets plug-in specific named configuration value (returns true on success). \n\nSupported values for read:\npdc : PDC latency\nin_pin_X : name of input pin X\nout_pin_X : name of output pin X\nfx_type : type string\nfx_ident : type-specific identifier\nfx_name : name of FX (also supported as original_name)\nGainReduction_dB : [ReaComp + other supported compressors]\nparent_container : FX ID of parent container, if any (v7.06+)\ncontainer_count : [Container] number of FX in container\ncontainer_item.X : FX ID of item in container (first item is container_item.0) (v7.06+)\nparam.X.container_map.hint_id : unique ID of mapping (preserved if mapping order changes)\nparam.X.container_map.delete : read this value in order to remove the mapping for this parameter\ncontainer_map.add : read from this value to add a new container parameter mapping -- will return new parameter index (accessed via param.X.container_map.*)\ncontainer_map.add.FXID.PARMIDX : read from this value to add/get container parameter mapping for FXID/PARMIDX -- will return the parameter index (accessed via param.X.container_map.*). FXID can be a full address (must be a child of the container) or a 0-based sub-index (v7.06+).\ncontainer_map.get.FXID.PARMIDX : read from this value to get container parameter mapping for FXID/PARMIDX -- will return the parameter index (accessed via param.X.container_map.*). FXID can be a full address (must be a child of the container) or a 0-based sub-index (v7.06+).\nchain_pdc_actual : returns the actual chain latency in samples, only valid after playback has commenced, may be rounded up to block size.\nchain_pdc_reporting : returns the reported chain latency, always valid, not rounded to block size.\n\n\nSupported values for read/write:\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\nparam.X.container_map.fx_index : index of FX contained in container\nparam.X.container_map.fx_parm : parameter index of parameter of FX contained in container\nparam.X.container_map.aliased_name : name of parameter (if user-renamed, otherwise fails)\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLimit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\nparallel : 0, 1 or 2 - 1=process plug-in in parallel with previous, 2=process plug-in parallel and merge MIDI\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)\nchain_sel : selected/visible FX in chain\nrenamed_name : renamed FX instance name (empty string = not renamed)\ncontainer_nch : number of internal channels for container\ncontainer_nch_in : number of input pins for container\ncontainer_nch_out : number of output pints for container\ncontainer_nch_feedback : number of internal feedback channels enabled in container\nfocused : reading returns 1 if focused. Writing a positive value to this sets the FX UI as 'last focused.'\nlast_touched : reading returns two integers, one indicates whether FX is the last-touched FX, the second indicates which parameter was last touched. Writing a negative value ensures this plug-in is not set as last touched, otherwise the FX is set 'last touched,' and last touched parameter index is set to the value in the string (if valid).\n FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetNumParams lua": {
		"prefix": "r.TrackFX_GetNumParams",
		"scope": "lua",
		"body": "r.TrackFX_GetNumParams({1:track}, {2:fx})$0"
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetOffline lua": {
		"prefix": "r.TrackFX_GetOffline",
		"scope": "lua",
		"body": "r.TrackFX_GetOffline({1:track}, {2:fx})$0"
		"description": "See TrackFX_SetOffline FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetOpen lua": {
		"prefix": "r.TrackFX_GetOpen",
		"scope": "lua",
		"body": "r.TrackFX_GetOpen({1:track}, {2:fx})$0"
		"description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetParam lua": {
		"prefix": "r.TrackFX_GetParam",
		"scope": "lua",
		"body": "r.TrackFX_GetParam({1:track}, {2:fx}, {3:param})$0"
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetParamEx lua": {
		"prefix": "r.TrackFX_GetParamEx",
		"scope": "lua",
		"body": "r.TrackFX_GetParamEx({1:track}, {2:fx}, {3:param})$0"
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetParamFromIdent lua": {
		"prefix": "r.TrackFX_GetParamFromIdent",
		"scope": "lua",
		"body": "r.TrackFX_GetParamFromIdent({1:track}, {2:fx}, {3:ident_str})$0"
		"description": "gets the parameter index from an identifying string (:wet, :bypass, :delta, or a string returned from GetParamIdent), or -1 if unknown. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetParamIdent lua": {
		"prefix": "r.TrackFX_GetParamIdent",
		"scope": "lua",
		"body": "r.TrackFX_GetParamIdent({1:track}, {2:fx}, {3:param})$0"
		"description": "gets an identifying string for the parameter FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetParamName lua": {
		"prefix": "r.TrackFX_GetParamName",
		"scope": "lua",
		"body": "r.TrackFX_GetParamName({1:track}, {2:fx}, {3:param})$0"
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetParamNormalized lua": {
		"prefix": "r.TrackFX_GetParamNormalized",
		"scope": "lua",
		"body": "r.TrackFX_GetParamNormalized({1:track}, {2:fx}, {3:param})$0"
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetParameterStepSizes lua": {
		"prefix": "r.TrackFX_GetParameterStepSizes",
		"scope": "lua",
		"body": "r.TrackFX_GetParameterStepSizes({1:track}, {2:fx}, {3:param})$0"
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetPinMappings lua": {
		"prefix": "r.TrackFX_GetPinMappings",
		"scope": "lua",
		"body": "r.TrackFX_GetPinMappings({1:tr}, {2:fx}, {3:isoutput}, {4:pin})$0"
		"description": "gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits. Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetPreset lua": {
		"prefix": "r.TrackFX_GetPreset",
		"scope": "lua",
		"body": "r.TrackFX_GetPreset({1:track}, {2:fx})$0"
		"description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). See TrackFX_SetPreset. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetPresetIndex lua": {
		"prefix": "r.TrackFX_GetPresetIndex",
		"scope": "lua",
		"body": "r.TrackFX_GetPresetIndex({1:track}, {2:fx})$0"
		"description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetRecChainVisible lua": {
		"prefix": "r.TrackFX_GetRecChainVisible",
		"scope": "lua",
		"body": "r.TrackFX_GetRecChainVisible({1:track})$0"
		"description": "returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
	},
	"TrackFX_GetRecCount lua": {
		"prefix": "r.TrackFX_GetRecCount",
		"scope": "lua",
		"body": "r.TrackFX_GetRecCount({1:track})$0"
		"description": "returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX."
	},
	"TrackFX_GetUserPresetFilename lua": {
		"prefix": "r.TrackFX_GetUserPresetFilename",
		"scope": "lua",
		"body": "r.TrackFX_GetUserPresetFilename({1:track}, {2:fx})$0"
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_NavigatePresets lua": {
		"prefix": "r.TrackFX_NavigatePresets",
		"scope": "lua",
		"body": "r.TrackFX_NavigatePresets({1:track}, {2:fx}, {3:presetmove})$0"
		"description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetEQBandEnabled lua": {
		"prefix": "r.TrackFX_SetEQBandEnabled",
		"scope": "lua",
		"body": "r.TrackFX_SetEQBandEnabled({1:track}, {2:fxidx}, {3:bandtype}, {4:bandidx}, {5:enable})$0"
		"description": "Enable or disable a ReaEQ band.\nReturns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\n\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetEQParam lua": {
		"prefix": "r.TrackFX_SetEQParam",
		"scope": "lua",
		"body": "r.TrackFX_SetEQParam({1:track}, {2:fxidx}, {3:bandtype}, {4:bandidx}, {5:paramtype}, {6:val}, {7:isnorm})$0"
		"description": "Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetEnabled lua": {
		"prefix": "r.TrackFX_SetEnabled",
		"scope": "lua",
		"body": "r.TrackFX_SetEnabled({1:track}, {2:fx}, {3:enabled})$0"
		"description": "See TrackFX_GetEnabled FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetNamedConfigParm lua": {
		"prefix": "r.TrackFX_SetNamedConfigParm",
		"scope": "lua",
		"body": "r.TrackFX_SetNamedConfigParm({1:track}, {2:fx}, {3:parmname}, {4:value})$0"
		"description": "sets plug-in specific named configuration value (returns true on success).\n\nSupport values for write:\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\nparam.X.container_map.fx_index : index of FX contained in container\nparam.X.container_map.fx_parm : parameter index of parameter of FX contained in container\nparam.X.container_map.aliased_name : name of parameter (if user-renamed, otherwise fails)\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLimit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\nparallel : 0, 1 or 2 - 1=process plug-in in parallel with previous, 2=process plug-in parallel and merge MIDI\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)\nchain_sel : selected/visible FX in chain\nrenamed_name : renamed FX instance name (empty string = not renamed)\ncontainer_nch : number of internal channels for container\ncontainer_nch_in : number of input pins for container\ncontainer_nch_out : number of output pints for container\ncontainer_nch_feedback : number of internal feedback channels enabled in container\nfocused : reading returns 1 if focused. Writing a positive value to this sets the FX UI as 'last focused.'\nlast_touched : reading returns two integers, one indicates whether FX is the last-touched FX, the second indicates which parameter was last touched. Writing a negative value ensures this plug-in is not set as last touched, otherwise the FX is set 'last touched,' and last touched parameter index is set to the value in the string (if valid).\n FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetOffline lua": {
		"prefix": "r.TrackFX_SetOffline",
		"scope": "lua",
		"body": "r.TrackFX_SetOffline({1:track}, {2:fx}, {3:offline})$0"
		"description": "See TrackFX_GetOffline FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetOpen lua": {
		"prefix": "r.TrackFX_SetOpen",
		"scope": "lua",
		"body": "r.TrackFX_SetOpen({1:track}, {2:fx}, {3:open})$0"
		"description": "Open this FX UI. See TrackFX_GetOpen FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetParam lua": {
		"prefix": "r.TrackFX_SetParam",
		"scope": "lua",
		"body": "r.TrackFX_SetParam({1:track}, {2:fx}, {3:param}, {4:val})$0"
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetParamNormalized lua": {
		"prefix": "r.TrackFX_SetParamNormalized",
		"scope": "lua",
		"body": "r.TrackFX_SetParamNormalized({1:track}, {2:fx}, {3:param}, {4:value})$0"
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetPinMappings lua": {
		"prefix": "r.TrackFX_SetPinMappings",
		"scope": "lua",
		"body": "r.TrackFX_SetPinMappings({1:tr}, {2:fx}, {3:isoutput}, {4:pin}, {5:low32bits}, {6:hi32bits})$0"
		"description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability). Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetPreset lua": {
		"prefix": "r.TrackFX_SetPreset",
		"scope": "lua",
		"body": "r.TrackFX_SetPreset({1:track}, {2:fx}, {3:presetname})$0"
		"description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetPresetByIndex lua": {
		"prefix": "r.TrackFX_SetPresetByIndex",
		"scope": "lua",
		"body": "r.TrackFX_SetPresetByIndex({1:track}, {2:fx}, {3:idx})$0"
		"description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_Show lua": {
		"prefix": "r.TrackFX_Show",
		"scope": "lua",
		"body": "r.TrackFX_Show({1:track}, {2:index}, {3:showFlag})$0"
		"description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid) FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackList_AdjustWindows lua": {
		"prefix": "r.TrackList_AdjustWindows",
		"scope": "lua",
		"body": "r.TrackList_AdjustWindows({1:isMinor})$0"
		"description": ""
	},
	"TrackList_UpdateAllExternalSurfaces lua": {
		"prefix": "r.TrackList_UpdateAllExternalSurfaces",
		"scope": "lua",
		"body": "r.TrackList_UpdateAllExternalSurfaces()$0"
		"description": ""
	},
	"Track_GetPeakHoldDB lua": {
		"prefix": "r.Track_GetPeakHoldDB",
		"scope": "lua",
		"body": "r.Track_GetPeakHoldDB({1:track}, {2:channel}, {3:clear})$0"
		"description": "Returns meter hold state, in dB*0.01 (0 = +0dB, -0.01 = -1dB, 0.02 = +2dB, etc). If clear is set, clears the meter hold. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness."
	},
	"Track_GetPeakInfo lua": {
		"prefix": "r.Track_GetPeakInfo",
		"scope": "lua",
		"body": "r.Track_GetPeakInfo({1:track}, {2:channel})$0"
		"description": "Returns peak meter value (1.0=+0dB, 0.0=-inf) for channel. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness."
	},
	"ULT_GetMediaItemNote lua": {
		"prefix": "r.ULT_GetMediaItemNote",
		"scope": "lua",
		"body": "r.ULT_GetMediaItemNote({1:item})$0"
		"description": "[ULT] Deprecated, see GetSetMediaItemInfo_String (v5.95+). Get item notes."
	},
	"ULT_SetMediaItemNote lua": {
		"prefix": "r.ULT_SetMediaItemNote",
		"scope": "lua",
		"body": "r.ULT_SetMediaItemNote({1:item}, {2:note})$0"
		"description": "[ULT] Deprecated, see GetSetMediaItemInfo_String (v5.95+). Set item notes."
	},
	"Undo_BeginBlock lua": {
		"prefix": "r.Undo_BeginBlock",
		"scope": "lua",
		"body": "r.Undo_BeginBlock()$0"
		"description": "call to start a new block"
	},
	"Undo_BeginBlock2 lua": {
		"prefix": "r.Undo_BeginBlock2",
		"scope": "lua",
		"body": "r.Undo_BeginBlock2({1:proj})$0"
		"description": "call to start a new block"
	},
	"Undo_CanRedo2 lua": {
		"prefix": "r.Undo_CanRedo2",
		"scope": "lua",
		"body": "r.Undo_CanRedo2({1:proj})$0"
		"description": "returns string of next action,if able,NULL if not"
	},
	"Undo_CanUndo2 lua": {
		"prefix": "r.Undo_CanUndo2",
		"scope": "lua",
		"body": "r.Undo_CanUndo2({1:proj})$0"
		"description": "returns string of last action,if able,NULL if not"
	},
	"Undo_DoRedo2 lua": {
		"prefix": "r.Undo_DoRedo2",
		"scope": "lua",
		"body": "r.Undo_DoRedo2({1:proj})$0"
		"description": "nonzero if success"
	},
	"Undo_DoUndo2 lua": {
		"prefix": "r.Undo_DoUndo2",
		"scope": "lua",
		"body": "r.Undo_DoUndo2({1:proj})$0"
		"description": "nonzero if success"
	},
	"Undo_EndBlock lua": {
		"prefix": "r.Undo_EndBlock",
		"scope": "lua",
		"body": "r.Undo_EndBlock({1:descchange}, {2:extraflags})$0"
		"description": "call to end the block,with extra flags if any,and a description"
	},
	"Undo_EndBlock2 lua": {
		"prefix": "r.Undo_EndBlock2",
		"scope": "lua",
		"body": "r.Undo_EndBlock2({1:proj}, {2:descchange}, {3:extraflags})$0"
		"description": "call to end the block,with extra flags if any,and a description"
	},
	"Undo_OnStateChange lua": {
		"prefix": "r.Undo_OnStateChange",
		"scope": "lua",
		"body": "r.Undo_OnStateChange({1:descchange})$0"
		"description": "limited state change to items"
	},
	"Undo_OnStateChange2 lua": {
		"prefix": "r.Undo_OnStateChange2",
		"scope": "lua",
		"body": "r.Undo_OnStateChange2({1:proj}, {2:descchange})$0"
		"description": "limited state change to items"
	},
	"Undo_OnStateChangeEx lua": {
		"prefix": "r.Undo_OnStateChangeEx",
		"scope": "lua",
		"body": "r.Undo_OnStateChangeEx({1:descchange}, {2:whichStates}, {3:trackparm})$0"
		"description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index"
	},
	"Undo_OnStateChangeEx2 lua": {
		"prefix": "r.Undo_OnStateChangeEx2",
		"scope": "lua",
		"body": "r.Undo_OnStateChangeEx2({1:proj}, {2:descchange}, {3:whichStates}, {4:trackparm})$0"
		"description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index"
	},
	"Undo_OnStateChange_Item lua": {
		"prefix": "r.Undo_OnStateChange_Item",
		"scope": "lua",
		"body": "r.Undo_OnStateChange_Item({1:proj}, {2:name}, {3:item})$0"
		"description": ""
	},
	"UpdateArrange lua": {
		"prefix": "r.UpdateArrange",
		"scope": "lua",
		"body": "r.UpdateArrange()$0"
		"description": "Redraw the arrange view"
	},
	"UpdateItemInProject lua": {
		"prefix": "r.UpdateItemInProject",
		"scope": "lua",
		"body": "r.UpdateItemInProject({1:item})$0"
		"description": ""
	},
	"UpdateItemLanes lua": {
		"prefix": "r.UpdateItemLanes",
		"scope": "lua",
		"body": "r.UpdateItemLanes({1:proj})$0"
		"description": "Recalculate lane arrangement for fixed lane tracks, including auto-removing empty lanes at the bottom of the track"
	},
	"UpdateTimeline lua": {
		"prefix": "r.UpdateTimeline",
		"scope": "lua",
		"body": "r.UpdateTimeline()$0"
		"description": "Redraw the arrange view and ruler"
	},
	"ValidatePtr lua": {
		"prefix": "r.ValidatePtr",
		"scope": "lua",
		"body": "r.ValidatePtr({1:pointer}, {2:ctypename})$0"
		"description": "see ValidatePtr2"
	},
	"ValidatePtr2 lua": {
		"prefix": "r.ValidatePtr2",
		"scope": "lua",
		"body": "r.ValidatePtr2({1:proj}, {2:pointer}, {3:ctypename})$0"
		"description": "Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*."
	},
	"ViewPrefs lua": {
		"prefix": "r.ViewPrefs",
		"scope": "lua",
		"body": "r.ViewPrefs({1:page}, {2:pageByName})$0"
		"description": "Opens the prefs to a page, use pageByName if page is 0."
	},
	"Xen_AudioWriter_Create lua": {
		"prefix": "r.Xen_AudioWriter_Create",
		"scope": "lua",
		"body": "r.Xen_AudioWriter_Create({1:filename}, {2:numchans}, {3:samplerate})$0"
		"description": "Creates writer for 32 bit floating point WAV"
	},
	"Xen_AudioWriter_Destroy lua": {
		"prefix": "r.Xen_AudioWriter_Destroy",
		"scope": "lua",
		"body": "r.Xen_AudioWriter_Destroy({1:writer})$0"
		"description": "Destroys writer"
	},
	"Xen_AudioWriter_Write lua": {
		"prefix": "r.Xen_AudioWriter_Write",
		"scope": "lua",
		"body": "r.Xen_AudioWriter_Write({1:writer}, {2:numframes}, {3:data}, {4:offset})$0"
		"description": "Write interleaved audio data to disk"
	},
	"Xen_GetMediaSourceSamples lua": {
		"prefix": "r.Xen_GetMediaSourceSamples",
		"scope": "lua",
		"body": "r.Xen_GetMediaSourceSamples({1:src}, {2:destbuf}, {3:destbufoffset}, {4:numframes}, {5:numchans}, {6:samplerate}, {7:sourceposition})$0"
		"description": "Get interleaved audio data from media source"
	},
	"Xen_StartSourcePreview lua": {
		"prefix": "r.Xen_StartSourcePreview",
		"scope": "lua",
		"body": "r.Xen_StartSourcePreview({1:source}, {2:gain}, {3:loop}, {4:outputchanindexIn})$0"
		"description": "Start audio preview of a PCM_source. Returns id of a preview handle that can be provided to Xen_StopSourcePreview.\nIf the given PCM_source does not belong to an existing MediaItem/Take, it will be deleted by the preview system when the preview is stopped."
	},
	"Xen_StopSourcePreview lua": {
		"prefix": "r.Xen_StopSourcePreview",
		"scope": "lua",
		"body": "r.Xen_StopSourcePreview({1:preview_id})$0"
		"description": "Stop audio preview. id -1 stops all."
	},
	"adjustZoom lua": {
		"prefix": "r.adjustZoom",
		"scope": "lua",
		"body": "r.adjustZoom({1:amt}, {2:forceset}, {3:doupd}, {4:centermode})$0"
		"description": "forceset=0,doupd=true,centermode=-1 for default"
	},
	"file_exists lua": {
		"prefix": "r.file_exists",
		"scope": "lua",
		"body": "r.file_exists({1:path})$0"
		"description": "returns true if path points to a valid, readable file"
	},
	"format_timestr lua": {
		"prefix": "r.format_timestr",
		"scope": "lua",
		"body": "r.format_timestr({1:tpos}, {2:buf})$0"
		"description": "Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len."
	},
	"format_timestr_len lua": {
		"prefix": "r.format_timestr_len",
		"scope": "lua",
		"body": "r.format_timestr_len({1:tpos}, {2:buf}, {3:offset}, {4:modeoverride})$0"
		"description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f\noffset is start of where the length will be calculated from"
	},
	"format_timestr_pos lua": {
		"prefix": "r.format_timestr_pos",
		"scope": "lua",
		"body": "r.format_timestr_pos({1:tpos}, {2:buf}, {3:modeoverride})$0"
		"description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f"
	},
	"get_config_var_string lua": {
		"prefix": "r.get_config_var_string",
		"scope": "lua",
		"body": "r.get_config_var_string({1:name})$0"
		"description": "gets ini configuration variable value as string"
	},
	"get_ini_file lua": {
		"prefix": "r.get_ini_file",
		"scope": "lua",
		"body": "r.get_ini_file()$0"
		"description": "Get reaper.ini full filename."
	},
	"guidToString lua": {
		"prefix": "r.guidToString",
		"scope": "lua",
		"body": "r.guidToString({1:gGUID}, {2:destNeed64})$0"
		"description": "dest should be at least 64 chars long to be safe"
	},
	"image_resolve_fn lua": {
		"prefix": "r.image_resolve_fn",
		"scope": "lua",
		"body": "r.image_resolve_fn({1:in}, {2:out})$0"
		"description": ""
	},
	"joystick_create lua": {
		"prefix": "r.joystick_create",
		"scope": "lua",
		"body": "r.joystick_create({1:guidGUID})$0"
		"description": "creates a joystick device"
	},
	"joystick_destroy lua": {
		"prefix": "r.joystick_destroy",
		"scope": "lua",
		"body": "r.joystick_destroy({1:device})$0"
		"description": "destroys a joystick device"
	},
	"joystick_enum lua": {
		"prefix": "r.joystick_enum",
		"scope": "lua",
		"body": "r.joystick_enum({1:index})$0"
		"description": "enumerates installed devices, returns GUID as a string"
	},
	"joystick_getaxis lua": {
		"prefix": "r.joystick_getaxis",
		"scope": "lua",
		"body": "r.joystick_getaxis({1:dev}, {2:axis})$0"
		"description": "returns axis value (-1..1)"
	},
	"joystick_getbuttonmask lua": {
		"prefix": "r.joystick_getbuttonmask",
		"scope": "lua",
		"body": "r.joystick_getbuttonmask({1:dev})$0"
		"description": "returns button pressed mask, 1=first button, 2=second..."
	},
	"joystick_getinfo lua": {
		"prefix": "r.joystick_getinfo",
		"scope": "lua",
		"body": "r.joystick_getinfo({1:dev})$0"
		"description": "returns button count"
	},
	"joystick_getpov lua": {
		"prefix": "r.joystick_getpov",
		"scope": "lua",
		"body": "r.joystick_getpov({1:dev}, {2:pov})$0"
		"description": "returns POV value (usually 0..655.35, or 655.35 on error)"
	},
	"joystick_update lua": {
		"prefix": "r.joystick_update",
		"scope": "lua",
		"body": "r.joystick_update({1:dev})$0"
		"description": "Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)"
	},
	"kbd_enumerateActions lua": {
		"prefix": "r.kbd_enumerateActions",
		"scope": "lua",
		"body": "r.kbd_enumerateActions({1:section}, {2:idx})$0"
		"description": ""
	},
	"kbd_getTextFromCmd lua": {
		"prefix": "r.kbd_getTextFromCmd",
		"scope": "lua",
		"body": "r.kbd_getTextFromCmd({1:cmd}, {2:section})$0"
		"description": ""
	},
	"midi_init lua": {
		"prefix": "r.midi_init",
		"scope": "lua",
		"body": "r.midi_init({1:force_reinit_input}, {2:force_reinit_output})$0"
		"description": "Opens MIDI devices as configured in preferences. force_reinit_input and force_reinit_output force a particular device index to close/re-open (pass -1 to not force any devices to reopen)."
	},
	"midi_reinit lua": {
		"prefix": "r.midi_reinit",
		"scope": "lua",
		"body": "r.midi_reinit()$0"
		"description": "Reset (close and re-open) all MIDI devices"
	},
	"mkpanstr lua": {
		"prefix": "r.mkpanstr",
		"scope": "lua",
		"body": "r.mkpanstr({1:strNeed64}, {2:pan})$0"
		"description": ""
	},
	"mkvolpanstr lua": {
		"prefix": "r.mkvolpanstr",
		"scope": "lua",
		"body": "r.mkvolpanstr({1:strNeed64}, {2:vol}, {3:pan})$0"
		"description": ""
	},
	"mkvolstr lua": {
		"prefix": "r.mkvolstr",
		"scope": "lua",
		"body": "r.mkvolstr({1:strNeed64}, {2:vol})$0"
		"description": ""
	},
	"nvk_StartSourcePreview lua": {
		"prefix": "r.nvk_StartSourcePreview",
		"scope": "lua",
		"body": "r.nvk_StartSourcePreview({1:source}, {2:gain}, {3:playrate}, {4:loop}, {5:track})$0"
		"description": "Plays source and provides int to allow for stopping it later"
	},
	"parse_timestr lua": {
		"prefix": "r.parse_timestr",
		"scope": "lua",
		"body": "r.parse_timestr({1:buf})$0"
		"description": "Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len."
	},
	"parse_timestr_len lua": {
		"prefix": "r.parse_timestr_len",
		"scope": "lua",
		"body": "r.parse_timestr_len({1:buf}, {2:offset}, {3:modeoverride})$0"
		"description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f"
	},
	"parse_timestr_pos lua": {
		"prefix": "r.parse_timestr_pos",
		"scope": "lua",
		"body": "r.parse_timestr_pos({1:buf}, {2:modeoverride})$0"
		"description": "Parse time string, time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f"
	},
	"parsepanstr lua": {
		"prefix": "r.parsepanstr",
		"scope": "lua",
		"body": "r.parsepanstr({1:str})$0"
		"description": ""
	},
	"reduce_open_files lua": {
		"prefix": "r.reduce_open_files",
		"scope": "lua",
		"body": "r.reduce_open_files({1:flags})$0"
		"description": "garbage-collects extra open files and closes them. if flags has 1 set, this is done incrementally (call this from a regular timer, if desired). if flags has 2 set, files are aggressively closed (they may need to be re-opened very soon). returns number of files closed by this call."
	},
	"relative_fn lua": {
		"prefix": "r.relative_fn",
		"scope": "lua",
		"body": "r.relative_fn({1:in}, {2:out})$0"
		"description": "Makes a filename 'in' relative to the current project, if any."
	},
	"resolve_fn lua": {
		"prefix": "r.resolve_fn",
		"scope": "lua",
		"body": "r.resolve_fn({1:in}, {2:out})$0"
		"description": "See resolve_fn2."
	},
	"resolve_fn2 lua": {
		"prefix": "r.resolve_fn2",
		"scope": "lua",
		"body": "r.resolve_fn2({1:in}, {2:out}, {3:checkSubDir})$0"
		"description": "Resolves a filename 'in' by using project settings etc. If no file found, out will be a copy of in."
	},
	"sm_getPort lua": {
		"prefix": "r.sm_getPort",
		"scope": "lua",
		"body": "r.sm_getPort()$0"
		"description": "Get the current http communication port from Soundminer."
	},
	"sm_getadvance lua": {
		"prefix": "r.sm_getadvance",
		"scope": "lua",
		"body": "r.sm_getadvance()$0"
		"description": "Return's whether the cursor position in reaper should auto advance to the end of the clip after spotting or not."
	},
	"sm_metadata lua": {
		"prefix": "r.sm_metadata",
		"scope": "lua",
		"body": "r.sm_metadata({1:filepath})$0"
		"description": "Return's metadata for a record."
	},
	"sm_nvk_CREATE lua": {
		"prefix": "r.sm_nvk_CREATE",
		"scope": "lua",
		"body": "r.sm_nvk_CREATE({1:query}, {2:offset}, {3:maxlimit})$0"
		"description": "Query Soundminer from nvk_CREATE."
	},
	"sm_nvk_CREATE_current lua": {
		"prefix": "r.sm_nvk_CREATE_current",
		"scope": "lua",
		"body": "r.sm_nvk_CREATE_current({1:offset}, {2:maxlimit})$0"
		"description": "Bring back the current sounds on display from Soundminer for nvk_CREATE."
	},
	"sm_resolvepath lua": {
		"prefix": "r.sm_resolvepath",
		"scope": "lua",
		"body": "r.sm_resolvepath({1:path})$0"
		"description": "Return's a real filepath for a file, resolving it as necesary. Return's nil if offline."
	},
	"sm_setadvance lua": {
		"prefix": "r.sm_setadvance",
		"scope": "lua",
		"body": "r.sm_setadvance({1:flag})$0"
		"description": "Set's whether the cursor position in reaper should auto advance to the end of the clip after spotting or not."
	},
	"sm_setformat lua": {
		"prefix": "r.sm_setformat",
		"scope": "lua",
		"body": "r.sm_setformat({1:format})$0"
		"description": "Set the format of data received from Soundminer.  Defaults to json."
	},
	"sm_version lua": {
		"prefix": "r.sm_version",
		"scope": "lua",
		"body": "r.sm_version()$0"
		"description": "Return's Soundminer app version and extension version. App version will be blank on connection error. (Not launched or http interface not running).\n\nReaScript/EEL2 Built-in Function List"
	},
	"stringToGuid lua": {
		"prefix": "r.stringToGuid",
		"scope": "lua",
		"body": "r.stringToGuid({1:str}, {2:gGUID})$0"
		"description": ""
	},
	"time_precise lua": {
		"prefix": "r.time_precise",
		"scope": "lua",
		"body": "r.time_precise()$0"
		"description": "Gets a precise system timestamp in seconds"
	}
}