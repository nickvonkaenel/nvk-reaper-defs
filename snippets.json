{
	"REAPER.ATEXIT lua": {
		"prefix": "r.atexit",
		"scope": "lua",
		"body": "r.atexit(${1:function})$0",
		"description": "Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code."
	},
	"REAPER.DEFER lua": {
		"prefix": "r.defer",
		"scope": "lua",
		"body": "r.defer(${1:function})$0",
		"description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().Note that no undo point will be automatically created when the script finishes, unless you create it explicitly."
	},
	"REAPER.GET_ACTION_CONTEXT lua": {
		"prefix": "r.get_action_context",
		"scope": "lua",
		"body": "r.get_action_context()$0",
		"description": "is_new_value,filename,sectionID,cmdID,mode,resolution,val = r.get_action_context()Returns contextual information about the script, typically MIDI/OSC input values.val will be set to a relative or absolute value depending on mode (=0: absolute mode, >0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.Notes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC."
	},
	"GFX.R lua": {
		"prefix": "gfx.r",
		"scope": "lua",
		"body": "gfx.r$0",
		"description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). "
	},
	"GFX.G lua": {
		"prefix": "gfx.g",
		"scope": "lua",
		"body": "gfx.g$0",
		"description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). "
	},
	"GFX.B lua": {
		"prefix": "gfx.b",
		"scope": "lua",
		"body": "gfx.b$0",
		"description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). "
	},
	"GFX.A lua": {
		"prefix": "gfx.a",
		"scope": "lua",
		"body": "gfx.a$0",
		"description": "These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). "
	},
	"GFX.W lua": {
		"prefix": "gfx.w",
		"scope": "lua",
		"body": "gfx.w$0",
		"description": "These are set to the current width and height of the UI framebuffer. "
	},
	"GFX.H lua": {
		"prefix": "gfx.h",
		"scope": "lua",
		"body": "gfx.h$0",
		"description": "These are set to the current width and height of the UI framebuffer. "
	},
	"GFX.X lua": {
		"prefix": "gfx.x",
		"scope": "lua",
		"body": "gfx.x$0",
		"description": "These set the \"current\" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. "
	},
	"GFX.Y lua": {
		"prefix": "gfx.y",
		"scope": "lua",
		"body": "gfx.y$0",
		"description": "These set the \"current\" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. "
	},
	"GFX.MODE lua": {
		"prefix": "gfx.mode",
		"scope": "lua",
		"body": "gfx.mode$0",
		"description": "Set to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). Add 2.0 to disable source alpha for gfx.blit(). Add 4.0 to disable filtering for gfx.blit(). "
	},
	"GFX.CLEAR lua": {
		"prefix": "gfx.clear",
		"scope": "lua",
		"body": "gfx.clear$0",
		"description": "If set to a value greater than -1.0, this will result in the framebuffer being cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black). "
	},
	"GFX.DEST lua": {
		"prefix": "gfx.dest",
		"scope": "lua",
		"body": "gfx.dest$0",
		"description": "Defaults to -1, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image)."
	},
	"GFX.TEXTH lua": {
		"prefix": "gfx.texth",
		"scope": "lua",
		"body": "gfx.texth$0",
		"description": "Set to the height of a line of text in the current font. Do not modify this variable."
	},
	"GFX.EXT_RETINA lua": {
		"prefix": "gfx.ext_retina",
		"scope": "lua",
		"body": "gfx.ext_retina$0",
		"description": "If set to 1.0 on initialization, will be updated to 2.0 if high resolution display is supported, and if so gfx.w/gfx.h/etc will be doubled."
	},
	"GFX.MOUSE_X lua": {
		"prefix": "gfx.mouse_x",
		"scope": "lua",
		"body": "gfx.mouse_x$0",
		"description": "gfx.mouse_x and gfx.mouse_y are set to the coordinates of the mouse relative to the graphics window."
	},
	"GFX.MOUSE_Y lua": {
		"prefix": "gfx.mouse_y",
		"scope": "lua",
		"body": "gfx.mouse_y$0",
		"description": "gfx.mouse_x and gfx.mouse_y are set to the coordinates of the mouse relative to the graphics window."
	},
	"GFX.MOUSE_WHEEL lua": {
		"prefix": "gfx.mouse_wheel",
		"scope": "lua",
		"body": "gfx.mouse_wheel$0",
		"description": "mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it."
	},
	"GFX.MOUSE_HWHEEL lua": {
		"prefix": "gfx.mouse_hwheel",
		"scope": "lua",
		"body": "gfx.mouse_hwheel$0",
		"description": "mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it."
	},
	"GFX.ARC lua": {
		"prefix": "gfx.arc",
		"scope": "lua",
		"body": "gfx.arc(${1:x}, ${2:y}, ${3:r}, ${4:ang1}, ${5:ang2}, ${6:[,antialias]})$0",
		"description": "Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians."
	},
	"GFX.BLIT lua": {
		"prefix": "gfx.blit",
		"scope": "lua",
		"body": "gfx.blit(${1:source}, ${2:scale}, ${3:rotation})$0",
		"description": "If three parameters are specified, copies the entirity of the source bitmap to gfx.x,gfx.y using current opacity and copy mode (set with gfx.a, gfx.mode). You can specify scale (1.0 is unscaled) and rotation (0.0 is not rotated, angles are in radians).For the \"source\" parameter specify -1 to use the main framebuffer as source, or an image index (see gfx.loadimg())."
	},
	"GFX.BLITEXT lua": {
		"prefix": "gfx.blitext",
		"scope": "lua",
		"body": "gfx.blitext(${1:source}, ${2:coordinatelist}, ${3:rotation})$0",
		"description": "Deprecated, use gfx.blit instead."
	},
	"GFX.BLURTO lua": {
		"prefix": "gfx.blurto",
		"scope": "lua",
		"body": "gfx.blurto(${1:x}, ${2:y})$0",
		"description": "Blurs the region of the screen between gfx.x,gfx.y and x,y, and updates gfx.x,gfx.y to x,y."
	},
	"GFX.CIRCLE lua": {
		"prefix": "gfx.circle",
		"scope": "lua",
		"body": "gfx.circle(${1:x}, ${2:y}, ${3:r}, ${4:[,fill,antialias]})$0",
		"description": "Draws a circle, optionally filling/antialiasing. "
	},
	"GFX.CLIENTTOSCREEN lua": {
		"prefix": "gfx.clienttoscreen",
		"scope": "lua",
		"body": "gfx.clienttoscreen(${1:x}, ${2:y})$0",
		"description": "Converts the coordinates x,y to screen coordinates, returns those values."
	},
	"GFX.DELTABLIT lua": {
		"prefix": "gfx.deltablit",
		"scope": "lua",
		"body": "gfx.deltablit(${1:srcimg}, ${2:srcx}, ${3:srcy}, ${4:srcw}, ${5:srch}, ${6:destx}, ${7:desty}, ${8:destw}, ${9:desth}, ${10:dsdx}, ${11:dtdx}, ${12:dsdy}, ${13:dtdy}, ${14:dsdxdy}, ${15:dtdxdy})$0",
		"description": "Blits from srcimg(srcx,srcy,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. "
	},
	"GFX.DOCK lua": {
		"prefix": "gfx.dock",
		"scope": "lua",
		"body": "gfx.dock(${1:v}, ${2:[,wx,wy,ww,wh]})$0",
		"description": "Call with v=-1 to query docked state, otherwise v>=0 to set docked state. State is &1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh specified, additional values will be returned with the undocked window position/size"
	},
	"GFX.DRAWCHAR lua": {
		"prefix": "gfx.drawchar",
		"scope": "lua",
		"body": "gfx.drawchar(${1:char})$0",
		"description": "Draws the character (can be a numeric ASCII code as well), to gfx.x, gfx.y, and moves gfx.x over by the size of the character."
	},
	"GFX.DRAWNUMBER lua": {
		"prefix": "gfx.drawnumber",
		"scope": "lua",
		"body": "gfx.drawnumber(${1:n}, ${2:ndigits})$0",
		"description": "Draws the number n with ndigits of precision to gfx.x, gfx.y, and updates gfx.x to the right side of the drawing. The text height is gfx.texth."
	},
	"GFX.DRAWSTR lua": {
		"prefix": "gfx.drawstr",
		"scope": "lua",
		"body": "gfx.drawstr(\"${1:str}\", ${2:[,flags,right,bottom]})$0",
		"description": "Draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y so that subsequent draws will occur in a similar place.If flags, right ,bottom passed in:flags&1: center horizontallyflags&2: right justifyflags&4: center verticallyflags&8: bottom justifyflags&256: ignore right/bottom, otherwise text is clipped to (gfx.x, gfx.y, right, bottom)"
	},
	"GFX.GETCHAR lua": {
		"prefix": "gfx.getchar",
		"scope": "lua",
		"body": "gfx.getchar(${1:[char]})$0",
		"description": "If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed.Common values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. Modified and special keys can also be returned, including:Ctrl/Cmd+A..Ctrl+Z as 1..26Ctrl/Cmd+Alt+A..Z as 257..282Alt+A..Z as 'A'+256..'Z'+25627 for ESC13 for Enter' ' for space"
	},
	"GFX.GETDROPFILE lua": {
		"prefix": "gfx.getdropfile",
		"scope": "lua",
		"body": "gfx.getdropfile(${1:idx})$0",
		"description": "Returns success,string for dropped file index idx. call gfx.dropfile(-1) to clear the list when finished."
	},
	"GFX.GETFONT lua": {
		"prefix": "gfx.getfont",
		"scope": "lua",
		"body": "gfx.getfont()$0",
		"description": "Returns current font index, and the actual font face used by this font (if available)."
	},
	"GFX.GETIMGDIM lua": {
		"prefix": "gfx.getimgdim",
		"scope": "lua",
		"body": "gfx.getimgdim(${1:handle})$0",
		"description": "Retreives the dimensions of an image specified by handle, returns w, h pair."
	},
	"GFX.GETPIXEL lua": {
		"prefix": "gfx.getpixel",
		"scope": "lua",
		"body": "gfx.getpixel()$0",
		"description": "Returns r,g,b values [0..1] of the pixel at (gfx.x,gfx.y)"
	},
	"GFX.GRADRECT lua": {
		"prefix": "gfx.gradrect",
		"scope": "lua",
		"body": "gfx.gradrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:r}, ${6:g}, ${7:b}, ${8:a}, ${9:[, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady]})$0",
		"description": "Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc."
	},
	"GFX.INIT lua": {
		"prefix": "gfx.init",
		"scope": "lua",
		"body": "gfx.init(\"${1:name}\", ${2:[,width,height,dockstate,xpos,ypos]})$0",
		"description": "Initializes the graphics window with title name. Suggested width and height can be specified.Once the graphics window is open, gfx.update() should be called periodically. "
	},
	"GFX.LINE lua": {
		"prefix": "gfx.line",
		"scope": "lua",
		"body": "gfx.line(${1:x}, ${2:y}, ${3:x2}, ${4:y2}, ${5:[,aa]})$0",
		"description": "Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased. "
	},
	"GFX.LINETO lua": {
		"prefix": "gfx.lineto",
		"scope": "lua",
		"body": "gfx.lineto(${1:x}, ${2:y}, ${3:[,aa]})$0",
		"description": "Draws a line from gfx.x,gfx.y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx.x and gfx.y to x,y."
	},
	"GFX.LOADIMG lua": {
		"prefix": "gfx.loadimg",
		"scope": "lua",
		"body": "gfx.loadimg(${1:image}, \"${2:filename}\")$0",
		"description": "Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file. "
	},
	"GFX.MEASURECHAR lua": {
		"prefix": "gfx.measurechar",
		"scope": "lua",
		"body": "gfx.measurechar(${1:char})$0",
		"description": "Measures the drawing dimensions of a character with the current font (as set by gfx.setfont). Returns width and height of character."
	},
	"GFX.MEASURESTR lua": {
		"prefix": "gfx.measurestr",
		"scope": "lua",
		"body": "gfx.measurestr(\"${1:str}\")$0",
		"description": "Measures the drawing dimensions of a string with the current font (as set by gfx.setfont). Returns width and height of string."
	},
	"GFX.MULADDRECT lua": {
		"prefix": "gfx.muladdrect",
		"scope": "lua",
		"body": "gfx.muladdrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:mul_r}, ${6:mul_g}, ${7:mul_b}, ${8:[,mul_a,add_r,add_g,add_b,add_a]})$0",
		"description": "Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects."
	},
	"GFX.PRINTF lua": {
		"prefix": "gfx.printf",
		"scope": "lua",
		"body": "gfx.printf(\"${1:format}\", ${2:[, ...]})$0",
		"description": "Formats and draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see sprintf()"
	},
	"GFX.QUIT lua": {
		"prefix": "gfx.quit",
		"scope": "lua",
		"body": "gfx.quit()$0",
		"description": "Closes the graphics window."
	},
	"GFX.RECT lua": {
		"prefix": "gfx.rect",
		"scope": "lua",
		"body": "gfx.rect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:[,filled]})$0",
		"description": "Fills a rectangle at x,y, w,h pixels in dimension, filled by default. "
	},
	"GFX.RECTTO lua": {
		"prefix": "gfx.rectto",
		"scope": "lua",
		"body": "gfx.rectto(${1:x}, ${2:y})$0",
		"description": "Fills a rectangle from gfx.x,gfx.y to x,y. Updates gfx.x,gfx.y to x,y. "
	},
	"GFX.ROUNDRECT lua": {
		"prefix": "gfx.roundrect",
		"scope": "lua",
		"body": "gfx.roundrect(${1:x}, ${2:y}, ${3:w}, ${4:h}, ${5:radius}, ${6:[,antialias]})$0",
		"description": "Draws a rectangle with rounded corners. "
	},
	"GFX.SCREENTOCLIENT lua": {
		"prefix": "gfx.screentoclient",
		"scope": "lua",
		"body": "gfx.screentoclient(${1:x}, ${2:y})$0",
		"description": "Converts the screen coordinates x,y to client coordinates, returns those values."
	},
	"GFX.SET lua": {
		"prefix": "gfx.set",
		"scope": "lua",
		"body": "gfx.set(${1:r}, ${2:[,g,b,a,mode,dest]})$0",
		"description": "Sets gfx.r/gfx.g/gfx.b/gfx.a/gfx.mode, sets gfx.dest if final parameter specified"
	},
	"GFX.SETCURSOR lua": {
		"prefix": "gfx.setcursor",
		"scope": "lua",
		"body": "gfx.setcursor(${1:resource_id}, ${2:custom_cursor_name})$0",
		"description": "Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like \"arrow\" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional."
	},
	"GFX.SETFONT lua": {
		"prefix": "gfx.setfont",
		"scope": "lua",
		"body": "gfx.setfont(${1:idx}, \"${2:[,fontface, sz, flags]}\")$0",
		"description": "Can select a font and optionally configure it. idx=0 for default bitmapped font, no configuration is possible for this font. idx=1..16 for a configurable font, specify fontface such as \"Arial\", sz of 8-100, and optionally specify flags, which is a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. These flags may or may not be supported depending on the font and OS. After calling gfx.setfont(), gfx.texth may be updated to reflect the new average line height."
	},
	"GFX.SETIMGDIM lua": {
		"prefix": "gfx.setimgdim",
		"scope": "lua",
		"body": "gfx.setimgdim(${1:image}, ${2:w}, ${3:h})$0",
		"description": "Resize image referenced by index 0..1024-1, width and height must be 0-2048. The contents of the image will be undefined after the resize."
	},
	"GFX.SETPIXEL lua": {
		"prefix": "gfx.setpixel",
		"scope": "lua",
		"body": "gfx.setpixel(${1:r}, ${2:g}, ${3:b})$0",
		"description": "Writes a pixel of r,g,b to gfx.x,gfx.y."
	},
	"GFX.SHOWMENU lua": {
		"prefix": "gfx.showmenu",
		"scope": "lua",
		"body": "gfx.showmenu(\"${1:str}\")$0",
		"description": "Shows a popup menu at gfx.x,gfx.y. str is a list of fields separated by | characters. Each field represents a menu item.Fields can start with special characters:# : grayed out! : checked> : this menu item shows a submenu< : last item in the current submenuAn empty field will appear as a separator in the menu. gfx.showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.Example:gfx.showmenu(\"first item, followed by separator||!second item, checked|>third item which spawns a submenu|#first item in submenu, grayed out|<second and last item in submenu|fourth item in top menu\")"
	},
	"GFX.TRANSFORMBLIT lua": {
		"prefix": "gfx.transformblit",
		"scope": "lua",
		"body": "gfx.transformblit(${1:srcimg}, ${2:destx}, ${3:desty}, ${4:destw}, ${5:desth}, ${6:div_w}, ${7:div_h}, ${8:table})$0",
		"description": "Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (table can be a regular table or (for less overhead) a r.array). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination."
	},
	"GFX.TRIANGLE lua": {
		"prefix": "gfx.triangle",
		"scope": "lua",
		"body": "gfx.triangle(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:[x4,y4...]})$0",
		"description": "Draws a filled triangle, or any convex polygon. "
	},
	"GFX.UPDATE lua": {
		"prefix": "gfx.update",
		"scope": "lua",
		"body": "gfx.update()$0",
		"description": "Updates the graphics display, if opened"
	},
	"REAPER.NEW_ARRAY lua": {
		"prefix": "r.new_array",
		"scope": "lua",
		"body": "r.new_array(${1:[table|array][size]})$0",
		"description": "Creates a new r.array object of maximum and initial size size, if specified, or from the size/values of a table/array. Both size and table/array can be specified, the size parameter will override the table/array size."
	},
	"REAPER.RUNLOOP lua": {
		"prefix": "r.runloop",
		"scope": "lua",
		"body": "r.runloop(${1:function})$0",
		"description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().Note that no undo point will be automatically created when the script finishes, unless you create it explicitly."
	},
	"{REAPER.ARRAY}.CLEAR lua": {
		"prefix": "{r.array}.clear",
		"scope": "lua",
		"body": "{r.array}.clear(${1:[value, offset, size]})$0",
		"description": "Sets the value of zero or more items in the array. If value not specified, 0.0 is used. offset is 1-based, if size omitted then the maximum amount available will be set."
	},
	"{REAPER.ARRAY}.CONVOLVE lua": {
		"prefix": "{r.array}.convolve",
		"scope": "lua",
		"body": "{r.array}.convolve(${1:[src, srcoffs, size, destoffs]})$0",
		"description": "Convolves complex value pairs from r.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs. size is in normal items (so it must be even)"
	},
	"{REAPER.ARRAY}.COPY lua": {
		"prefix": "{r.array}.copy",
		"scope": "lua",
		"body": "{r.array}.copy(${1:[src, srcoffs, size, destoffs]})$0",
		"description": "Copies values from r.array or table, starting at 1-based srcoffs, writing to 1-based destoffs."
	},
	"{REAPER.ARRAY}.FFT lua": {
		"prefix": "{r.array}.fft",
		"scope": "lua",
		"body": "{r.array}.fft(${1:size}, ${2:[, permute, offset]})$0",
		"description": "Performs a forward FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order."
	},
	"{REAPER.ARRAY}.FFT_REAL lua": {
		"prefix": "{r.array}.fft_real",
		"scope": "lua",
		"body": "{r.array}.fft_real(${1:size}, ${2:[, permute, offset]})$0",
		"description": "Performs a forward real->complex FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order."
	},
	"{REAPER.ARRAY}.GET_ALLOC lua": {
		"prefix": "{r.array}.get_alloc",
		"scope": "lua",
		"body": "{r.array}.get_alloc()$0",
		"description": "Returns the maximum (allocated) size of the array."
	},
	"{REAPER.ARRAY}.IFFT lua": {
		"prefix": "{r.array}.ifft",
		"scope": "lua",
		"body": "{r.array}.ifft(${1:size}, ${2:[, permute, offset]})$0",
		"description": "Performs a backwards FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order."
	},
	"{REAPER.ARRAY}.IFFT_REAL lua": {
		"prefix": "{r.array}.ifft_real",
		"scope": "lua",
		"body": "{r.array}.ifft_real(${1:size}, ${2:[, permute, offset]})$0",
		"description": "Performs a backwards complex->real FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order."
	},
	"{REAPER.ARRAY}.MULTIPLY lua": {
		"prefix": "{r.array}.multiply",
		"scope": "lua",
		"body": "{r.array}.multiply(${1:[src, srcoffs, size, destoffs]})$0",
		"description": "Multiplies values from r.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs."
	},
	"{REAPER.ARRAY}.RESIZE lua": {
		"prefix": "{r.array}.resize",
		"scope": "lua",
		"body": "{r.array}.resize(${1:size})$0",
		"description": "Resizes an array object to size. size must be [0..max_size]."
	},
	"{REAPER.ARRAY}.TABLE lua": {
		"prefix": "{r.array}.table",
		"scope": "lua",
		"body": "{r.array}.table(${1:[offset, size]})$0",
		"description": "Returns a new table with values from items in the array. Offset is 1-based and if size is omitted all available values are used."
	},

	"APIExists lua": {
		"prefix": "r.APIExists",
		"scope": "lua",
		"body": "r.APIExists(${1:function_name})$0",
		"description": "Returns true if function_name exists in the REAPER API"
	},
	"APITest lua": {
		"prefix": "r.APITest",
		"scope": "lua",
		"body": "r.APITest()$0",
		"description": "Displays a message window if the API was successfully called."
	},
	"AddMediaItemToTrack lua": {
		"prefix": "r.AddMediaItemToTrack",
		"scope": "lua",
		"body": "r.AddMediaItemToTrack(${1:tr})$0",
		"description": "creates a new media item."
	},
	"AddProjectMarker lua": {
		"prefix": "r.AddProjectMarker",
		"scope": "lua",
		"body": "r.AddProjectMarker(0, ${2:isrgn}, ${3:pos}, ${4:rgnend}, ${5:name}, ${6:wantidx})$0",
		"description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use."
	},
	"AddProjectMarker2 lua": {
		"prefix": "r.AddProjectMarker2",
		"scope": "lua",
		"body": "r.AddProjectMarker2(0, ${2:isrgn}, ${3:pos}, ${4:rgnend}, ${5:name}, ${6:wantidx}, ${7:color})$0",
		"description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000"
	},
	"AddRemoveReaScript lua": {
		"prefix": "r.AddRemoveReaScript",
		"scope": "lua",
		"body": "r.AddRemoveReaScript(${1:add}, ${2:sectionID}, ${3:scriptfn}, ${4:commit})$0",
		"description": "Add a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return >0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call."
	},
	"AddTakeToMediaItem lua": {
		"prefix": "r.AddTakeToMediaItem",
		"scope": "lua",
		"body": "r.AddTakeToMediaItem(${1:item})$0",
		"description": "creates a new take in an item"
	},
	"AddTempoTimeSigMarker lua": {
		"prefix": "r.AddTempoTimeSigMarker",
		"scope": "lua",
		"body": "r.AddTempoTimeSigMarker(0, ${2:timepos}, ${3:bpm}, ${4:timesig_num}, ${5:timesig_denom}, ${6:lineartempochange})$0",
		"description": "Deprecated. Use SetTempoTimeSigMarker with ptidx=-1."
	},
	"AnyTrackSolo lua": {
		"prefix": "r.AnyTrackSolo",
		"scope": "lua",
		"body": "r.AnyTrackSolo(0)$0",
		"description": ""
	},
	"ApplyNudge lua": {
		"prefix": "r.ApplyNudge",
		"scope": "lua",
		"body": "r.ApplyNudge(0, ${2:nudgeflag}, ${3:nudgewhat}, ${4:nudgeunits}, ${5:value}, ${6:reverse}, ${7:copies})$0",
		"description": "nudgeflag: &1=set to value (otherwise nudge by value), &2=snap\nnudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor\nnudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections\nvalue: amount to nudge by, or value to set to\nreverse: in nudge mode, nudges left (otherwise ignored)\ncopies: in nudge duplicate mode, number of copies (otherwise ignored)"
	},
	"ArmCommand lua": {
		"prefix": "r.ArmCommand",
		"scope": "lua",
		"body": "r.ArmCommand(${1:cmd}, ${2:sectionname})$0",
		"description": "arms a command (or disarms if 0 passed) in section sectionname (empty string for main)"
	},
	"AudioAccessorStateChanged lua": {
		"prefix": "r.AudioAccessorStateChanged",
		"scope": "lua",
		"body": "r.AudioAccessorStateChanged(${1:accessor})$0",
		"description": "Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call AudioAccessorValidateState only when needed. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"AudioAccessorUpdate lua": {
		"prefix": "r.AudioAccessorUpdate",
		"scope": "lua",
		"body": "r.AudioAccessorUpdate(${1:accessor})$0",
		"description": "Force the accessor to reload its state from the underlying track or media item take. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"AudioAccessorValidateState lua": {
		"prefix": "r.AudioAccessorValidateState",
		"scope": "lua",
		"body": "r.AudioAccessorValidateState(${1:accessor})$0",
		"description": "Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed."
	},
	"Audio_Init lua": {
		"prefix": "r.Audio_Init",
		"scope": "lua",
		"body": "r.Audio_Init()$0",
		"description": "open all audio and MIDI devices, if not open"
	},
	"Audio_IsPreBuffer lua": {
		"prefix": "r.Audio_IsPreBuffer",
		"scope": "lua",
		"body": "r.Audio_IsPreBuffer()$0",
		"description": "is in pre-buffer? threadsafe"
	},
	"Audio_IsRunning lua": {
		"prefix": "r.Audio_IsRunning",
		"scope": "lua",
		"body": "r.Audio_IsRunning()$0",
		"description": "is audio running at all? threadsafe"
	},
	"Audio_Quit lua": {
		"prefix": "r.Audio_Quit",
		"scope": "lua",
		"body": "r.Audio_Quit()$0",
		"description": "close all audio and MIDI devices, if open"
	},
	"BR_EnvAlloc lua": {
		"prefix": "r.BR_EnvAlloc",
		"scope": "lua",
		"body": "r.BR_EnvAlloc(${1:envelope}, ${2:takeEnvelopesUseProjectTime})$0",
		"description": "[BR] Allocate envelope object from track or take envelope pointer. Always call BR_EnvFree when done to release the object and commit changes if needed.\n takeEnvelopesUseProjectTime: take envelope points' positions are counted from take position, not project start time. If you want to work with project time instead, pass this as true.\nFor further manipulation see BR_EnvCountPoints, BR_EnvDeletePoint, BR_EnvFind, BR_EnvFindNext, BR_EnvFindPrevious, BR_EnvGetParentTake, BR_EnvGetParentTrack, BR_EnvGetPoint, BR_EnvGetProperties, BR_EnvSetPoint, BR_EnvSetProperties, BR_EnvValueAtPos."
	},
	"BR_EnvCountPoints lua": {
		"prefix": "r.BR_EnvCountPoints",
		"scope": "lua",
		"body": "r.BR_EnvCountPoints(${1:envelope})$0",
		"description": "[BR] Count envelope points in the envelope object allocated with BR_EnvAlloc."
	},
	"BR_EnvDeletePoint lua": {
		"prefix": "r.BR_EnvDeletePoint",
		"scope": "lua",
		"body": "r.BR_EnvDeletePoint(${1:envelope}, ${2:id})$0",
		"description": "[BR] Delete envelope point by index (zero-based) in the envelope object allocated with BR_EnvAlloc. Returns true on success."
	},
	"BR_EnvFind lua": {
		"prefix": "r.BR_EnvFind",
		"scope": "lua",
		"body": "r.BR_EnvFind(${1:envelope}, ${2:position}, ${3:delta})$0",
		"description": "[BR] Find envelope point at time position in the envelope object allocated with BR_EnvAlloc. Pass delta > 0 to search surrounding range - in that case the closest point to position within delta will be searched for. Returns envelope point id (zero-based) on success or -1 on failure."
	},
	"BR_EnvFindNext lua": {
		"prefix": "r.BR_EnvFindNext",
		"scope": "lua",
		"body": "r.BR_EnvFindNext(${1:envelope}, ${2:position})$0",
		"description": "[BR] Find next envelope point after time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure."
	},
	"BR_EnvFindPrevious lua": {
		"prefix": "r.BR_EnvFindPrevious",
		"scope": "lua",
		"body": "r.BR_EnvFindPrevious(${1:envelope}, ${2:position})$0",
		"description": "[BR] Find previous envelope point before time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure."
	},
	"BR_EnvFree lua": {
		"prefix": "r.BR_EnvFree",
		"scope": "lua",
		"body": "r.BR_EnvFree(${1:envelope}, ${2:commit})$0",
		"description": "[BR] Free envelope object allocated with BR_EnvAlloc and commit changes if needed. Returns true if changes were committed successfully. Note that when envelope object wasn't modified nothing will get committed even if commit = true - in that case function returns false."
	},
	"BR_EnvGetParentTake lua": {
		"prefix": "r.BR_EnvGetParentTake",
		"scope": "lua",
		"body": "r.BR_EnvGetParentTake(${1:envelope})$0",
		"description": "[BR] If envelope object allocated with BR_EnvAlloc is take envelope, returns parent media item take, otherwise NULL."
	},
	"BR_EnvGetParentTrack lua": {
		"prefix": "r.BR_EnvGetParentTrack",
		"scope": "lua",
		"body": "r.BR_EnvGetParentTrack(${1:envelope})$0",
		"description": "[BR] Get parent track of envelope object allocated with BR_EnvAlloc. If take envelope, returns NULL."
	},
	"BR_EnvGetPoint lua": {
		"prefix": "r.BR_EnvGetPoint",
		"scope": "lua",
		"body": "rv, position, value, shape, selected, bezier = r.BR_EnvGetPoint(${1:envelope}, ${2:id})$0",
		"description": "[BR] Get envelope point by id (zero-based) from the envelope object allocated with BR_EnvAlloc. Returns true on success."
	},
	"BR_EnvGetProperties lua": {
		"prefix": "r.BR_EnvGetProperties",
		"scope": "lua",
		"body": "active, visible, armed, inLane, laneHeight, defaultShape, minValue, maxValue, centerValue, type, faderScaling, automationItemsOptions = r.BR_EnvGetProperties(${1:envelope})$0",
		"description": "[BR] Get envelope properties for the envelope object allocated with BR_EnvAlloc.\nactive: true if envelope is active\nvisible: true if envelope is visible\narmed: true if envelope is armed\ninLane: true if envelope has it's own envelope lane\nlaneHeight: envelope lane override height. 0 for none, otherwise size in pixels\ndefaultShape: default point shape: 0->Linear, 1->Square, 2->Slow start/end, 3->Fast start, 4->Fast end, 5->Bezier\nminValue: minimum envelope value\nmaxValue: maximum envelope value\ntype: envelope type: 0->Volume, 1->Volume (Pre-FX), 2->Pan, 3->Pan (Pre-FX), 4->Width, 5->Width (Pre-FX), 6->Mute, 7->Pitch, 8->Playrate, 9->Tempo map, 10->Parameter\nfaderScaling: true if envelope uses fader scaling\nautomationItemsOptions: -1->project default, &1=0->don't attach to underl. env., &1->attach to underl. env. on right side,  &2->attach to underl. env. on both sides, &4: bypass underl. env."
	},
	"BR_EnvSetPoint lua": {
		"prefix": "r.BR_EnvSetPoint",
		"scope": "lua",
		"body": "r.BR_EnvSetPoint(${1:envelope}, ${2:id}, ${3:position}, ${4:value}, ${5:shape}, ${6:selected}, ${7:bezier})$0",
		"description": "[BR] Set envelope point by id (zero-based) in the envelope object allocated with BR_EnvAlloc. To create point instead, pass id = -1. Note that if new point is inserted or existing point's time position is changed, points won't automatically get sorted. To do that, see BR_EnvSortPoints.\nReturns true on success."
	},
	"BR_EnvSetProperties lua": {
		"prefix": "r.BR_EnvSetProperties",
		"scope": "lua",
		"body": "r.BR_EnvSetProperties(${1:envelope}, ${2:active}, ${3:visible}, ${4:armed}, ${5:inLane}, ${6:laneHeight}, ${7:defaultShape}, ${8:faderScaling}, ${9:automationItemsOptionsIn})$0",
		"description": "[BR] Set envelope properties for the envelope object allocated with BR_EnvAlloc. For parameter description see BR_EnvGetProperties.\nSetting automationItemsOptions requires REAPER 5.979+."
	},
	"BR_EnvSortPoints lua": {
		"prefix": "r.BR_EnvSortPoints",
		"scope": "lua",
		"body": "r.BR_EnvSortPoints(${1:envelope})$0",
		"description": "[BR] Sort envelope points by position. The only reason to call this is if sorted points are explicitly needed after editing them with BR_EnvSetPoint. Note that you do not have to call this before doing BR_EnvFree since it does handle unsorted points too."
	},
	"BR_EnvValueAtPos lua": {
		"prefix": "r.BR_EnvValueAtPos",
		"scope": "lua",
		"body": "r.BR_EnvValueAtPos(${1:envelope}, ${2:position})$0",
		"description": "[BR] Get envelope value at time position for the envelope object allocated with BR_EnvAlloc."
	},
	"BR_GetArrangeView lua": {
		"prefix": "r.BR_GetArrangeView",
		"scope": "lua",
		"body": "startTime, endTime = r.BR_GetArrangeView(0)$0",
		"description": "[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see BR_SetArrangeView."
	},
	"BR_GetClosestGridDivision lua": {
		"prefix": "r.BR_GetClosestGridDivision",
		"scope": "lua",
		"body": "r.BR_GetClosestGridDivision(${1:position})$0",
		"description": "[BR] Get closest grid division to position. Note that this functions is different from SnapToGrid in two regards. SnapToGrid() needs snap enabled to work and this one works always. Secondly, grid divisions are different from grid lines because some grid lines may be hidden due to zoom level - this function ignores grid line visibility and always searches for the closest grid division at given position. For more grid division functions, see BR_GetNextGridDivision and BR_GetPrevGridDivision."
	},
	"BR_GetCurrentTheme lua": {
		"prefix": "r.BR_GetCurrentTheme",
		"scope": "lua",
		"body": "themePath, themeName = r.BR_GetCurrentTheme()$0",
		"description": "[BR] Get current theme information. themePathOut is set to full theme path and themeNameOut is set to theme name excluding any path info and extension"
	},
	"BR_GetMediaItemByGUID lua": {
		"prefix": "r.BR_GetMediaItemByGUID",
		"scope": "lua",
		"body": "r.BR_GetMediaItemByGUID(0, ${2:guidStringIn})$0",
		"description": "[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see BR_GetMediaItemGUID."
	},
	"BR_GetMediaItemGUID lua": {
		"prefix": "r.BR_GetMediaItemGUID",
		"scope": "lua",
		"body": "r.BR_GetMediaItemGUID(${1:item})$0",
		"description": "[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see BR_GetMediaItemByGUID."
	},
	"BR_GetMediaItemImageResource lua": {
		"prefix": "r.BR_GetMediaItemImageResource",
		"scope": "lua",
		"body": "rv, image, imageFlags = r.BR_GetMediaItemImageResource(${1:item})$0",
		"description": "[BR] Get currently loaded image resource and its flags for a given item. Returns false if there is no image resource set. To set image resource, see BR_SetMediaItemImageResource."
	},
	"BR_GetMediaItemTakeGUID lua": {
		"prefix": "r.BR_GetMediaItemTakeGUID",
		"scope": "lua",
		"body": "r.BR_GetMediaItemTakeGUID(${1:take})$0",
		"description": "[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see SNM_GetMediaItemTakeByGUID."
	},
	"BR_GetMediaSourceProperties lua": {
		"prefix": "r.BR_GetMediaSourceProperties",
		"scope": "lua",
		"body": "rv, section, start, length, fade, reverse = r.BR_GetMediaSourceProperties(${1:take})$0",
		"description": "[BR] Get take media source properties as they appear in Item properties. Returns false if take can't have them (MIDI items etc.).\nTo set source properties, see BR_SetMediaSourceProperties."
	},
	"BR_GetMediaTrackByGUID lua": {
		"prefix": "r.BR_GetMediaTrackByGUID",
		"scope": "lua",
		"body": "r.BR_GetMediaTrackByGUID(0, ${2:guidStringIn})$0",
		"description": "[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see GetSetMediaTrackInfo_String."
	},
	"BR_GetMediaTrackFreezeCount lua": {
		"prefix": "r.BR_GetMediaTrackFreezeCount",
		"scope": "lua",
		"body": "r.BR_GetMediaTrackFreezeCount(${1:track})$0",
		"description": "[BR] Get media track freeze count (if track isn't frozen at all, returns 0)."
	},
	"BR_GetMediaTrackGUID lua": {
		"prefix": "r.BR_GetMediaTrackGUID",
		"scope": "lua",
		"body": "r.BR_GetMediaTrackGUID(${1:track})$0",
		"description": "[BR] Deprecated, see GetSetMediaTrackInfo_String (v5.95+). Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see BR_GetMediaTrackByGUID."
	},
	"BR_GetMediaTrackLayouts lua": {
		"prefix": "r.BR_GetMediaTrackLayouts",
		"scope": "lua",
		"body": "mcpLayoutName, tcpLayoutName = r.BR_GetMediaTrackLayouts(${1:track})$0",
		"description": "[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string ('') means that layout is set to the default layout. To set media track layouts, see BR_SetMediaTrackLayouts."
	},
	"BR_GetMediaTrackSendInfo_Envelope lua": {
		"prefix": "r.BR_GetMediaTrackSendInfo_Envelope",
		"scope": "lua",
		"body": "r.BR_GetMediaTrackSendInfo_Envelope(${1:track}, ${2:category}, ${3:sendidx}, ${4:envelopeType})$0",
		"description": "[BR] Get track envelope for send/receive/hardware output.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\nenvelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Track."
	},
	"BR_GetMediaTrackSendInfo_Track lua": {
		"prefix": "r.BR_GetMediaTrackSendInfo_Track",
		"scope": "lua",
		"body": "r.BR_GetMediaTrackSendInfo_Track(${1:track}, ${2:category}, ${3:sendidx}, ${4:trackType})$0",
		"description": "[BR] Get source or destination media track for send/receive.\ncategory is <0 for receives, 0=sends\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives)\ntrackType determines which track is returned (0=source track, 1=destination track)\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Envelope."
	},
	"BR_GetMidiSourceLenPPQ lua": {
		"prefix": "r.BR_GetMidiSourceLenPPQ",
		"scope": "lua",
		"body": "r.BR_GetMidiSourceLenPPQ(${1:take})$0",
		"description": "[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1."
	},
	"BR_GetMidiTakePoolGUID lua": {
		"prefix": "r.BR_GetMidiTakePoolGUID",
		"scope": "lua",
		"body": "rv, guidString = r.BR_GetMidiTakePoolGUID(${1:take})$0",
		"description": "[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled."
	},
	"BR_GetMidiTakeTempoInfo lua": {
		"prefix": "r.BR_GetMidiTakeTempoInfo",
		"scope": "lua",
		"body": "rv, ignoreProjTempo, bpm, num, den = r.BR_GetMidiTakeTempoInfo(${1:take})$0",
		"description": "[BR] Get 'ignore project tempo' information for MIDI take. Returns true if take can ignore project tempo (no matter if it's actually ignored), otherwise false."
	},
	"BR_GetMouseCursorContext lua": {
		"prefix": "r.BR_GetMouseCursorContext",
		"scope": "lua",
		"body": "window, segment, details = r.BR_GetMouseCursorContext()$0",
		"description": "[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.\nTo get more info on stuff that was found under mouse cursor see BR_GetMouseCursorContext_Envelope, BR_GetMouseCursorContext_Item, BR_GetMouseCursorContext_MIDI, BR_GetMouseCursorContext_Position, BR_GetMouseCursorContext_Take, BR_GetMouseCursorContext_Track \nWindow Segment Details                                            unknown          ''            ''                                                             ruler            region_lane     ''                                                                                                                        marker_lane     ''                                                                                                                        tempo_lane      ''                                                                                                                        timeline        ''                                                             transport        ''            ''                                                             tcp              track           ''                                                                                                                        envelope        ''                                                                                                                        empty           ''                                                             mcp              track           ''                                                                                                                        empty           ''                                                             arrange          track           empty,\nitem, item_stretch_marker,\nenv_point, env_segment                                                              envelope        empty, env_point, env_segment                                                                                               empty           ''                                                             midi_editor      unknown         ''                                                                                                                        ruler           ''                                                                                                                        piano           ''                                                                                                                        notes           ''                                                                                                                        cc_lane         cc_selector, cc_lane"
	},
	"BR_GetMouseCursorContext_Envelope lua": {
		"prefix": "r.BR_GetMouseCursorContext_Envelope",
		"scope": "lua",
		"body": "rv, takeEnvelope = r.BR_GetMouseCursorContext_Envelope()$0",
		"description": "[BR] Returns envelope that was captured with the last call to BR_GetMouseCursorContext. In case the envelope belongs to take, takeEnvelope will be true."
	},
	"BR_GetMouseCursorContext_Item lua": {
		"prefix": "r.BR_GetMouseCursorContext_Item",
		"scope": "lua",
		"body": "r.BR_GetMouseCursorContext_Item()$0",
		"description": "[BR] Returns item under mouse cursor that was captured with the last call to BR_GetMouseCursorContext. Note that the function will return item even if mouse cursor is over some other track lane element like stretch marker or envelope. This enables for easier identification of items when you want to ignore elements within the item."
	},
	"BR_GetMouseCursorContext_MIDI lua": {
		"prefix": "r.BR_GetMouseCursorContext_MIDI",
		"scope": "lua",
		"body": "rv, inlineEditor, noteRow, ccLane, ccLaneVal, ccLaneId = r.BR_GetMouseCursorContext_MIDI()$0",
		"description": "[BR] Returns midi editor under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\ninlineEditor: if mouse was captured in inline MIDI editor, this will be true (consequentially, returned MIDI editor will be NULL)\nnoteRow: note row or piano key under mouse cursor (0-127)\nccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events)\nccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)\nccLaneId: lane position, counting from the top (0 based)\nNote: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1"
	},
	"BR_GetMouseCursorContext_Position lua": {
		"prefix": "r.BR_GetMouseCursorContext_Position",
		"scope": "lua",
		"body": "r.BR_GetMouseCursorContext_Position()$0",
		"description": "[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to BR_GetMouseCursorContext."
	},
	"BR_GetMouseCursorContext_StretchMarker lua": {
		"prefix": "r.BR_GetMouseCursorContext_StretchMarker",
		"scope": "lua",
		"body": "r.BR_GetMouseCursorContext_StretchMarker()$0",
		"description": "[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to BR_GetMouseCursorContext."
	},
	"BR_GetMouseCursorContext_Take lua": {
		"prefix": "r.BR_GetMouseCursorContext_Take",
		"scope": "lua",
		"body": "r.BR_GetMouseCursorContext_Take()$0",
		"description": "[BR] Returns take under mouse cursor that was captured with the last call to BR_GetMouseCursorContext."
	},
	"BR_GetMouseCursorContext_Track lua": {
		"prefix": "r.BR_GetMouseCursorContext_Track",
		"scope": "lua",
		"body": "r.BR_GetMouseCursorContext_Track()$0",
		"description": "[BR] Returns track under mouse cursor that was captured with the last call to BR_GetMouseCursorContext."
	},
	"BR_GetNextGridDivision lua": {
		"prefix": "r.BR_GetNextGridDivision",
		"scope": "lua",
		"body": "r.BR_GetNextGridDivision(${1:position})$0",
		"description": "[BR] Get next grid division after the time position. For more grid divisions function, see BR_GetClosestGridDivision and BR_GetPrevGridDivision."
	},
	"BR_GetPrevGridDivision lua": {
		"prefix": "r.BR_GetPrevGridDivision",
		"scope": "lua",
		"body": "r.BR_GetPrevGridDivision(${1:position})$0",
		"description": "[BR] Get previous grid division before the time position. For more grid division functions, see BR_GetClosestGridDivision and BR_GetNextGridDivision."
	},
	"BR_GetSetTrackSendInfo lua": {
		"prefix": "r.BR_GetSetTrackSendInfo",
		"scope": "lua",
		"body": "r.BR_GetSetTrackSendInfo(${1:track}, ${2:category}, ${3:sendidx}, ${4:parmname}, ${5:setNewValue}, ${6:newValue})$0",
		"description": "[BR] Get or set send attributes.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\nTo set attribute, pass setNewValue as true\nList of possible parameters:\nB_MUTE : send mute state (1.0 if muted, otherwise 0.0)\nB_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)\nB_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)\nD_VOL : send volume (1.0=+0dB etc...)\nD_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)\nD_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)\nI_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)\nI_SRCCHAN : audio source starting channel index or -1 if audio send is disabled (&1024=mono...note that in that case, when reading index, you should do (index XOR 1024) to get starting channel index)\nI_DSTCHAN : audio destination starting channel index (&1024=mono (and in case of hardware output &512=rearoute)...note that in that case, when reading index, you should do (index XOR (1024 OR 512)) to get starting channel index)\nI_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)\nI_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)\nI_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\nI_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\nI_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI\nNote: To get or set other send attributes, see BR_GetMediaTrackSendInfo_Envelope and BR_GetMediaTrackSendInfo_Track."
	},
	"BR_GetTakeFXCount lua": {
		"prefix": "r.BR_GetTakeFXCount",
		"scope": "lua",
		"body": "r.BR_GetTakeFXCount(${1:take})$0",
		"description": "[BR] Returns FX count for supplied take"
	},
	"BR_IsMidiOpenInInlineEditor lua": {
		"prefix": "r.BR_IsMidiOpenInInlineEditor",
		"scope": "lua",
		"body": "r.BR_IsMidiOpenInInlineEditor(${1:take})$0",
		"description": "[SWS] Check if take has MIDI inline editor open and returns true or false."
	},
	"BR_IsTakeMidi lua": {
		"prefix": "r.BR_IsTakeMidi",
		"scope": "lua",
		"body": "r.BR_IsTakeMidi(${1:take})$0",
		"description": "[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI source data, inProjectMidiOut will be true, otherwise false."
	},
	"BR_ItemAtMouseCursor lua": {
		"prefix": "r.BR_ItemAtMouseCursor",
		"scope": "lua",
		"body": "r.BR_ItemAtMouseCursor()$0",
		"description": "[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange."
	},
	"BR_MIDI_CCLaneRemove lua": {
		"prefix": "r.BR_MIDI_CCLaneRemove",
		"scope": "lua",
		"body": "r.BR_MIDI_CCLaneRemove(${1:midiEditor}, ${2:laneId})$0",
		"description": "[BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success"
	},
	"BR_MIDI_CCLaneReplace lua": {
		"prefix": "r.BR_MIDI_CCLaneReplace",
		"scope": "lua",
		"body": "r.BR_MIDI_CCLaneReplace(${1:midiEditor}, ${2:laneId}, ${3:newCC})$0",
		"description": "[BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.\nValid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207"
	},
	"BR_PositionAtMouseCursor lua": {
		"prefix": "r.BR_PositionAtMouseCursor",
		"scope": "lua",
		"body": "r.BR_PositionAtMouseCursor(${1:checkRuler})$0",
		"description": "[BR] Get position at mouse cursor. To check ruler along with arrange, pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler."
	},
	"BR_SetArrangeView lua": {
		"prefix": "r.BR_SetArrangeView",
		"scope": "lua",
		"body": "r.BR_SetArrangeView(0, ${2:startTime}, ${3:endTime})$0",
		"description": "[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see BR_GetArrangeView."
	},
	"BR_SetItemEdges lua": {
		"prefix": "r.BR_SetItemEdges",
		"scope": "lua",
		"body": "r.BR_SetItemEdges(${1:item}, ${2:startTime}, ${3:endTime})$0",
		"description": "[BR] Set item start and end edges' position - returns true in case of any changes"
	},
	"BR_SetMediaItemImageResource lua": {
		"prefix": "r.BR_SetMediaItemImageResource",
		"scope": "lua",
		"body": "r.BR_SetMediaItemImageResource(${1:item}, ${2:imageIn}, ${3:imageFlags})$0",
		"description": "[BR] Set image resource and its flags for a given item. To clear current image resource, pass imageIn as ''.\nimageFlags: &1=0: don't display image, &1: center / tile, &3: stretch, &5: full height (REAPER 5.974+).\nCan also be used to display existing text in empty items unstretched (pass imageIn = '', imageFlags = 0) or stretched (pass imageIn = ''. imageFlags = 3).\nTo get image resource, see BR_GetMediaItemImageResource."
	},
	"BR_SetMediaSourceProperties lua": {
		"prefix": "r.BR_SetMediaSourceProperties",
		"scope": "lua",
		"body": "r.BR_SetMediaSourceProperties(${1:take}, ${2:section}, ${3:start}, ${4:length}, ${5:fade}, ${6:reverse})$0",
		"description": "[BR] Set take media source properties. Returns false if take can't have them (MIDI items etc.). Section parameters have to be valid only when passing section=true.\nTo get source properties, see BR_GetMediaSourceProperties."
	},
	"BR_SetMediaTrackLayouts lua": {
		"prefix": "r.BR_SetMediaTrackLayouts",
		"scope": "lua",
		"body": "r.BR_SetMediaTrackLayouts(${1:track}, ${2:mcpLayoutNameIn}, ${3:tcpLayoutNameIn})$0",
		"description": "[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Set media track layouts for MCP and TCP. To set default layout, pass empty string ('') as layout name. In case layouts were successfully set, returns true (if layouts are already set to supplied layout names, it will return false since no changes were made).\nTo get media track layouts, see BR_GetMediaTrackLayouts."
	},
	"BR_SetMidiTakeTempoInfo lua": {
		"prefix": "r.BR_SetMidiTakeTempoInfo",
		"scope": "lua",
		"body": "r.BR_SetMidiTakeTempoInfo(${1:take}, ${2:ignoreProjTempo}, ${3:bpm}, ${4:num}, ${5:den})$0",
		"description": "[BR] Set 'ignore project tempo' information for MIDI take. Returns true in case the take was successfully updated."
	},
	"BR_SetTakeSourceFromFile lua": {
		"prefix": "r.BR_SetTakeSourceFromFile",
		"scope": "lua",
		"body": "r.BR_SetTakeSourceFromFile(${1:take}, ${2:filenameIn}, ${3:inProjectData})$0",
		"description": "[BR] Set new take source from file. To import MIDI file as in-project source data pass inProjectData=true. Returns false if failed.\nAny take source properties from the previous source will be lost - to preserve them, see BR_SetTakeSourceFromFile2.\nNote: To set source from existing take, see SNM_GetSetSourceState2."
	},
	"BR_SetTakeSourceFromFile2 lua": {
		"prefix": "r.BR_SetTakeSourceFromFile2",
		"scope": "lua",
		"body": "r.BR_SetTakeSourceFromFile2(${1:take}, ${2:filenameIn}, ${3:inProjectData}, ${4:keepSourceProperties})$0",
		"description": "[BR] Differs from BR_SetTakeSourceFromFile only that it can also preserve existing take media source properties."
	},
	"BR_TakeAtMouseCursor lua": {
		"prefix": "r.BR_TakeAtMouseCursor",
		"scope": "lua",
		"body": "r.BR_TakeAtMouseCursor()$0",
		"description": "[BR] Get take under mouse cursor. Position is mouse cursor position in arrange."
	},
	"BR_TrackAtMouseCursor lua": {
		"prefix": "r.BR_TrackAtMouseCursor",
		"scope": "lua",
		"body": "r.BR_TrackAtMouseCursor()$0",
		"description": "[BR] Get track under mouse cursor.\nContext signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.\nPosition will hold mouse cursor position in arrange if applicable."
	},
	"BR_TrackFX_GetFXModuleName lua": {
		"prefix": "r.BR_TrackFX_GetFXModuleName",
		"scope": "lua",
		"body": "rv, name = r.BR_TrackFX_GetFXModuleName(${1:track}, ${2:fx})$0",
		"description": "[BR] Deprecated, see TrackFX_GetNamedConfigParm/'fx_ident' (v6.37+). Get the exact name (like effect.dll, effect.vst3, etc...) of an FX."
	},
	"BR_Win32_CB_FindString lua": {
		"prefix": "r.BR_Win32_CB_FindString",
		"scope": "lua",
		"body": "r.BR_Win32_CB_FindString(${1:comboBoxHwnd}, ${2:startId}, ${3:string})$0",
		"description": "[BR] Equivalent to win32 API ComboBox_FindString()."
	},
	"BR_Win32_CB_FindStringExact lua": {
		"prefix": "r.BR_Win32_CB_FindStringExact",
		"scope": "lua",
		"body": "r.BR_Win32_CB_FindStringExact(${1:comboBoxHwnd}, ${2:startId}, ${3:string})$0",
		"description": "[BR] Equivalent to win32 API ComboBox_FindStringExact()."
	},
	"BR_Win32_ClientToScreen lua": {
		"prefix": "r.BR_Win32_ClientToScreen",
		"scope": "lua",
		"body": "r.BR_Win32_ClientToScreen(${1:hwnd}, ${2:xIn}, ${3:yIn})$0",
		"description": "[BR] Equivalent to win32 API ClientToScreen()."
	},
	"BR_Win32_FindWindowEx lua": {
		"prefix": "r.BR_Win32_FindWindowEx",
		"scope": "lua",
		"body": "r.BR_Win32_FindWindowEx(${1:hwndParent}, ${2:hwndChildAfter}, ${3:className}, ${4:windowName}, ${5:searchClass}, ${6:searchName})$0",
		"description": "[BR] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn't allow passing NULL (None in Python, nil in Lua etc...) parameters, to search by supplied class or name set searchClass and searchName accordingly. HWND parameters should be passed as either '0' to signify NULL or as string obtained from BR_Win32_HwndToString."
	},
	"BR_Win32_GET_X_LPARAM lua": {
		"prefix": "r.BR_Win32_GET_X_LPARAM",
		"scope": "lua",
		"body": "r.BR_Win32_GET_X_LPARAM(${1:lParam})$0",
		"description": "[BR] Equivalent to win32 API GET_X_LPARAM()."
	},
	"BR_Win32_GET_Y_LPARAM lua": {
		"prefix": "r.BR_Win32_GET_Y_LPARAM",
		"scope": "lua",
		"body": "r.BR_Win32_GET_Y_LPARAM(${1:lParam})$0",
		"description": "[BR] Equivalent to win32 API GET_Y_LPARAM()."
	},
	"BR_Win32_GetConstant lua": {
		"prefix": "r.BR_Win32_GetConstant",
		"scope": "lua",
		"body": "r.BR_Win32_GetConstant(${1:constantName})$0",
		"description": "[BR] Returns various constants needed for BR_Win32 functions.\nSupported constants are:\nCB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL\nEM_SETSEL\nGW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER\nGWL_STYLE\nSW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL\nSWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER\nVK_DOWN, VK_UP\nWM_CLOSE, WM_KEYDOWN\nWS_MAXIMIZE, WS_OVERLAPPEDWINDOW"
	},
	"BR_Win32_GetCursorPos lua": {
		"prefix": "r.BR_Win32_GetCursorPos",
		"scope": "lua",
		"body": "rv, x, y = r.BR_Win32_GetCursorPos()$0",
		"description": "[BR] Equivalent to win32 API GetCursorPos()."
	},
	"BR_Win32_GetFocus lua": {
		"prefix": "r.BR_Win32_GetFocus",
		"scope": "lua",
		"body": "r.BR_Win32_GetFocus()$0",
		"description": "[BR] Equivalent to win32 API GetFocus()."
	},
	"BR_Win32_GetForegroundWindow lua": {
		"prefix": "r.BR_Win32_GetForegroundWindow",
		"scope": "lua",
		"body": "r.BR_Win32_GetForegroundWindow()$0",
		"description": "[BR] Equivalent to win32 API GetForegroundWindow()."
	},
	"BR_Win32_GetMainHwnd lua": {
		"prefix": "r.BR_Win32_GetMainHwnd",
		"scope": "lua",
		"body": "r.BR_Win32_GetMainHwnd()$0",
		"description": "[BR] Alternative to GetMainHwnd. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type"
	},
	"BR_Win32_GetMixerHwnd lua": {
		"prefix": "r.BR_Win32_GetMixerHwnd",
		"scope": "lua",
		"body": "rv, isDocked = r.BR_Win32_GetMixerHwnd()$0",
		"description": "[BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked"
	},
	"BR_Win32_GetMonitorRectFromRect lua": {
		"prefix": "r.BR_Win32_GetMonitorRectFromRect",
		"scope": "lua",
		"body": "left, top, right, bottom = r.BR_Win32_GetMonitorRectFromRect(${1:workingAreaOnly}, ${2:leftIn}, ${3:topIn}, ${4:rightIn}, ${5:bottomIn})$0",
		"description": "[BR] Get coordinates for screen which is nearest to supplied coordinates. Pass workingAreaOnly as true to get screen coordinates excluding taskbar (or menu bar on OSX)."
	},
	"BR_Win32_GetParent lua": {
		"prefix": "r.BR_Win32_GetParent",
		"scope": "lua",
		"body": "r.BR_Win32_GetParent(${1:hwnd})$0",
		"description": "[BR] Equivalent to win32 API GetParent()."
	},
	"BR_Win32_GetPrivateProfileString lua": {
		"prefix": "r.BR_Win32_GetPrivateProfileString",
		"scope": "lua",
		"body": "rv, string = r.BR_Win32_GetPrivateProfileString(${1:sectionName}, ${2:keyName}, ${3:defaultString}, ${4:filePath})$0",
		"description": "[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini."
	},
	"BR_Win32_GetWindow lua": {
		"prefix": "r.BR_Win32_GetWindow",
		"scope": "lua",
		"body": "r.BR_Win32_GetWindow(${1:hwnd}, ${2:cmd})$0",
		"description": "[BR] Equivalent to win32 API GetWindow()."
	},
	"BR_Win32_GetWindowLong lua": {
		"prefix": "r.BR_Win32_GetWindowLong",
		"scope": "lua",
		"body": "r.BR_Win32_GetWindowLong(${1:hwnd}, ${2:index})$0",
		"description": "[BR] Equivalent to win32 API GetWindowLong()."
	},
	"BR_Win32_GetWindowRect lua": {
		"prefix": "r.BR_Win32_GetWindowRect",
		"scope": "lua",
		"body": "rv, left, top, right, bottom = r.BR_Win32_GetWindowRect(${1:hwnd})$0",
		"description": "[BR] Equivalent to win32 API GetWindowRect()."
	},
	"BR_Win32_GetWindowText lua": {
		"prefix": "r.BR_Win32_GetWindowText",
		"scope": "lua",
		"body": "rv, text = r.BR_Win32_GetWindowText(${1:hwnd})$0",
		"description": "[BR] Equivalent to win32 API GetWindowText()."
	},
	"BR_Win32_HIBYTE lua": {
		"prefix": "r.BR_Win32_HIBYTE",
		"scope": "lua",
		"body": "r.BR_Win32_HIBYTE(${1:value})$0",
		"description": "[BR] Equivalent to win32 API HIBYTE()."
	},
	"BR_Win32_HIWORD lua": {
		"prefix": "r.BR_Win32_HIWORD",
		"scope": "lua",
		"body": "r.BR_Win32_HIWORD(${1:value})$0",
		"description": "[BR] Equivalent to win32 API HIWORD()."
	},
	"BR_Win32_HwndToString lua": {
		"prefix": "r.BR_Win32_HwndToString",
		"scope": "lua",
		"body": "r.BR_Win32_HwndToString(${1:hwnd})$0",
		"description": "[BR] Convert HWND to string. To convert string back to HWND, see BR_Win32_StringToHwnd."
	},
	"BR_Win32_IsWindow lua": {
		"prefix": "r.BR_Win32_IsWindow",
		"scope": "lua",
		"body": "r.BR_Win32_IsWindow(${1:hwnd})$0",
		"description": "[BR] Equivalent to win32 API IsWindow()."
	},
	"BR_Win32_IsWindowVisible lua": {
		"prefix": "r.BR_Win32_IsWindowVisible",
		"scope": "lua",
		"body": "r.BR_Win32_IsWindowVisible(${1:hwnd})$0",
		"description": "[BR] Equivalent to win32 API IsWindowVisible()."
	},
	"BR_Win32_LOBYTE lua": {
		"prefix": "r.BR_Win32_LOBYTE",
		"scope": "lua",
		"body": "r.BR_Win32_LOBYTE(${1:value})$0",
		"description": "[BR] Equivalent to win32 API LOBYTE()."
	},
	"BR_Win32_LOWORD lua": {
		"prefix": "r.BR_Win32_LOWORD",
		"scope": "lua",
		"body": "r.BR_Win32_LOWORD(${1:value})$0",
		"description": "[BR] Equivalent to win32 API LOWORD()."
	},
	"BR_Win32_MAKELONG lua": {
		"prefix": "r.BR_Win32_MAKELONG",
		"scope": "lua",
		"body": "r.BR_Win32_MAKELONG(${1:low}, ${2:high})$0",
		"description": "[BR] Equivalent to win32 API MAKELONG()."
	},
	"BR_Win32_MAKELPARAM lua": {
		"prefix": "r.BR_Win32_MAKELPARAM",
		"scope": "lua",
		"body": "r.BR_Win32_MAKELPARAM(${1:low}, ${2:high})$0",
		"description": "[BR] Equivalent to win32 API MAKELPARAM()."
	},
	"BR_Win32_MAKELRESULT lua": {
		"prefix": "r.BR_Win32_MAKELRESULT",
		"scope": "lua",
		"body": "r.BR_Win32_MAKELRESULT(${1:low}, ${2:high})$0",
		"description": "[BR] Equivalent to win32 API MAKELRESULT()."
	},
	"BR_Win32_MAKEWORD lua": {
		"prefix": "r.BR_Win32_MAKEWORD",
		"scope": "lua",
		"body": "r.BR_Win32_MAKEWORD(${1:low}, ${2:high})$0",
		"description": "[BR] Equivalent to win32 API MAKEWORD()."
	},
	"BR_Win32_MAKEWPARAM lua": {
		"prefix": "r.BR_Win32_MAKEWPARAM",
		"scope": "lua",
		"body": "r.BR_Win32_MAKEWPARAM(${1:low}, ${2:high})$0",
		"description": "[BR] Equivalent to win32 API MAKEWPARAM()."
	},
	"BR_Win32_MIDIEditor_GetActive lua": {
		"prefix": "r.BR_Win32_MIDIEditor_GetActive",
		"scope": "lua",
		"body": "r.BR_Win32_MIDIEditor_GetActive()$0",
		"description": "[BR] Alternative to MIDIEditor_GetActive. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type."
	},
	"BR_Win32_ScreenToClient lua": {
		"prefix": "r.BR_Win32_ScreenToClient",
		"scope": "lua",
		"body": "r.BR_Win32_ScreenToClient(${1:hwnd}, ${2:xIn}, ${3:yIn})$0",
		"description": "[BR] Equivalent to win32 API ClientToScreen()."
	},
	"BR_Win32_SendMessage lua": {
		"prefix": "r.BR_Win32_SendMessage",
		"scope": "lua",
		"body": "r.BR_Win32_SendMessage(${1:hwnd}, ${2:msg}, ${3:lParam}, ${4:wParam})$0",
		"description": "[BR] Equivalent to win32 API SendMessage()."
	},
	"BR_Win32_SetFocus lua": {
		"prefix": "r.BR_Win32_SetFocus",
		"scope": "lua",
		"body": "r.BR_Win32_SetFocus(${1:hwnd})$0",
		"description": "[BR] Equivalent to win32 API SetFocus()."
	},
	"BR_Win32_SetForegroundWindow lua": {
		"prefix": "r.BR_Win32_SetForegroundWindow",
		"scope": "lua",
		"body": "r.BR_Win32_SetForegroundWindow(${1:hwnd})$0",
		"description": "[BR] Equivalent to win32 API SetForegroundWindow()."
	},
	"BR_Win32_SetWindowLong lua": {
		"prefix": "r.BR_Win32_SetWindowLong",
		"scope": "lua",
		"body": "r.BR_Win32_SetWindowLong(${1:hwnd}, ${2:index}, ${3:newLong})$0",
		"description": "[BR] Equivalent to win32 API SetWindowLong()."
	},
	"BR_Win32_SetWindowPos lua": {
		"prefix": "r.BR_Win32_SetWindowPos",
		"scope": "lua",
		"body": "r.BR_Win32_SetWindowPos(${1:hwnd}, ${2:hwndInsertAfter}, ${3:x}, ${4:y}, ${5:width}, ${6:height}, ${7:flags})$0",
		"description": "[BR] Equivalent to win32 API SetWindowPos().\nhwndInsertAfter may be a string: 'HWND_BOTTOM', 'HWND_NOTOPMOST', 'HWND_TOP', 'HWND_TOPMOST' or a string obtained with BR_Win32_HwndToString."
	},
	"BR_Win32_ShellExecute lua": {
		"prefix": "r.BR_Win32_ShellExecute",
		"scope": "lua",
		"body": "r.BR_Win32_ShellExecute(${1:operation}, ${2:file}, ${3:parameters}, ${4:directory}, ${5:showFlags})$0",
		"description": "[BR] Equivalent to win32 API ShellExecute() with HWND set to main window"
	},
	"BR_Win32_ShowWindow lua": {
		"prefix": "r.BR_Win32_ShowWindow",
		"scope": "lua",
		"body": "r.BR_Win32_ShowWindow(${1:hwnd}, ${2:cmdShow})$0",
		"description": "[BR] Equivalent to win32 API ShowWindow()."
	},
	"BR_Win32_StringToHwnd lua": {
		"prefix": "r.BR_Win32_StringToHwnd",
		"scope": "lua",
		"body": "r.BR_Win32_StringToHwnd(${1:string})$0",
		"description": "[BR] Convert string to HWND. To convert HWND back to string, see BR_Win32_HwndToString."
	},
	"BR_Win32_WindowFromPoint lua": {
		"prefix": "r.BR_Win32_WindowFromPoint",
		"scope": "lua",
		"body": "r.BR_Win32_WindowFromPoint(${1:x}, ${2:y})$0",
		"description": "[BR] Equivalent to win32 API WindowFromPoint()."
	},
	"BR_Win32_WritePrivateProfileString lua": {
		"prefix": "r.BR_Win32_WritePrivateProfileString",
		"scope": "lua",
		"body": "r.BR_Win32_WritePrivateProfileString(${1:sectionName}, ${2:keyName}, ${3:value}, ${4:filePath})$0",
		"description": "[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini. You can pass an empty string as value to delete a key."
	},
	"ButtonFlags_MouseButtonLeft lua": {
		"prefix": "ImGui.ButtonFlags_MouseButtonLeft",
		"scope": "lua",
		"body": "ImGui.ButtonFlags_MouseButtonLeft$0",
		"description": "@type integer\n---\n**Button > Flags > ButtonFlags_MouseButtonLeft**\nReact on left mouse button (default).\n**Button > Flags**\nFor InvisibleButton.\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state.\n@since 0.1\n "
	},
	"ButtonFlags_MouseButtonMiddle lua": {
		"prefix": "ImGui.ButtonFlags_MouseButtonMiddle",
		"scope": "lua",
		"body": "ImGui.ButtonFlags_MouseButtonMiddle$0",
		"description": "@type integer\n---\n**Button > Flags > ButtonFlags_MouseButtonMiddle**\nReact on center mouse button.\n**Button > Flags**\nFor InvisibleButton.\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state.\n@since 0.1\n "
	},
	"ButtonFlags_MouseButtonRight lua": {
		"prefix": "ImGui.ButtonFlags_MouseButtonRight",
		"scope": "lua",
		"body": "ImGui.ButtonFlags_MouseButtonRight$0",
		"description": "@type integer\n---\n**Button > Flags > ButtonFlags_MouseButtonRight**\nReact on right mouse button.\n**Button > Flags**\nFor InvisibleButton.\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state.\n@since 0.1\n "
	},
	"ButtonFlags_None lua": {
		"prefix": "ImGui.ButtonFlags_None",
		"scope": "lua",
		"body": "ImGui.ButtonFlags_None$0",
		"description": "@type integer\n---\n**Button > Flags > ButtonFlags_None**\n**Button > Flags**\nFor InvisibleButton.\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state.\n@since 0.1\n "
	},
	"BypassFxAllTracks lua": {
		"prefix": "r.BypassFxAllTracks",
		"scope": "lua",
		"body": "r.BypassFxAllTracks(${1:bypass})$0",
		"description": "-1 = bypass all if not all bypassed,otherwise unbypass all"
	},
	"CF_CreatePreview lua": {
		"prefix": "r.CF_CreatePreview",
		"scope": "lua",
		"body": "r.CF_CreatePreview(${1:source})$0",
		"description": "Create a new preview object. Does not take ownership of the source (don't forget to destroy it unless it came from a take!). See CF_Preview_Play and the others CF_Preview_* functions.\nThe preview object is automatically destroyed at the end of a defer cycle if at least one of these conditions are met:\n- playback finished\n- playback was not started using CF_Preview_Play\n- the output track no longer exists"
	},
	"CF_EnumMediaSourceCues lua": {
		"prefix": "r.CF_EnumMediaSourceCues",
		"scope": "lua",
		"body": "r.CF_EnumMediaSourceCues(${1:src}, ${2:index})$0",
		"description": "Enumerate the source's media cues. Returns the next index or 0 when finished."
	},
	"CF_EnumSelectedFX lua": {
		"prefix": "r.CF_EnumSelectedFX",
		"scope": "lua",
		"body": "r.CF_EnumSelectedFX(${1:hwnd}, ${2:index})$0",
		"description": "Return the index of the next selected effect in the given FX chain. Start index should be -1. Returns -1 if there are no more selected effects."
	},
	"CF_EnumerateActions lua": {
		"prefix": "r.CF_EnumerateActions",
		"scope": "lua",
		"body": "r.CF_EnumerateActions(${1:section}, ${2:index})$0",
		"description": "Deprecated, see kbd_enumerateActions (v6.71+). Wrapper for the unexposed kbd_enumerateActions API function.\nMain=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063"
	},
	"CF_ExportMediaSource lua": {
		"prefix": "r.CF_ExportMediaSource",
		"scope": "lua",
		"body": "r.CF_ExportMediaSource(${1:src}, ${2:fn})$0",
		"description": "Export the source to the given file (MIDI only)."
	},
	"CF_GetClipboard lua": {
		"prefix": "r.CF_GetClipboard",
		"scope": "lua",
		"body": "r.CF_GetClipboard()$0",
		"description": "Read the contents of the system clipboard."
	},
	"CF_GetClipboardBig lua": {
		"prefix": "r.CF_GetClipboardBig",
		"scope": "lua",
		"body": "r.CF_GetClipboardBig(${1:output})$0",
		"description": "[DEPRECATED: Use CF_GetClipboard] Read the contents of the system clipboard. See SNM_CreateFastString and SNM_DeleteFastString."
	},
	"CF_GetCommandText lua": {
		"prefix": "r.CF_GetCommandText",
		"scope": "lua",
		"body": "r.CF_GetCommandText(${1:section}, ${2:command})$0",
		"description": "Deprecated, see kbd_getTextFromCmd (v6.71+). Wrapper for the unexposed kbd_getTextFromCmd API function. See CF_EnumerateActions for common section IDs."
	},
	"CF_GetCustomColor lua": {
		"prefix": "r.CF_GetCustomColor",
		"scope": "lua",
		"body": "r.CF_GetCustomColor(${1:index})$0",
		"description": "Get one of 16 SWS custom colors (0xBBGGRR on Windows, 0xRRGGBB everyhwere else). Index is zero-based."
	},
	"CF_GetFocusedFXChain lua": {
		"prefix": "r.CF_GetFocusedFXChain",
		"scope": "lua",
		"body": "r.CF_GetFocusedFXChain()$0",
		"description": "Return a handle to the currently focused FX chain window."
	},
	"CF_GetMediaSourceBitDepth lua": {
		"prefix": "r.CF_GetMediaSourceBitDepth",
		"scope": "lua",
		"body": "r.CF_GetMediaSourceBitDepth(${1:src})$0",
		"description": "Returns the bit depth if available (0 otherwise)."
	},
	"CF_GetMediaSourceBitRate lua": {
		"prefix": "r.CF_GetMediaSourceBitRate",
		"scope": "lua",
		"body": "r.CF_GetMediaSourceBitRate(${1:src})$0",
		"description": "Returns the bit rate for WAVE (wav, aif) and streaming/variable formats (mp3, ogg, opus). REAPER v6.19 or later is required for non-WAVE formats."
	},
	"CF_GetMediaSourceMetadata lua": {
		"prefix": "r.CF_GetMediaSourceMetadata",
		"scope": "lua",
		"body": "rv, out = r.CF_GetMediaSourceMetadata(${1:src}, ${2:name}, ${3:out})$0",
		"description": "Get the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF)."
	},
	"CF_GetMediaSourceOnline lua": {
		"prefix": "r.CF_GetMediaSourceOnline",
		"scope": "lua",
		"body": "r.CF_GetMediaSourceOnline(${1:src})$0",
		"description": "Returns the online/offline status of the given source."
	},
	"CF_GetMediaSourceRPP lua": {
		"prefix": "r.CF_GetMediaSourceRPP",
		"scope": "lua",
		"body": "rv, fn = r.CF_GetMediaSourceRPP(${1:src})$0",
		"description": "Get the project associated with this source (BWF, subproject...)."
	},
	"CF_GetSWSVersion lua": {
		"prefix": "r.CF_GetSWSVersion",
		"scope": "lua",
		"body": "r.CF_GetSWSVersion()$0",
		"description": "Return the current SWS version number."
	},
	"CF_GetTakeFXChain lua": {
		"prefix": "r.CF_GetTakeFXChain",
		"scope": "lua",
		"body": "r.CF_GetTakeFXChain(${1:take})$0",
		"description": "Return a handle to the given take FX chain window. HACK: This temporarily renames the take in order to disambiguate the take FX chain window from similarily named takes."
	},
	"CF_GetTrackFXChain lua": {
		"prefix": "r.CF_GetTrackFXChain",
		"scope": "lua",
		"body": "r.CF_GetTrackFXChain(${1:track})$0",
		"description": "Return a handle to the given track FX chain window."
	},
	"CF_GetTrackFXChainEx lua": {
		"prefix": "r.CF_GetTrackFXChainEx",
		"scope": "lua",
		"body": "r.CF_GetTrackFXChainEx(0, ${2:track}, ${3:wantInputChain})$0",
		"description": "Return a handle to the given track FX chain window. Set wantInputChain to get the track's input/monitoring FX chain."
	},
	"CF_LocateInExplorer lua": {
		"prefix": "r.CF_LocateInExplorer",
		"scope": "lua",
		"body": "r.CF_LocateInExplorer(${1:file})$0",
		"description": "Select the given file in explorer/finder."
	},
	"CF_NormalizeUTF8 lua": {
		"prefix": "r.CF_NormalizeUTF8",
		"scope": "lua",
		"body": "r.CF_NormalizeUTF8(${1:input}, ${2:mode})$0",
		"description": "Apply Unicode normalization to the provided UTF-8 string.\nMode values:\n- Bit 0 (composition mode):\n  * 0 = decomposition only\n  * 1 = decomposition + canonical composition\n- Bit 1 (decomposition mode):\n  * 0 = canonical decomposition\n  * 1 = compatibility decomposition\nWarning: this function is no-op on Windows XP (the input string is returned as-is)."
	},
	"CF_PCM_Source_SetSectionInfo lua": {
		"prefix": "r.CF_PCM_Source_SetSectionInfo",
		"scope": "lua",
		"body": "r.CF_PCM_Source_SetSectionInfo(${1:section}, ${2:source}, ${3:offset}, ${4:length}, ${5:reverse}, ${6:fadeIn})$0",
		"description": "Give a section source created using PCM_Source_CreateFromType('SECTION'). Offset and length are ignored if 0. Negative length to subtract from the total length of the source."
	},
	"CF_Preview_GetOutputTrack lua": {
		"prefix": "r.CF_Preview_GetOutputTrack",
		"scope": "lua",
		"body": "r.CF_Preview_GetOutputTrack(${1:preview})$0",
		"description": ""
	},
	"CF_Preview_GetPeak lua": {
		"prefix": "r.CF_Preview_GetPeak",
		"scope": "lua",
		"body": "rv, peakvol = r.CF_Preview_GetPeak(${1:preview}, ${2:channel})$0",
		"description": "Return the maximum sample value played since the last read. Refresh speed depends on buffer size."
	},
	"CF_Preview_GetValue lua": {
		"prefix": "r.CF_Preview_GetValue",
		"scope": "lua",
		"body": "rv, value = r.CF_Preview_GetValue(${1:preview}, ${2:name})$0",
		"description": "Supported attributes:\nB_LOOP         seek to the beginning when reaching the end of the source\nB_PPITCH       preserve pitch when changing playback rate\nD_FADEINLEN    length in seconds of playback fade in\nD_FADEOUTLEN   length in seconds of playback fade out\nD_LENGTH       (read only) length of the source * playback rate\nD_MEASUREALIGN >0 = wait until the next bar before starting playback (note: this causes playback to silently continue when project is paused and previewing through a track)\nD_PAN          playback pan\nD_PITCH        pitch adjustment in semitones\nD_PLAYRATE     playback rate (0.01..100)\nD_POSITION     current playback position\nD_VOLUME       playback volume\nI_OUTCHAN      first hardware output channel (&1024=mono, reads -1 when playing through a track, see CF_Preview_SetOutputTrack)\nI_PITCHMODE    highest 16 bits=pitch shift mode (see EnumPitchShiftModes), lower 16 bits=pitch shift submode (see EnumPitchShiftSubModes)"
	},
	"CF_Preview_Play lua": {
		"prefix": "r.CF_Preview_Play",
		"scope": "lua",
		"body": "r.CF_Preview_Play(${1:preview})$0",
		"description": "Start playback of the configured preview object."
	},
	"CF_Preview_SetOutputTrack lua": {
		"prefix": "r.CF_Preview_SetOutputTrack",
		"scope": "lua",
		"body": "r.CF_Preview_SetOutputTrack(${1:preview}, 0, ${3:track})$0",
		"description": ""
	},
	"CF_Preview_SetValue lua": {
		"prefix": "r.CF_Preview_SetValue",
		"scope": "lua",
		"body": "r.CF_Preview_SetValue(${1:preview}, ${2:name}, ${3:newValue})$0",
		"description": "See CF_Preview_GetValue."
	},
	"CF_Preview_Stop lua": {
		"prefix": "r.CF_Preview_Stop",
		"scope": "lua",
		"body": "r.CF_Preview_Stop(${1:preview})$0",
		"description": "Stop and destroy a preview object."
	},
	"CF_Preview_StopAll lua": {
		"prefix": "r.CF_Preview_StopAll",
		"scope": "lua",
		"body": "r.CF_Preview_StopAll()$0",
		"description": "Stop and destroy all currently active preview objects."
	},
	"CF_SelectTakeFX lua": {
		"prefix": "r.CF_SelectTakeFX",
		"scope": "lua",
		"body": "r.CF_SelectTakeFX(${1:take}, ${2:index})$0",
		"description": "Set which take effect is active in the take's FX chain. The FX chain window does not have to be open."
	},
	"CF_SelectTrackFX lua": {
		"prefix": "r.CF_SelectTrackFX",
		"scope": "lua",
		"body": "r.CF_SelectTrackFX(${1:track}, ${2:index})$0",
		"description": "Set which track effect is active in the track's FX chain. The FX chain window does not have to be open."
	},
	"CF_SendActionShortcut lua": {
		"prefix": "r.CF_SendActionShortcut",
		"scope": "lua",
		"body": "r.CF_SendActionShortcut(${1:hwnd}, ${2:section}, ${3:key}, ${4:modifiersIn})$0",
		"description": "Run in the specified window the action command ID associated with the shortcut key in the given section. See CF_EnumerateActions for common section IDs.\n\tKeys are Windows virtual key codes. &0x8000 for an extended key (eg. Numpad Enter = VK_RETURN & 0x8000).\n\tModifier values: nil = read from keyboard, 0 = no modifier, &4 = Control (Cmd on macOS), &8 = Shift, &16 = Alt, &32 = Super"
	},
	"CF_SetClipboard lua": {
		"prefix": "r.CF_SetClipboard",
		"scope": "lua",
		"body": "r.CF_SetClipboard(${1:str})$0",
		"description": "Write the given string into the system clipboard."
	},
	"CF_SetCustomColor lua": {
		"prefix": "r.CF_SetCustomColor",
		"scope": "lua",
		"body": "r.CF_SetCustomColor(${1:index}, ${2:color})$0",
		"description": "Set one of 16 SWS custom colors (0xBBGGRR on Windows, 0xRRGGBB everyhwere else). Index is zero-based."
	},
	"CF_SetMediaSourceOnline lua": {
		"prefix": "r.CF_SetMediaSourceOnline",
		"scope": "lua",
		"body": "r.CF_SetMediaSourceOnline(${1:src}, ${2:set})$0",
		"description": "Set the online/offline status of the given source (closes files when set=false)."
	},
	"CF_ShellExecute lua": {
		"prefix": "r.CF_ShellExecute",
		"scope": "lua",
		"body": "r.CF_ShellExecute(${1:file})$0",
		"description": "Open the given file or URL in the default application. See also CF_LocateInExplorer."
	},
	"CSurf_FlushUndo lua": {
		"prefix": "r.CSurf_FlushUndo",
		"scope": "lua",
		"body": "r.CSurf_FlushUndo(${1:force})$0",
		"description": "call this to force flushing of the undo states after using CSurf_On*Change()"
	},
	"CSurf_GetTouchState lua": {
		"prefix": "r.CSurf_GetTouchState",
		"scope": "lua",
		"body": "r.CSurf_GetTouchState(${1:trackid}, ${2:isPan})$0",
		"description": ""
	},
	"CSurf_GoEnd lua": {
		"prefix": "r.CSurf_GoEnd",
		"scope": "lua",
		"body": "r.CSurf_GoEnd()$0",
		"description": ""
	},
	"CSurf_GoStart lua": {
		"prefix": "r.CSurf_GoStart",
		"scope": "lua",
		"body": "r.CSurf_GoStart()$0",
		"description": ""
	},
	"CSurf_NumTracks lua": {
		"prefix": "r.CSurf_NumTracks",
		"scope": "lua",
		"body": "r.CSurf_NumTracks(${1:mcpView})$0",
		"description": ""
	},
	"CSurf_OnArrow lua": {
		"prefix": "r.CSurf_OnArrow",
		"scope": "lua",
		"body": "r.CSurf_OnArrow(${1:whichdir}, ${2:wantzoom})$0",
		"description": ""
	},
	"CSurf_OnFXChange lua": {
		"prefix": "r.CSurf_OnFXChange",
		"scope": "lua",
		"body": "r.CSurf_OnFXChange(${1:trackid}, ${2:en})$0",
		"description": ""
	},
	"CSurf_OnFwd lua": {
		"prefix": "r.CSurf_OnFwd",
		"scope": "lua",
		"body": "r.CSurf_OnFwd(${1:seekplay})$0",
		"description": ""
	},
	"CSurf_OnInputMonitorChange lua": {
		"prefix": "r.CSurf_OnInputMonitorChange",
		"scope": "lua",
		"body": "r.CSurf_OnInputMonitorChange(${1:trackid}, ${2:monitor})$0",
		"description": ""
	},
	"CSurf_OnInputMonitorChangeEx lua": {
		"prefix": "r.CSurf_OnInputMonitorChangeEx",
		"scope": "lua",
		"body": "r.CSurf_OnInputMonitorChangeEx(${1:trackid}, ${2:monitor}, ${3:allowgang})$0",
		"description": ""
	},
	"CSurf_OnMuteChange lua": {
		"prefix": "r.CSurf_OnMuteChange",
		"scope": "lua",
		"body": "r.CSurf_OnMuteChange(${1:trackid}, ${2:mute})$0",
		"description": ""
	},
	"CSurf_OnMuteChangeEx lua": {
		"prefix": "r.CSurf_OnMuteChangeEx",
		"scope": "lua",
		"body": "r.CSurf_OnMuteChangeEx(${1:trackid}, ${2:mute}, ${3:allowgang})$0",
		"description": ""
	},
	"CSurf_OnPanChange lua": {
		"prefix": "r.CSurf_OnPanChange",
		"scope": "lua",
		"body": "r.CSurf_OnPanChange(${1:trackid}, ${2:pan}, ${3:relative})$0",
		"description": ""
	},
	"CSurf_OnPanChangeEx lua": {
		"prefix": "r.CSurf_OnPanChangeEx",
		"scope": "lua",
		"body": "r.CSurf_OnPanChangeEx(${1:trackid}, ${2:pan}, ${3:relative}, ${4:allowGang})$0",
		"description": ""
	},
	"CSurf_OnPause lua": {
		"prefix": "r.CSurf_OnPause",
		"scope": "lua",
		"body": "r.CSurf_OnPause()$0",
		"description": ""
	},
	"CSurf_OnPlay lua": {
		"prefix": "r.CSurf_OnPlay",
		"scope": "lua",
		"body": "r.CSurf_OnPlay()$0",
		"description": ""
	},
	"CSurf_OnPlayRateChange lua": {
		"prefix": "r.CSurf_OnPlayRateChange",
		"scope": "lua",
		"body": "r.CSurf_OnPlayRateChange(${1:playrate})$0",
		"description": ""
	},
	"CSurf_OnRecArmChange lua": {
		"prefix": "r.CSurf_OnRecArmChange",
		"scope": "lua",
		"body": "r.CSurf_OnRecArmChange(${1:trackid}, ${2:recarm})$0",
		"description": ""
	},
	"CSurf_OnRecArmChangeEx lua": {
		"prefix": "r.CSurf_OnRecArmChangeEx",
		"scope": "lua",
		"body": "r.CSurf_OnRecArmChangeEx(${1:trackid}, ${2:recarm}, ${3:allowgang})$0",
		"description": ""
	},
	"CSurf_OnRecord lua": {
		"prefix": "r.CSurf_OnRecord",
		"scope": "lua",
		"body": "r.CSurf_OnRecord()$0",
		"description": ""
	},
	"CSurf_OnRecvPanChange lua": {
		"prefix": "r.CSurf_OnRecvPanChange",
		"scope": "lua",
		"body": "r.CSurf_OnRecvPanChange(${1:trackid}, ${2:recv_index}, ${3:pan}, ${4:relative})$0",
		"description": ""
	},
	"CSurf_OnRecvVolumeChange lua": {
		"prefix": "r.CSurf_OnRecvVolumeChange",
		"scope": "lua",
		"body": "r.CSurf_OnRecvVolumeChange(${1:trackid}, ${2:recv_index}, ${3:volume}, ${4:relative})$0",
		"description": ""
	},
	"CSurf_OnRew lua": {
		"prefix": "r.CSurf_OnRew",
		"scope": "lua",
		"body": "r.CSurf_OnRew(${1:seekplay})$0",
		"description": ""
	},
	"CSurf_OnRewFwd lua": {
		"prefix": "r.CSurf_OnRewFwd",
		"scope": "lua",
		"body": "r.CSurf_OnRewFwd(${1:seekplay}, ${2:dir})$0",
		"description": ""
	},
	"CSurf_OnScroll lua": {
		"prefix": "r.CSurf_OnScroll",
		"scope": "lua",
		"body": "r.CSurf_OnScroll(${1:xdir}, ${2:ydir})$0",
		"description": ""
	},
	"CSurf_OnSelectedChange lua": {
		"prefix": "r.CSurf_OnSelectedChange",
		"scope": "lua",
		"body": "r.CSurf_OnSelectedChange(${1:trackid}, ${2:selected})$0",
		"description": ""
	},
	"CSurf_OnSendPanChange lua": {
		"prefix": "r.CSurf_OnSendPanChange",
		"scope": "lua",
		"body": "r.CSurf_OnSendPanChange(${1:trackid}, ${2:send_index}, ${3:pan}, ${4:relative})$0",
		"description": ""
	},
	"CSurf_OnSendVolumeChange lua": {
		"prefix": "r.CSurf_OnSendVolumeChange",
		"scope": "lua",
		"body": "r.CSurf_OnSendVolumeChange(${1:trackid}, ${2:send_index}, ${3:volume}, ${4:relative})$0",
		"description": ""
	},
	"CSurf_OnSoloChange lua": {
		"prefix": "r.CSurf_OnSoloChange",
		"scope": "lua",
		"body": "r.CSurf_OnSoloChange(${1:trackid}, ${2:solo})$0",
		"description": ""
	},
	"CSurf_OnSoloChangeEx lua": {
		"prefix": "r.CSurf_OnSoloChangeEx",
		"scope": "lua",
		"body": "r.CSurf_OnSoloChangeEx(${1:trackid}, ${2:solo}, ${3:allowgang})$0",
		"description": ""
	},
	"CSurf_OnStop lua": {
		"prefix": "r.CSurf_OnStop",
		"scope": "lua",
		"body": "r.CSurf_OnStop()$0",
		"description": ""
	},
	"CSurf_OnTempoChange lua": {
		"prefix": "r.CSurf_OnTempoChange",
		"scope": "lua",
		"body": "r.CSurf_OnTempoChange(${1:bpm})$0",
		"description": ""
	},
	"CSurf_OnTrackSelection lua": {
		"prefix": "r.CSurf_OnTrackSelection",
		"scope": "lua",
		"body": "r.CSurf_OnTrackSelection(${1:trackid})$0",
		"description": ""
	},
	"CSurf_OnVolumeChange lua": {
		"prefix": "r.CSurf_OnVolumeChange",
		"scope": "lua",
		"body": "r.CSurf_OnVolumeChange(${1:trackid}, ${2:volume}, ${3:relative})$0",
		"description": ""
	},
	"CSurf_OnVolumeChangeEx lua": {
		"prefix": "r.CSurf_OnVolumeChangeEx",
		"scope": "lua",
		"body": "r.CSurf_OnVolumeChangeEx(${1:trackid}, ${2:volume}, ${3:relative}, ${4:allowGang})$0",
		"description": ""
	},
	"CSurf_OnWidthChange lua": {
		"prefix": "r.CSurf_OnWidthChange",
		"scope": "lua",
		"body": "r.CSurf_OnWidthChange(${1:trackid}, ${2:width}, ${3:relative})$0",
		"description": ""
	},
	"CSurf_OnWidthChangeEx lua": {
		"prefix": "r.CSurf_OnWidthChangeEx",
		"scope": "lua",
		"body": "r.CSurf_OnWidthChangeEx(${1:trackid}, ${2:width}, ${3:relative}, ${4:allowGang})$0",
		"description": ""
	},
	"CSurf_OnZoom lua": {
		"prefix": "r.CSurf_OnZoom",
		"scope": "lua",
		"body": "r.CSurf_OnZoom(${1:xdir}, ${2:ydir})$0",
		"description": ""
	},
	"CSurf_ResetAllCachedVolPanStates lua": {
		"prefix": "r.CSurf_ResetAllCachedVolPanStates",
		"scope": "lua",
		"body": "r.CSurf_ResetAllCachedVolPanStates()$0",
		"description": ""
	},
	"CSurf_ScrubAmt lua": {
		"prefix": "r.CSurf_ScrubAmt",
		"scope": "lua",
		"body": "r.CSurf_ScrubAmt(${1:amt})$0",
		"description": ""
	},
	"CSurf_SetAutoMode lua": {
		"prefix": "r.CSurf_SetAutoMode",
		"scope": "lua",
		"body": "r.CSurf_SetAutoMode(${1:mode}, ${2:ignoresurf})$0",
		"description": ""
	},
	"CSurf_SetPlayState lua": {
		"prefix": "r.CSurf_SetPlayState",
		"scope": "lua",
		"body": "r.CSurf_SetPlayState(${1:play}, ${2:pause}, ${3:rec}, ${4:ignoresurf})$0",
		"description": ""
	},
	"CSurf_SetRepeatState lua": {
		"prefix": "r.CSurf_SetRepeatState",
		"scope": "lua",
		"body": "r.CSurf_SetRepeatState(${1:rep}, ${2:ignoresurf})$0",
		"description": ""
	},
	"CSurf_SetSurfaceMute lua": {
		"prefix": "r.CSurf_SetSurfaceMute",
		"scope": "lua",
		"body": "r.CSurf_SetSurfaceMute(${1:trackid}, ${2:mute}, ${3:ignoresurf})$0",
		"description": ""
	},
	"CSurf_SetSurfacePan lua": {
		"prefix": "r.CSurf_SetSurfacePan",
		"scope": "lua",
		"body": "r.CSurf_SetSurfacePan(${1:trackid}, ${2:pan}, ${3:ignoresurf})$0",
		"description": ""
	},
	"CSurf_SetSurfaceRecArm lua": {
		"prefix": "r.CSurf_SetSurfaceRecArm",
		"scope": "lua",
		"body": "r.CSurf_SetSurfaceRecArm(${1:trackid}, ${2:recarm}, ${3:ignoresurf})$0",
		"description": ""
	},
	"CSurf_SetSurfaceSelected lua": {
		"prefix": "r.CSurf_SetSurfaceSelected",
		"scope": "lua",
		"body": "r.CSurf_SetSurfaceSelected(${1:trackid}, ${2:selected}, ${3:ignoresurf})$0",
		"description": ""
	},
	"CSurf_SetSurfaceSolo lua": {
		"prefix": "r.CSurf_SetSurfaceSolo",
		"scope": "lua",
		"body": "r.CSurf_SetSurfaceSolo(${1:trackid}, ${2:solo}, ${3:ignoresurf})$0",
		"description": ""
	},
	"CSurf_SetSurfaceVolume lua": {
		"prefix": "r.CSurf_SetSurfaceVolume",
		"scope": "lua",
		"body": "r.CSurf_SetSurfaceVolume(${1:trackid}, ${2:volume}, ${3:ignoresurf})$0",
		"description": ""
	},
	"CSurf_SetTrackListChange lua": {
		"prefix": "r.CSurf_SetTrackListChange",
		"scope": "lua",
		"body": "r.CSurf_SetTrackListChange()$0",
		"description": ""
	},
	"CSurf_TrackFromID lua": {
		"prefix": "r.CSurf_TrackFromID",
		"scope": "lua",
		"body": "r.CSurf_TrackFromID(${1:idx}, ${2:mcpView})$0",
		"description": ""
	},
	"CSurf_TrackToID lua": {
		"prefix": "r.CSurf_TrackToID",
		"scope": "lua",
		"body": "r.CSurf_TrackToID(${1:track}, ${2:mcpView})$0",
		"description": ""
	},
	"CalcMediaSrcLoudness lua": {
		"prefix": "r.CalcMediaSrcLoudness",
		"scope": "lua",
		"body": "r.CalcMediaSrcLoudness(${1:mediasource})$0",
		"description": "Calculates loudness statistics of media via dry run render. Statistics will be displayed to the user; call GetSetProjectInfo_String('RENDER_STATS') to retrieve via API. Returns 1 if loudness was calculated successfully, -1 if user canceled the dry run render."
	},
	"CalculateNormalization lua": {
		"prefix": "r.CalculateNormalization",
		"scope": "lua",
		"body": "r.CalculateNormalization(${1:source}, ${2:normalizeTo}, ${3:normalizeTarget}, ${4:normalizeStart}, ${5:normalizeEnd})$0",
		"description": "Calculate normalize adjustment for source media. normalizeTo: 0=LUFS-I, 1=RMS-I, 2=peak, 3=true peak, 4=LUFS-M max, 5=LUFS-S max. normalizeTarget: dBFS or LUFS value. normalizeStart, normalizeEnd: time bounds within source media for normalization calculation. If normalizationStart=0 and normalizationEnd=0, the full duration of the media will be used for the calculation."
	},
	"ChildFlags_AlwaysAutoResize lua": {
		"prefix": "ImGui.ChildFlags_AlwaysAutoResize",
		"scope": "lua",
		"body": "ImGui.ChildFlags_AlwaysAutoResize$0",
		"description": "@type integer\n---\n**Window > Child Windows > Child Flags > ChildFlags_AlwaysAutoResize**\nCombined with AutoResizeX/AutoResizeY. Always measure size even when child\nis hidden, always return true, always disable clipping optimization! NOT RECOMMENDED.\n**Window > Child Windows > Child Flags**\nAbout using AutoResizeX/AutoResizeY flags:\n- May be combined with SetNextWindowSizeConstraints to set a min/max size for\neach axis (see Demo > Child > Auto-resize with Constraints).\n- Size measurement for a given axis is only performed when the child window is\nwithin visible boundaries, or is just appearing.\n- This allows BeginChild to return false when not within boundaries\n(e.g. when scrolling), which is more optimal. BUT it won't update its\nauto-size while clipped. While not perfect, it is a better default behavior\nas the always-on performance gain is more valuable than the occasional\n'resizing after becoming visible again' glitch.\n- You may also use ChildFlags_AlwaysAutoResize to force an update even when\nchild window is not in view. HOWEVER PLEASE UNDERSTAND THAT DOING SO WILL\nPREVENT BeginChild FROM EVER RETURNING FALSE, disabling benefits of coarse\nclipping.\n**Window > Child Windows**\nUse child windows to begin into a self-contained independent\nscrolling/clipping regions within a host window.\nChild windows can embed their own child.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.9\n "
	},
	"ChildFlags_AlwaysUseWindowPadding lua": {
		"prefix": "ImGui.ChildFlags_AlwaysUseWindowPadding",
		"scope": "lua",
		"body": "ImGui.ChildFlags_AlwaysUseWindowPadding$0",
		"description": "@type integer\n---\n**Window > Child Windows > Child Flags > ChildFlags_AlwaysUseWindowPadding**\nPad with StyleVar_WindowPadding even if no border are drawn (no padding by\ndefault for non-bordered child windows because it makes more sense).\n**Window > Child Windows > Child Flags**\nAbout using AutoResizeX/AutoResizeY flags:\n- May be combined with SetNextWindowSizeConstraints to set a min/max size for\neach axis (see Demo > Child > Auto-resize with Constraints).\n- Size measurement for a given axis is only performed when the child window is\nwithin visible boundaries, or is just appearing.\n- This allows BeginChild to return false when not within boundaries\n(e.g. when scrolling), which is more optimal. BUT it won't update its\nauto-size while clipped. While not perfect, it is a better default behavior\nas the always-on performance gain is more valuable than the occasional\n'resizing after becoming visible again' glitch.\n- You may also use ChildFlags_AlwaysAutoResize to force an update even when\nchild window is not in view. HOWEVER PLEASE UNDERSTAND THAT DOING SO WILL\nPREVENT BeginChild FROM EVER RETURNING FALSE, disabling benefits of coarse\nclipping.\n**Window > Child Windows**\nUse child windows to begin into a self-contained independent\nscrolling/clipping regions within a host window.\nChild windows can embed their own child.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.9\n "
	},
	"ChildFlags_AutoResizeX lua": {
		"prefix": "ImGui.ChildFlags_AutoResizeX",
		"scope": "lua",
		"body": "ImGui.ChildFlags_AutoResizeX$0",
		"description": "@type integer\n---\n**Window > Child Windows > Child Flags > ChildFlags_AutoResizeX**\nEnable auto-resizing width. Read notes above.\n**Window > Child Windows > Child Flags**\nAbout using AutoResizeX/AutoResizeY flags:\n- May be combined with SetNextWindowSizeConstraints to set a min/max size for\neach axis (see Demo > Child > Auto-resize with Constraints).\n- Size measurement for a given axis is only performed when the child window is\nwithin visible boundaries, or is just appearing.\n- This allows BeginChild to return false when not within boundaries\n(e.g. when scrolling), which is more optimal. BUT it won't update its\nauto-size while clipped. While not perfect, it is a better default behavior\nas the always-on performance gain is more valuable than the occasional\n'resizing after becoming visible again' glitch.\n- You may also use ChildFlags_AlwaysAutoResize to force an update even when\nchild window is not in view. HOWEVER PLEASE UNDERSTAND THAT DOING SO WILL\nPREVENT BeginChild FROM EVER RETURNING FALSE, disabling benefits of coarse\nclipping.\n**Window > Child Windows**\nUse child windows to begin into a self-contained independent\nscrolling/clipping regions within a host window.\nChild windows can embed their own child.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.9\n "
	},
	"ChildFlags_AutoResizeY lua": {
		"prefix": "ImGui.ChildFlags_AutoResizeY",
		"scope": "lua",
		"body": "ImGui.ChildFlags_AutoResizeY$0",
		"description": "@type integer\n---\n**Window > Child Windows > Child Flags > ChildFlags_AutoResizeY**\nEnable auto-resizing height. Read notes above.\n**Window > Child Windows > Child Flags**\nAbout using AutoResizeX/AutoResizeY flags:\n- May be combined with SetNextWindowSizeConstraints to set a min/max size for\neach axis (see Demo > Child > Auto-resize with Constraints).\n- Size measurement for a given axis is only performed when the child window is\nwithin visible boundaries, or is just appearing.\n- This allows BeginChild to return false when not within boundaries\n(e.g. when scrolling), which is more optimal. BUT it won't update its\nauto-size while clipped. While not perfect, it is a better default behavior\nas the always-on performance gain is more valuable than the occasional\n'resizing after becoming visible again' glitch.\n- You may also use ChildFlags_AlwaysAutoResize to force an update even when\nchild window is not in view. HOWEVER PLEASE UNDERSTAND THAT DOING SO WILL\nPREVENT BeginChild FROM EVER RETURNING FALSE, disabling benefits of coarse\nclipping.\n**Window > Child Windows**\nUse child windows to begin into a self-contained independent\nscrolling/clipping regions within a host window.\nChild windows can embed their own child.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.9\n "
	},
	"ChildFlags_Border lua": {
		"prefix": "ImGui.ChildFlags_Border",
		"scope": "lua",
		"body": "ImGui.ChildFlags_Border$0",
		"description": "@type integer\n---\n**Window > Child Windows > Child Flags > ChildFlags_Border**\nShow an outer border and enable WindowPadding.\n**Window > Child Windows > Child Flags**\nAbout using AutoResizeX/AutoResizeY flags:\n- May be combined with SetNextWindowSizeConstraints to set a min/max size for\neach axis (see Demo > Child > Auto-resize with Constraints).\n- Size measurement for a given axis is only performed when the child window is\nwithin visible boundaries, or is just appearing.\n- This allows BeginChild to return false when not within boundaries\n(e.g. when scrolling), which is more optimal. BUT it won't update its\nauto-size while clipped. While not perfect, it is a better default behavior\nas the always-on performance gain is more valuable than the occasional\n'resizing after becoming visible again' glitch.\n- You may also use ChildFlags_AlwaysAutoResize to force an update even when\nchild window is not in view. HOWEVER PLEASE UNDERSTAND THAT DOING SO WILL\nPREVENT BeginChild FROM EVER RETURNING FALSE, disabling benefits of coarse\nclipping.\n**Window > Child Windows**\nUse child windows to begin into a self-contained independent\nscrolling/clipping regions within a host window.\nChild windows can embed their own child.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.9\n "
	},
	"ChildFlags_FrameStyle lua": {
		"prefix": "ImGui.ChildFlags_FrameStyle",
		"scope": "lua",
		"body": "ImGui.ChildFlags_FrameStyle$0",
		"description": "@type integer\n---\n**Window > Child Windows > Child Flags > ChildFlags_FrameStyle**\nStyle the child window like a framed item: use Col_FrameBg,\nStyleVar_FrameRounding, StyleVar_FrameBorderSize, StyleVar_FramePadding\ninstead of Col_ChildBg, StyleVar_ChildRounding, StyleVar_ChildBorderSize,\nStyleVar_WindowPadding.\n**Window > Child Windows > Child Flags**\nAbout using AutoResizeX/AutoResizeY flags:\n- May be combined with SetNextWindowSizeConstraints to set a min/max size for\neach axis (see Demo > Child > Auto-resize with Constraints).\n- Size measurement for a given axis is only performed when the child window is\nwithin visible boundaries, or is just appearing.\n- This allows BeginChild to return false when not within boundaries\n(e.g. when scrolling), which is more optimal. BUT it won't update its\nauto-size while clipped. While not perfect, it is a better default behavior\nas the always-on performance gain is more valuable than the occasional\n'resizing after becoming visible again' glitch.\n- You may also use ChildFlags_AlwaysAutoResize to force an update even when\nchild window is not in view. HOWEVER PLEASE UNDERSTAND THAT DOING SO WILL\nPREVENT BeginChild FROM EVER RETURNING FALSE, disabling benefits of coarse\nclipping.\n**Window > Child Windows**\nUse child windows to begin into a self-contained independent\nscrolling/clipping regions within a host window.\nChild windows can embed their own child.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.9\n "
	},
	"ChildFlags_NavFlattened lua": {
		"prefix": "ImGui.ChildFlags_NavFlattened",
		"scope": "lua",
		"body": "ImGui.ChildFlags_NavFlattened$0",
		"description": "@type integer\n---\n**Window > Child Windows > Child Flags > ChildFlags_NavFlattened**\nShare focus scope, allow gamepad/keyboard navigation to cross over parent\nborder to this child or between sibling child windows.\n**Window > Child Windows > Child Flags**\nAbout using AutoResizeX/AutoResizeY flags:\n- May be combined with SetNextWindowSizeConstraints to set a min/max size for\neach axis (see Demo > Child > Auto-resize with Constraints).\n- Size measurement for a given axis is only performed when the child window is\nwithin visible boundaries, or is just appearing.\n- This allows BeginChild to return false when not within boundaries\n(e.g. when scrolling), which is more optimal. BUT it won't update its\nauto-size while clipped. While not perfect, it is a better default behavior\nas the always-on performance gain is more valuable than the occasional\n'resizing after becoming visible again' glitch.\n- You may also use ChildFlags_AlwaysAutoResize to force an update even when\nchild window is not in view. HOWEVER PLEASE UNDERSTAND THAT DOING SO WILL\nPREVENT BeginChild FROM EVER RETURNING FALSE, disabling benefits of coarse\nclipping.\n**Window > Child Windows**\nUse child windows to begin into a self-contained independent\nscrolling/clipping regions within a host window.\nChild windows can embed their own child.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.9.2\n "
	},
	"ChildFlags_None lua": {
		"prefix": "ImGui.ChildFlags_None",
		"scope": "lua",
		"body": "ImGui.ChildFlags_None$0",
		"description": "@type integer\n---\n**Window > Child Windows > Child Flags > ChildFlags_None**\n**Window > Child Windows > Child Flags**\nAbout using AutoResizeX/AutoResizeY flags:\n- May be combined with SetNextWindowSizeConstraints to set a min/max size for\neach axis (see Demo > Child > Auto-resize with Constraints).\n- Size measurement for a given axis is only performed when the child window is\nwithin visible boundaries, or is just appearing.\n- This allows BeginChild to return false when not within boundaries\n(e.g. when scrolling), which is more optimal. BUT it won't update its\nauto-size while clipped. While not perfect, it is a better default behavior\nas the always-on performance gain is more valuable than the occasional\n'resizing after becoming visible again' glitch.\n- You may also use ChildFlags_AlwaysAutoResize to force an update even when\nchild window is not in view. HOWEVER PLEASE UNDERSTAND THAT DOING SO WILL\nPREVENT BeginChild FROM EVER RETURNING FALSE, disabling benefits of coarse\nclipping.\n**Window > Child Windows**\nUse child windows to begin into a self-contained independent\nscrolling/clipping regions within a host window.\nChild windows can embed their own child.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.9\n "
	},
	"ChildFlags_ResizeX lua": {
		"prefix": "ImGui.ChildFlags_ResizeX",
		"scope": "lua",
		"body": "ImGui.ChildFlags_ResizeX$0",
		"description": "@type integer\n---\n**Window > Child Windows > Child Flags > ChildFlags_ResizeX**\nAllow resize from right border (layout direction).\nEnables .ini saving (unless WindowFlags_NoSavedSettings passed to window flags).\n**Window > Child Windows > Child Flags**\nAbout using AutoResizeX/AutoResizeY flags:\n- May be combined with SetNextWindowSizeConstraints to set a min/max size for\neach axis (see Demo > Child > Auto-resize with Constraints).\n- Size measurement for a given axis is only performed when the child window is\nwithin visible boundaries, or is just appearing.\n- This allows BeginChild to return false when not within boundaries\n(e.g. when scrolling), which is more optimal. BUT it won't update its\nauto-size while clipped. While not perfect, it is a better default behavior\nas the always-on performance gain is more valuable than the occasional\n'resizing after becoming visible again' glitch.\n- You may also use ChildFlags_AlwaysAutoResize to force an update even when\nchild window is not in view. HOWEVER PLEASE UNDERSTAND THAT DOING SO WILL\nPREVENT BeginChild FROM EVER RETURNING FALSE, disabling benefits of coarse\nclipping.\n**Window > Child Windows**\nUse child windows to begin into a self-contained independent\nscrolling/clipping regions within a host window.\nChild windows can embed their own child.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.9\n "
	},
	"ChildFlags_ResizeY lua": {
		"prefix": "ImGui.ChildFlags_ResizeY",
		"scope": "lua",
		"body": "ImGui.ChildFlags_ResizeY$0",
		"description": "@type integer\n---\n**Window > Child Windows > Child Flags > ChildFlags_ResizeY**\nAllow resize from bottom border (layout direction).\nEnables .ini saving (unless WindowFlags_NoSavedSettings passed to window flags).\n**Window > Child Windows > Child Flags**\nAbout using AutoResizeX/AutoResizeY flags:\n- May be combined with SetNextWindowSizeConstraints to set a min/max size for\neach axis (see Demo > Child > Auto-resize with Constraints).\n- Size measurement for a given axis is only performed when the child window is\nwithin visible boundaries, or is just appearing.\n- This allows BeginChild to return false when not within boundaries\n(e.g. when scrolling), which is more optimal. BUT it won't update its\nauto-size while clipped. While not perfect, it is a better default behavior\nas the always-on performance gain is more valuable than the occasional\n'resizing after becoming visible again' glitch.\n- You may also use ChildFlags_AlwaysAutoResize to force an update even when\nchild window is not in view. HOWEVER PLEASE UNDERSTAND THAT DOING SO WILL\nPREVENT BeginChild FROM EVER RETURNING FALSE, disabling benefits of coarse\nclipping.\n**Window > Child Windows**\nUse child windows to begin into a self-contained independent\nscrolling/clipping regions within a host window.\nChild windows can embed their own child.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.9\n "
	},
	"ClearAllRecArmed lua": {
		"prefix": "r.ClearAllRecArmed",
		"scope": "lua",
		"body": "r.ClearAllRecArmed()$0",
		"description": ""
	},
	"ClearConsole lua": {
		"prefix": "r.ClearConsole",
		"scope": "lua",
		"body": "r.ClearConsole()$0",
		"description": "Clear the ReaScript console. See ShowConsoleMsg"
	},
	"ClearPeakCache lua": {
		"prefix": "r.ClearPeakCache",
		"scope": "lua",
		"body": "r.ClearPeakCache()$0",
		"description": "resets the global peak caches"
	},
	"Col_Border lua": {
		"prefix": "ImGui.Col_Border",
		"scope": "lua",
		"body": "ImGui.Col_Border$0",
		"description": "@type integer\n---\n**Style > Colors > Col_Border**\n@since 0.1\n "
	},
	"Col_BorderShadow lua": {
		"prefix": "ImGui.Col_BorderShadow",
		"scope": "lua",
		"body": "ImGui.Col_BorderShadow$0",
		"description": "@type integer\n---\n**Style > Colors > Col_BorderShadow**\n@since 0.1\n "
	},
	"Col_Button lua": {
		"prefix": "ImGui.Col_Button",
		"scope": "lua",
		"body": "ImGui.Col_Button$0",
		"description": "@type integer\n---\n**Style > Colors > Col_Button**\n@since 0.1\n "
	},
	"Col_ButtonActive lua": {
		"prefix": "ImGui.Col_ButtonActive",
		"scope": "lua",
		"body": "ImGui.Col_ButtonActive$0",
		"description": "@type integer\n---\n**Style > Colors > Col_ButtonActive**\n@since 0.1\n "
	},
	"Col_ButtonHovered lua": {
		"prefix": "ImGui.Col_ButtonHovered",
		"scope": "lua",
		"body": "ImGui.Col_ButtonHovered$0",
		"description": "@type integer\n---\n**Style > Colors > Col_ButtonHovered**\n@since 0.1\n "
	},
	"Col_CheckMark lua": {
		"prefix": "ImGui.Col_CheckMark",
		"scope": "lua",
		"body": "ImGui.Col_CheckMark$0",
		"description": "@type integer\n---\n**Style > Colors > Col_CheckMark**\nCheckbox tick and RadioButton circle\n@since 0.1\n "
	},
	"Col_ChildBg lua": {
		"prefix": "ImGui.Col_ChildBg",
		"scope": "lua",
		"body": "ImGui.Col_ChildBg$0",
		"description": "@type integer\n---\n**Style > Colors > Col_ChildBg**\nBackground of child windows.\n@since 0.1\n "
	},
	"Col_DockingEmptyBg lua": {
		"prefix": "ImGui.Col_DockingEmptyBg",
		"scope": "lua",
		"body": "ImGui.Col_DockingEmptyBg$0",
		"description": "@type integer\n---\n**Style > Colors > Col_DockingEmptyBg**\nBackground color for empty node (e.g. CentralNode with no window docked into it).\n@since 0.5\n "
	},
	"Col_DockingPreview lua": {
		"prefix": "ImGui.Col_DockingPreview",
		"scope": "lua",
		"body": "ImGui.Col_DockingPreview$0",
		"description": "@type integer\n---\n**Style > Colors > Col_DockingPreview**\nPreview overlay color when about to docking something.\n@since 0.5\n "
	},
	"Col_DragDropTarget lua": {
		"prefix": "ImGui.Col_DragDropTarget",
		"scope": "lua",
		"body": "ImGui.Col_DragDropTarget$0",
		"description": "@type integer\n---\n**Style > Colors > Col_DragDropTarget**\nRectangle highlighting a drop target\n@since 0.1\n "
	},
	"Col_FrameBg lua": {
		"prefix": "ImGui.Col_FrameBg",
		"scope": "lua",
		"body": "ImGui.Col_FrameBg$0",
		"description": "@type integer\n---\n**Style > Colors > Col_FrameBg**\nBackground of checkbox, radio button, plot, slider, text input.\n@since 0.1\n "
	},
	"Col_FrameBgActive lua": {
		"prefix": "ImGui.Col_FrameBgActive",
		"scope": "lua",
		"body": "ImGui.Col_FrameBgActive$0",
		"description": "@type integer\n---\n**Style > Colors > Col_FrameBgActive**\n@since 0.1\n "
	},
	"Col_FrameBgHovered lua": {
		"prefix": "ImGui.Col_FrameBgHovered",
		"scope": "lua",
		"body": "ImGui.Col_FrameBgHovered$0",
		"description": "@type integer\n---\n**Style > Colors > Col_FrameBgHovered**\n@since 0.1\n "
	},
	"Col_Header lua": {
		"prefix": "ImGui.Col_Header",
		"scope": "lua",
		"body": "ImGui.Col_Header$0",
		"description": "@type integer\n---\n**Style > Colors > Col_Header**\nHeader* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem.\n@since 0.1\n "
	},
	"Col_HeaderActive lua": {
		"prefix": "ImGui.Col_HeaderActive",
		"scope": "lua",
		"body": "ImGui.Col_HeaderActive$0",
		"description": "@type integer\n---\n**Style > Colors > Col_HeaderActive**\n@since 0.1\n "
	},
	"Col_HeaderHovered lua": {
		"prefix": "ImGui.Col_HeaderHovered",
		"scope": "lua",
		"body": "ImGui.Col_HeaderHovered$0",
		"description": "@type integer\n---\n**Style > Colors > Col_HeaderHovered**\n@since 0.1\n "
	},
	"Col_MenuBarBg lua": {
		"prefix": "ImGui.Col_MenuBarBg",
		"scope": "lua",
		"body": "ImGui.Col_MenuBarBg$0",
		"description": "@type integer\n---\n**Style > Colors > Col_MenuBarBg**\n@since 0.1\n "
	},
	"Col_ModalWindowDimBg lua": {
		"prefix": "ImGui.Col_ModalWindowDimBg",
		"scope": "lua",
		"body": "ImGui.Col_ModalWindowDimBg$0",
		"description": "@type integer\n---\n**Style > Colors > Col_ModalWindowDimBg**\nDarken/colorize entire screen behind a modal window, when one is active.\n@since 0.1\n "
	},
	"Col_NavHighlight lua": {
		"prefix": "ImGui.Col_NavHighlight",
		"scope": "lua",
		"body": "ImGui.Col_NavHighlight$0",
		"description": "@type integer\n---\n**Style > Colors > Col_NavHighlight**\nGamepad/keyboard: current highlighted item.\n@since 0.1\n "
	},
	"Col_NavWindowingDimBg lua": {
		"prefix": "ImGui.Col_NavWindowingDimBg",
		"scope": "lua",
		"body": "ImGui.Col_NavWindowingDimBg$0",
		"description": "@type integer\n---\n**Style > Colors > Col_NavWindowingDimBg**\nDarken/colorize entire screen behind the CTRL+TAB window list, when active.\n@since 0.1\n "
	},
	"Col_NavWindowingHighlight lua": {
		"prefix": "ImGui.Col_NavWindowingHighlight",
		"scope": "lua",
		"body": "ImGui.Col_NavWindowingHighlight$0",
		"description": "@type integer\n---\n**Style > Colors > Col_NavWindowingHighlight**\nHighlight window when using CTRL+TAB.\n@since 0.1\n "
	},
	"Col_PlotHistogram lua": {
		"prefix": "ImGui.Col_PlotHistogram",
		"scope": "lua",
		"body": "ImGui.Col_PlotHistogram$0",
		"description": "@type integer\n---\n**Style > Colors > Col_PlotHistogram**\n@since 0.1\n "
	},
	"Col_PlotHistogramHovered lua": {
		"prefix": "ImGui.Col_PlotHistogramHovered",
		"scope": "lua",
		"body": "ImGui.Col_PlotHistogramHovered$0",
		"description": "@type integer\n---\n**Style > Colors > Col_PlotHistogramHovered**\n@since 0.1\n "
	},
	"Col_PlotLines lua": {
		"prefix": "ImGui.Col_PlotLines",
		"scope": "lua",
		"body": "ImGui.Col_PlotLines$0",
		"description": "@type integer\n---\n**Style > Colors > Col_PlotLines**\n@since 0.1\n "
	},
	"Col_PlotLinesHovered lua": {
		"prefix": "ImGui.Col_PlotLinesHovered",
		"scope": "lua",
		"body": "ImGui.Col_PlotLinesHovered$0",
		"description": "@type integer\n---\n**Style > Colors > Col_PlotLinesHovered**\n@since 0.1\n "
	},
	"Col_PopupBg lua": {
		"prefix": "ImGui.Col_PopupBg",
		"scope": "lua",
		"body": "ImGui.Col_PopupBg$0",
		"description": "@type integer\n---\n**Style > Colors > Col_PopupBg**\nBackground of popups, menus, tooltips windows.\n@since 0.1\n "
	},
	"Col_ResizeGrip lua": {
		"prefix": "ImGui.Col_ResizeGrip",
		"scope": "lua",
		"body": "ImGui.Col_ResizeGrip$0",
		"description": "@type integer\n---\n**Style > Colors > Col_ResizeGrip**\nResize grip in lower-right and lower-left corners of windows.\n@since 0.1\n "
	},
	"Col_ResizeGripActive lua": {
		"prefix": "ImGui.Col_ResizeGripActive",
		"scope": "lua",
		"body": "ImGui.Col_ResizeGripActive$0",
		"description": "@type integer\n---\n**Style > Colors > Col_ResizeGripActive**\n@since 0.1\n "
	},
	"Col_ResizeGripHovered lua": {
		"prefix": "ImGui.Col_ResizeGripHovered",
		"scope": "lua",
		"body": "ImGui.Col_ResizeGripHovered$0",
		"description": "@type integer\n---\n**Style > Colors > Col_ResizeGripHovered**\n@since 0.1\n "
	},
	"Col_ScrollbarBg lua": {
		"prefix": "ImGui.Col_ScrollbarBg",
		"scope": "lua",
		"body": "ImGui.Col_ScrollbarBg$0",
		"description": "@type integer\n---\n**Style > Colors > Col_ScrollbarBg**\n@since 0.1\n "
	},
	"Col_ScrollbarGrab lua": {
		"prefix": "ImGui.Col_ScrollbarGrab",
		"scope": "lua",
		"body": "ImGui.Col_ScrollbarGrab$0",
		"description": "@type integer\n---\n**Style > Colors > Col_ScrollbarGrab**\n@since 0.1\n "
	},
	"Col_ScrollbarGrabActive lua": {
		"prefix": "ImGui.Col_ScrollbarGrabActive",
		"scope": "lua",
		"body": "ImGui.Col_ScrollbarGrabActive$0",
		"description": "@type integer\n---\n**Style > Colors > Col_ScrollbarGrabActive**\n@since 0.1\n "
	},
	"Col_ScrollbarGrabHovered lua": {
		"prefix": "ImGui.Col_ScrollbarGrabHovered",
		"scope": "lua",
		"body": "ImGui.Col_ScrollbarGrabHovered$0",
		"description": "@type integer\n---\n**Style > Colors > Col_ScrollbarGrabHovered**\n@since 0.1\n "
	},
	"Col_Separator lua": {
		"prefix": "ImGui.Col_Separator",
		"scope": "lua",
		"body": "ImGui.Col_Separator$0",
		"description": "@type integer\n---\n**Style > Colors > Col_Separator**\n@since 0.1\n "
	},
	"Col_SeparatorActive lua": {
		"prefix": "ImGui.Col_SeparatorActive",
		"scope": "lua",
		"body": "ImGui.Col_SeparatorActive$0",
		"description": "@type integer\n---\n**Style > Colors > Col_SeparatorActive**\n@since 0.1\n "
	},
	"Col_SeparatorHovered lua": {
		"prefix": "ImGui.Col_SeparatorHovered",
		"scope": "lua",
		"body": "ImGui.Col_SeparatorHovered$0",
		"description": "@type integer\n---\n**Style > Colors > Col_SeparatorHovered**\n@since 0.1\n "
	},
	"Col_SliderGrab lua": {
		"prefix": "ImGui.Col_SliderGrab",
		"scope": "lua",
		"body": "ImGui.Col_SliderGrab$0",
		"description": "@type integer\n---\n**Style > Colors > Col_SliderGrab**\n@since 0.1\n "
	},
	"Col_SliderGrabActive lua": {
		"prefix": "ImGui.Col_SliderGrabActive",
		"scope": "lua",
		"body": "ImGui.Col_SliderGrabActive$0",
		"description": "@type integer\n---\n**Style > Colors > Col_SliderGrabActive**\n@since 0.1\n "
	},
	"Col_Tab lua": {
		"prefix": "ImGui.Col_Tab",
		"scope": "lua",
		"body": "ImGui.Col_Tab$0",
		"description": "@type integer\n---\n**Style > Colors > Col_Tab**\nTab background, when tab-bar is focused & tab is unselected\n@since 0.1\n "
	},
	"Col_TabDimmed lua": {
		"prefix": "ImGui.Col_TabDimmed",
		"scope": "lua",
		"body": "ImGui.Col_TabDimmed$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TabDimmed**\nTab background, when tab-bar is unfocused & tab is unselected\n@since 0.9.2\n "
	},
	"Col_TabDimmedSelected lua": {
		"prefix": "ImGui.Col_TabDimmedSelected",
		"scope": "lua",
		"body": "ImGui.Col_TabDimmedSelected$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TabDimmedSelected**\nTab background, when tab-bar is unfocused & tab is selected\n@since 0.9.2\n "
	},
	"Col_TabDimmedSelectedOverline lua": {
		"prefix": "ImGui.Col_TabDimmedSelectedOverline",
		"scope": "lua",
		"body": "ImGui.Col_TabDimmedSelectedOverline$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TabDimmedSelectedOverline**\nHorizontal overline, when tab-bar is unfocused & tab is selected\n@since 0.9.2\n "
	},
	"Col_TabHovered lua": {
		"prefix": "ImGui.Col_TabHovered",
		"scope": "lua",
		"body": "ImGui.Col_TabHovered$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TabHovered**\nTab background, when hovered\n@since 0.1\n "
	},
	"Col_TabSelected lua": {
		"prefix": "ImGui.Col_TabSelected",
		"scope": "lua",
		"body": "ImGui.Col_TabSelected$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TabSelected**\nTab background, when tab-bar is focused & tab is selected\n@since 0.9.2\n "
	},
	"Col_TabSelectedOverline lua": {
		"prefix": "ImGui.Col_TabSelectedOverline",
		"scope": "lua",
		"body": "ImGui.Col_TabSelectedOverline$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TabSelectedOverline**\nTab horizontal overline, when tab-bar is focused & tab is selected\n@since 0.9.2\n "
	},
	"Col_TableBorderLight lua": {
		"prefix": "ImGui.Col_TableBorderLight",
		"scope": "lua",
		"body": "ImGui.Col_TableBorderLight$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TableBorderLight**\nTable inner borders (prefer using Alpha=1.0 here).\n@since 0.1\n "
	},
	"Col_TableBorderStrong lua": {
		"prefix": "ImGui.Col_TableBorderStrong",
		"scope": "lua",
		"body": "ImGui.Col_TableBorderStrong$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TableBorderStrong**\nTable outer and header borders (prefer using Alpha=1.0 here).\n@since 0.1\n "
	},
	"Col_TableHeaderBg lua": {
		"prefix": "ImGui.Col_TableHeaderBg",
		"scope": "lua",
		"body": "ImGui.Col_TableHeaderBg$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TableHeaderBg**\nTable header background.\n@since 0.1\n "
	},
	"Col_TableRowBg lua": {
		"prefix": "ImGui.Col_TableRowBg",
		"scope": "lua",
		"body": "ImGui.Col_TableRowBg$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TableRowBg**\nTable row background (even rows).\n@since 0.1\n "
	},
	"Col_TableRowBgAlt lua": {
		"prefix": "ImGui.Col_TableRowBgAlt",
		"scope": "lua",
		"body": "ImGui.Col_TableRowBgAlt$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TableRowBgAlt**\nTable row background (odd rows).\n@since 0.1\n "
	},
	"Col_Text lua": {
		"prefix": "ImGui.Col_Text",
		"scope": "lua",
		"body": "ImGui.Col_Text$0",
		"description": "@type integer\n---\n**Style > Colors > Col_Text**\n@since 0.1\n "
	},
	"Col_TextDisabled lua": {
		"prefix": "ImGui.Col_TextDisabled",
		"scope": "lua",
		"body": "ImGui.Col_TextDisabled$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TextDisabled**\n@since 0.1\n "
	},
	"Col_TextSelectedBg lua": {
		"prefix": "ImGui.Col_TextSelectedBg",
		"scope": "lua",
		"body": "ImGui.Col_TextSelectedBg$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TextSelectedBg**\n@since 0.1\n "
	},
	"Col_TitleBg lua": {
		"prefix": "ImGui.Col_TitleBg",
		"scope": "lua",
		"body": "ImGui.Col_TitleBg$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TitleBg**\nTitle bar\n@since 0.1\n "
	},
	"Col_TitleBgActive lua": {
		"prefix": "ImGui.Col_TitleBgActive",
		"scope": "lua",
		"body": "ImGui.Col_TitleBgActive$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TitleBgActive**\nTitle bar when focused\n@since 0.1\n "
	},
	"Col_TitleBgCollapsed lua": {
		"prefix": "ImGui.Col_TitleBgCollapsed",
		"scope": "lua",
		"body": "ImGui.Col_TitleBgCollapsed$0",
		"description": "@type integer\n---\n**Style > Colors > Col_TitleBgCollapsed**\nTitle bar when collapsed\n@since 0.1\n "
	},
	"Col_WindowBg lua": {
		"prefix": "ImGui.Col_WindowBg",
		"scope": "lua",
		"body": "ImGui.Col_WindowBg$0",
		"description": "@type integer\n---\n**Style > Colors > Col_WindowBg**\nBackground of normal windows. See also WindowFlags_NoBackground.\n@since 0.1\n "
	},
	"ColorEditFlags_AlphaBar lua": {
		"prefix": "ImGui.ColorEditFlags_AlphaBar",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_AlphaBar$0",
		"description": "@type integer\n---\n**Color Edit > Flags > User Options > ColorEditFlags_AlphaBar**\nColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.\n**Color Edit > Flags > User Options**\n(right-click on widget to change some of them)\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_AlphaPreview lua": {
		"prefix": "ImGui.ColorEditFlags_AlphaPreview",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_AlphaPreview$0",
		"description": "@type integer\n---\n**Color Edit > Flags > User Options > ColorEditFlags_AlphaPreview**\nColorEdit, ColorPicker, ColorButton: display preview as a transparent color\nover a checkerboard, instead of opaque.\n**Color Edit > Flags > User Options**\n(right-click on widget to change some of them)\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_AlphaPreviewHalf lua": {
		"prefix": "ImGui.ColorEditFlags_AlphaPreviewHalf",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_AlphaPreviewHalf$0",
		"description": "@type integer\n---\n**Color Edit > Flags > User Options > ColorEditFlags_AlphaPreviewHalf**\nColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard,\ninstead of opaque.\n**Color Edit > Flags > User Options**\n(right-click on widget to change some of them)\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_DisplayHSV lua": {
		"prefix": "ImGui.ColorEditFlags_DisplayHSV",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_DisplayHSV$0",
		"description": "@type integer\n---\n**Color Edit > Flags > User Options > ColorEditFlags_DisplayHSV**\nColorEdit: override _display_ type to HSV. ColorPicker:\nselect any combination using one or more of RGB/HSV/Hex.\n**Color Edit > Flags > User Options**\n(right-click on widget to change some of them)\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_DisplayHex lua": {
		"prefix": "ImGui.ColorEditFlags_DisplayHex",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_DisplayHex$0",
		"description": "@type integer\n---\n**Color Edit > Flags > User Options > ColorEditFlags_DisplayHex**\nColorEdit: override _display_ type to Hex. ColorPicker:\nselect any combination using one or more of RGB/HSV/Hex.\n**Color Edit > Flags > User Options**\n(right-click on widget to change some of them)\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_DisplayRGB lua": {
		"prefix": "ImGui.ColorEditFlags_DisplayRGB",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_DisplayRGB$0",
		"description": "@type integer\n---\n**Color Edit > Flags > User Options > ColorEditFlags_DisplayRGB**\nColorEdit: override _display_ type to RGB. ColorPicker:\nselect any combination using one or more of RGB/HSV/Hex.\n**Color Edit > Flags > User Options**\n(right-click on widget to change some of them)\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_Float lua": {
		"prefix": "ImGui.ColorEditFlags_Float",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_Float$0",
		"description": "@type integer\n---\n**Color Edit > Flags > User Options > ColorEditFlags_Float**\nColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0..1.0\nfloats instead of 0..255 integers. No round-trip of value via integers.\n**Color Edit > Flags > User Options**\n(right-click on widget to change some of them)\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_InputHSV lua": {
		"prefix": "ImGui.ColorEditFlags_InputHSV",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_InputHSV$0",
		"description": "@type integer\n---\n**Color Edit > Flags > User Options > ColorEditFlags_InputHSV**\nColorEdit, ColorPicker: input and output data in HSV format.\n**Color Edit > Flags > User Options**\n(right-click on widget to change some of them)\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_InputRGB lua": {
		"prefix": "ImGui.ColorEditFlags_InputRGB",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_InputRGB$0",
		"description": "@type integer\n---\n**Color Edit > Flags > User Options > ColorEditFlags_InputRGB**\nColorEdit, ColorPicker: input and output data in RGB format.\n**Color Edit > Flags > User Options**\n(right-click on widget to change some of them)\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_NoAlpha lua": {
		"prefix": "ImGui.ColorEditFlags_NoAlpha",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_NoAlpha$0",
		"description": "@type integer\n---\n**Color Edit > Flags > ColorEditFlags_NoAlpha**\nColorEdit, ColorPicker, ColorButton: ignore Alpha component\n(will only read 3 components from the input pointer).\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_NoBorder lua": {
		"prefix": "ImGui.ColorEditFlags_NoBorder",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_NoBorder$0",
		"description": "@type integer\n---\n**Color Edit > Flags > ColorEditFlags_NoBorder**\nColorButton: disable border (which is enforced by default).\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_NoDragDrop lua": {
		"prefix": "ImGui.ColorEditFlags_NoDragDrop",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_NoDragDrop$0",
		"description": "@type integer\n---\n**Color Edit > Flags > ColorEditFlags_NoDragDrop**\nColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_NoInputs lua": {
		"prefix": "ImGui.ColorEditFlags_NoInputs",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_NoInputs$0",
		"description": "@type integer\n---\n**Color Edit > Flags > ColorEditFlags_NoInputs**\nColorEdit, ColorPicker: disable inputs sliders/text widgets\n(e.g. to show only the small preview color square).\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_NoLabel lua": {
		"prefix": "ImGui.ColorEditFlags_NoLabel",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_NoLabel$0",
		"description": "@type integer\n---\n**Color Edit > Flags > ColorEditFlags_NoLabel**\nColorEdit, ColorPicker: disable display of inline text label\n(the label is still forwarded to the tooltip and picker).\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_NoOptions lua": {
		"prefix": "ImGui.ColorEditFlags_NoOptions",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_NoOptions$0",
		"description": "@type integer\n---\n**Color Edit > Flags > ColorEditFlags_NoOptions**\nColorEdit: disable toggling options menu when right-clicking on inputs/small preview.\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_NoPicker lua": {
		"prefix": "ImGui.ColorEditFlags_NoPicker",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_NoPicker$0",
		"description": "@type integer\n---\n**Color Edit > Flags > ColorEditFlags_NoPicker**\nColorEdit: disable picker when clicking on color square.\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_NoSidePreview lua": {
		"prefix": "ImGui.ColorEditFlags_NoSidePreview",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_NoSidePreview$0",
		"description": "@type integer\n---\n**Color Edit > Flags > ColorEditFlags_NoSidePreview**\nColorPicker: disable bigger color preview on right side of the picker,\nuse small color square preview instead.\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_NoSmallPreview lua": {
		"prefix": "ImGui.ColorEditFlags_NoSmallPreview",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_NoSmallPreview$0",
		"description": "@type integer\n---\n**Color Edit > Flags > ColorEditFlags_NoSmallPreview**\nColorEdit, ColorPicker: disable color square preview next to the inputs.\n(e.g. to show only the inputs).\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_NoTooltip lua": {
		"prefix": "ImGui.ColorEditFlags_NoTooltip",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_NoTooltip$0",
		"description": "@type integer\n---\n**Color Edit > Flags > ColorEditFlags_NoTooltip**\nColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_None lua": {
		"prefix": "ImGui.ColorEditFlags_None",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_None$0",
		"description": "@type integer\n---\n**Color Edit > Flags > ColorEditFlags_None**\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_PickerHueBar lua": {
		"prefix": "ImGui.ColorEditFlags_PickerHueBar",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_PickerHueBar$0",
		"description": "@type integer\n---\n**Color Edit > Flags > User Options > ColorEditFlags_PickerHueBar**\nColorPicker: bar for Hue, rectangle for Sat/Value.\n**Color Edit > Flags > User Options**\n(right-click on widget to change some of them)\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_PickerHueWheel lua": {
		"prefix": "ImGui.ColorEditFlags_PickerHueWheel",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_PickerHueWheel$0",
		"description": "@type integer\n---\n**Color Edit > Flags > User Options > ColorEditFlags_PickerHueWheel**\nColorPicker: wheel for Hue, triangle for Sat/Value.\n**Color Edit > Flags > User Options**\n(right-click on widget to change some of them)\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorEditFlags_Uint8 lua": {
		"prefix": "ImGui.ColorEditFlags_Uint8",
		"scope": "lua",
		"body": "ImGui.ColorEditFlags_Uint8$0",
		"description": "@type integer\n---\n**Color Edit > Flags > User Options > ColorEditFlags_Uint8**\nColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.\n**Color Edit > Flags > User Options**\n(right-click on widget to change some of them)\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu.\n@since 0.1\n "
	},
	"ColorFromNative lua": {
		"prefix": "r.ColorFromNative",
		"scope": "lua",
		"body": "r.ColorFromNative(${1:col})$0",
		"description": "Extract RGB values from an OS dependent color. See ColorToNative."
	},
	"ColorToNative lua": {
		"prefix": "r.ColorToNative",
		"scope": "lua",
		"body": "r.ColorToNative(${1:r}, ${2:g}, ${3:b})$0",
		"description": "Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative."
	},
	"ComboFlags_HeightLarge lua": {
		"prefix": "ImGui.ComboFlags_HeightLarge",
		"scope": "lua",
		"body": "ImGui.ComboFlags_HeightLarge$0",
		"description": "@type integer\n---\n**Combo & List > Combo Box (Dropdown) > ComboFlags_HeightLarge**\nMax ~20 items visible.\n@since 0.1\n "
	},
	"ComboFlags_HeightLargest lua": {
		"prefix": "ImGui.ComboFlags_HeightLargest",
		"scope": "lua",
		"body": "ImGui.ComboFlags_HeightLargest$0",
		"description": "@type integer\n---\n**Combo & List > Combo Box (Dropdown) > ComboFlags_HeightLargest**\nAs many fitting items as possible.\n@since 0.1\n "
	},
	"ComboFlags_HeightRegular lua": {
		"prefix": "ImGui.ComboFlags_HeightRegular",
		"scope": "lua",
		"body": "ImGui.ComboFlags_HeightRegular$0",
		"description": "@type integer\n---\n**Combo & List > Combo Box (Dropdown) > ComboFlags_HeightRegular**\nMax ~8 items visible (default).\n@since 0.1\n "
	},
	"ComboFlags_HeightSmall lua": {
		"prefix": "ImGui.ComboFlags_HeightSmall",
		"scope": "lua",
		"body": "ImGui.ComboFlags_HeightSmall$0",
		"description": "@type integer\n---\n**Combo & List > Combo Box (Dropdown) > ComboFlags_HeightSmall**\nMax ~4 items visible. Tip: If you want your combo popup to be a specific size\nyou can use SetNextWindowSizeConstraints prior to calling BeginCombo.\n@since 0.1\n "
	},
	"ComboFlags_NoArrowButton lua": {
		"prefix": "ImGui.ComboFlags_NoArrowButton",
		"scope": "lua",
		"body": "ImGui.ComboFlags_NoArrowButton$0",
		"description": "@type integer\n---\n**Combo & List > Combo Box (Dropdown) > ComboFlags_NoArrowButton**\nDisplay on the preview box without the square arrow button.\n@since 0.1\n "
	},
	"ComboFlags_NoPreview lua": {
		"prefix": "ImGui.ComboFlags_NoPreview",
		"scope": "lua",
		"body": "ImGui.ComboFlags_NoPreview$0",
		"description": "@type integer\n---\n**Combo & List > Combo Box (Dropdown) > ComboFlags_NoPreview**\nDisplay only a square arrow button.\n@since 0.1\n "
	},
	"ComboFlags_None lua": {
		"prefix": "ImGui.ComboFlags_None",
		"scope": "lua",
		"body": "ImGui.ComboFlags_None$0",
		"description": "@type integer\n---\n**Combo & List > Combo Box (Dropdown) > ComboFlags_None**\n@since 0.1\n "
	},
	"ComboFlags_PopupAlignLeft lua": {
		"prefix": "ImGui.ComboFlags_PopupAlignLeft",
		"scope": "lua",
		"body": "ImGui.ComboFlags_PopupAlignLeft$0",
		"description": "@type integer\n---\n**Combo & List > Combo Box (Dropdown) > ComboFlags_PopupAlignLeft**\nAlign the popup toward the left by default.\n@since 0.1\n "
	},
	"ComboFlags_WidthFitPreview lua": {
		"prefix": "ImGui.ComboFlags_WidthFitPreview",
		"scope": "lua",
		"body": "ImGui.ComboFlags_WidthFitPreview$0",
		"description": "@type integer\n---\n**Combo & List > Combo Box (Dropdown) > ComboFlags_WidthFitPreview**\nWidth dynamically calculated from preview contents.\n@since 0.9\n "
	},
	"Cond_Always lua": {
		"prefix": "ImGui.Cond_Always",
		"scope": "lua",
		"body": "ImGui.Cond_Always$0",
		"description": "@type integer\n---\n**Utility > Conditions > Cond_Always**\nNo condition (always set the variable).\n**Utility > Conditions**\nUsed for SetNextWindow*(), SetWindow*() and SetNextItem*() functions.\n@since 0.1\n "
	},
	"Cond_Appearing lua": {
		"prefix": "ImGui.Cond_Appearing",
		"scope": "lua",
		"body": "ImGui.Cond_Appearing$0",
		"description": "@type integer\n---\n**Utility > Conditions > Cond_Appearing**\nSet the variable if the object/window is appearing after being\nhidden/inactive (or the first time).\n**Utility > Conditions**\nUsed for SetNextWindow*(), SetWindow*() and SetNextItem*() functions.\n@since 0.1\n "
	},
	"Cond_FirstUseEver lua": {
		"prefix": "ImGui.Cond_FirstUseEver",
		"scope": "lua",
		"body": "ImGui.Cond_FirstUseEver$0",
		"description": "@type integer\n---\n**Utility > Conditions > Cond_FirstUseEver**\nSet the variable if the object/window has no persistently saved data\n(no entry in .ini file).\n**Utility > Conditions**\nUsed for SetNextWindow*(), SetWindow*() and SetNextItem*() functions.\n@since 0.1\n "
	},
	"Cond_Once lua": {
		"prefix": "ImGui.Cond_Once",
		"scope": "lua",
		"body": "ImGui.Cond_Once$0",
		"description": "@type integer\n---\n**Utility > Conditions > Cond_Once**\nSet the variable once per runtime session (only the first call will succeed).\n**Utility > Conditions**\nUsed for SetNextWindow*(), SetWindow*() and SetNextItem*() functions.\n@since 0.1\n "
	},
	"ConfigFlags_DockingEnable lua": {
		"prefix": "ImGui.ConfigFlags_DockingEnable",
		"scope": "lua",
		"body": "ImGui.ConfigFlags_DockingEnable$0",
		"description": "@type integer\n---\n**Context > Flags > ConfigFlags_DockingEnable**\nEnable docking functionality.\n**Context > Flags**\nFor CreateContext and SetConfigVar(ConfigVar_Flags()).\n@since 0.5\n "
	},
	"ConfigFlags_NavEnableKeyboard lua": {
		"prefix": "ImGui.ConfigFlags_NavEnableKeyboard",
		"scope": "lua",
		"body": "ImGui.ConfigFlags_NavEnableKeyboard$0",
		"description": "@type integer\n---\n**Context > Flags > ConfigFlags_NavEnableKeyboard**\nMaster keyboard navigation enable flag.\nEnable full Tabbing + directional arrows + space/enter to activate.\n**Context > Flags**\nFor CreateContext and SetConfigVar(ConfigVar_Flags()).\n@since 0.1\n "
	},
	"ConfigFlags_NavEnableSetMousePos lua": {
		"prefix": "ImGui.ConfigFlags_NavEnableSetMousePos",
		"scope": "lua",
		"body": "ImGui.ConfigFlags_NavEnableSetMousePos$0",
		"description": "@type integer\n---\n**Context > Flags > ConfigFlags_NavEnableSetMousePos**\nInstruct navigation to move the mouse cursor.\n**Context > Flags**\nFor CreateContext and SetConfigVar(ConfigVar_Flags()).\n@since 0.1\n "
	},
	"ConfigFlags_NavNoCaptureKeyboard lua": {
		"prefix": "ImGui.ConfigFlags_NavNoCaptureKeyboard",
		"scope": "lua",
		"body": "ImGui.ConfigFlags_NavNoCaptureKeyboard$0",
		"description": "@type integer\n---\n**Context > Flags > ConfigFlags_NavNoCaptureKeyboard**\nInstruct navigation to not capture global keyboard input when\nConfigFlags_NavEnableKeyboard is set (see SetNextFrameWantCaptureKeyboard).\n**Context > Flags**\nFor CreateContext and SetConfigVar(ConfigVar_Flags()).\n@since 0.8\n "
	},
	"ConfigFlags_NoKeyboard lua": {
		"prefix": "ImGui.ConfigFlags_NoKeyboard",
		"scope": "lua",
		"body": "ImGui.ConfigFlags_NoKeyboard$0",
		"description": "@type integer\n---\n**Context > Flags > ConfigFlags_NoKeyboard**\nInstruct dear imgui to disable keyboard inputs and interactions.\nThis is done by ignoring keyboard events and clearing existing states.\n**Context > Flags**\nFor CreateContext and SetConfigVar(ConfigVar_Flags()).\n@since 0.9.2\n "
	},
	"ConfigFlags_NoMouse lua": {
		"prefix": "ImGui.ConfigFlags_NoMouse",
		"scope": "lua",
		"body": "ImGui.ConfigFlags_NoMouse$0",
		"description": "@type integer\n---\n**Context > Flags > ConfigFlags_NoMouse**\nInstruct dear imgui to disable mouse inputs and interactions\n**Context > Flags**\nFor CreateContext and SetConfigVar(ConfigVar_Flags()).\n@since 0.1\n "
	},
	"ConfigFlags_NoMouseCursorChange lua": {
		"prefix": "ImGui.ConfigFlags_NoMouseCursorChange",
		"scope": "lua",
		"body": "ImGui.ConfigFlags_NoMouseCursorChange$0",
		"description": "@type integer\n---\n**Context > Flags > ConfigFlags_NoMouseCursorChange**\nInstruct backend to not alter mouse cursor shape and visibility.\n**Context > Flags**\nFor CreateContext and SetConfigVar(ConfigVar_Flags()).\n@since 0.1\n "
	},
	"ConfigFlags_NoSavedSettings lua": {
		"prefix": "ImGui.ConfigFlags_NoSavedSettings",
		"scope": "lua",
		"body": "ImGui.ConfigFlags_NoSavedSettings$0",
		"description": "@type integer\n---\n**Context > Flags > ConfigFlags_NoSavedSettings**\nDisable state restoration and persistence for the whole context.\n**Context > Flags**\nFor CreateContext and SetConfigVar(ConfigVar_Flags()).\n@since 0.4\n "
	},
	"ConfigFlags_None lua": {
		"prefix": "ImGui.ConfigFlags_None",
		"scope": "lua",
		"body": "ImGui.ConfigFlags_None$0",
		"description": "@type integer\n---\n**Context > Flags > ConfigFlags_None**\n**Context > Flags**\nFor CreateContext and SetConfigVar(ConfigVar_Flags()).\n@since 0.1\n "
	},
	"ConfigVar_DebugBeginReturnValueLoop lua": {
		"prefix": "ImGui.ConfigVar_DebugBeginReturnValueLoop",
		"scope": "lua",
		"body": "ImGui.ConfigVar_DebugBeginReturnValueLoop$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_DebugBeginReturnValueLoop**\nSome calls to Begin()/BeginChild() will return false.\nWill cycle through window depths then repeat. Suggested use: add\n'SetConfigVar(ConfigVar_DebugBeginReturnValueLoop(), GetKeyMods() == Mod_Shift'\nin your main loop then occasionally press SHIFT.\nWindows should be flickering while running.\n@since 0.8.5\n "
	},
	"ConfigVar_DebugBeginReturnValueOnce lua": {
		"prefix": "ImGui.ConfigVar_DebugBeginReturnValueOnce",
		"scope": "lua",
		"body": "ImGui.ConfigVar_DebugBeginReturnValueOnce$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_DebugBeginReturnValueOnce**\nFirst-time calls to Begin()/BeginChild() will return false.\n**Needs to be set at context startup time** if you don't want to miss windows.\n@since 0.8.5\n "
	},
	"ConfigVar_DockingNoSplit lua": {
		"prefix": "ImGui.ConfigVar_DockingNoSplit",
		"scope": "lua",
		"body": "ImGui.ConfigVar_DockingNoSplit$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_DockingNoSplit**\nSimplified docking mode: disable window splitting, so docking is limited to\nmerging multiple windows together into tab-bars.\n@since 0.7\n "
	},
	"ConfigVar_DockingTransparentPayload lua": {
		"prefix": "ImGui.ConfigVar_DockingTransparentPayload",
		"scope": "lua",
		"body": "ImGui.ConfigVar_DockingTransparentPayload$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_DockingTransparentPayload**\nMake window or viewport transparent when docking and only display docking\nboxes on the target viewport.\n@since 0.7\n "
	},
	"ConfigVar_DockingWithShift lua": {
		"prefix": "ImGui.ConfigVar_DockingWithShift",
		"scope": "lua",
		"body": "ImGui.ConfigVar_DockingWithShift$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_DockingWithShift**\nEnable docking with holding Shift key\n(reduce visual noise, allows dropping in wider space\n@since 0.7\n "
	},
	"ConfigVar_DragClickToInputText lua": {
		"prefix": "ImGui.ConfigVar_DragClickToInputText",
		"scope": "lua",
		"body": "ImGui.ConfigVar_DragClickToInputText$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_DragClickToInputText**\nEnable turning Drag* widgets into text input with a simple mouse\nclick-release (without moving). Not desirable on devices without a keyboard.\n@since 0.7\n "
	},
	"ConfigVar_Flags lua": {
		"prefix": "ImGui.ConfigVar_Flags",
		"scope": "lua",
		"body": "ImGui.ConfigVar_Flags$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_Flags**\nConfigFlags_*\n@since 0.7\n "
	},
	"ConfigVar_HoverDelayNormal lua": {
		"prefix": "ImGui.ConfigVar_HoverDelayNormal",
		"scope": "lua",
		"body": "ImGui.ConfigVar_HoverDelayNormal$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_HoverDelayNormal**\nDelay for IsItemHovered(HoveredFlags_DelayNormal).\nUsually used along with ConfigVar_HoverStationaryDelay.\n@since 0.8\n "
	},
	"ConfigVar_HoverDelayShort lua": {
		"prefix": "ImGui.ConfigVar_HoverDelayShort",
		"scope": "lua",
		"body": "ImGui.ConfigVar_HoverDelayShort$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_HoverDelayShort**\nDelay for IsItemHovered(HoveredFlags_DelayShort).\nUsually used along with ConfigVar_HoverStationaryDelay.\n@since 0.8\n "
	},
	"ConfigVar_HoverFlagsForTooltipMouse lua": {
		"prefix": "ImGui.ConfigVar_HoverFlagsForTooltipMouse",
		"scope": "lua",
		"body": "ImGui.ConfigVar_HoverFlagsForTooltipMouse$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_HoverFlagsForTooltipMouse**\nDefault flags when using IsItemHovered(HoveredFlags_ForTooltip) or\nBeginItemTooltip()/SetItemTooltip() while using mouse.\n@since 0.9\n "
	},
	"ConfigVar_HoverFlagsForTooltipNav lua": {
		"prefix": "ImGui.ConfigVar_HoverFlagsForTooltipNav",
		"scope": "lua",
		"body": "ImGui.ConfigVar_HoverFlagsForTooltipNav$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_HoverFlagsForTooltipNav**\nDefault flags when using IsItemHovered(HoveredFlags_ForTooltip) or\nBeginItemTooltip()/SetItemTooltip() while using keyboard/gamepad.\n@since 0.9\n "
	},
	"ConfigVar_HoverStationaryDelay lua": {
		"prefix": "ImGui.ConfigVar_HoverStationaryDelay",
		"scope": "lua",
		"body": "ImGui.ConfigVar_HoverStationaryDelay$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_HoverStationaryDelay**\nDelay for IsItemHovered(HoveredFlags_Stationary).\nTime required to consider mouse stationary.\n@since 0.9\n "
	},
	"ConfigVar_InputTextCursorBlink lua": {
		"prefix": "ImGui.ConfigVar_InputTextCursorBlink",
		"scope": "lua",
		"body": "ImGui.ConfigVar_InputTextCursorBlink$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_InputTextCursorBlink**\nEnable blinking cursor (optional as some users consider it to be distracting).\n@since 0.7\n "
	},
	"ConfigVar_InputTextEnterKeepActive lua": {
		"prefix": "ImGui.ConfigVar_InputTextEnterKeepActive",
		"scope": "lua",
		"body": "ImGui.ConfigVar_InputTextEnterKeepActive$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_InputTextEnterKeepActive**\nPressing Enter will keep item active and select contents (single-line only).\n@since 0.8\n "
	},
	"ConfigVar_InputTrickleEventQueue lua": {
		"prefix": "ImGui.ConfigVar_InputTrickleEventQueue",
		"scope": "lua",
		"body": "ImGui.ConfigVar_InputTrickleEventQueue$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_InputTrickleEventQueue**\nEnable input queue trickling: some types of events submitted during the same\nframe (e.g. button down + up) will be spread over multiple frames, improving\ninteractions with low framerates.\nWarning: when this option is disabled mouse clicks and key presses faster\nthan a frame will be lost.\nThis affects accessiblity features and some input devices.\n@since 0.7\n "
	},
	"ConfigVar_KeyRepeatDelay lua": {
		"prefix": "ImGui.ConfigVar_KeyRepeatDelay",
		"scope": "lua",
		"body": "ImGui.ConfigVar_KeyRepeatDelay$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_KeyRepeatDelay**\nWhen holding a key/button, time before it starts repeating, in seconds\n(for buttons in Repeat mode, etc.).\n@since 0.7\n "
	},
	"ConfigVar_KeyRepeatRate lua": {
		"prefix": "ImGui.ConfigVar_KeyRepeatRate",
		"scope": "lua",
		"body": "ImGui.ConfigVar_KeyRepeatRate$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_KeyRepeatRate**\nWhen holding a key/button, rate at which it repeats, in seconds.\n@since 0.7\n "
	},
	"ConfigVar_MacOSXBehaviors lua": {
		"prefix": "ImGui.ConfigVar_MacOSXBehaviors",
		"scope": "lua",
		"body": "ImGui.ConfigVar_MacOSXBehaviors$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_MacOSXBehaviors**\nEnabled by default on macOS. Swap Cmd<>Ctrl keys, OS X style text editing\ncursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead\nof Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End,\nDouble click selects by word instead of selecting whole text, Multi-selection\nin lists uses Cmd/Super instead of Ctrl.\n@since 0.7\n "
	},
	"ConfigVar_MouseDoubleClickMaxDist lua": {
		"prefix": "ImGui.ConfigVar_MouseDoubleClickMaxDist",
		"scope": "lua",
		"body": "ImGui.ConfigVar_MouseDoubleClickMaxDist$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_MouseDoubleClickMaxDist**\nDistance threshold to stay in to validate a double-click, in pixels.\n@since 0.7\n "
	},
	"ConfigVar_MouseDoubleClickTime lua": {
		"prefix": "ImGui.ConfigVar_MouseDoubleClickTime",
		"scope": "lua",
		"body": "ImGui.ConfigVar_MouseDoubleClickTime$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_MouseDoubleClickTime**\nTime for a double-click, in seconds.\n@since 0.7\n "
	},
	"ConfigVar_MouseDragThreshold lua": {
		"prefix": "ImGui.ConfigVar_MouseDragThreshold",
		"scope": "lua",
		"body": "ImGui.ConfigVar_MouseDragThreshold$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_MouseDragThreshold**\nDistance threshold before considering we are dragging.\n@since 0.7\n "
	},
	"ConfigVar_ViewportsNoDecoration lua": {
		"prefix": "ImGui.ConfigVar_ViewportsNoDecoration",
		"scope": "lua",
		"body": "ImGui.ConfigVar_ViewportsNoDecoration$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_ViewportsNoDecoration**\nDisable default OS window decoration. Enabling decoration can create\nsubsequent issues at OS levels (e.g. minimum window size).\n@since 0.7\n "
	},
	"ConfigVar_WindowsMoveFromTitleBarOnly lua": {
		"prefix": "ImGui.ConfigVar_WindowsMoveFromTitleBarOnly",
		"scope": "lua",
		"body": "ImGui.ConfigVar_WindowsMoveFromTitleBarOnly$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_WindowsMoveFromTitleBarOnly**\nEnable allowing to move windows only when clicking on their title bar.\nDoes not apply to windows without a title bar.\n@since 0.7\n "
	},
	"ConfigVar_WindowsResizeFromEdges lua": {
		"prefix": "ImGui.ConfigVar_WindowsResizeFromEdges",
		"scope": "lua",
		"body": "ImGui.ConfigVar_WindowsResizeFromEdges$0",
		"description": "@type integer\n---\n**Context > Options > ConfigVar_WindowsResizeFromEdges**\nEnable resizing of windows from their edges and from the lower-left corner.\n@since 0.7\n "
	},
	"CountActionShortcuts lua": {
		"prefix": "r.CountActionShortcuts",
		"scope": "lua",
		"body": "r.CountActionShortcuts(${1:section}, ${2:cmdID})$0",
		"description": "Returns the number of shortcuts that exist for the given command ID.\nsee GetActionShortcutDesc, DeleteActionShortcut, DoActionShortcutDialog."
	},
	"CountAutomationItems lua": {
		"prefix": "r.CountAutomationItems",
		"scope": "lua",
		"body": "r.CountAutomationItems(${1:env})$0",
		"description": "Returns the number of automation items on this envelope. See GetSetAutomationItemInfo"
	},
	"CountEnvelopePoints lua": {
		"prefix": "r.CountEnvelopePoints",
		"scope": "lua",
		"body": "r.CountEnvelopePoints(${1:envelope})$0",
		"description": "Returns the number of points in the envelope. See CountEnvelopePointsEx."
	},
	"CountEnvelopePointsEx lua": {
		"prefix": "r.CountEnvelopePointsEx",
		"scope": "lua",
		"body": "r.CountEnvelopePointsEx(${1:envelope}, ${2:autoitem_idx})$0",
		"description": "Returns the number of points in the envelope.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx."
	},
	"CountMediaItems lua": {
		"prefix": "r.CountMediaItems",
		"scope": "lua",
		"body": "r.CountMediaItems(0)$0",
		"description": "count the number of items in the project (proj=0 for active project)"
	},
	"CountProjectMarkers lua": {
		"prefix": "r.CountProjectMarkers",
		"scope": "lua",
		"body": "r.CountProjectMarkers(0)$0",
		"description": "num_markersOut and num_regionsOut may be NULL."
	},
	"CountSelectedMediaItems lua": {
		"prefix": "r.CountSelectedMediaItems",
		"scope": "lua",
		"body": "r.CountSelectedMediaItems(0)$0",
		"description": "Discouraged, because GetSelectedMediaItem can be inefficient if media items are added, rearranged, or deleted in between calls. Instead see CountMediaItems, GetMediaItem, IsMediaItemSelected."
	},
	"CountSelectedTracks lua": {
		"prefix": "r.CountSelectedTracks",
		"scope": "lua",
		"body": "r.CountSelectedTracks(0)$0",
		"description": "Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2."
	},
	"CountSelectedTracks2 lua": {
		"prefix": "r.CountSelectedTracks2",
		"scope": "lua",
		"body": "r.CountSelectedTracks2(0, ${2:wantmaster})$0",
		"description": "Count the number of selected tracks in the project (proj=0 for active project)."
	},
	"CountTCPFXParms lua": {
		"prefix": "r.CountTCPFXParms",
		"scope": "lua",
		"body": "r.CountTCPFXParms(0, ${2:track})$0",
		"description": "Count the number of FX parameter knobs displayed on the track control panel."
	},
	"CountTakeEnvelopes lua": {
		"prefix": "r.CountTakeEnvelopes",
		"scope": "lua",
		"body": "r.CountTakeEnvelopes(${1:take})$0",
		"description": "See GetTakeEnvelope"
	},
	"CountTakes lua": {
		"prefix": "r.CountTakes",
		"scope": "lua",
		"body": "r.CountTakes(${1:item})$0",
		"description": "count the number of takes in the item"
	},
	"CountTempoTimeSigMarkers lua": {
		"prefix": "r.CountTempoTimeSigMarkers",
		"scope": "lua",
		"body": "r.CountTempoTimeSigMarkers(0)$0",
		"description": "Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker."
	},
	"CountTrackEnvelopes lua": {
		"prefix": "r.CountTrackEnvelopes",
		"scope": "lua",
		"body": "r.CountTrackEnvelopes(${1:track})$0",
		"description": "see GetTrackEnvelope"
	},
	"CountTrackMediaItems lua": {
		"prefix": "r.CountTrackMediaItems",
		"scope": "lua",
		"body": "r.CountTrackMediaItems(${1:track})$0",
		"description": "count the number of items in the track"
	},
	"CountTracks lua": {
		"prefix": "r.CountTracks",
		"scope": "lua",
		"body": "r.CountTracks(0)$0",
		"description": "count the number of tracks in the project (proj=0 for active project)"
	},
	"CreateNewMIDIItemInProj lua": {
		"prefix": "r.CreateNewMIDIItemInProj",
		"scope": "lua",
		"body": "r.CreateNewMIDIItemInProj(${1:track}, ${2:starttime}, ${3:endtime}, ${4:qnIn})$0",
		"description": "Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set."
	},
	"CreateTakeAudioAccessor lua": {
		"prefix": "r.CreateTakeAudioAccessor",
		"scope": "lua",
		"body": "r.CreateTakeAudioAccessor(${1:take})$0",
		"description": "Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"CreateTrackAudioAccessor lua": {
		"prefix": "r.CreateTrackAudioAccessor",
		"scope": "lua",
		"body": "r.CreateTrackAudioAccessor(${1:track})$0",
		"description": "Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"CreateTrackSend lua": {
		"prefix": "r.CreateTrackSend",
		"scope": "lua",
		"body": "r.CreateTrackSend(${1:tr}, ${2:desttrIn})$0",
		"description": "Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value."
	},
	"CrossfadeEditor_OnCommand lua": {
		"prefix": "r.CrossfadeEditor_OnCommand",
		"scope": "lua",
		"body": "r.CrossfadeEditor_OnCommand(${1:command})$0",
		"description": "Run a command from the Crossfade Editor section of the actions list."
	},
	"CrossfadeEditor_Show lua": {
		"prefix": "r.CrossfadeEditor_Show",
		"scope": "lua",
		"body": "r.CrossfadeEditor_Show(${1:show})$0",
		"description": "Show or hide the Crossfade Editor window"
	},
	"DB2SLIDER lua": {
		"prefix": "r.DB2SLIDER",
		"scope": "lua",
		"body": "r.DB2SLIDER(${1:x})$0",
		"description": ""
	},
	"DeleteActionShortcut lua": {
		"prefix": "r.DeleteActionShortcut",
		"scope": "lua",
		"body": "r.DeleteActionShortcut(${1:section}, ${2:cmdID}, ${3:shortcutidx})$0",
		"description": "Delete the specific shortcut for the given command ID.\nSee CountActionShortcuts, GetActionShortcutDesc, DoActionShortcutDialog."
	},
	"DeleteEnvelopePointEx lua": {
		"prefix": "r.DeleteEnvelopePointEx",
		"scope": "lua",
		"body": "r.DeleteEnvelopePointEx(${1:envelope}, ${2:autoitem_idx}, ${3:ptidx})$0",
		"description": "Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx."
	},
	"DeleteEnvelopePointRange lua": {
		"prefix": "r.DeleteEnvelopePointRange",
		"scope": "lua",
		"body": "r.DeleteEnvelopePointRange(${1:envelope}, ${2:time_start}, ${3:time_end})$0",
		"description": "Delete a range of envelope points. See DeleteEnvelopePointRangeEx, DeleteEnvelopePointEx."
	},
	"DeleteEnvelopePointRangeEx lua": {
		"prefix": "r.DeleteEnvelopePointRangeEx",
		"scope": "lua",
		"body": "r.DeleteEnvelopePointRangeEx(${1:envelope}, ${2:autoitem_idx}, ${3:time_start}, ${4:time_end})$0",
		"description": "Delete a range of envelope points. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc."
	},
	"DeleteExtState lua": {
		"prefix": "r.DeleteExtState",
		"scope": "lua",
		"body": "r.DeleteExtState(${1:section}, ${2:key}, ${3:persist})$0",
		"description": "Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See SetExtState, GetExtState, HasExtState."
	},
	"DeleteProjectMarker lua": {
		"prefix": "r.DeleteProjectMarker",
		"scope": "lua",
		"body": "r.DeleteProjectMarker(0, ${2:markrgnindexnumber}, ${3:isrgn})$0",
		"description": "Delete a marker.  proj==NULL for the active project."
	},
	"DeleteProjectMarkerByIndex lua": {
		"prefix": "r.DeleteProjectMarkerByIndex",
		"scope": "lua",
		"body": "r.DeleteProjectMarkerByIndex(0, ${2:markrgnidx})$0",
		"description": "Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4)."
	},
	"DeleteTakeMarker lua": {
		"prefix": "r.DeleteTakeMarker",
		"scope": "lua",
		"body": "r.DeleteTakeMarker(${1:take}, ${2:idx})$0",
		"description": "Delete a take marker. Note that idx will change for all following take markers. See GetNumTakeMarkers, GetTakeMarker, SetTakeMarker"
	},
	"DeleteTakeStretchMarkers lua": {
		"prefix": "r.DeleteTakeStretchMarkers",
		"scope": "lua",
		"body": "r.DeleteTakeStretchMarkers(${1:take}, ${2:idx}, ${3:countIn})$0",
		"description": "Deletes one or more stretch markers. Returns number of stretch markers deleted."
	},
	"DeleteTempoTimeSigMarker lua": {
		"prefix": "r.DeleteTempoTimeSigMarker",
		"scope": "lua",
		"body": "r.DeleteTempoTimeSigMarker(0, ${2:markerindex})$0",
		"description": "Delete a tempo/time signature marker."
	},
	"DeleteTrack lua": {
		"prefix": "r.DeleteTrack",
		"scope": "lua",
		"body": "r.DeleteTrack(${1:tr})$0",
		"description": "deletes a track"
	},
	"DeleteTrackMediaItem lua": {
		"prefix": "r.DeleteTrackMediaItem",
		"scope": "lua",
		"body": "r.DeleteTrackMediaItem(${1:tr}, ${2:it})$0",
		"description": ""
	},
	"DestroyAudioAccessor lua": {
		"prefix": "r.DestroyAudioAccessor",
		"scope": "lua",
		"body": "r.DestroyAudioAccessor(${1:accessor})$0",
		"description": "Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"Dir_Down lua": {
		"prefix": "ImGui.Dir_Down",
		"scope": "lua",
		"body": "ImGui.Dir_Down$0",
		"description": "@type integer\n---\nReaImGui LuaCATS definitions\nGenerated for version 0.9.3.3 - API version 0.9.3\n@meta  imgui\n@class ImGui\n**Button > Cardinal Directions > Dir_Down**\n**Button > Cardinal Directions**\nFor ArrowButton.\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state.\n@since 0.1\n "
	},
	"Dir_Left lua": {
		"prefix": "ImGui.Dir_Left",
		"scope": "lua",
		"body": "ImGui.Dir_Left$0",
		"description": "@type integer\n---\n**Button > Cardinal Directions > Dir_Left**\n**Button > Cardinal Directions**\nFor ArrowButton.\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state.\n@since 0.1\n "
	},
	"Dir_None lua": {
		"prefix": "ImGui.Dir_None",
		"scope": "lua",
		"body": "ImGui.Dir_None$0",
		"description": "@type integer\n---\n**Button > Cardinal Directions > Dir_None**\n**Button > Cardinal Directions**\nFor ArrowButton.\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state.\n@since 0.1\n "
	},
	"Dir_Right lua": {
		"prefix": "ImGui.Dir_Right",
		"scope": "lua",
		"body": "ImGui.Dir_Right$0",
		"description": "@type integer\n---\n**Button > Cardinal Directions > Dir_Right**\n**Button > Cardinal Directions**\nFor ArrowButton.\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state.\n@since 0.1\n "
	},
	"Dir_Up lua": {
		"prefix": "ImGui.Dir_Up",
		"scope": "lua",
		"body": "ImGui.Dir_Up$0",
		"description": "@type integer\n---\n**Button > Cardinal Directions > Dir_Up**\n**Button > Cardinal Directions**\nFor ArrowButton.\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state.\n@since 0.1\n "
	},
	"DoActionShortcutDialog lua": {
		"prefix": "r.DoActionShortcutDialog",
		"scope": "lua",
		"body": "r.DoActionShortcutDialog(${1:hwnd}, ${2:section}, ${3:cmdID}, ${4:shortcutidx})$0",
		"description": "Open the action shortcut dialog to edit or add a shortcut for the given command ID. If (shortcutidx >= 0 && shortcutidx < CountActionShortcuts()), that specific shortcut will be replaced, otherwise a new shortcut will be added.\nSee CountActionShortcuts, GetActionShortcutDesc, DeleteActionShortcut."
	},
	"DockGetPosition lua": {
		"prefix": "r.DockGetPosition",
		"scope": "lua",
		"body": "r.DockGetPosition(${1:whichDock})$0",
		"description": "-1=not found, 0=bottom, 1=left, 2=top, 3=right, 4=floating"
	},
	"DockIsChildOfDock lua": {
		"prefix": "r.DockIsChildOfDock",
		"scope": "lua",
		"body": "r.DockIsChildOfDock(${1:hwnd})$0",
		"description": "returns dock index that contains hwnd, or -1"
	},
	"DockWindowActivate lua": {
		"prefix": "r.DockWindowActivate",
		"scope": "lua",
		"body": "r.DockWindowActivate(${1:hwnd})$0",
		"description": ""
	},
	"DockWindowAdd lua": {
		"prefix": "r.DockWindowAdd",
		"scope": "lua",
		"body": "r.DockWindowAdd(${1:hwnd}, ${2:name}, ${3:pos}, ${4:allowShow})$0",
		"description": ""
	},
	"DockWindowAddEx lua": {
		"prefix": "r.DockWindowAddEx",
		"scope": "lua",
		"body": "r.DockWindowAddEx(${1:hwnd}, ${2:name}, ${3:identstr}, ${4:allowShow})$0",
		"description": ""
	},
	"DockWindowRefresh lua": {
		"prefix": "r.DockWindowRefresh",
		"scope": "lua",
		"body": "r.DockWindowRefresh()$0",
		"description": ""
	},
	"DockWindowRefreshForHWND lua": {
		"prefix": "r.DockWindowRefreshForHWND",
		"scope": "lua",
		"body": "r.DockWindowRefreshForHWND(${1:hwnd})$0",
		"description": ""
	},
	"DockWindowRemove lua": {
		"prefix": "r.DockWindowRemove",
		"scope": "lua",
		"body": "r.DockWindowRemove(${1:hwnd})$0",
		"description": ""
	},
	"Dock_UpdateDockID lua": {
		"prefix": "r.Dock_UpdateDockID",
		"scope": "lua",
		"body": "r.Dock_UpdateDockID(${1:ident_str}, ${2:whichDock})$0",
		"description": "updates preference for docker window ident_str to be in dock whichDock on next open"
	},
	"DragDropFlags_AcceptBeforeDelivery lua": {
		"prefix": "ImGui.DragDropFlags_AcceptBeforeDelivery",
		"scope": "lua",
		"body": "ImGui.DragDropFlags_AcceptBeforeDelivery$0",
		"description": "@type integer\n---\n**Drag & Drop > Flags > Payload > DragDropFlags_AcceptBeforeDelivery**\nAcceptDragDropPayload will returns true even before the mouse button is\nreleased. You can then check GetDragDropPayload/is_delivery to test if the\npayload needs to be delivered.\n**Drag & Drop > Flags > Payload**\nFor AcceptDragDropPayload\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target.\n@since 0.1\n "
	},
	"DragDropFlags_AcceptNoDrawDefaultRect lua": {
		"prefix": "ImGui.DragDropFlags_AcceptNoDrawDefaultRect",
		"scope": "lua",
		"body": "ImGui.DragDropFlags_AcceptNoDrawDefaultRect$0",
		"description": "@type integer\n---\n**Drag & Drop > Flags > Payload > DragDropFlags_AcceptNoDrawDefaultRect**\nDo not draw the default highlight rectangle when hovering over target.\n**Drag & Drop > Flags > Payload**\nFor AcceptDragDropPayload\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target.\n@since 0.1\n "
	},
	"DragDropFlags_AcceptNoPreviewTooltip lua": {
		"prefix": "ImGui.DragDropFlags_AcceptNoPreviewTooltip",
		"scope": "lua",
		"body": "ImGui.DragDropFlags_AcceptNoPreviewTooltip$0",
		"description": "@type integer\n---\n**Drag & Drop > Flags > Payload > DragDropFlags_AcceptNoPreviewTooltip**\nRequest hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.\n**Drag & Drop > Flags > Payload**\nFor AcceptDragDropPayload\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target.\n@since 0.1\n "
	},
	"DragDropFlags_AcceptPeekOnly lua": {
		"prefix": "ImGui.DragDropFlags_AcceptPeekOnly",
		"scope": "lua",
		"body": "ImGui.DragDropFlags_AcceptPeekOnly$0",
		"description": "@type integer\n---\n**Drag & Drop > Flags > Payload > DragDropFlags_AcceptPeekOnly**\nFor peeking ahead and inspecting the payload before delivery.\nEquivalent to DragDropFlags_AcceptBeforeDelivery |\nDragDropFlags_AcceptNoDrawDefaultRect.\n**Drag & Drop > Flags > Payload**\nFor AcceptDragDropPayload\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target.\n@since 0.1\n "
	},
	"DragDropFlags_None lua": {
		"prefix": "ImGui.DragDropFlags_None",
		"scope": "lua",
		"body": "ImGui.DragDropFlags_None$0",
		"description": "@type integer\n---\n**Drag & Drop > Flags > DragDropFlags_None**\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target.\n@since 0.1\n "
	},
	"DragDropFlags_PayloadAutoExpire lua": {
		"prefix": "ImGui.DragDropFlags_PayloadAutoExpire",
		"scope": "lua",
		"body": "ImGui.DragDropFlags_PayloadAutoExpire$0",
		"description": "@type integer\n---\n**Drag & Drop > Flags > Source > DragDropFlags_PayloadAutoExpire**\nAutomatically expire the payload if the source cease to be submitted\n(otherwise payloads are persisting while being dragged).\n**Drag & Drop > Flags > Source**\nFor BeginDragDropSource\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target.\n@since 0.9.2\n "
	},
	"DragDropFlags_SourceAllowNullID lua": {
		"prefix": "ImGui.DragDropFlags_SourceAllowNullID",
		"scope": "lua",
		"body": "ImGui.DragDropFlags_SourceAllowNullID$0",
		"description": "@type integer\n---\n**Drag & Drop > Flags > Source > DragDropFlags_SourceAllowNullID**\nAllow items such as Text, Image that have no unique identifier to be used as\ndrag source, by manufacturing a temporary identifier based on their\nwindow-relative position. This is extremely unusual within the dear imgui\necosystem and so we made it explicit.\n**Drag & Drop > Flags > Source**\nFor BeginDragDropSource\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target.\n@since 0.1\n "
	},
	"DragDropFlags_SourceExtern lua": {
		"prefix": "ImGui.DragDropFlags_SourceExtern",
		"scope": "lua",
		"body": "ImGui.DragDropFlags_SourceExtern$0",
		"description": "@type integer\n---\n**Drag & Drop > Flags > Source > DragDropFlags_SourceExtern**\nExternal source (from outside of dear imgui), won't attempt to read current\nitem/window info. Will always return true.\nOnly one Extern source can be active simultaneously.\n**Drag & Drop > Flags > Source**\nFor BeginDragDropSource\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target.\n@since 0.1\n "
	},
	"DragDropFlags_SourceNoDisableHover lua": {
		"prefix": "ImGui.DragDropFlags_SourceNoDisableHover",
		"scope": "lua",
		"body": "ImGui.DragDropFlags_SourceNoDisableHover$0",
		"description": "@type integer\n---\n**Drag & Drop > Flags > Source > DragDropFlags_SourceNoDisableHover**\nBy default, when dragging we clear data so that IsItemHovered will return\nfalse, to avoid subsequent user code submitting tooltips. This flag disables\nthis behavior so you can still call IsItemHovered on the source item.\n**Drag & Drop > Flags > Source**\nFor BeginDragDropSource\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target.\n@since 0.1\n "
	},
	"DragDropFlags_SourceNoHoldToOpenOthers lua": {
		"prefix": "ImGui.DragDropFlags_SourceNoHoldToOpenOthers",
		"scope": "lua",
		"body": "ImGui.DragDropFlags_SourceNoHoldToOpenOthers$0",
		"description": "@type integer\n---\n**Drag & Drop > Flags > Source > DragDropFlags_SourceNoHoldToOpenOthers**\nDisable the behavior that allows to open tree nodes and collapsing header by\nholding over them while dragging a source item.\n**Drag & Drop > Flags > Source**\nFor BeginDragDropSource\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target.\n@since 0.1\n "
	},
	"DragDropFlags_SourceNoPreviewTooltip lua": {
		"prefix": "ImGui.DragDropFlags_SourceNoPreviewTooltip",
		"scope": "lua",
		"body": "ImGui.DragDropFlags_SourceNoPreviewTooltip$0",
		"description": "@type integer\n---\n**Drag & Drop > Flags > Source > DragDropFlags_SourceNoPreviewTooltip**\nBy default, a successful call to BeginDragDropSource opens a tooltip so you\ncan display a preview or description of the source contents.\nThis flag disables this behavior.\n**Drag & Drop > Flags > Source**\nFor BeginDragDropSource\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target.\n@since 0.1\n "
	},
	"DrawFlags_Closed lua": {
		"prefix": "ImGui.DrawFlags_Closed",
		"scope": "lua",
		"body": "ImGui.DrawFlags_Closed$0",
		"description": "@type integer\n---\n**Draw List > DrawFlags_Closed**\nDrawList_PathStroke, DrawList_AddPolyline: specify that shape should be\nclosed (Important: this is always == 1 for legacy reason).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos.\n@since 0.2\n "
	},
	"DrawFlags_None lua": {
		"prefix": "ImGui.DrawFlags_None",
		"scope": "lua",
		"body": "ImGui.DrawFlags_None$0",
		"description": "@type integer\n---\n**Draw List > DrawFlags_None**\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos.\n@since 0.2\n "
	},
	"DrawFlags_RoundCornersAll lua": {
		"prefix": "ImGui.DrawFlags_RoundCornersAll",
		"scope": "lua",
		"body": "ImGui.DrawFlags_RoundCornersAll$0",
		"description": "@type integer\n---\n**Draw List > DrawFlags_RoundCornersAll**\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos.\n@since 0.2\n "
	},
	"DrawFlags_RoundCornersBottom lua": {
		"prefix": "ImGui.DrawFlags_RoundCornersBottom",
		"scope": "lua",
		"body": "ImGui.DrawFlags_RoundCornersBottom$0",
		"description": "@type integer\n---\n**Draw List > DrawFlags_RoundCornersBottom**\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos.\n@since 0.2\n "
	},
	"DrawFlags_RoundCornersBottomLeft lua": {
		"prefix": "ImGui.DrawFlags_RoundCornersBottomLeft",
		"scope": "lua",
		"body": "ImGui.DrawFlags_RoundCornersBottomLeft$0",
		"description": "@type integer\n---\n**Draw List > DrawFlags_RoundCornersBottomLeft**\nDrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\nbottom-left corner only (when rounding > 0.0, we default to all corners).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos.\n@since 0.2\n "
	},
	"DrawFlags_RoundCornersBottomRight lua": {
		"prefix": "ImGui.DrawFlags_RoundCornersBottomRight",
		"scope": "lua",
		"body": "ImGui.DrawFlags_RoundCornersBottomRight$0",
		"description": "@type integer\n---\n**Draw List > DrawFlags_RoundCornersBottomRight**\nDrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\nbottom-right corner only (when rounding > 0.0, we default to all corners).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos.\n@since 0.2\n "
	},
	"DrawFlags_RoundCornersLeft lua": {
		"prefix": "ImGui.DrawFlags_RoundCornersLeft",
		"scope": "lua",
		"body": "ImGui.DrawFlags_RoundCornersLeft$0",
		"description": "@type integer\n---\n**Draw List > DrawFlags_RoundCornersLeft**\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos.\n@since 0.2\n "
	},
	"DrawFlags_RoundCornersNone lua": {
		"prefix": "ImGui.DrawFlags_RoundCornersNone",
		"scope": "lua",
		"body": "ImGui.DrawFlags_RoundCornersNone$0",
		"description": "@type integer\n---\n**Draw List > DrawFlags_RoundCornersNone**\nDrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: disable rounding\non all corners (when rounding > 0.0). This is NOT zero, NOT an implicit flag!.\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos.\n@since 0.2\n "
	},
	"DrawFlags_RoundCornersRight lua": {
		"prefix": "ImGui.DrawFlags_RoundCornersRight",
		"scope": "lua",
		"body": "ImGui.DrawFlags_RoundCornersRight$0",
		"description": "@type integer\n---\n**Draw List > DrawFlags_RoundCornersRight**\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos.\n@since 0.2\n "
	},
	"DrawFlags_RoundCornersTop lua": {
		"prefix": "ImGui.DrawFlags_RoundCornersTop",
		"scope": "lua",
		"body": "ImGui.DrawFlags_RoundCornersTop$0",
		"description": "@type integer\n---\n**Draw List > DrawFlags_RoundCornersTop**\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos.\n@since 0.2\n "
	},
	"DrawFlags_RoundCornersTopLeft lua": {
		"prefix": "ImGui.DrawFlags_RoundCornersTopLeft",
		"scope": "lua",
		"body": "ImGui.DrawFlags_RoundCornersTopLeft$0",
		"description": "@type integer\n---\n**Draw List > DrawFlags_RoundCornersTopLeft**\nDrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\ntop-left corner only (when rounding > 0.0, we default to all corners).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos.\n@since 0.2\n "
	},
	"DrawFlags_RoundCornersTopRight lua": {
		"prefix": "ImGui.DrawFlags_RoundCornersTopRight",
		"scope": "lua",
		"body": "ImGui.DrawFlags_RoundCornersTopRight$0",
		"description": "@type integer\n---\n**Draw List > DrawFlags_RoundCornersTopRight**\nDrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\ntop-right corner only (when rounding > 0.0, we default to all corners).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos.\n@since 0.2\n "
	},
	"EditTempoTimeSigMarker lua": {
		"prefix": "r.EditTempoTimeSigMarker",
		"scope": "lua",
		"body": "r.EditTempoTimeSigMarker(0, ${2:markerindex})$0",
		"description": "Open the tempo/time signature marker editor dialog."
	},
	"EnsureNotCompletelyOffscreen lua": {
		"prefix": "r.EnsureNotCompletelyOffscreen",
		"scope": "lua",
		"body": "r.EnsureNotCompletelyOffscreen(${1:r_left}, ${2:r_top}, ${3:r_right}, ${4:r_bot})$0",
		"description": "call with a saved window rect for your window and it'll correct any positioning info."
	},
	"EnumInstalledFX lua": {
		"prefix": "r.EnumInstalledFX",
		"scope": "lua",
		"body": "r.EnumInstalledFX(${1:index})$0",
		"description": "Enumerates installed FX. Returns true if successful, sets nameOut and identOut to name and ident of FX at index."
	},
	"EnumPitchShiftModes lua": {
		"prefix": "r.EnumPitchShiftModes",
		"scope": "lua",
		"body": "r.EnumPitchShiftModes(${1:mode})$0",
		"description": "Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported"
	},
	"EnumPitchShiftSubModes lua": {
		"prefix": "r.EnumPitchShiftSubModes",
		"scope": "lua",
		"body": "r.EnumPitchShiftSubModes(${1:mode}, ${2:submode})$0",
		"description": "Returns submode name, or NULL"
	},
	"EnumProjExtState lua": {
		"prefix": "r.EnumProjExtState",
		"scope": "lua",
		"body": "r.EnumProjExtState(0, ${2:extname}, ${3:idx})$0",
		"description": "Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState."
	},
	"EnumProjectMarkers lua": {
		"prefix": "r.EnumProjectMarkers",
		"scope": "lua",
		"body": "r.EnumProjectMarkers(${1:idx})$0",
		"description": ""
	},
	"EnumProjectMarkers2 lua": {
		"prefix": "r.EnumProjectMarkers2",
		"scope": "lua",
		"body": "r.EnumProjectMarkers2(0, ${2:idx})$0",
		"description": ""
	},
	"EnumProjectMarkers3 lua": {
		"prefix": "r.EnumProjectMarkers3",
		"scope": "lua",
		"body": "r.EnumProjectMarkers3(0, ${2:idx})$0",
		"description": ""
	},
	"EnumProjects lua": {
		"prefix": "r.EnumProjects",
		"scope": "lua",
		"body": "r.EnumProjects(${1:idx})$0",
		"description": "idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any."
	},
	"EnumRegionRenderMatrix lua": {
		"prefix": "r.EnumRegionRenderMatrix",
		"scope": "lua",
		"body": "r.EnumRegionRenderMatrix(0, ${2:regionindex}, ${3:rendertrack})$0",
		"description": "Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region."
	},
	"EnumTrackMIDIProgramNames lua": {
		"prefix": "r.EnumTrackMIDIProgramNames",
		"scope": "lua",
		"body": "r.EnumTrackMIDIProgramNames(${1:track}, ${2:programNumber}, ${3:programName})$0",
		"description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated"
	},
	"EnumTrackMIDIProgramNamesEx lua": {
		"prefix": "r.EnumTrackMIDIProgramNamesEx",
		"scope": "lua",
		"body": "r.EnumTrackMIDIProgramNamesEx(0, ${2:track}, ${3:programNumber}, ${4:programName})$0",
		"description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated"
	},
	"EnumerateFiles lua": {
		"prefix": "r.EnumerateFiles",
		"scope": "lua",
		"body": "r.EnumerateFiles(${1:path}, ${2:fileindex})$0",
		"description": "List the files in the 'path' directory. Returns NULL/nil when all files have been listed. Use fileindex = -1 to force re-read of directory (invalidate cache). See EnumerateSubdirectories"
	},
	"EnumerateSubdirectories lua": {
		"prefix": "r.EnumerateSubdirectories",
		"scope": "lua",
		"body": "r.EnumerateSubdirectories(${1:path}, ${2:subdirindex})$0",
		"description": "List the subdirectories in the 'path' directory. Use subdirindex = -1 to force re-read of directory (invalidate cache). Returns NULL/nil when all subdirectories have been listed. See EnumerateFiles"
	},
	"Envelope_Evaluate lua": {
		"prefix": "r.Envelope_Evaluate",
		"scope": "lua",
		"body": "r.Envelope_Evaluate(${1:envelope}, ${2:time}, ${3:samplerate}, ${4:samplesRequested})$0",
		"description": "Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the second derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode."
	},
	"Envelope_FormatValue lua": {
		"prefix": "r.Envelope_FormatValue",
		"scope": "lua",
		"body": "r.Envelope_FormatValue(${1:env}, ${2:value})$0",
		"description": "Formats the value of an envelope to a user-readable form"
	},
	"Envelope_GetParentTake lua": {
		"prefix": "r.Envelope_GetParentTake",
		"scope": "lua",
		"body": "rv, index, index2 = r.Envelope_GetParentTake(${1:env})$0",
		"description": "If take envelope, gets the take from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1."
	},
	"Envelope_GetParentTrack lua": {
		"prefix": "r.Envelope_GetParentTrack",
		"scope": "lua",
		"body": "rv, index, index2 = r.Envelope_GetParentTrack(${1:env})$0",
		"description": "If track envelope, gets the track from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1."
	},
	"Envelope_SortPoints lua": {
		"prefix": "r.Envelope_SortPoints",
		"scope": "lua",
		"body": "r.Envelope_SortPoints(${1:envelope})$0",
		"description": "Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint."
	},
	"Envelope_SortPointsEx lua": {
		"prefix": "r.Envelope_SortPointsEx",
		"scope": "lua",
		"body": "r.Envelope_SortPointsEx(${1:envelope}, ${2:autoitem_idx})$0",
		"description": "Sort envelope points by time. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint."
	},
	"ExecProcess lua": {
		"prefix": "r.ExecProcess",
		"scope": "lua",
		"body": "r.ExecProcess(${1:cmdline}, ${2:timeoutmsec})$0",
		"description": "Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize"
	},
	"FNG_AddMidiNote lua": {
		"prefix": "r.FNG_AddMidiNote",
		"scope": "lua",
		"body": "r.FNG_AddMidiNote(${1:midiTake})$0",
		"description": "[FNG] Add MIDI note to MIDI take"
	},
	"FNG_AllocMidiTake lua": {
		"prefix": "r.FNG_AllocMidiTake",
		"scope": "lua",
		"body": "r.FNG_AllocMidiTake(${1:take})$0",
		"description": "[FNG] Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take"
	},
	"FNG_CountMidiNotes lua": {
		"prefix": "r.FNG_CountMidiNotes",
		"scope": "lua",
		"body": "r.FNG_CountMidiNotes(${1:midiTake})$0",
		"description": "[FNG] Count of how many MIDI notes are in the MIDI take"
	},
	"FNG_FreeMidiTake lua": {
		"prefix": "r.FNG_FreeMidiTake",
		"scope": "lua",
		"body": "r.FNG_FreeMidiTake(${1:midiTake})$0",
		"description": "[FNG] Commit changes to MIDI take and free allocated memory"
	},
	"FNG_GetMidiNote lua": {
		"prefix": "r.FNG_GetMidiNote",
		"scope": "lua",
		"body": "r.FNG_GetMidiNote(${1:midiTake}, ${2:index})$0",
		"description": "[FNG] Get a MIDI note from a MIDI take at specified index"
	},
	"FNG_GetMidiNoteIntProperty lua": {
		"prefix": "r.FNG_GetMidiNoteIntProperty",
		"scope": "lua",
		"body": "r.FNG_GetMidiNoteIntProperty(${1:midiNote}, ${2:property})$0",
		"description": "[FNG] Get MIDI note property"
	},
	"FNG_SetMidiNoteIntProperty lua": {
		"prefix": "r.FNG_SetMidiNoteIntProperty",
		"scope": "lua",
		"body": "r.FNG_SetMidiNoteIntProperty(${1:midiNote}, ${2:property}, ${3:value})$0",
		"description": "[FNG] Set MIDI note property"
	},
	"FindTempoTimeSigMarker lua": {
		"prefix": "r.FindTempoTimeSigMarker",
		"scope": "lua",
		"body": "r.FindTempoTimeSigMarker(0, ${2:time})$0",
		"description": "Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position)."
	},
	"FocusedFlags_AnyWindow lua": {
		"prefix": "ImGui.FocusedFlags_AnyWindow",
		"scope": "lua",
		"body": "ImGui.FocusedFlags_AnyWindow$0",
		"description": "@type integer\n---\n**Window > Properties > Focused Flags > FocusedFlags_AnyWindow**\nReturn true if any window is focused.\n**Window > Properties > Focused Flags**\nFor IsWindowFocused.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"FocusedFlags_ChildWindows lua": {
		"prefix": "ImGui.FocusedFlags_ChildWindows",
		"scope": "lua",
		"body": "ImGui.FocusedFlags_ChildWindows$0",
		"description": "@type integer\n---\n**Window > Properties > Focused Flags > FocusedFlags_ChildWindows**\nReturn true if any children of the window is focused.\n**Window > Properties > Focused Flags**\nFor IsWindowFocused.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"FocusedFlags_DockHierarchy lua": {
		"prefix": "ImGui.FocusedFlags_DockHierarchy",
		"scope": "lua",
		"body": "ImGui.FocusedFlags_DockHierarchy$0",
		"description": "@type integer\n---\n**Window > Properties > Focused Flags > FocusedFlags_DockHierarchy**\nConsider docking hierarchy (treat dockspace host as parent of docked window)\n(when used with _ChildWindows or _RootWindow).\n**Window > Properties > Focused Flags**\nFor IsWindowFocused.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.5.10\n "
	},
	"FocusedFlags_NoPopupHierarchy lua": {
		"prefix": "ImGui.FocusedFlags_NoPopupHierarchy",
		"scope": "lua",
		"body": "ImGui.FocusedFlags_NoPopupHierarchy$0",
		"description": "@type integer\n---\n**Window > Properties > Focused Flags > FocusedFlags_NoPopupHierarchy**\nDo not consider popup hierarchy (do not treat popup emitter as parent of\npopup) (when used with _ChildWindows or _RootWindow).\n**Window > Properties > Focused Flags**\nFor IsWindowFocused.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.5.10\n "
	},
	"FocusedFlags_None lua": {
		"prefix": "ImGui.FocusedFlags_None",
		"scope": "lua",
		"body": "ImGui.FocusedFlags_None$0",
		"description": "@type integer\n---\n**Window > Properties > Focused Flags > FocusedFlags_None**\n**Window > Properties > Focused Flags**\nFor IsWindowFocused.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"FocusedFlags_RootAndChildWindows lua": {
		"prefix": "ImGui.FocusedFlags_RootAndChildWindows",
		"scope": "lua",
		"body": "ImGui.FocusedFlags_RootAndChildWindows$0",
		"description": "@type integer\n---\n**Window > Properties > Focused Flags > FocusedFlags_RootAndChildWindows**\nFocusedFlags_RootWindow | FocusedFlags_ChildWindows\n**Window > Properties > Focused Flags**\nFor IsWindowFocused.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"FontFlags_Bold lua": {
		"prefix": "ImGui.FontFlags_Bold",
		"scope": "lua",
		"body": "ImGui.FontFlags_Bold$0",
		"description": "@type integer\n---\n**Font > FontFlags_Bold**\n**Font**\nSupports loading fonts from the system by family name or from a file.\nGlyphs may contain colors in COLR/CPAL format.\nThis API currently has multiple limitations (v1.0 blockers):\n- ReaImGui rasterizes glyphs only from the Basic Latin and Latin Supplement\nUnicode blocks (U+0020 to U+00FF). UTF-8 is fully supported internally,\nhowever characters outside those blocks are displayed as '?'.\nSee [issue #5](https://github.com/cfillion/reaimgui/issues/5).\n- Dear ImGui does not support using new fonts in the middle of a frame.\nBecause of this, fonts must first be registered using Attach before any\nother context functions are used in the same defer cycle.\n(Attaching a font is a heavy operation and should ideally be done outside\nof the defer loop.)\n@since 0.4\n "
	},
	"FontFlags_Italic lua": {
		"prefix": "ImGui.FontFlags_Italic",
		"scope": "lua",
		"body": "ImGui.FontFlags_Italic$0",
		"description": "@type integer\n---\n**Font > FontFlags_Italic**\n**Font**\nSupports loading fonts from the system by family name or from a file.\nGlyphs may contain colors in COLR/CPAL format.\nThis API currently has multiple limitations (v1.0 blockers):\n- ReaImGui rasterizes glyphs only from the Basic Latin and Latin Supplement\nUnicode blocks (U+0020 to U+00FF). UTF-8 is fully supported internally,\nhowever characters outside those blocks are displayed as '?'.\nSee [issue #5](https://github.com/cfillion/reaimgui/issues/5).\n- Dear ImGui does not support using new fonts in the middle of a frame.\nBecause of this, fonts must first be registered using Attach before any\nother context functions are used in the same defer cycle.\n(Attaching a font is a heavy operation and should ideally be done outside\nof the defer loop.)\n@since 0.4\n "
	},
	"FontFlags_None lua": {
		"prefix": "ImGui.FontFlags_None",
		"scope": "lua",
		"body": "ImGui.FontFlags_None$0",
		"description": "@type integer\n---\n**Font > FontFlags_None**\n**Font**\nSupports loading fonts from the system by family name or from a file.\nGlyphs may contain colors in COLR/CPAL format.\nThis API currently has multiple limitations (v1.0 blockers):\n- ReaImGui rasterizes glyphs only from the Basic Latin and Latin Supplement\nUnicode blocks (U+0020 to U+00FF). UTF-8 is fully supported internally,\nhowever characters outside those blocks are displayed as '?'.\nSee [issue #5](https://github.com/cfillion/reaimgui/issues/5).\n- Dear ImGui does not support using new fonts in the middle of a frame.\nBecause of this, fonts must first be registered using Attach before any\nother context functions are used in the same defer cycle.\n(Attaching a font is a heavy operation and should ideally be done outside\nof the defer loop.)\n@since 0.4\n "
	},
	"GR_SelectColor lua": {
		"prefix": "r.GR_SelectColor",
		"scope": "lua",
		"body": "r.GR_SelectColor(${1:hwnd})$0",
		"description": "Runs the system color chooser dialog.  Returns 0 if the user cancels the dialog."
	},
	"GSC_mainwnd lua": {
		"prefix": "r.GSC_mainwnd",
		"scope": "lua",
		"body": "r.GSC_mainwnd(${1:t})$0",
		"description": "this is just like win32 GetSysColor() but can have overrides."
	},
	"GetActionShortcutDesc lua": {
		"prefix": "r.GetActionShortcutDesc",
		"scope": "lua",
		"body": "rv, desc = r.GetActionShortcutDesc(${1:section}, ${2:cmdID}, ${3:shortcutidx})$0",
		"description": "Get the text description of a specific shortcut for the given command ID.\nSee CountActionShortcuts,DeleteActionShortcut,DoActionShortcutDialog."
	},
	"GetActiveTake lua": {
		"prefix": "r.GetActiveTake",
		"scope": "lua",
		"body": "r.GetActiveTake(${1:item})$0",
		"description": "get the active take in this item"
	},
	"GetAllProjectPlayStates lua": {
		"prefix": "r.GetAllProjectPlayStates",
		"scope": "lua",
		"body": "r.GetAllProjectPlayStates(0)$0",
		"description": "returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)"
	},
	"GetAppVersion lua": {
		"prefix": "r.GetAppVersion",
		"scope": "lua",
		"body": "r.GetAppVersion()$0",
		"description": "Returns app version which may include an OS/arch signifier, such as: '6.17' (windows 32-bit), '6.17/x64' (windows 64-bit), '6.17/OSX64' (macOS 64-bit Intel), '6.17/OSX' (macOS 32-bit), '6.17/macOS-arm64', '6.17/linux-x86_64', '6.17/linux-i686', '6.17/linux-aarch64', '6.17/linux-armv7l', etc"
	},
	"GetArmedCommand lua": {
		"prefix": "r.GetArmedCommand",
		"scope": "lua",
		"body": "rv, sec = r.GetArmedCommand()$0",
		"description": "gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section."
	},
	"GetAudioAccessorEndTime lua": {
		"prefix": "r.GetAudioAccessorEndTime",
		"scope": "lua",
		"body": "r.GetAudioAccessorEndTime(${1:accessor})$0",
		"description": "Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples."
	},
	"GetAudioAccessorHash lua": {
		"prefix": "r.GetAudioAccessorHash",
		"scope": "lua",
		"body": "r.GetAudioAccessorHash(${1:accessor}, ${2:hashNeed128})$0",
		"description": "Deprecated. See AudioAccessorStateChanged instead."
	},
	"GetAudioAccessorSamples lua": {
		"prefix": "r.GetAudioAccessorSamples",
		"scope": "lua",
		"body": "r.GetAudioAccessorSamples(${1:accessor}, ${2:samplerate}, ${3:numchannels}, ${4:starttime_sec}, ${5:numsamplesperchannel}, ${6:samplebuffer})$0",
		"description": "Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.\nThis function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:\ntr = RPR_GetTrack(0, 0)\naa = RPR_CreateTrackAudioAccessor(tr)\nbuf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero\npos = 0.0\n(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)\n# buf now holds the first 2*1024 audio samples from the track.\n# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time."
	},
	"GetAudioAccessorStartTime lua": {
		"prefix": "r.GetAudioAccessorStartTime",
		"scope": "lua",
		"body": "r.GetAudioAccessorStartTime(${1:accessor})$0",
		"description": "Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples."
	},
	"GetAudioDeviceInfo lua": {
		"prefix": "r.GetAudioDeviceInfo",
		"scope": "lua",
		"body": "rv, desc = r.GetAudioDeviceInfo(${1:attribute})$0",
		"description": "get information about the currently open audio device. attribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown attribute or device not open."
	},
	"GetConfigWantsDock lua": {
		"prefix": "r.GetConfigWantsDock",
		"scope": "lua",
		"body": "r.GetConfigWantsDock(${1:ident_str})$0",
		"description": "gets the dock ID desired by ident_str, if any"
	},
	"GetCurrentProjectInLoadSave lua": {
		"prefix": "r.GetCurrentProjectInLoadSave",
		"scope": "lua",
		"body": "r.GetCurrentProjectInLoadSave()$0",
		"description": "returns current project if in load/save (usually only used from project_config_extension_t)"
	},
	"GetCursorContext lua": {
		"prefix": "r.GetCursorContext",
		"scope": "lua",
		"body": "r.GetCursorContext()$0",
		"description": "return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown"
	},
	"GetCursorContext2 lua": {
		"prefix": "r.GetCursorContext2",
		"scope": "lua",
		"body": "r.GetCursorContext2(${1:want_last_valid})$0",
		"description": "0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)"
	},
	"GetCursorPosition lua": {
		"prefix": "r.GetCursorPosition",
		"scope": "lua",
		"body": "r.GetCursorPosition()$0",
		"description": "edit cursor position"
	},
	"GetCursorPositionEx lua": {
		"prefix": "r.GetCursorPositionEx",
		"scope": "lua",
		"body": "r.GetCursorPositionEx(0)$0",
		"description": "edit cursor position"
	},
	"GetDisplayedMediaItemColor lua": {
		"prefix": "r.GetDisplayedMediaItemColor",
		"scope": "lua",
		"body": "r.GetDisplayedMediaItemColor(${1:item})$0",
		"description": "see GetDisplayedMediaItemColor2."
	},
	"GetDisplayedMediaItemColor2 lua": {
		"prefix": "r.GetDisplayedMediaItemColor2",
		"scope": "lua",
		"body": "r.GetDisplayedMediaItemColor2(${1:item}, ${2:take})$0",
		"description": "Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means 'no color', not black."
	},
	"GetEnvelopeInfo_Value lua": {
		"prefix": "r.GetEnvelopeInfo_Value",
		"scope": "lua",
		"body": "r.GetEnvelopeInfo_Value(${1:env}, ${2:parmname})$0",
		"description": "Gets an envelope numerical-value attribute:\nI_TCPY : int : Y offset of envelope relative to parent track (may be separate lane or overlap with track contents)\nI_TCPH : int : visible height of envelope\nI_TCPY_USED : int : Y offset of envelope relative to parent track, exclusive of padding\nI_TCPH_USED : int : visible height of envelope, exclusive of padding\nP_TRACK : MediaTrack * : parent track pointer (if any)\nP_DESTTRACK : MediaTrack * : destination track pointer, if on a send\nP_ITEM : MediaItem * : parent item pointer (if any)\nP_TAKE : MediaItem_Take * : parent take pointer (if any)\nI_SEND_IDX : int : 1-based index of send in P_TRACK, or 0 if not a send\nI_HWOUT_IDX : int : 1-based index of hardware output in P_TRACK or 0 if not a hardware output\nI_RECV_IDX : int : 1-based index of receive in P_DESTTRACK or 0 if not a send/receive"
	},
	"GetEnvelopeName lua": {
		"prefix": "r.GetEnvelopeName",
		"scope": "lua",
		"body": "rv, buf = r.GetEnvelopeName(${1:env})$0",
		"description": ""
	},
	"GetEnvelopePoint lua": {
		"prefix": "r.GetEnvelopePoint",
		"scope": "lua",
		"body": "rv, time, value, shape, tension, selected = r.GetEnvelopePoint(${1:envelope}, ${2:ptidx})$0",
		"description": "Get the attributes of an envelope point. See GetEnvelopePointEx."
	},
	"GetEnvelopePointByTime lua": {
		"prefix": "r.GetEnvelopePointByTime",
		"scope": "lua",
		"body": "r.GetEnvelopePointByTime(${1:envelope}, ${2:time})$0",
		"description": "Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePointByTimeEx."
	},
	"GetEnvelopePointByTimeEx lua": {
		"prefix": "r.GetEnvelopePointByTimeEx",
		"scope": "lua",
		"body": "r.GetEnvelopePointByTimeEx(${1:envelope}, ${2:autoitem_idx}, ${3:time})$0",
		"description": "Returns the envelope point at or immediately prior to the given time position.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx."
	},
	"GetEnvelopePointEx lua": {
		"prefix": "r.GetEnvelopePointEx",
		"scope": "lua",
		"body": "rv, time, value, shape, tension, selected = r.GetEnvelopePointEx(${1:envelope}, ${2:autoitem_idx}, ${3:ptidx})$0",
		"description": "Get the attributes of an envelope point.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx."
	},
	"GetEnvelopeScalingMode lua": {
		"prefix": "r.GetEnvelopeScalingMode",
		"scope": "lua",
		"body": "r.GetEnvelopeScalingMode(${1:env})$0",
		"description": "Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode."
	},
	"GetEnvelopeStateChunk lua": {
		"prefix": "r.GetEnvelopeStateChunk",
		"scope": "lua",
		"body": "rv, str = r.GetEnvelopeStateChunk(${1:env}, ${2:str}, ${3:isundo})$0",
		"description": "Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint."
	},
	"GetEnvelopeUIState lua": {
		"prefix": "r.GetEnvelopeUIState",
		"scope": "lua",
		"body": "r.GetEnvelopeUIState(${1:env})$0",
		"description": "gets information on the UI state of an envelope: returns &1 if automation/modulation is playing back, &2 if automation is being actively written, &4 if the envelope recently had an effective automation mode change"
	},
	"GetExePath lua": {
		"prefix": "r.GetExePath",
		"scope": "lua",
		"body": "r.GetExePath()$0",
		"description": "returns path of REAPER.exe (not including EXE), i.e. C:\\Program Files\\REAPER"
	},
	"GetExtState lua": {
		"prefix": "r.GetExtState",
		"scope": "lua",
		"body": "r.GetExtState(${1:section}, ${2:key})$0",
		"description": "Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState."
	},
	"GetFXEnvelope lua": {
		"prefix": "r.GetFXEnvelope",
		"scope": "lua",
		"body": "r.GetFXEnvelope(${1:track}, ${2:fxindex}, ${3:parameterindex}, ${4:create})$0",
		"description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created. If the envelope already exists and is bypassed and create=true, then the envelope will be unbypassed."
	},
	"GetFocusedFX lua": {
		"prefix": "r.GetFocusedFX",
		"scope": "lua",
		"body": "rv, tracknumber, itemnumber, fxnumber = r.GetFocusedFX()$0",
		"description": "This function is deprecated (returns GetFocusedFX2()&3), see GetTouchedOrFocusedFX."
	},
	"GetFocusedFX2 lua": {
		"prefix": "r.GetFocusedFX2",
		"scope": "lua",
		"body": "rv, tracknumber, itemnumber, fxnumber = r.GetFocusedFX2()$0",
		"description": "Return value has 1 set if track FX, 2 if take/item FX, 4 set if FX is no longer focused but still open. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber is zero-based (or -1 if not an item). For interpretation of fxnumber, see GetLastTouchedFX. Deprecated, see GetTouchedOrFocusedFX"
	},
	"GetFreeDiskSpaceForRecordPath lua": {
		"prefix": "r.GetFreeDiskSpaceForRecordPath",
		"scope": "lua",
		"body": "r.GetFreeDiskSpaceForRecordPath(0, ${2:pathidx})$0",
		"description": "returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate."
	},
	"GetGlobalAutomationOverride lua": {
		"prefix": "r.GetGlobalAutomationOverride",
		"scope": "lua",
		"body": "r.GetGlobalAutomationOverride()$0",
		"description": "return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass"
	},
	"GetHZoomLevel lua": {
		"prefix": "r.GetHZoomLevel",
		"scope": "lua",
		"body": "r.GetHZoomLevel()$0",
		"description": "returns pixels/second"
	},
	"GetInputActivityLevel lua": {
		"prefix": "r.GetInputActivityLevel",
		"scope": "lua",
		"body": "r.GetInputActivityLevel(${1:input_id})$0",
		"description": "returns approximate input level if available, 0-511 mono inputs, |1024 for stereo pairs, 4096+devidx*32 for MIDI devices"
	},
	"GetInputChannelName lua": {
		"prefix": "r.GetInputChannelName",
		"scope": "lua",
		"body": "r.GetInputChannelName(${1:channelIndex})$0",
		"description": ""
	},
	"GetInputOutputLatency lua": {
		"prefix": "r.GetInputOutputLatency",
		"scope": "lua",
		"body": "inputlatency, outputLatency = r.GetInputOutputLatency()$0",
		"description": "Gets the audio device input/output latency in samples"
	},
	"GetItemEditingTime2 lua": {
		"prefix": "r.GetItemEditingTime2",
		"scope": "lua",
		"body": "num, which_item, flags = r.GetItemEditingTime2()$0",
		"description": "returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)"
	},
	"GetItemFromPoint lua": {
		"prefix": "r.GetItemFromPoint",
		"scope": "lua",
		"body": "rv, take = r.GetItemFromPoint(${1:screen_x}, ${2:screen_y}, ${3:allow_locked})$0",
		"description": "Returns the first item at the screen coordinates specified. If allow_locked is false, locked items are ignored. If takeOutOptional specified, returns the take hit. See GetThingFromPoint."
	},
	"GetItemProjectContext lua": {
		"prefix": "r.GetItemProjectContext",
		"scope": "lua",
		"body": "r.GetItemProjectContext(${1:item})$0",
		"description": ""
	},
	"GetItemStateChunk lua": {
		"prefix": "r.GetItemStateChunk",
		"scope": "lua",
		"body": "rv, str = r.GetItemStateChunk(${1:item}, ${2:str}, ${3:isundo})$0",
		"description": "Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint."
	},
	"GetLastColorThemeFile lua": {
		"prefix": "r.GetLastColorThemeFile",
		"scope": "lua",
		"body": "r.GetLastColorThemeFile()$0",
		"description": ""
	},
	"GetLastMarkerAndCurRegion lua": {
		"prefix": "r.GetLastMarkerAndCurRegion",
		"scope": "lua",
		"body": "markeridx, regionidx = r.GetLastMarkerAndCurRegion(0, ${2:time})$0",
		"description": "Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See EnumProjectMarkers."
	},
	"GetLastTouchedFX lua": {
		"prefix": "r.GetLastTouchedFX",
		"scope": "lua",
		"body": "rv, tracknumber, fxnumber, paramnumber = r.GetLastTouchedFX()$0",
		"description": "Returns true if the last touched FX parameter is valid, false otherwise. The low word of tracknumber is the 1-based track index -- 0 means the master track, 1 means track 1, etc. If the high word of tracknumber is nonzero, it refers to the 1-based item index (1 is the first item on the track, etc). For track FX, the low 24 bits of fxnumber refer to the FX index in the chain, and if the next 8 bits are 01, then the FX is record FX. For item FX, the low word defines the FX index in the chain, and the high word defines the take number. Deprecated, see GetTouchedOrFocusedFX."
	},
	"GetLastTouchedTrack lua": {
		"prefix": "r.GetLastTouchedTrack",
		"scope": "lua",
		"body": "r.GetLastTouchedTrack()$0",
		"description": ""
	},
	"GetMIDIInputName lua": {
		"prefix": "r.GetMIDIInputName",
		"scope": "lua",
		"body": "rv, nameout = r.GetMIDIInputName(${1:dev}, ${2:nameout})$0",
		"description": "returns true if device present"
	},
	"GetMIDIOutputName lua": {
		"prefix": "r.GetMIDIOutputName",
		"scope": "lua",
		"body": "rv, nameout = r.GetMIDIOutputName(${1:dev}, ${2:nameout})$0",
		"description": "returns true if device present"
	},
	"GetMainHwnd lua": {
		"prefix": "r.GetMainHwnd",
		"scope": "lua",
		"body": "r.GetMainHwnd()$0",
		"description": ""
	},
	"GetMasterMuteSoloFlags lua": {
		"prefix": "r.GetMasterMuteSoloFlags",
		"scope": "lua",
		"body": "r.GetMasterMuteSoloFlags()$0",
		"description": "&1=master mute,&2=master solo. This is deprecated as you can just query the master track as well."
	},
	"GetMasterTrack lua": {
		"prefix": "r.GetMasterTrack",
		"scope": "lua",
		"body": "r.GetMasterTrack(0)$0",
		"description": ""
	},
	"GetMasterTrackVisibility lua": {
		"prefix": "r.GetMasterTrackVisibility",
		"scope": "lua",
		"body": "r.GetMasterTrackVisibility()$0",
		"description": "returns &1 if the master track is visible in the TCP, &2 if NOT visible in the mixer. See SetMasterTrackVisibility."
	},
	"GetMaxMidiInputs lua": {
		"prefix": "r.GetMaxMidiInputs",
		"scope": "lua",
		"body": "r.GetMaxMidiInputs()$0",
		"description": "returns max dev for midi inputs/outputs"
	},
	"GetMaxMidiOutputs lua": {
		"prefix": "r.GetMaxMidiOutputs",
		"scope": "lua",
		"body": "r.GetMaxMidiOutputs()$0",
		"description": ""
	},
	"GetMediaFileMetadata lua": {
		"prefix": "r.GetMediaFileMetadata",
		"scope": "lua",
		"body": "rv, buf = r.GetMediaFileMetadata(${1:mediaSource}, ${2:identifier})$0",
		"description": "Get text-based metadata from a media file for a given identifier. Call with identifier='' to list all identifiers contained in the file, separated by newlines. May return '[Binary data]' for metadata that REAPER doesn't handle."
	},
	"GetMediaItem lua": {
		"prefix": "r.GetMediaItem",
		"scope": "lua",
		"body": "r.GetMediaItem(0, ${2:itemidx})$0",
		"description": "get an item from a project by item count (zero-based) (proj=0 for active project)"
	},
	"GetMediaItemInfo_Value lua": {
		"prefix": "r.GetMediaItemInfo_Value",
		"scope": "lua",
		"body": "r.GetMediaItemInfo_Value(${1:item}, ${2:parmname})$0",
		"description": "Get media item numerical-value attributes.\nB_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_LANEPLAYS : char * : on fixed lane tracks, 0=this item lane does not play, 1=this item lane plays exclusively, 2=this item lane plays and other lanes also play, -1=this item is on a non-visible, non-playing lane on a formerly fixed-lane track (read-only)\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * : free item positioning or fixed lane Y-position. 0=top of track, 1.0=bottom of track\nF_FREEMODE_H : float * : free item positioning or fixed lane height. 0.5=half the track height, 1.0=full track height\nI_FIXEDLANE : int * : fixed lane of item (fine to call with setNewValue, but returned value is read-only)\nB_FIXEDLANE_HIDDEN : bool * : true if displaying only one fixed lane and this item is in a different lane (read-only)\nP_TRACK : MediaTrack * : (read-only)"
	},
	"GetMediaItemNumTakes lua": {
		"prefix": "r.GetMediaItemNumTakes",
		"scope": "lua",
		"body": "r.GetMediaItemNumTakes(${1:item})$0",
		"description": ""
	},
	"GetMediaItemTake lua": {
		"prefix": "r.GetMediaItemTake",
		"scope": "lua",
		"body": "r.GetMediaItemTake(${1:item}, ${2:tk})$0",
		"description": ""
	},
	"GetMediaItemTakeByGUID lua": {
		"prefix": "r.GetMediaItemTakeByGUID",
		"scope": "lua",
		"body": "r.GetMediaItemTakeByGUID(0, ${2:guidGUID})$0",
		"description": ""
	},
	"GetMediaItemTakeInfo_Value lua": {
		"prefix": "r.GetMediaItemTakeInfo_Value",
		"scope": "lua",
		"body": "r.GetMediaItemTakeInfo_Value(${1:take}, ${2:parmname})$0",
		"description": "Get media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=project default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_STRETCHFLAGS : int * : stretch marker flags (&7 mask for mode override: 0=default, 1=balanced, 2/3/6=tonal, 4=transient, 5=no pre-echo)\nF_STRETCHFADESIZE : float * : stretch marker fade size in seconds (0.0025 default)\nI_RECPASSID : int * : record pass ID\nI_TAKEFX_NCH : int * : number of internal audio channels for per-take FX to use (OK to call with setNewValue, but the returned value is read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nIP_SPECEDIT:CNT : int : spectral edit count (read-only)\nIP_SPECEDIT:DELETE:x : int : read or write this key to remove the spectral edit specified\nIP_SPECEDIT:ADD : int : read or write this key to add a new spectral edit (returns index)\nIP_SPECEDIT:SORT : int : read or write this key to re-sort spectral edits (be sure to do this following a position change or insert of new edit)\nI_SPECEDIT:FFT_SIZE : int * : FFT size used by spectral edits for this take\nD_SPECEDIT:x:POSITION : double * : position of spectral edit start (changing this requires a resort of spectral edits)\nD_SPECEDIT:x:LENGTH : double * : length of spectral edit\nF_SPECEDIT:x:GAIN : float * : gain of spectral edit\nF_SPECEDIT:x:FADE_IN : float * : fade-in size 0..1\nF_SPECEDIT:x:FADE_OUT : float * : fade-out size 0..1\nF_SPECEDIT:x:FADE_LOW : float * : fade-lf size 0..1\nF_SPECEDIT:x:FADE_HI : float * : fade-hf size 0..1\nI_SPECEDIT:x:CHAN : int * : channel index, -1 for omni\nI_SPECEDIT:x:FLAGS : int * : flags, &1=bypassed, &2=solo\nF_SPECEDIT:x:GATE_THRESH : float * : gate threshold\nF_SPECEDIT:x:GATE_FLOOR : float * : gate floor\nF_SPECEDIT:x:COMP_THRESH : float * : comp threshold\nF_SPECEDIT:x:COMP_RATIO : float * : comp ratio\nB_SPECEDIT:x:SELECTED : bool * : selection state\nI_SPECEDIT:x:TOPFREQ_CNT : int * : (read-only) number of top frequency-points\nI_SPECEDIT:x:TOPFREQ_ADD:pos:val : int * : reading or writing will insert top frequency-point with position/value pair, returns index\nI_SPECEDIT:x:TOPFREQ_DEL:y : int * : reading or writing will delete top frequency-point y. there will always be at least one point.\nF_SPECEDIT:x:TOPFREQ_POS:y : float * : (read-only) get position of top frequency-point y\nF_SPECEDIT:x:TOPFREQ_FREQ:y : float * : (read-only) get frequency of top frequency-point y\nI_SPECEDIT:x:BOTFREQ_CNT : int * : number of bottom frequency-points\nI_SPECEDIT:x:BOTFREQ_ADD:pos:val : int * : reading or writing will insert bottom frequency-point with position/value pair, returns index\nI_SPECEDIT:x:BOTFREQ_DEL:y : int * : reading or writing will delete bottom frequency-point y. there will always be at least one point.\nF_SPECEDIT:x:BOTFREQ_POS:y : float * : (read-only) get position of bottom frequency-point y\nF_SPECEDIT:x:BOTFREQ_FREQ:y : float * : (read-only) get frequency of bottom frequency-point y\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)\nP_TRACK : pointer to MediaTrack (read-only)\nP_ITEM : pointer to MediaItem (read-only)\nP_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old."
	},
	"GetMediaItemTake_Item lua": {
		"prefix": "r.GetMediaItemTake_Item",
		"scope": "lua",
		"body": "r.GetMediaItemTake_Item(${1:take})$0",
		"description": "Get parent item of media item take"
	},
	"GetMediaItemTake_Peaks lua": {
		"prefix": "r.GetMediaItemTake_Peaks",
		"scope": "lua",
		"body": "r.GetMediaItemTake_Peaks(${1:take}, ${2:peakrate}, ${3:starttime}, ${4:numchannels}, ${5:numsamplesperchannel}, ${6:want_extra_type}, ${7:buf})$0",
		"description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality."
	},
	"GetMediaItemTake_Source lua": {
		"prefix": "r.GetMediaItemTake_Source",
		"scope": "lua",
		"body": "r.GetMediaItemTake_Source(${1:take})$0",
		"description": "Get media source of media item take"
	},
	"GetMediaItemTake_Track lua": {
		"prefix": "r.GetMediaItemTake_Track",
		"scope": "lua",
		"body": "r.GetMediaItemTake_Track(${1:take})$0",
		"description": "Get parent track of media item take"
	},
	"GetMediaItemTrack lua": {
		"prefix": "r.GetMediaItemTrack",
		"scope": "lua",
		"body": "r.GetMediaItemTrack(${1:item})$0",
		"description": ""
	},
	"GetMediaItem_Track lua": {
		"prefix": "r.GetMediaItem_Track",
		"scope": "lua",
		"body": "r.GetMediaItem_Track(${1:item})$0",
		"description": "Get parent track of media item"
	},
	"GetMediaSourceFileName lua": {
		"prefix": "r.GetMediaSourceFileName",
		"scope": "lua",
		"body": "r.GetMediaSourceFileName(${1:source})$0",
		"description": "Copies the media source filename to filenamebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent."
	},
	"GetMediaSourceLength lua": {
		"prefix": "r.GetMediaSourceLength",
		"scope": "lua",
		"body": "num, lengthIsQN = r.GetMediaSourceLength(${1:source})$0",
		"description": "Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds."
	},
	"GetMediaSourceNumChannels lua": {
		"prefix": "r.GetMediaSourceNumChannels",
		"scope": "lua",
		"body": "r.GetMediaSourceNumChannels(${1:source})$0",
		"description": "Returns the number of channels in the source media."
	},
	"GetMediaSourceParent lua": {
		"prefix": "r.GetMediaSourceParent",
		"scope": "lua",
		"body": "r.GetMediaSourceParent(${1:src})$0",
		"description": "Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example."
	},
	"GetMediaSourceSampleRate lua": {
		"prefix": "r.GetMediaSourceSampleRate",
		"scope": "lua",
		"body": "r.GetMediaSourceSampleRate(${1:source})$0",
		"description": "Returns the sample rate. MIDI source media will return zero."
	},
	"GetMediaSourceType lua": {
		"prefix": "r.GetMediaSourceType",
		"scope": "lua",
		"body": "r.GetMediaSourceType(${1:source})$0",
		"description": "copies the media source type ('WAV', 'MIDI', etc) to typebuf"
	},
	"GetMediaTrackInfo_Value lua": {
		"prefix": "r.GetMediaTrackInfo_Value",
		"scope": "lua",
		"body": "r.GetMediaTrackInfo_Value(${1:tr}, ${2:parmname})$0",
		"description": "Get track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-128, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)\nI_MCPW : int * : current MCP width in pixels (read-only)\nI_MCPH : int * : current MCP height in pixels (read-only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder collapsed state (only valid on folders), 0=normal, 1=collapsed, 2=fully collapsed\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_MIDI_INPUT_CHANMAP : int * : -1 maps to source channel, otherwise 1-16 to map to MIDI channel\nI_MIDI_CTL_CHAN : int * : -1 no link, 0-15 link to MIDI volume/pan on channel, 16 link to MIDI volume/pan on all channels\nI_MIDI_TRACKSEL_FLAG : int * : MIDI editor track list options: &1=expand media items, &2=exclude from list, &4=auto-pruned\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nI_SPACER : int * : 1=TCP track spacer above this trackB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper\nP_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)\nI_NUMFIXEDLANES : int * : number of track fixed lanes (fine to call with setNewValue, but returned value is read-only)\nC_LANESCOLLAPSED : char * : fixed lane collapse state (1=lanes collapsed, 2=track displays as non-fixed-lanes but hidden lanes exist)\nC_LANESETTINGS : char * : fixed lane settings (&1=auto-remove empty lanes at bottom, &2=do not auto-comp new recording, &4=newly recorded lanes play exclusively (else add lanes in layers), &8=big lanes (else small lanes), &16=add new recording at bottom (else record into first available lane), &32=hide lane buttons\nC_LANEPLAYS:N : char * :  on fixed lane tracks, 0=lane N does not play, 1=lane N plays exclusively, 2=lane N plays and other lanes also play (fine to call with setNewValue, but returned value is read-only)\nC_ALLLANESPLAY : char * : on fixed lane tracks, 0=no lanes play, 1=all lanes play, 2=some lanes play (fine to call with setNewValue 0 or 1, but returned value is read-only)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG\nP_PARTRACK : MediaTrack * : parent track (read-only)\nP_PROJECT : ReaProject * : parent project (read-only)"
	},
	"GetMixerScroll lua": {
		"prefix": "r.GetMixerScroll",
		"scope": "lua",
		"body": "r.GetMixerScroll()$0",
		"description": "Get the leftmost track visible in the mixer"
	},
	"GetMouseModifier lua": {
		"prefix": "r.GetMouseModifier",
		"scope": "lua",
		"body": "r.GetMouseModifier(${1:context}, ${2:modifier_flag})$0",
		"description": "Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.\naction will be filled in with the command ID number for a built-in mouse modifier\nor built-in REAPER command ID, or the custom action ID string.\nNote: the action string may have a space and 'c' or 'm' appended to it to specify command ID vs mouse modifier ID.\nSee SetMouseModifier for more information."
	},
	"GetMousePosition lua": {
		"prefix": "r.GetMousePosition",
		"scope": "lua",
		"body": "x, y = r.GetMousePosition()$0",
		"description": "get mouse position in screen coordinates"
	},
	"GetNumAudioInputs lua": {
		"prefix": "r.GetNumAudioInputs",
		"scope": "lua",
		"body": "r.GetNumAudioInputs()$0",
		"description": "Return number of normal audio hardware inputs available"
	},
	"GetNumAudioOutputs lua": {
		"prefix": "r.GetNumAudioOutputs",
		"scope": "lua",
		"body": "r.GetNumAudioOutputs()$0",
		"description": "Return number of normal audio hardware outputs available"
	},
	"GetNumMIDIInputs lua": {
		"prefix": "r.GetNumMIDIInputs",
		"scope": "lua",
		"body": "r.GetNumMIDIInputs()$0",
		"description": "returns max number of real midi hardware inputs"
	},
	"GetNumMIDIOutputs lua": {
		"prefix": "r.GetNumMIDIOutputs",
		"scope": "lua",
		"body": "r.GetNumMIDIOutputs()$0",
		"description": "returns max number of real midi hardware outputs"
	},
	"GetNumTakeMarkers lua": {
		"prefix": "r.GetNumTakeMarkers",
		"scope": "lua",
		"body": "r.GetNumTakeMarkers(${1:take})$0",
		"description": "Returns number of take markers. See GetTakeMarker, SetTakeMarker, DeleteTakeMarker"
	},
	"GetNumTracks lua": {
		"prefix": "r.GetNumTracks",
		"scope": "lua",
		"body": "r.GetNumTracks()$0",
		"description": "Returns number of tracks in current project, see CountTracks()"
	},
	"GetOS lua": {
		"prefix": "r.GetOS",
		"scope": "lua",
		"body": "r.GetOS()$0",
		"description": "Returns 'Win32', 'Win64', 'OSX32', 'OSX64', 'macOS-arm64', or 'Other'."
	},
	"GetOutputChannelName lua": {
		"prefix": "r.GetOutputChannelName",
		"scope": "lua",
		"body": "r.GetOutputChannelName(${1:channelIndex})$0",
		"description": ""
	},
	"GetOutputLatency lua": {
		"prefix": "r.GetOutputLatency",
		"scope": "lua",
		"body": "r.GetOutputLatency()$0",
		"description": "returns output latency in seconds"
	},
	"GetParentTrack lua": {
		"prefix": "r.GetParentTrack",
		"scope": "lua",
		"body": "r.GetParentTrack(${1:track})$0",
		"description": ""
	},
	"GetPeakFileName lua": {
		"prefix": "r.GetPeakFileName",
		"scope": "lua",
		"body": "r.GetPeakFileName(${1:fn})$0",
		"description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)"
	},
	"GetPeakFileNameEx lua": {
		"prefix": "r.GetPeakFileNameEx",
		"scope": "lua",
		"body": "r.GetPeakFileNameEx(${1:fn}, ${2:buf}, ${3:forWrite})$0",
		"description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)"
	},
	"GetPeakFileNameEx2 lua": {
		"prefix": "r.GetPeakFileNameEx2",
		"scope": "lua",
		"body": "r.GetPeakFileNameEx2(${1:fn}, ${2:buf}, ${3:forWrite}, ${4:peaksfileextension})$0",
		"description": "Like GetPeakFileNameEx, but you can specify peaksfileextension such as '.reapeaks'"
	},
	"GetPlayPosition lua": {
		"prefix": "r.GetPlayPosition",
		"scope": "lua",
		"body": "r.GetPlayPosition()$0",
		"description": "returns latency-compensated actual-what-you-hear position"
	},
	"GetPlayPosition2 lua": {
		"prefix": "r.GetPlayPosition2",
		"scope": "lua",
		"body": "r.GetPlayPosition2()$0",
		"description": "returns position of next audio block being processed"
	},
	"GetPlayPosition2Ex lua": {
		"prefix": "r.GetPlayPosition2Ex",
		"scope": "lua",
		"body": "r.GetPlayPosition2Ex(0)$0",
		"description": "returns position of next audio block being processed"
	},
	"GetPlayPositionEx lua": {
		"prefix": "r.GetPlayPositionEx",
		"scope": "lua",
		"body": "r.GetPlayPositionEx(0)$0",
		"description": "returns latency-compensated actual-what-you-hear position"
	},
	"GetPlayState lua": {
		"prefix": "r.GetPlayState",
		"scope": "lua",
		"body": "r.GetPlayState()$0",
		"description": "&1=playing, &2=paused, &4=is recording"
	},
	"GetPlayStateEx lua": {
		"prefix": "r.GetPlayStateEx",
		"scope": "lua",
		"body": "r.GetPlayStateEx(0)$0",
		"description": "&1=playing, &2=paused, &4=is recording"
	},
	"GetProjExtState lua": {
		"prefix": "r.GetProjExtState",
		"scope": "lua",
		"body": "rv, val = r.GetProjExtState(0, ${2:extname}, ${3:key})$0",
		"description": "Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState."
	},
	"GetProjectLength lua": {
		"prefix": "r.GetProjectLength",
		"scope": "lua",
		"body": "r.GetProjectLength(0)$0",
		"description": "returns length of project (maximum of end of media item, markers, end of regions, tempo map"
	},
	"GetProjectName lua": {
		"prefix": "r.GetProjectName",
		"scope": "lua",
		"body": "r.GetProjectName(0)$0",
		"description": ""
	},
	"GetProjectPath lua": {
		"prefix": "r.GetProjectPath",
		"scope": "lua",
		"body": "r.GetProjectPath()$0",
		"description": "Get the project recording path."
	},
	"GetProjectPathEx lua": {
		"prefix": "r.GetProjectPathEx",
		"scope": "lua",
		"body": "r.GetProjectPathEx(0)$0",
		"description": "Get the project recording path."
	},
	"GetProjectStateChangeCount lua": {
		"prefix": "r.GetProjectStateChangeCount",
		"scope": "lua",
		"body": "r.GetProjectStateChangeCount(0)$0",
		"description": "returns an integer that changes when the project state changes"
	},
	"GetProjectTimeOffset lua": {
		"prefix": "r.GetProjectTimeOffset",
		"scope": "lua",
		"body": "r.GetProjectTimeOffset(0, ${2:rndframe})$0",
		"description": "Gets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size."
	},
	"GetProjectTimeSignature lua": {
		"prefix": "r.GetProjectTimeSignature",
		"scope": "lua",
		"body": "bpm, bpi = r.GetProjectTimeSignature()$0",
		"description": "deprecated"
	},
	"GetProjectTimeSignature2 lua": {
		"prefix": "r.GetProjectTimeSignature2",
		"scope": "lua",
		"body": "bpm, bpi = r.GetProjectTimeSignature2(0)$0",
		"description": "Gets basic time signature (beats per minute, numerator of time signature in bpi)\nthis does not reflect tempo envelopes but is purely what is set in the project settings."
	},
	"GetResourcePath lua": {
		"prefix": "r.GetResourcePath",
		"scope": "lua",
		"body": "r.GetResourcePath()$0",
		"description": "returns path where ini files are stored, other things are in subdirectories."
	},
	"GetSelectedEnvelope lua": {
		"prefix": "r.GetSelectedEnvelope",
		"scope": "lua",
		"body": "r.GetSelectedEnvelope(0)$0",
		"description": "get the currently selected envelope, returns NULL/nil if no envelope is selected"
	},
	"GetSelectedMediaItem lua": {
		"prefix": "r.GetSelectedMediaItem",
		"scope": "lua",
		"body": "r.GetSelectedMediaItem(0, ${2:selitem})$0",
		"description": "Discouraged, because GetSelectedMediaItem can be inefficient if media items are added, rearranged, or deleted in between calls. Instead see CountMediaItems, GetMediaItem, IsMediaItemSelected."
	},
	"GetSelectedTrack lua": {
		"prefix": "r.GetSelectedTrack",
		"scope": "lua",
		"body": "r.GetSelectedTrack(0, ${2:seltrackidx})$0",
		"description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see GetSelectedTrack2."
	},
	"GetSelectedTrack2 lua": {
		"prefix": "r.GetSelectedTrack2",
		"scope": "lua",
		"body": "r.GetSelectedTrack2(0, ${2:seltrackidx}, ${3:wantmaster})$0",
		"description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based)."
	},
	"GetSelectedTrackEnvelope lua": {
		"prefix": "r.GetSelectedTrackEnvelope",
		"scope": "lua",
		"body": "r.GetSelectedTrackEnvelope(0)$0",
		"description": "get the currently selected track envelope, returns NULL/nil if no envelope is selected"
	},
	"GetSetAutomationItemInfo lua": {
		"prefix": "r.GetSetAutomationItemInfo",
		"scope": "lua",
		"body": "r.GetSetAutomationItemInfo(${1:env}, ${2:autoitem_idx}, ${3:desc}, ${4:value}, ${5:is_set})$0",
		"description": "Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:\nD_POOL_ID : double * : automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID\nD_POSITION : double * : automation item timeline position in seconds\nD_LENGTH : double * : automation item length in seconds\nD_STARTOFFS : double * : automation item start offset in seconds\nD_PLAYRATE : double * : automation item playback rate\nD_BASELINE : double * : automation item baseline value in the range [0,1]\nD_AMPLITUDE : double * : automation item amplitude in the range [-1,1]\nD_LOOPSRC : double * : nonzero if the automation item contents are looped\nD_UISEL : double * : nonzero if the automation item is selected in the arrange view\nD_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)"
	},
	"GetSetAutomationItemInfo_String lua": {
		"prefix": "r.GetSetAutomationItemInfo_String",
		"scope": "lua",
		"body": "rv, valuestrNeedBig = r.GetSetAutomationItemInfo_String(${1:env}, ${2:autoitem_idx}, ${3:desc}, ${4:valuestrNeedBig}, ${5:is_set})$0",
		"description": "Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. returns true on success. desc can be any of the following:\nP_POOL_NAME : char * : name of the underlying automation item pool\nP_POOL_EXT:xyz : char * : extension-specific persistent data"
	},
	"GetSetEnvelopeInfo_String lua": {
		"prefix": "r.GetSetEnvelopeInfo_String",
		"scope": "lua",
		"body": "rv, stringNeedBig = r.GetSetEnvelopeInfo_String(${1:env}, ${2:parmname}, ${3:stringNeedBig}, ${4:setNewValue})$0",
		"description": "Gets/sets an attribute string:\nACTIVE : active state (bool as a string '0' or '1')\nARM : armed state (bool...)\nVISIBLE : visible state (bool...)\nSHOWLANE : show envelope in separate lane (bool...)\nGUID : (read-only) GUID as a string {xyz-....}\nP_EXT:xyz : extension-specific persistent data\nNote that when writing some of these attributes you will need to manually update the arrange and/or track panels, see TrackList_AdjustWindows"
	},
	"GetSetEnvelopeState lua": {
		"prefix": "r.GetSetEnvelopeState",
		"scope": "lua",
		"body": "rv, str = r.GetSetEnvelopeState(${1:env}, ${2:str})$0",
		"description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk"
	},
	"GetSetEnvelopeState2 lua": {
		"prefix": "r.GetSetEnvelopeState2",
		"scope": "lua",
		"body": "rv, str = r.GetSetEnvelopeState2(${1:env}, ${2:str}, ${3:isundo})$0",
		"description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk"
	},
	"GetSetItemState lua": {
		"prefix": "r.GetSetItemState",
		"scope": "lua",
		"body": "rv, str = r.GetSetItemState(${1:item}, ${2:str})$0",
		"description": "deprecated -- see SetItemStateChunk, GetItemStateChunk"
	},
	"GetSetItemState2 lua": {
		"prefix": "r.GetSetItemState2",
		"scope": "lua",
		"body": "rv, str = r.GetSetItemState2(${1:item}, ${2:str}, ${3:isundo})$0",
		"description": "deprecated -- see SetItemStateChunk, GetItemStateChunk"
	},
	"GetSetMediaItemInfo_String lua": {
		"prefix": "r.GetSetMediaItemInfo_String",
		"scope": "lua",
		"body": "rv, stringNeedBig = r.GetSetMediaItemInfo_String(${1:item}, ${2:parmname}, ${3:stringNeedBig}, ${4:setNewValue})$0",
		"description": "Gets/sets an item attribute string:\nP_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
	},
	"GetSetMediaItemTakeInfo_String lua": {
		"prefix": "r.GetSetMediaItemTakeInfo_String",
		"scope": "lua",
		"body": "rv, stringNeedBig = r.GetSetMediaItemTakeInfo_String(${1:tk}, ${2:parmname}, ${3:stringNeedBig}, ${4:setNewValue})$0",
		"description": "Gets/sets a take attribute string:\nP_NAME : char * : take name\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
	},
	"GetSetMediaTrackInfo_String lua": {
		"prefix": "r.GetSetMediaTrackInfo_String",
		"scope": "lua",
		"body": "rv, stringNeedBig = r.GetSetMediaTrackInfo_String(${1:tr}, ${2:parmname}, ${3:stringNeedBig}, ${4:setNewValue})$0",
		"description": "Get or set track string attributes.\nP_NAME : char * : track name (on master returns NULL)\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\nP_LANENAME:n : char * : lane name (returns NULL for non-fixed-lane-tracks)\nP_MCP_LAYOUT : const char * : layout name\nP_RAZOREDITS : const char * : list of razor edit areas, as space-separated triples of start time, end time, and envelope GUID string.\n  Example: '0.0 1.0 \\'\\' 0.0 1.0 '{xyz-...}'\nP_RAZOREDITS_EXT : const char * : list of razor edit areas, as comma-separated sets of space-separated tuples of start time, end time, optional: envelope GUID string, fixed/fipm top y-position, fixed/fipm bottom y-position.\n  Example: '0.0 1.0,0.0 1.0 '{xyz-...}',1.0 2.0 '' 0.25 0.75'\nP_TCP_LAYOUT : const char * : layout name\nP_EXT:xyz : char * : extension-specific persistent data\nP_UI_RECT:tcp.mute : char * : read-only, allows querying screen position + size of track WALTER elements (tcp.size queries screen position and size of entire TCP, etc).\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
	},
	"GetSetProjectAuthor lua": {
		"prefix": "r.GetSetProjectAuthor",
		"scope": "lua",
		"body": "r.GetSetProjectAuthor(0, ${2:set}, ${3:author})$0",
		"description": "deprecated, see GetSetProjectInfo_String with desc='PROJECT_AUTHOR'"
	},
	"GetSetProjectGrid lua": {
		"prefix": "r.GetSetProjectGrid",
		"scope": "lua",
		"body": "rv, division, swingmode, swingamt = r.GetSetProjectGrid(0, ${2:set}, ${3:division}, ${4:swingmode}, ${5:swingamt})$0",
		"description": "Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags"
	},
	"GetSetProjectInfo lua": {
		"prefix": "r.GetSetProjectInfo",
		"scope": "lua",
		"body": "r.GetSetProjectInfo(0, ${2:desc}, ${3:value}, ${4:is_set})$0",
		"description": "Get or set project information.\nRENDER_SETTINGS : (&(1|2)==0)=master mix, &1=stems+master mix, &2=stems only, &4=multichannel tracks to multichannel files, &8=use render matrix, &16=tracks with only mono media to mono files, &32=selected media items, &64=selected media items via master, &128=selected tracks via master, &256=embed transients if format supports, &512=embed metadata if format supports, &1024=embed take markers if format supports, &2048=2nd pass render, &4096=render razor edits, &8192=pre-fader stems (not if via master), &16384=only stem channels sent to parent, &32768=preserve source metadata if possible, &(1<<16)=preserve source start offset if possible, &(2<<16)=preserve source media sample rate if possible, &(4<<16)=if rendering selected items or razor edits, render as a single file, &(8<<16)=parallel render via master, &(16<<16)=delay render start to allow FX to initialize and load samples\nRENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time selection, 3=all project regions, 4=selected media items, 5=selected project regions, 6=all project markers, 7=selected project markers\nRENDER_CHANNELS : number of channels in rendered file\nRENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)\nRENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0\nRENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0\nRENDER_TAILFLAG : apply render tail setting when rendering: &1=custom time bounds, &2=entire project, &4=time selection, &8=all project markers/regions, &16=selected media items, &32=selected project markers/regions\nRENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)\nRENDER_ADDTOPROJ : &1=add rendered files to project, &2=do not render files that are likely silent\nRENDER_DITHER : &1=dither, &2=noise shaping, &4=dither stems, &8=noise shaping on stems, &16=disable all\nRENDER_NORMALIZE: &1=enable normalization, (&14==0)=LUFS-I, (&14==2)=RMS, (&14==4)=peak, (&14==6)=true peak, (&14==8)=LUFS-M max, (&14==10)=LUFS-S max, &16=adjust mono media -3dB, &(16|(8<<16))=adjust mono media +3dB, (&(32|4096|(16<<16))==32)=normalize as if files play together, (&(32|4096|(16<<16))==4096)=normalize to loudest file, (&(32|4096|(16<<16))==(32|4096))=normalize as if files play together (common gain), (&(32|4096|(16<<16))==(16<<16))=normalize to master mix, &64=enable brickwall limit, &128=brickwall limit true peak, (&(256|2048)==256)=only normalize files that are too loud, (&(256|2048)==2048)=only normalize files that are too quiet, &512=apply fade-in, &1024=apply fade-out, &16384=trim starting silence, &32768=trim ending silence, &(1<<16)=pad start with silence, &(2<<16)=pad end with silence, &(4<<16)=disable all render postprocessing, (&((32<<16)|(64<<16))==(32<<16))=limit as if files play together, (&((32<<16)|(64<<16))==(64<<16))=limit to master mix\nRENDER_NORMALIZE_TARGET: render normalization target (0.5 means -6.02dB, requires RENDER_NORMALIZE&1)\nRENDER_BRICKWALL: render brickwall limit (0.5 means -6.02dB, requires RENDER_NORMALIZE&64)\nRENDER_FADEIN: render fade-in (0.001 means 1 ms, requires RENDER_NORMALIZE&512)\nRENDER_FADEOUT: render fade-out (0.001 means 1 ms, requires RENDER_NORMALIZE&1024)\nRENDER_FADEINSHAPE: render fade-in shape\nRENDER_FADEOUTSHAPE: render fade-out shape\nRENDER_PADSTART: pad render start with silence (0.001 means 1ms, requires RENDER_NORMALIZE&(1<<16))\nRENDER_PADEND: pad render end with silence (0.001 means 1ms, requires RENDER_NORMALIZE&(2<<16))\nRENDER_TRIMSTART: trim render start threshold (0.5 means -6.02dB, requires RENDER_NORMALIZE&16384)\nRENDER_TRIMEND: trim render end threshold (0.5 means -6.02dB, requires RENDER_NORMALIZE&32768)\nRENDER_DELAY: seconds to delay start of render to allow FX to initialize and load samples (requires RENDER_SETTINGS&(16<<16))\nPROJECT_SRATE : sample rate (ignored unless PROJECT_SRATE_USE set)\nPROJECT_SRATE_USE : set to 1 if project sample rate is used"
	},
	"GetSetProjectInfo_String lua": {
		"prefix": "r.GetSetProjectInfo_String",
		"scope": "lua",
		"body": "rv, valuestrNeedBig = r.GetSetProjectInfo_String(0, ${2:desc}, ${3:valuestrNeedBig}, ${4:is_set})$0",
		"description": "Get or set project information.\nPROJECT_NAME : project file name (read-only, is_set will be ignored)\nPROJECT_TITLE : title field from Project Settings/Notes dialog\nPROJECT_AUTHOR : author field from Project Settings/Notes dialog\nTRACK_GROUP_NAME:X : track group name, X should be 1..64\nMARKER_GUID:X : get the GUID (unique ID) of the marker or region with index X, where X is the index passed to EnumProjectMarkers, not necessarily the displayed number (read-only)\nMARKER_INDEX_FROM_GUID:{GUID} : get the GUID index of the marker or region with GUID {GUID} (read-only)\nOPENCOPY_CFGIDX : integer for the configuration of format to use when creating copies/applying FX. 0=wave (auto-depth), 1=APPLYFX_FORMAT, 2=RECORD_FORMAT\nRECORD_PATH : recording directory -- may be blank or a relative path, to get the effective path see GetProjectPathEx()\nRECORD_PATH_SECONDARY : secondary recording directory\nRECORD_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. 'evaw' or 'l3pm', to use default settings for that sink type.\nAPPLYFX_FORMAT : base64-encoded sink configuration (see project files, etc). Used only if RECFMT_OPENCOPY is set to 1. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. 'evaw' or 'l3pm', to use default settings for that sink type.\nRECTAG : project recording tag wildcard ($rectag). Can be used in Preferences/Audio/Recording to auto-name recorded files.\nRENDER_FILE : render directory\nRENDER_PATTERN : render file name (may contain wildcards)\nRENDER_METADATA : get or set the metadata saved with the project (not metadata embedded in project media). Example, ID3 album name metadata: valuestr='ID3:TALB' to get, valuestr='ID3:TALB|my album name' to set. Call with valuestr='' and is_set=false to get a semicolon-separated list of defined project metadata identifiers.\nRENDER_TARGETS : semicolon separated list of files that would be written if the project is rendered using the most recent render settings\nRENDER_STATS : (read-only) semicolon separated list of statistics for the most recently rendered files. call with valuestr='XXX' to run an action (for example, '42437'=dry run render selected items) before returning statistics.\nRENDER_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. 'evaw' or 'l3pm', to use default settings for that sink type.\nRENDER_FORMAT2 : base64-encoded secondary sink configuration. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. 'evaw' or 'l3pm', to use default settings for that sink type, or '' to disable secondary render.\n&nbsp;&nbsp;&nbsp;&nbsp;Formats available on this machine:\n&nbsp;&nbsp;&nbsp;&nbsp;'wave' 'aiff' 'caff' 'raw ' 'mp3l' 'wvpk' 'OggS' 'flac' 'ddp ' 'iso ' 'oggv' 'FFMP' 'XAVF' 'GIF ' 'LCF '"
	},
	"GetSetProjectNotes lua": {
		"prefix": "r.GetSetProjectNotes",
		"scope": "lua",
		"body": "r.GetSetProjectNotes(0, ${2:set}, ${3:notes})$0",
		"description": "gets or sets project notes, notesNeedBig_sz is ignored when setting"
	},
	"GetSetRepeat lua": {
		"prefix": "r.GetSetRepeat",
		"scope": "lua",
		"body": "r.GetSetRepeat(${1:val})$0",
		"description": "-1 == query,0=clear,1=set,>1=toggle . returns new value"
	},
	"GetSetRepeatEx lua": {
		"prefix": "r.GetSetRepeatEx",
		"scope": "lua",
		"body": "r.GetSetRepeatEx(0, ${2:val})$0",
		"description": "-1 == query,0=clear,1=set,>1=toggle . returns new value"
	},
	"GetSetTempoTimeSigMarkerFlag lua": {
		"prefix": "r.GetSetTempoTimeSigMarkerFlag",
		"scope": "lua",
		"body": "r.GetSetTempoTimeSigMarkerFlag(0, ${2:point_index}, ${3:flag}, ${4:is_set})$0",
		"description": "Gets or sets the attribute flag of a tempo/time signature marker. flag &1=sets time signature and starts new measure, &2=does not set tempo, &4=allow previous partial measure if starting new measure, &8=set new metronome pattern if starting new measure, &16=reset ruler grid if starting new measure"
	},
	"GetSetTrackGroupMembership lua": {
		"prefix": "r.GetSetTrackGroupMembership",
		"scope": "lua",
		"body": "r.GetSetTrackGroupMembership(${1:tr}, ${2:groupname}, ${3:setmask}, ${4:setvalue})$0",
		"description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings)."
	},
	"GetSetTrackGroupMembershipEx lua": {
		"prefix": "r.GetSetTrackGroupMembershipEx",
		"scope": "lua",
		"body": "r.GetSetTrackGroupMembershipEx(${1:tr}, ${2:groupname}, ${3:offset}, ${4:setmask}, ${5:setvalue})$0",
		"description": "Gets or modifies 32 bits (at offset, where 0 is the low 32 bits of the grouping) of the group membership for a track. Returns group state prior to call. if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings)."
	},
	"GetSetTrackGroupMembershipHigh lua": {
		"prefix": "r.GetSetTrackGroupMembershipHigh",
		"scope": "lua",
		"body": "r.GetSetTrackGroupMembershipHigh(${1:tr}, ${2:groupname}, ${3:setmask}, ${4:setvalue})$0",
		"description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings)."
	},
	"GetSetTrackSendInfo_String lua": {
		"prefix": "r.GetSetTrackSendInfo_String",
		"scope": "lua",
		"body": "rv, stringNeedBig = r.GetSetTrackSendInfo_String(${1:tr}, ${2:category}, ${3:sendidx}, ${4:parmname}, ${5:stringNeedBig}, ${6:setNewValue})$0",
		"description": "Gets/sets a send attribute string:\nP_EXT:xyz : char * : extension-specific persistent data"
	},
	"GetSetTrackState lua": {
		"prefix": "r.GetSetTrackState",
		"scope": "lua",
		"body": "rv, str = r.GetSetTrackState(${1:track}, ${2:str})$0",
		"description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk"
	},
	"GetSetTrackState2 lua": {
		"prefix": "r.GetSetTrackState2",
		"scope": "lua",
		"body": "rv, str = r.GetSetTrackState2(${1:track}, ${2:str}, ${3:isundo})$0",
		"description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk"
	},
	"GetSet_ArrangeView2 lua": {
		"prefix": "r.GetSet_ArrangeView2",
		"scope": "lua",
		"body": "start_time, end_time = r.GetSet_ArrangeView2(0, ${2:isSet}, ${3:screen_x_start}, ${4:screen_x_end}, ${5:start_time}, ${6:end_time})$0",
		"description": "Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time"
	},
	"GetSet_LoopTimeRange lua": {
		"prefix": "r.GetSet_LoopTimeRange",
		"scope": "lua",
		"body": "start, end = r.GetSet_LoopTimeRange(${1:isSet}, ${2:isLoop}, ${3:start}, ${4:end}, ${5:allowautoseek})$0",
		"description": ""
	},
	"GetSet_LoopTimeRange2 lua": {
		"prefix": "r.GetSet_LoopTimeRange2",
		"scope": "lua",
		"body": "start, end = r.GetSet_LoopTimeRange2(0, ${2:isSet}, ${3:isLoop}, ${4:start}, ${5:end}, ${6:allowautoseek})$0",
		"description": ""
	},
	"GetSubProjectFromSource lua": {
		"prefix": "r.GetSubProjectFromSource",
		"scope": "lua",
		"body": "r.GetSubProjectFromSource(${1:src})$0",
		"description": ""
	},
	"GetTCPFXParm lua": {
		"prefix": "r.GetTCPFXParm",
		"scope": "lua",
		"body": "rv, fxindex, parmidx = r.GetTCPFXParm(0, ${2:track}, ${3:index})$0",
		"description": "Get information about a specific FX parameter knob (see CountTCPFXParms)."
	},
	"GetTake lua": {
		"prefix": "r.GetTake",
		"scope": "lua",
		"body": "r.GetTake(${1:item}, ${2:takeidx})$0",
		"description": "get a take from an item by take count (zero-based)"
	},
	"GetTakeEnvelope lua": {
		"prefix": "r.GetTakeEnvelope",
		"scope": "lua",
		"body": "r.GetTakeEnvelope(${1:take}, ${2:envidx})$0",
		"description": ""
	},
	"GetTakeEnvelopeByName lua": {
		"prefix": "r.GetTakeEnvelopeByName",
		"scope": "lua",
		"body": "r.GetTakeEnvelopeByName(${1:take}, ${2:envname})$0",
		"description": ""
	},
	"GetTakeMarker lua": {
		"prefix": "r.GetTakeMarker",
		"scope": "lua",
		"body": "num, name, color = r.GetTakeMarker(${1:take}, ${2:idx})$0",
		"description": "Get information about a take marker. Returns the position in media item source time, or -1 if the take marker does not exist. See GetNumTakeMarkers, SetTakeMarker, DeleteTakeMarker"
	},
	"GetTakeName lua": {
		"prefix": "r.GetTakeName",
		"scope": "lua",
		"body": "r.GetTakeName(${1:take})$0",
		"description": "returns NULL if the take is not valid"
	},
	"GetTakeNumStretchMarkers lua": {
		"prefix": "r.GetTakeNumStretchMarkers",
		"scope": "lua",
		"body": "r.GetTakeNumStretchMarkers(${1:take})$0",
		"description": "Returns number of stretch markers in take"
	},
	"GetTakeStretchMarker lua": {
		"prefix": "r.GetTakeStretchMarker",
		"scope": "lua",
		"body": "rv, pos, srcpos = r.GetTakeStretchMarker(${1:take}, ${2:idx})$0",
		"description": "Gets information on a stretch marker, idx is 0..n. Returns -1 if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, the following marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated."
	},
	"GetTakeStretchMarkerSlope lua": {
		"prefix": "r.GetTakeStretchMarkerSlope",
		"scope": "lua",
		"body": "r.GetTakeStretchMarkerSlope(${1:take}, ${2:idx})$0",
		"description": "See SetTakeStretchMarkerSlope"
	},
	"GetTempoMatchPlayRate lua": {
		"prefix": "r.GetTempoMatchPlayRate",
		"scope": "lua",
		"body": "rv, rate, targetlen = r.GetTempoMatchPlayRate(${1:source}, ${2:srcscale}, ${3:position}, ${4:mult})$0",
		"description": "finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256"
	},
	"GetTempoTimeSigMarker lua": {
		"prefix": "r.GetTempoTimeSigMarker",
		"scope": "lua",
		"body": "rv, timepos, measurepos, beatpos, bpm, timesig_num, timesig_denom, lineartempo = r.GetTempoTimeSigMarker(0, ${2:ptidx})$0",
		"description": "Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker."
	},
	"GetThemeColor lua": {
		"prefix": "r.GetThemeColor",
		"scope": "lua",
		"body": "r.GetThemeColor(${1:ini_key}, ${2:flags})$0",
		"description": "Returns the theme color specified, or -1 on failure. If the low bit of flags is set, the color as originally specified by the theme (before any transformations) is returned, otherwise the current (possibly transformed and modified) color is returned. See SetThemeColor for a list of valid ini_key."
	},
	"GetThingFromPoint lua": {
		"prefix": "r.GetThingFromPoint",
		"scope": "lua",
		"body": "rv, info = r.GetThingFromPoint(${1:screen_x}, ${2:screen_y})$0",
		"description": "Hit tests a point in screen coordinates. Updates infoOut with information such as 'arrange', 'fx_chain', 'fx_0' (first FX in chain, floating), 'spacer_0' (spacer before first track). If a track panel is hit, string will begin with 'tcp' or 'mcp' or 'tcp.mute' etc (future versions may append additional information). May return NULL with valid info string to indicate non-track thing."
	},
	"GetToggleCommandState lua": {
		"prefix": "r.GetToggleCommandState",
		"scope": "lua",
		"body": "r.GetToggleCommandState(${1:command_id})$0",
		"description": "See GetToggleCommandStateEx."
	},
	"GetToggleCommandStateEx lua": {
		"prefix": "r.GetToggleCommandStateEx",
		"scope": "lua",
		"body": "r.GetToggleCommandStateEx(${1:section_id}, ${2:command_id})$0",
		"description": "For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned."
	},
	"GetTooltipWindow lua": {
		"prefix": "r.GetTooltipWindow",
		"scope": "lua",
		"body": "r.GetTooltipWindow()$0",
		"description": "gets a tooltip window,in case you want to ask it for font information. Can return NULL."
	},
	"GetTouchedOrFocusedFX lua": {
		"prefix": "r.GetTouchedOrFocusedFX",
		"scope": "lua",
		"body": "rv, trackidx, itemidx, takeidx, fxidx, parm = r.GetTouchedOrFocusedFX(${1:mode})$0",
		"description": "mode can be 0 to query last touched parameter, or 1 to query currently focused FX. Returns false if failed. If successful, trackIdxOut will be track index (-1 is master track, 0 is first track). itemidxOut will be 0-based item index if an item, or -1 if not an item. takeidxOut will be 0-based take index. fxidxOut will be FX index, potentially with 0x2000000 set to signify container-addressing, or with 0x1000000 set to signify record-input FX. parmOut will be set to the parameter index if querying last-touched. parmOut will have 1 set if querying focused state and FX is no longer focused but still open."
	},
	"GetTrack lua": {
		"prefix": "r.GetTrack",
		"scope": "lua",
		"body": "r.GetTrack(0, ${2:trackidx})$0",
		"description": "get a track from a project by track count (zero-based) (proj=0 for active project)"
	},
	"GetTrackAutomationMode lua": {
		"prefix": "r.GetTrackAutomationMode",
		"scope": "lua",
		"body": "r.GetTrackAutomationMode(${1:tr})$0",
		"description": "return the track mode, regardless of global override"
	},
	"GetTrackColor lua": {
		"prefix": "r.GetTrackColor",
		"scope": "lua",
		"body": "r.GetTrackColor(${1:track})$0",
		"description": "Returns the track custom color as OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). Black is returned as 0x1000000, no color setting is returned as 0."
	},
	"GetTrackDepth lua": {
		"prefix": "r.GetTrackDepth",
		"scope": "lua",
		"body": "r.GetTrackDepth(${1:track})$0",
		"description": ""
	},
	"GetTrackEnvelope lua": {
		"prefix": "r.GetTrackEnvelope",
		"scope": "lua",
		"body": "r.GetTrackEnvelope(${1:track}, ${2:envidx})$0",
		"description": ""
	},
	"GetTrackEnvelopeByChunkName lua": {
		"prefix": "r.GetTrackEnvelopeByChunkName",
		"scope": "lua",
		"body": "r.GetTrackEnvelopeByChunkName(${1:tr}, ${2:cfgchunkname_or_guid})$0",
		"description": "Gets a built-in track envelope by configuration chunk name, like '<VOLENV', or GUID string, like '{B577250D-146F-B544-9B34-F24FBE488F1F}'."
	},
	"GetTrackEnvelopeByName lua": {
		"prefix": "r.GetTrackEnvelopeByName",
		"scope": "lua",
		"body": "r.GetTrackEnvelopeByName(${1:track}, ${2:envname})$0",
		"description": ""
	},
	"GetTrackFromPoint lua": {
		"prefix": "r.GetTrackFromPoint",
		"scope": "lua",
		"body": "rv, info = r.GetTrackFromPoint(${1:screen_x}, ${2:screen_y})$0",
		"description": "Returns the track from the screen coordinates specified. If the screen coordinates refer to a window associated to the track (such as FX), the track will be returned. infoOutOptional will be set to 1 if it is likely an envelope, 2 if it is likely a track FX. For a free item positioning or fixed lane track, the second byte of infoOutOptional will be set to the (approximate, for fipm tracks) item lane underneath the mouse. See GetThingFromPoint."
	},
	"GetTrackGUID lua": {
		"prefix": "r.GetTrackGUID",
		"scope": "lua",
		"body": "r.GetTrackGUID(${1:tr})$0",
		"description": ""
	},
	"GetTrackMIDILyrics lua": {
		"prefix": "r.GetTrackMIDILyrics",
		"scope": "lua",
		"body": "rv, buf = r.GetTrackMIDILyrics(${1:track}, ${2:flag})$0",
		"description": "Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&1: double tabs at the end of each measure and triple tabs when skipping measures, flag&2: each lyric is preceded by its beat position in the project (example with flag=2: '1.1.2\\tLyric for measure 1 beat 2\\t2.1.1\\tLyric for measure 2 beat 1\t'). See SetTrackMIDILyrics"
	},
	"GetTrackMIDINoteName lua": {
		"prefix": "r.GetTrackMIDINoteName",
		"scope": "lua",
		"body": "r.GetTrackMIDINoteName(${1:track}, ${2:pitch}, ${3:chan})$0",
		"description": "see GetTrackMIDINoteNameEx"
	},
	"GetTrackMIDINoteNameEx lua": {
		"prefix": "r.GetTrackMIDINoteNameEx",
		"scope": "lua",
		"body": "r.GetTrackMIDINoteNameEx(0, ${2:track}, ${3:pitch}, ${4:chan})$0",
		"description": "Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx"
	},
	"GetTrackMIDINoteRange lua": {
		"prefix": "r.GetTrackMIDINoteRange",
		"scope": "lua",
		"body": "note_lo, note_hi = r.GetTrackMIDINoteRange(0, ${2:track})$0",
		"description": ""
	},
	"GetTrackMediaItem lua": {
		"prefix": "r.GetTrackMediaItem",
		"scope": "lua",
		"body": "r.GetTrackMediaItem(${1:tr}, ${2:itemidx})$0",
		"description": ""
	},
	"GetTrackName lua": {
		"prefix": "r.GetTrackName",
		"scope": "lua",
		"body": "rv, buf = r.GetTrackName(${1:track})$0",
		"description": "Returns 'MASTER' for master track, 'Track N' if track has no name."
	},
	"GetTrackNumMediaItems lua": {
		"prefix": "r.GetTrackNumMediaItems",
		"scope": "lua",
		"body": "r.GetTrackNumMediaItems(${1:tr})$0",
		"description": ""
	},
	"GetTrackNumSends lua": {
		"prefix": "r.GetTrackNumSends",
		"scope": "lua",
		"body": "r.GetTrackNumSends(${1:tr}, ${2:category})$0",
		"description": "returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs"
	},
	"GetTrackReceiveName lua": {
		"prefix": "r.GetTrackReceiveName",
		"scope": "lua",
		"body": "rv, buf = r.GetTrackReceiveName(${1:track}, ${2:recv_index})$0",
		"description": "See GetTrackSendName."
	},
	"GetTrackReceiveUIMute lua": {
		"prefix": "r.GetTrackReceiveUIMute",
		"scope": "lua",
		"body": "rv, mute = r.GetTrackReceiveUIMute(${1:track}, ${2:recv_index})$0",
		"description": "See GetTrackSendUIMute."
	},
	"GetTrackReceiveUIVolPan lua": {
		"prefix": "r.GetTrackReceiveUIVolPan",
		"scope": "lua",
		"body": "rv, volume, pan = r.GetTrackReceiveUIVolPan(${1:track}, ${2:recv_index})$0",
		"description": "See GetTrackSendUIVolPan."
	},
	"GetTrackSendInfo_Value lua": {
		"prefix": "r.GetTrackSendInfo_Value",
		"scope": "lua",
		"body": "r.GetTrackSendInfo_Value(${1:tr}, ${2:category}, ${3:sendidx}, ${4:parmname})$0",
		"description": "Get send/receive/hardware output numerical-value attributes.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\nB_MUTE : bool *\nB_PHASE : bool * : true to flip phase\nB_MONO : bool *\nD_VOL : double * : 1.0 = +0dB etc\nD_PAN : double * : -1..+1\nD_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\nI_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.\nI_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.\nI_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, 31=MIDI send disabled, next 5 bits=dest channel, 0=orig, 1-16=chan. &1024 for faders-send MIDI vol/pan. (>>14)&255 = src bus (0 for all, 1 for normal, 2+). (>>22)&255=destination bus (0 for all, 1 for normal, 2+)\nP_DESTTRACK : MediaTrack * : destination track, only applies for sends/recvs (read-only)\nP_SRCTRACK : MediaTrack * : source track, only applies for sends/recvs (read-only)\nP_ENV:<envchunkname : TrackEnvelope * : call with :<VOLENV, :<PANENV, etc appended (read-only)\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends."
	},
	"GetTrackSendName lua": {
		"prefix": "r.GetTrackSendName",
		"scope": "lua",
		"body": "rv, buf = r.GetTrackSendName(${1:track}, ${2:send_index})$0",
		"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName."
	},
	"GetTrackSendUIMute lua": {
		"prefix": "r.GetTrackSendUIMute",
		"scope": "lua",
		"body": "rv, mute = r.GetTrackSendUIMute(${1:track}, ${2:send_index})$0",
		"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute."
	},
	"GetTrackSendUIVolPan lua": {
		"prefix": "r.GetTrackSendUIVolPan",
		"scope": "lua",
		"body": "rv, volume, pan = r.GetTrackSendUIVolPan(${1:track}, ${2:send_index})$0",
		"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan."
	},
	"GetTrackState lua": {
		"prefix": "r.GetTrackState",
		"scope": "lua",
		"body": "str, flags = r.GetTrackState(${1:track})$0",
		"description": "Gets track state, returns track name.\nflags will be set to:\n&1=folder\n&2=selected\n&4=has fx enabled\n&8=muted\n&16=soloed\n&32=SIP'd (with &16)\n&64=rec armed\n&128=rec monitoring on\n&256=rec monitoring auto\n&512=hide from TCP\n&1024=hide from MCP"
	},
	"GetTrackStateChunk lua": {
		"prefix": "r.GetTrackStateChunk",
		"scope": "lua",
		"body": "rv, str = r.GetTrackStateChunk(${1:track}, ${2:str}, ${3:isundo})$0",
		"description": "Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint."
	},
	"GetTrackUIMute lua": {
		"prefix": "r.GetTrackUIMute",
		"scope": "lua",
		"body": "rv, mute = r.GetTrackUIMute(${1:track})$0",
		"description": ""
	},
	"GetTrackUIPan lua": {
		"prefix": "r.GetTrackUIPan",
		"scope": "lua",
		"body": "rv, pan1, pan2, panmode = r.GetTrackUIPan(${1:track})$0",
		"description": ""
	},
	"GetTrackUIVolPan lua": {
		"prefix": "r.GetTrackUIVolPan",
		"scope": "lua",
		"body": "rv, volume, pan = r.GetTrackUIVolPan(${1:track})$0",
		"description": ""
	},
	"GetUnderrunTime lua": {
		"prefix": "r.GetUnderrunTime",
		"scope": "lua",
		"body": "audio_xrun, media_xrun, curtime = r.GetUnderrunTime()$0",
		"description": "retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)"
	},
	"GetUserFileNameForRead lua": {
		"prefix": "r.GetUserFileNameForRead",
		"scope": "lua",
		"body": "rv, filenameNeed4096 = r.GetUserFileNameForRead(${1:filenameNeed4096}, ${2:title}, ${3:defext})$0",
		"description": "returns true if the user selected a valid file, false if the user canceled the dialog"
	},
	"GetUserInputs lua": {
		"prefix": "r.GetUserInputs",
		"scope": "lua",
		"body": "rv, retvals_csv = r.GetUserInputs(${1:title}, ${2:num_inputs}, ${3:captions_csv}, ${4:retvals_csv})$0",
		"description": "Get values from the user.\nIf a caption begins with *, for example '*password', the edit field will not display the input text.\nMaximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. You can supply special extra information via additional caption fields: extrawidth=XXX to increase text field width, separator=X to use a different separator for returned fields."
	},
	"GoToMarker lua": {
		"prefix": "r.GoToMarker",
		"scope": "lua",
		"body": "r.GoToMarker(0, ${2:marker_index}, ${3:use_timeline_order})$0",
		"description": "Go to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline.  If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1."
	},
	"GoToRegion lua": {
		"prefix": "r.GoToRegion",
		"scope": "lua",
		"body": "r.GoToRegion(0, ${2:region_index}, ${3:use_timeline_order})$0",
		"description": "Seek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline.  If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1."
	},
	"HasExtState lua": {
		"prefix": "r.HasExtState",
		"scope": "lua",
		"body": "r.HasExtState(${1:section}, ${2:key})$0",
		"description": "Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState."
	},
	"HasTrackMIDIPrograms lua": {
		"prefix": "r.HasTrackMIDIPrograms",
		"scope": "lua",
		"body": "r.HasTrackMIDIPrograms(${1:track})$0",
		"description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none"
	},
	"HasTrackMIDIProgramsEx lua": {
		"prefix": "r.HasTrackMIDIProgramsEx",
		"scope": "lua",
		"body": "r.HasTrackMIDIProgramsEx(0, ${2:track})$0",
		"description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none"
	},
	"Help_Set lua": {
		"prefix": "r.Help_Set",
		"scope": "lua",
		"body": "r.Help_Set(${1:helpstring}, ${2:is_temporary_help})$0",
		"description": ""
	},
	"HoveredFlags_AllowWhenBlockedByActiveItem lua": {
		"prefix": "ImGui.HoveredFlags_AllowWhenBlockedByActiveItem",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_AllowWhenBlockedByActiveItem$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > HoveredFlags_AllowWhenBlockedByActiveItem**\nReturn true even if an active item is blocking access to this item/window.\nUseful for Drag and Drop patterns.\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.1\n "
	},
	"HoveredFlags_AllowWhenBlockedByPopup lua": {
		"prefix": "ImGui.HoveredFlags_AllowWhenBlockedByPopup",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_AllowWhenBlockedByPopup$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > HoveredFlags_AllowWhenBlockedByPopup**\nReturn true even if a popup window is normally blocking access to this item/window.\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.1\n "
	},
	"HoveredFlags_AllowWhenDisabled lua": {
		"prefix": "ImGui.HoveredFlags_AllowWhenDisabled",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_AllowWhenDisabled$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > For IsItemHovered > HoveredFlags_AllowWhenDisabled**\nReturn true even if the item is disabled.\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.1\n "
	},
	"HoveredFlags_AllowWhenOverlapped lua": {
		"prefix": "ImGui.HoveredFlags_AllowWhenOverlapped",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_AllowWhenOverlapped$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > For IsItemHovered > HoveredFlags_AllowWhenOverlapped**\nHoveredFlags_AllowWhenOverlappedByItem | HoveredFlags_AllowWhenOverlappedByWindow\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.1\n "
	},
	"HoveredFlags_AllowWhenOverlappedByItem lua": {
		"prefix": "ImGui.HoveredFlags_AllowWhenOverlappedByItem",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_AllowWhenOverlappedByItem$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > For IsItemHovered > HoveredFlags_AllowWhenOverlappedByItem**\nReturn true even if the item uses AllowOverlap mode and is overlapped by\nanother hoverable item.\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.9\n "
	},
	"HoveredFlags_AllowWhenOverlappedByWindow lua": {
		"prefix": "ImGui.HoveredFlags_AllowWhenOverlappedByWindow",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_AllowWhenOverlappedByWindow$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > For IsItemHovered > HoveredFlags_AllowWhenOverlappedByWindow**\nReturn true even if the position is obstructed or overlapped by another window.\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.9\n "
	},
	"HoveredFlags_AnyWindow lua": {
		"prefix": "ImGui.HoveredFlags_AnyWindow",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_AnyWindow$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > For IsWindowHovered > HoveredFlags_AnyWindow**\nReturn true if any window is hovered.\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.1\n "
	},
	"HoveredFlags_ChildWindows lua": {
		"prefix": "ImGui.HoveredFlags_ChildWindows",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_ChildWindows$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > For IsWindowHovered > HoveredFlags_ChildWindows**\nReturn true if any children of the window is hovered.\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.1\n "
	},
	"HoveredFlags_DelayNone lua": {
		"prefix": "ImGui.HoveredFlags_DelayNone",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_DelayNone$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > For IsItemHovered > Mouse Hovering Delays > HoveredFlags_DelayNone**\nReturn true immediately (default). As this is the default you generally ignore this.\n**Item & Status > Hovered Flags > For IsItemHovered > Mouse Hovering Delays**\nGenerally you can use HoveredFlags_ForTooltip to use application-standardized flags.\nUse those if you need specific overrides. See also HoveredFlags_Stationary.\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.9\n "
	},
	"HoveredFlags_DelayNormal lua": {
		"prefix": "ImGui.HoveredFlags_DelayNormal",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_DelayNormal$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > For IsItemHovered > Mouse Hovering Delays > HoveredFlags_DelayNormal**\nReturn true after ConfigVar_HoverDelayNormal elapsed (~0.40 sec)\n(shared between items) + requires mouse to be stationary for\nConfigVar_HoverStationaryDelay (once per item).\n**Item & Status > Hovered Flags > For IsItemHovered > Mouse Hovering Delays**\nGenerally you can use HoveredFlags_ForTooltip to use application-standardized flags.\nUse those if you need specific overrides. See also HoveredFlags_Stationary.\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.8\n "
	},
	"HoveredFlags_DelayShort lua": {
		"prefix": "ImGui.HoveredFlags_DelayShort",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_DelayShort$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > For IsItemHovered > Mouse Hovering Delays > HoveredFlags_DelayShort**\nReturn true after ConfigVar_HoverDelayShort elapsed (~0.15 sec)\n(shared between items) + requires mouse to be stationary for\nConfigVar_HoverStationaryDelay (once per item).\n**Item & Status > Hovered Flags > For IsItemHovered > Mouse Hovering Delays**\nGenerally you can use HoveredFlags_ForTooltip to use application-standardized flags.\nUse those if you need specific overrides. See also HoveredFlags_Stationary.\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.8\n "
	},
	"HoveredFlags_DockHierarchy lua": {
		"prefix": "ImGui.HoveredFlags_DockHierarchy",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_DockHierarchy$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > For IsWindowHovered > HoveredFlags_DockHierarchy**\nConsider docking hierarchy (treat dockspace host as\nparent of docked window) (when used with _ChildWindows or _RootWindow).\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.5.10\n "
	},
	"HoveredFlags_ForTooltip lua": {
		"prefix": "ImGui.HoveredFlags_ForTooltip",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_ForTooltip$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > HoveredFlags_ForTooltip**\nTypically used with IsItemHovered() before SetTooltip().\nThis is a shortcut to pull flags from ConfigVar_HoverFlagsForTooltip* where\nyou can reconfigure the desired behavior.\nFor frequently actioned or hovered items providing a tooltip, you want may to use\nthis (defaults to stationary + delay) so the tooltip doesn't show too often.\nFor items which main purpose is to be hovered, or items with low affordance,\nor in less consistent apps, prefer no delay or shorter delay.\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.9\n "
	},
	"HoveredFlags_NoNavOverride lua": {
		"prefix": "ImGui.HoveredFlags_NoNavOverride",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_NoNavOverride$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > HoveredFlags_NoNavOverride**\nDisable using gamepad/keyboard navigation state when active, always query mouse.\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.7\n "
	},
	"HoveredFlags_NoPopupHierarchy lua": {
		"prefix": "ImGui.HoveredFlags_NoPopupHierarchy",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_NoPopupHierarchy$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > For IsWindowHovered > HoveredFlags_NoPopupHierarchy**\nDo not consider popup hierarchy (do not treat popup\nemitter as parent of popup) (when used with _ChildWindows or _RootWindow).\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.5.10\n "
	},
	"HoveredFlags_NoSharedDelay lua": {
		"prefix": "ImGui.HoveredFlags_NoSharedDelay",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_NoSharedDelay$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > For IsItemHovered > Mouse Hovering Delays > HoveredFlags_NoSharedDelay**\nDisable shared delay system where moving from one item to the next keeps\nthe previous timer for a short time (standard for tooltips with long delays\n**Item & Status > Hovered Flags > For IsItemHovered > Mouse Hovering Delays**\nGenerally you can use HoveredFlags_ForTooltip to use application-standardized flags.\nUse those if you need specific overrides. See also HoveredFlags_Stationary.\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.8\n "
	},
	"HoveredFlags_None lua": {
		"prefix": "ImGui.HoveredFlags_None",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_None$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > HoveredFlags_None**\nReturn true if directly over the item/window, not obstructed by another\nwindow, not obstructed by an active popup or modal blocking inputs under them.\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.1\n "
	},
	"HoveredFlags_RectOnly lua": {
		"prefix": "ImGui.HoveredFlags_RectOnly",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_RectOnly$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > For IsItemHovered > HoveredFlags_RectOnly**\nHoveredFlags_AllowWhenBlockedByPopup |\nHoveredFlags_AllowWhenBlockedByActiveItem | HoveredFlags_AllowWhenOverlapped\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.1\n "
	},
	"HoveredFlags_RootAndChildWindows lua": {
		"prefix": "ImGui.HoveredFlags_RootAndChildWindows",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_RootAndChildWindows$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > For IsWindowHovered > HoveredFlags_RootAndChildWindows**\nHoveredFlags_RootWindow | HoveredFlags_ChildWindows\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.1\n "
	},
	"HoveredFlags_RootWindow lua": {
		"prefix": "ImGui.HoveredFlags_RootWindow",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_RootWindow$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > For IsWindowHovered > HoveredFlags_RootWindow**\nTest from root window (top most parent of the current hierarchy).\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.1\n "
	},
	"HoveredFlags_Stationary lua": {
		"prefix": "ImGui.HoveredFlags_Stationary",
		"scope": "lua",
		"body": "ImGui.HoveredFlags_Stationary$0",
		"description": "@type integer\n---\n**Item & Status > Hovered Flags > HoveredFlags_Stationary**\nRequire mouse to be stationary for ConfigVar_HoverStationaryDelay (~0.15 sec)\n_at least one time_. After this, can move on same item/window.\nUsing the stationary test tends to reduces the need for a long delay.\n**Item & Status > Hovered Flags**\nFor IsItemHovered and IsWindowHovered.\n@since 0.9\n "
	},
	"ImGui_AcceptDragDropPayload lua": {
		"prefix": "ImGui.AcceptDragDropPayload",
		"scope": "lua",
		"body": "ImGui.AcceptDragDropPayload(ctx, ${2:type}, ${3:_1}, ${4:flags})$0",
		"description": "**Drag & Drop > AcceptDragDropPayload**\nAccept contents of a given type. If DragDropFlags_AcceptBeforeDelivery is set\nyou can peek into the payload before the mouse button is released.\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target."
	},
	"ImGui_AcceptDragDropPayloadFiles lua": {
		"prefix": "ImGui.AcceptDragDropPayloadFiles",
		"scope": "lua",
		"body": "ImGui.AcceptDragDropPayloadFiles(ctx, ${2:_1}, ${3:flags})$0",
		"description": "**Drag & Drop > AcceptDragDropPayloadFiles**\nAccept a list of dropped files. See AcceptDragDropPayload and GetDragDropPayloadFile.\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target."
	},
	"ImGui_AcceptDragDropPayloadRGB lua": {
		"prefix": "ImGui.AcceptDragDropPayloadRGB",
		"scope": "lua",
		"body": "ImGui.AcceptDragDropPayloadRGB(ctx, ${2:_1}, ${3:flags})$0",
		"description": "**Drag & Drop > AcceptDragDropPayloadRGB**\nAccept a RGB color. See AcceptDragDropPayload.\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target."
	},
	"ImGui_AcceptDragDropPayloadRGBA lua": {
		"prefix": "ImGui.AcceptDragDropPayloadRGBA",
		"scope": "lua",
		"body": "ImGui.AcceptDragDropPayloadRGBA(ctx, ${2:_1}, ${3:flags})$0",
		"description": "**Drag & Drop > AcceptDragDropPayloadRGBA**\nAccept a RGBA color. See AcceptDragDropPayload.\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target."
	},
	"ImGui_AlignTextToFramePadding lua": {
		"prefix": "ImGui.AlignTextToFramePadding",
		"scope": "lua",
		"body": "ImGui.AlignTextToFramePadding(ctx)$0",
		"description": "**Text > AlignTextToFramePadding**\nVertically align upcoming text baseline to StyleVar_FramePadding.y so that it\nwill align properly to regularly framed items (call if you have text on a line\nbefore a framed item)."
	},
	"ImGui_ArrowButton lua": {
		"prefix": "ImGui.ArrowButton",
		"scope": "lua",
		"body": "ImGui.ArrowButton(ctx, ${2:str_id}, ${3:dir})$0",
		"description": "**Button > ArrowButton**\nSquare button with an arrow shape. 'dir' is one of the Dir_* values\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state."
	},
	"ImGui_Attach lua": {
		"prefix": "ImGui.Attach",
		"scope": "lua",
		"body": "ImGui.Attach(ctx, ${2:obj})$0",
		"description": "**Context > Attach**\nLink the object's lifetime to the given context.\nObjects can be draw list splitters, fonts, images, list clippers, etc.\nCall Detach to let the object be garbage-collected after unuse again.\nList clipper objects may only be attached to the context they were created for.\nFonts are (currently) a special case: they must be attached to the context\nbefore usage. Furthermore, fonts may only be attached or detached immediately\nafter the context is created or before any other function calls modifying the\ncontext per defer cycle. See 'limitations' in the font API documentation."
	},
	"ImGui_Begin lua": {
		"prefix": "ImGui.Begin",
		"scope": "lua",
		"body": "ImGui.Begin(ctx, ${2:name}, ${3:p_open}, ${4:flags})$0",
		"description": "**Window > Begin**\nPush window to the stack and start appending to it.\n- Passing true to 'p_open' shows a window-closing widget in the upper-right\ncorner of the window, which clicking will set the boolean to false when returned.\n- You may append multiple times to the same window during the same frame by\ncalling Begin()/End() pairs multiple times. Some information such as 'flags'\nor 'p_open' will only be considered by the first call to Begin().\n- Begin() return false to indicate the window is collapsed or fully clipped,\nso you may early out and omit submitting anything to the window.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_BeginChild lua": {
		"prefix": "ImGui.BeginChild",
		"scope": "lua",
		"body": "ImGui.BeginChild(ctx, ${2:str_id}, ${3:size_w}, ${4:size_h}, ${5:child_flags}, ${6:window_flags})$0",
		"description": "**Window > Child Windows > BeginChild**\nManual sizing (each axis can use a different setting e.g. size_w=0 and size_h=400):\n- = 0.0: use remaining parent window size for this axis\n- > 0.0: use specified size for this axis\n- < 0.0: right/bottom-align to specified distance from available content boundaries\nSpecifying ChildFlags_AutoResizeX or ChildFlags_AutoResizeY makes the sizing\nautomatic based on child contents.\nCombining both ChildFlags_AutoResizeX _and_ ChildFlags_AutoResizeY defeats\npurpose of a scrolling region and is NOT recommended.\nReturns false to indicate the window is collapsed or fully clipped.\n**Window > Child Windows**\nUse child windows to begin into a self-contained independent\nscrolling/clipping regions within a host window.\nChild windows can embed their own child.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_BeginCombo lua": {
		"prefix": "ImGui.BeginCombo",
		"scope": "lua",
		"body": "ImGui.BeginCombo(ctx, ${2:label}, ${3:preview_value}, ${4:flags})$0",
		"description": "**Combo & List > Combo Box (Dropdown) > BeginCombo**\nThe BeginCombo/EndCombo API allows you to manage your contents and selection\nstate however you want it, by creating e.g. Selectable items."
	},
	"ImGui_BeginDisabled lua": {
		"prefix": "ImGui.BeginDisabled",
		"scope": "lua",
		"body": "ImGui.BeginDisabled(ctx, ${2:disabled})$0",
		"description": "**Item & Status > BeginDisabled**\nDisable all user interactions and dim items visuals\n(applying StyleVar_DisabledAlpha over current colors).\nThose can be nested but it cannot be used to enable an already disabled section\n(a single BeginDisabled(true) in the stack is enough to keep everything disabled).\nTooltips windows by exception are opted out of disabling.\nBeginDisabled(false) essentially does nothing useful but is provided to\nfacilitate use of boolean expressions.\nIf you can avoid calling BeginDisabled(false)/EndDisabled() best to avoid it."
	},
	"ImGui_BeginDragDropSource lua": {
		"prefix": "ImGui.BeginDragDropSource",
		"scope": "lua",
		"body": "ImGui.BeginDragDropSource(ctx, ${2:flags})$0",
		"description": "**Drag & Drop > BeginDragDropSource**\nCall after submitting an item which may be dragged. when this return true,\nyou can call SetDragDropPayload() + EndDragDropSource()\nIf you stop calling BeginDragDropSource() the payload is preserved however\nit won't have a preview tooltip (we currently display a fallback '...' tooltip\nas replacement).\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target."
	},
	"ImGui_BeginDragDropTarget lua": {
		"prefix": "ImGui.BeginDragDropTarget",
		"scope": "lua",
		"body": "ImGui.BeginDragDropTarget(ctx)$0",
		"description": "**Drag & Drop > BeginDragDropTarget**\nCall after submitting an item that may receive a payload.\nIf this returns true, you can call AcceptDragDropPayload + EndDragDropTarget.\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target."
	},
	"ImGui_BeginGroup lua": {
		"prefix": "ImGui.BeginGroup",
		"scope": "lua",
		"body": "ImGui.BeginGroup(ctx)$0",
		"description": "**Layout > BeginGroup**\nLock horizontal starting position. See EndGroup."
	},
	"ImGui_BeginItemTooltip lua": {
		"prefix": "ImGui.BeginItemTooltip",
		"scope": "lua",
		"body": "ImGui.BeginItemTooltip(ctx)$0",
		"description": "**Popup & Modal > Tooltips > BeginItemTooltip**\nBegin/append a tooltip window if preceding item was hovered. Shortcut for\n`IsItemHovered(HoveredFlags_ForTooltip) && BeginTooltip()`.\n**Popup & Modal > Tooltips**\nTooltips are windows following the mouse. They do not take focus away.\nA tooltip window can contain items of any type.\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack."
	},
	"ImGui_BeginListBox lua": {
		"prefix": "ImGui.BeginListBox",
		"scope": "lua",
		"body": "ImGui.BeginListBox(ctx, ${2:label}, ${3:size_w}, ${4:size_h})$0",
		"description": "**Combo & List > List Boxes > BeginListBox**\nOpen a framed scrolling region.\nYou can submit contents and manage your selection state however you want it,\nby creating e.g. Selectable or any other items.\n- Choose frame width:\n- width  > 0.0: custom\n- width  < 0.0 or -FLT_MIN: right-align\n- width  = 0.0 (default): use current ItemWidth\n- Choose frame height:\n- height > 0.0: custom\n- height < 0.0 or -FLT_MIN: bottom-align\n- height = 0.0 (default): arbitrary default height which can fit ~7 items\nSee EndListBox.\n**Combo & List > List Boxes**\nThis is essentially a thin wrapper to using BeginChild/EndChild with the\nChildFlags_FrameStyle flag for stylistic changes + displaying a label."
	},
	"ImGui_BeginMenu lua": {
		"prefix": "ImGui.BeginMenu",
		"scope": "lua",
		"body": "ImGui.BeginMenu(ctx, ${2:label}, ${3:enabled})$0",
		"description": "**Menu > BeginMenu**\nCreate a sub-menu entry. only call EndMenu if this returns true!"
	},
	"ImGui_BeginMenuBar lua": {
		"prefix": "ImGui.BeginMenuBar",
		"scope": "lua",
		"body": "ImGui.BeginMenuBar(ctx)$0",
		"description": "**Menu > BeginMenuBar**\nAppend to menu-bar of current window (requires WindowFlags_MenuBar flag set\non parent window). See EndMenuBar."
	},
	"ImGui_BeginPopup lua": {
		"prefix": "ImGui.BeginPopup",
		"scope": "lua",
		"body": "ImGui.BeginPopup(ctx, ${2:str_id}, ${3:flags})$0",
		"description": "**Popup & Modal > BeginPopup**\nQuery popup state, if open start appending into the window. Call EndPopup\nafterwards if returned true. WindowFlags* are forwarded to the window.\nReturn true if the popup is open, and you can start outputting to it.\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack."
	},
	"ImGui_BeginPopupContextItem lua": {
		"prefix": "ImGui.BeginPopupContextItem",
		"scope": "lua",
		"body": "ImGui.BeginPopupContextItem(ctx, ${2:str_id}, ${3:popup_flags})$0",
		"description": "**Popup & Modal > Open+Begin Combined Helpers > BeginPopupContextItem**\nThis is a helper to handle the simplest case of associating one named popup\nto one given widget. You can pass a nil str_id to use the identifier of the last\nitem. This is essentially the same as calling OpenPopupOnItemClick + BeginPopup\nbut written to avoid computing the ID twice because BeginPopupContext*\nfunctions may be called very frequently.\nIf you want to use that on a non-interactive item such as Text you need to pass\nin an explicit ID here.\n**Popup & Modal > Open+Begin Combined Helpers**\nHelpers to do OpenPopup+BeginPopup where the Open action is triggered by e.g.\nhovering an item and right-clicking. They are convenient to easily create\ncontext menus, hence the name.\nNotice that BeginPopupContext* takes PopupFlags_* just like OpenPopup and\nunlike BeginPopup.\nWe exceptionally default their flags to 1 (== PopupFlags_MouseButtonRight) for\nbackward compatibility with older API taking 'int mouse_button = 1' parameter,\nso if you add other flags remember to re-add the PopupFlags_MouseButtonRight.\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack."
	},
	"ImGui_BeginPopupContextWindow lua": {
		"prefix": "ImGui.BeginPopupContextWindow",
		"scope": "lua",
		"body": "ImGui.BeginPopupContextWindow(ctx, ${2:str_id}, ${3:popup_flags})$0",
		"description": "**Popup & Modal > Open+Begin Combined Helpers > BeginPopupContextWindow**\nOpen+begin popup when clicked on current window.\n**Popup & Modal > Open+Begin Combined Helpers**\nHelpers to do OpenPopup+BeginPopup where the Open action is triggered by e.g.\nhovering an item and right-clicking. They are convenient to easily create\ncontext menus, hence the name.\nNotice that BeginPopupContext* takes PopupFlags_* just like OpenPopup and\nunlike BeginPopup.\nWe exceptionally default their flags to 1 (== PopupFlags_MouseButtonRight) for\nbackward compatibility with older API taking 'int mouse_button = 1' parameter,\nso if you add other flags remember to re-add the PopupFlags_MouseButtonRight.\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack."
	},
	"ImGui_BeginPopupModal lua": {
		"prefix": "ImGui.BeginPopupModal",
		"scope": "lua",
		"body": "ImGui.BeginPopupModal(ctx, ${2:name}, ${3:p_open}, ${4:flags})$0",
		"description": "**Popup & Modal > BeginPopupModal**\nBlock every interaction behind the window, cannot be closed by user, add a\ndimming background, has a title bar. Return true if the modal is open, and you\ncan start outputting to it. See BeginPopup.\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack."
	},
	"ImGui_BeginTabBar lua": {
		"prefix": "ImGui.BeginTabBar",
		"scope": "lua",
		"body": "ImGui.BeginTabBar(ctx, ${2:str_id}, ${3:flags})$0",
		"description": "**Tab Bar > BeginTabBar**\nCreate and append into a TabBar."
	},
	"ImGui_BeginTabItem lua": {
		"prefix": "ImGui.BeginTabItem",
		"scope": "lua",
		"body": "ImGui.BeginTabItem(ctx, ${2:label}, ${3:p_open}, ${4:flags})$0",
		"description": "**Tab Bar > Tab Item > BeginTabItem**\nCreate a Tab. Returns true if the Tab is selected.\nSet 'p_open' to true to enable the close button."
	},
	"ImGui_BeginTable lua": {
		"prefix": "ImGui.BeginTable",
		"scope": "lua",
		"body": "ImGui.BeginTable(ctx, ${2:str_id}, ${3:columns}, ${4:flags}, ${5:outer_size_w}, ${6:outer_size_h}, ${7:inner_width})$0",
		"description": "**Table > BeginTable**\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_BeginTooltip lua": {
		"prefix": "ImGui.BeginTooltip",
		"scope": "lua",
		"body": "ImGui.BeginTooltip(ctx)$0",
		"description": "**Popup & Modal > Tooltips > BeginTooltip**\nBegin/append a tooltip window.\n**Popup & Modal > Tooltips**\nTooltips are windows following the mouse. They do not take focus away.\nA tooltip window can contain items of any type.\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack."
	},
	"ImGui_Bullet lua": {
		"prefix": "ImGui.Bullet",
		"scope": "lua",
		"body": "ImGui.Bullet(ctx)$0",
		"description": "**Text > Bullet**\nDraw a small circle + keep the cursor on the same line.\nAdvance cursor x position by GetTreeNodeToLabelSpacing,\nsame distance that TreeNode uses."
	},
	"ImGui_BulletText lua": {
		"prefix": "ImGui.BulletText",
		"scope": "lua",
		"body": "ImGui.BulletText(ctx, ${2:text})$0",
		"description": "**Text > BulletText**\nShortcut for Bullet + Text."
	},
	"ImGui_Button lua": {
		"prefix": "ImGui.Button",
		"scope": "lua",
		"body": "ImGui.Button(ctx, ${2:label}, ${3:size_w}, ${4:size_h})$0",
		"description": "**Button > Button**\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state."
	},
	"ImGui_CalcItemWidth lua": {
		"prefix": "ImGui.CalcItemWidth",
		"scope": "lua",
		"body": "ImGui.CalcItemWidth(ctx)$0",
		"description": "**Item & Status > Dimensions > CalcItemWidth**\nWidth of item given pushed settings and current cursor position.\nNOT necessarily the width of last item unlike most 'Item' functions."
	},
	"ImGui_CalcTextSize lua": {
		"prefix": "ImGui.CalcTextSize",
		"scope": "lua",
		"body": "ImGui.CalcTextSize(ctx, ${2:text}, ${3:_1}, ${4:_2}, ${5:hide_text_after_double_hash}, ${6:wrap_width})$0",
		"description": "**Text > CalcTextSize**"
	},
	"ImGui_Checkbox lua": {
		"prefix": "ImGui.Checkbox",
		"scope": "lua",
		"body": "ImGui.Checkbox(ctx, ${2:label}, ${3:v})$0",
		"description": "**Button > Checkbox**\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state."
	},
	"ImGui_CheckboxFlags lua": {
		"prefix": "ImGui.CheckboxFlags",
		"scope": "lua",
		"body": "ImGui.CheckboxFlags(ctx, ${2:label}, ${3:flags}, ${4:flags_value})$0",
		"description": "**Button > CheckboxFlags**\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state."
	},
	"ImGui_CloseCurrentPopup lua": {
		"prefix": "ImGui.CloseCurrentPopup",
		"scope": "lua",
		"body": "ImGui.CloseCurrentPopup(ctx)$0",
		"description": "**Popup & Modal > CloseCurrentPopup**\nManually close the popup we have begin-ed into.\nUse inside the BeginPopup/EndPopup scope to close manually.\nCloseCurrentPopup() is called by default by Selectable/MenuItem when activated.\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack."
	},
	"ImGui_CollapsingHeader lua": {
		"prefix": "ImGui.CollapsingHeader",
		"scope": "lua",
		"body": "ImGui.CollapsingHeader(ctx, ${2:label}, ${3:p_visible}, ${4:flags})$0",
		"description": "**Tree Node > CollapsingHeader**\nReturns true when opened but do not indent nor push into the ID stack\n(because of the TreeNodeFlags_NoTreePushOnOpen flag).\nThis is basically the same as calling TreeNode(label, TreeNodeFlags_CollapsingHeader).\nYou can remove the _NoTreePushOnOpen flag if you want behavior closer to normal\nTreeNode.\nWhen 'visible' is provided: if 'true' display an additional small close button\non upper right of the header which will set the bool to false when clicked,\nif 'false' don't display the header."
	},
	"ImGui_ColorButton lua": {
		"prefix": "ImGui.ColorButton",
		"scope": "lua",
		"body": "ImGui.ColorButton(ctx, ${2:desc_id}, ${3:col_rgba}, ${4:flags}, ${5:size_w}, ${6:size_h})$0",
		"description": "**Color Edit > ColorButton**\nDisplay a color square/button, hover for details, return true when pressed.\nColor is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xRRGGBB.\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu."
	},
	"ImGui_ColorConvertDouble4ToU32 lua": {
		"prefix": "ImGui.ColorConvertDouble4ToU32",
		"scope": "lua",
		"body": "ImGui.ColorConvertDouble4ToU32(${1:r}, ${2:g}, ${3:b}, ${4:a})$0",
		"description": "**Utility > Color Conversion > ColorConvertDouble4ToU32**\nPack 0..1 RGBA values into a 32-bit integer (0xRRGGBBAA)."
	},
	"ImGui_ColorConvertHSVtoRGB lua": {
		"prefix": "ImGui.ColorConvertHSVtoRGB",
		"scope": "lua",
		"body": "ImGui.ColorConvertHSVtoRGB(${1:h}, ${2:s}, ${3:v})$0",
		"description": "**Utility > Color Conversion > ColorConvertHSVtoRGB**\nConvert HSV values (0..1) into RGB (0..1)."
	},
	"ImGui_ColorConvertNative lua": {
		"prefix": "ImGui.ColorConvertNative",
		"scope": "lua",
		"body": "ImGui.ColorConvertNative(${1:rgb})$0",
		"description": "**Utility > Color Conversion > ColorConvertNative**\nConvert a native color coming from REAPER or 0xRRGGBB to native.\nThis swaps the red and blue channels on Windows."
	},
	"ImGui_ColorConvertRGBtoHSV lua": {
		"prefix": "ImGui.ColorConvertRGBtoHSV",
		"scope": "lua",
		"body": "ImGui.ColorConvertRGBtoHSV(${1:r}, ${2:g}, ${3:b})$0",
		"description": "**Utility > Color Conversion > ColorConvertRGBtoHSV**\nConvert RGB values (0..1) into HSV (0..1)."
	},
	"ImGui_ColorConvertU32ToDouble4 lua": {
		"prefix": "ImGui.ColorConvertU32ToDouble4",
		"scope": "lua",
		"body": "ImGui.ColorConvertU32ToDouble4(${1:rgba})$0",
		"description": "**Utility > Color Conversion > ColorConvertU32ToDouble4**\nUnpack a 32-bit integer (0xRRGGBBAA) into separate RGBA values (0..1)."
	},
	"ImGui_ColorEdit3 lua": {
		"prefix": "ImGui.ColorEdit3",
		"scope": "lua",
		"body": "ImGui.ColorEdit3(ctx, ${2:label}, ${3:col_rgb}, ${4:flags})$0",
		"description": "**Color Edit > ColorEdit3**\nColor is in 0xXXRRGGBB. XX is ignored and will not be modified.\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu."
	},
	"ImGui_ColorEdit4 lua": {
		"prefix": "ImGui.ColorEdit4",
		"scope": "lua",
		"body": "ImGui.ColorEdit4(ctx, ${2:label}, ${3:col_rgba}, ${4:flags})$0",
		"description": "**Color Edit > ColorEdit4**\nColor is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xXXRRGGBB\n(XX is ignored and will not be modified).\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu."
	},
	"ImGui_ColorPicker3 lua": {
		"prefix": "ImGui.ColorPicker3",
		"scope": "lua",
		"body": "ImGui.ColorPicker3(ctx, ${2:label}, ${3:col_rgb}, ${4:flags})$0",
		"description": "**Color Edit > ColorPicker3**\nColor is in 0xXXRRGGBB. XX is ignored and will not be modified.\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu."
	},
	"ImGui_ColorPicker4 lua": {
		"prefix": "ImGui.ColorPicker4",
		"scope": "lua",
		"body": "ImGui.ColorPicker4(ctx, ${2:label}, ${3:col_rgba}, ${4:flags}, ${5:ref_col})$0",
		"description": "**Color Edit > ColorPicker4**\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu."
	},
	"ImGui_Combo lua": {
		"prefix": "ImGui.Combo",
		"scope": "lua",
		"body": "ImGui.Combo(ctx, ${2:label}, ${3:current_item}, ${4:items}, ${5:popup_max_height_in_items})$0",
		"description": "**Combo & List > Combo Box (Dropdown) > Combo**\nHelper over BeginCombo/EndCombo for convenience purpose. Each item must be\nnull-terminated (requires REAPER v6.44 or newer for EEL and Lua)."
	},
	"ImGui_CreateContext lua": {
		"prefix": "ImGui.CreateContext",
		"scope": "lua",
		"body": "ImGui.CreateContext(${1:label}, ${2:config_flags})$0",
		"description": "**Context > CreateContext**\nCreate a new ReaImGui context.\nThe context will remain valid as long as it is used in each defer cycle.\nThe label is used for the tab text when windows are docked in REAPER\nand also as a unique identifier for storing settings."
	},
	"ImGui_CreateDrawListSplitter lua": {
		"prefix": "ImGui.CreateDrawListSplitter",
		"scope": "lua",
		"body": "ImGui.CreateDrawListSplitter(${1:draw_list})$0",
		"description": "**Draw List > Splitter > CreateDrawListSplitter**\n**Draw List > Splitter**\nSplit/Merge functions are used to split the draw list into different layers\nwhich can be drawn into out of order (e.g. submit FG primitives before BG primitives).\nUse to minimize draw calls (e.g. if going back-and-forth between multiple\nclipping rectangles, prefer to append into separate channels then merge at the end).\nUsage:\nif not ImGui.ValidatePtr(splitter, 'ImGui_DrawListSplitter*') then\nsplitter = ImGui.CreateDrawListSplitter(draw_list)\nend\nImGui.DrawListSplitter_Split(splitter, 2)\nImGui.DrawListSplitter_SetCurrentChannel(splitter, 0)\nImGui.DrawList_AddRectFilled(draw_list, ...) -- background\nImGui.DrawListSplitter_SetCurrentChannel(splitter, 1)\nImGui.DrawList_AddRectFilled(draw_list, ...) -- foreground\nImGui.DrawListSplitter_SetCurrentChannel(splitter, 0)\nImGui.DrawList_AddRectFilled(draw_list, ...) -- background\nImGui.DrawListSplitter_Merge(splitter)\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_CreateFont lua": {
		"prefix": "ImGui.CreateFont",
		"scope": "lua",
		"body": "ImGui.CreateFont(${1:family_or_file}, ${2:size}, ${3:flags})$0",
		"description": "**Font > CreateFont**\nLoad a font matching a font family name or from a font file.\nThe font will remain valid while it's attached to a context. See Attach.\nThe family name can be an installed font or one of the generic fonts:\nsans-serif, serif, monospace, cursive, fantasy.\nIf 'family_or_file' specifies a path to a font file (contains a / or ):\n- The first byte of 'flags' is used as the font index within the file\n- The font styles in 'flags' are simulated by the font renderer\n**Font**\nSupports loading fonts from the system by family name or from a file.\nGlyphs may contain colors in COLR/CPAL format.\nThis API currently has multiple limitations (v1.0 blockers):\n- ReaImGui rasterizes glyphs only from the Basic Latin and Latin Supplement\nUnicode blocks (U+0020 to U+00FF). UTF-8 is fully supported internally,\nhowever characters outside those blocks are displayed as '?'.\nSee [issue #5](https://github.com/cfillion/reaimgui/issues/5).\n- Dear ImGui does not support using new fonts in the middle of a frame.\nBecause of this, fonts must first be registered using Attach before any\nother context functions are used in the same defer cycle.\n(Attaching a font is a heavy operation and should ideally be done outside\nof the defer loop.)"
	},
	"ImGui_CreateFontFromMem lua": {
		"prefix": "ImGui.CreateFontFromMem",
		"scope": "lua",
		"body": "ImGui.CreateFontFromMem(${1:data}, ${2:size}, ${3:flags})$0",
		"description": "**Font > CreateFontFromMem**\nRequires REAPER v6.44 or newer for EEL and Lua. Use CreateFont or\nexplicitely specify data_sz to support older versions.\n- The first byte of 'flags' is used as the font index within the file\n- The font styles in 'flags' are simulated by the font renderer\n**Font**\nSupports loading fonts from the system by family name or from a file.\nGlyphs may contain colors in COLR/CPAL format.\nThis API currently has multiple limitations (v1.0 blockers):\n- ReaImGui rasterizes glyphs only from the Basic Latin and Latin Supplement\nUnicode blocks (U+0020 to U+00FF). UTF-8 is fully supported internally,\nhowever characters outside those blocks are displayed as '?'.\nSee [issue #5](https://github.com/cfillion/reaimgui/issues/5).\n- Dear ImGui does not support using new fonts in the middle of a frame.\nBecause of this, fonts must first be registered using Attach before any\nother context functions are used in the same defer cycle.\n(Attaching a font is a heavy operation and should ideally be done outside\nof the defer loop.)"
	},
	"ImGui_CreateFunctionFromEEL lua": {
		"prefix": "ImGui.CreateFunctionFromEEL",
		"scope": "lua",
		"body": "ImGui.CreateFunctionFromEEL(${1:code})$0",
		"description": "**Function > CreateFunctionFromEEL**\nCompile an EEL program.\nStandard EEL [math](https://www.reaper.fm/sdk/js/basiccode.php#js_basicfunc)\nand [string](https://www.reaper.fm/sdk/js/strings.php#js_string_funcs)\nfunctions are available in addition to callback-specific functions\n(see InputTextCallback_*).\n**Function**\nCreate reusable programs that can passed to and called back from functions\nsuch as InputText* and SetNextWindowSizeConstraints.\nThey can also be used standalone with Function_Execute\n(eg. faster-than-Lua DSP processing)."
	},
	"ImGui_CreateImage lua": {
		"prefix": "ImGui.CreateImage",
		"scope": "lua",
		"body": "ImGui.CreateImage(${1:file}, ${2:flags})$0",
		"description": "**Image > CreateImage**\nThe returned object is valid as long as it is used in each defer cycle\nunless attached to a context (see Attach).\n('flags' currently unused and reserved for future expansion)\n**Image**\nReaImGui currently supports loading PNG and JPEG bitmap images.\nFlat vector images may be loaded as fonts, see CreateFont.\nUV parameters are texture coordinates in a scale of 0.0 (top/left) to 1.0\n(bottom/right). Use values below 0.0 or above 1.0 to tile the image.\nWidth/height are limited to 8192 pixels.\nThere are also image functions in the DrawList API such as\nDrawList_AddImageQuad and DrawList_AddImageRounded.\nCaching of image objects may be implemented like this:\nlocal images = {}\nlocal function imageFromCache(fn)\nlocal img = images[fn]\nif not img then\nimg = {}\nimages[fn] = img\nend\nif not ImGui.ValidatePtr(img.inst, 'ImGui_Image*') then\nif img.inst then images[img.inst] = nil end\nimg.inst = ImGui.CreateImage(fn)\nlocal prev = images[img.inst]\nif prev and prev ~= img then prev.inst = nil end\nimages[img.inst] = img\nend\nreturn img.inst\nend"
	},
	"ImGui_CreateImageFromLICE lua": {
		"prefix": "ImGui.CreateImageFromLICE",
		"scope": "lua",
		"body": "ImGui.CreateImageFromLICE(${1:bitmap}, ${2:flags})$0",
		"description": "**Image > CreateImageFromLICE**\nCopies pixel data from a LICE bitmap created using JS_LICE_CreateBitmap.\n**Image**\nReaImGui currently supports loading PNG and JPEG bitmap images.\nFlat vector images may be loaded as fonts, see CreateFont.\nUV parameters are texture coordinates in a scale of 0.0 (top/left) to 1.0\n(bottom/right). Use values below 0.0 or above 1.0 to tile the image.\nWidth/height are limited to 8192 pixels.\nThere are also image functions in the DrawList API such as\nDrawList_AddImageQuad and DrawList_AddImageRounded.\nCaching of image objects may be implemented like this:\nlocal images = {}\nlocal function imageFromCache(fn)\nlocal img = images[fn]\nif not img then\nimg = {}\nimages[fn] = img\nend\nif not ImGui.ValidatePtr(img.inst, 'ImGui_Image*') then\nif img.inst then images[img.inst] = nil end\nimg.inst = ImGui.CreateImage(fn)\nlocal prev = images[img.inst]\nif prev and prev ~= img then prev.inst = nil end\nimages[img.inst] = img\nend\nreturn img.inst\nend"
	},
	"ImGui_CreateImageFromMem lua": {
		"prefix": "ImGui.CreateImageFromMem",
		"scope": "lua",
		"body": "ImGui.CreateImageFromMem(${1:data}, ${2:flags})$0",
		"description": "**Image > CreateImageFromMem**\nRequires REAPER v6.44 or newer for EEL and Lua. Load from a file using\nCreateImage or explicitely specify data_sz to support older versions.\n**Image**\nReaImGui currently supports loading PNG and JPEG bitmap images.\nFlat vector images may be loaded as fonts, see CreateFont.\nUV parameters are texture coordinates in a scale of 0.0 (top/left) to 1.0\n(bottom/right). Use values below 0.0 or above 1.0 to tile the image.\nWidth/height are limited to 8192 pixels.\nThere are also image functions in the DrawList API such as\nDrawList_AddImageQuad and DrawList_AddImageRounded.\nCaching of image objects may be implemented like this:\nlocal images = {}\nlocal function imageFromCache(fn)\nlocal img = images[fn]\nif not img then\nimg = {}\nimages[fn] = img\nend\nif not ImGui.ValidatePtr(img.inst, 'ImGui_Image*') then\nif img.inst then images[img.inst] = nil end\nimg.inst = ImGui.CreateImage(fn)\nlocal prev = images[img.inst]\nif prev and prev ~= img then prev.inst = nil end\nimages[img.inst] = img\nend\nreturn img.inst\nend"
	},
	"ImGui_CreateImageSet lua": {
		"prefix": "ImGui.CreateImageSet",
		"scope": "lua",
		"body": "ImGui.CreateImageSet()$0",
		"description": "**Image > Image Set > CreateImageSet**\n**Image > Image Set**\nHelper to automatically select and scale an image to the DPI scale of\nthe current window upon usage.\nImageSet objects may be used in any function that expect an image as parameter.\nUsage:\nlocal set = ImGui.CreateImageSet()\nImGui.ImageSet_Add(set, 1.0, ImGui.CreateImage('32x32.png'))\nImGui.ImageSet_Add(set, 2.0, ImGui.CreateImage('64x64.png'))\nlocal function frame()\nImGui.Image(ctx, set, ImGui.Image_GetSize(set))\n-- ...\nend\n**Image**\nReaImGui currently supports loading PNG and JPEG bitmap images.\nFlat vector images may be loaded as fonts, see CreateFont.\nUV parameters are texture coordinates in a scale of 0.0 (top/left) to 1.0\n(bottom/right). Use values below 0.0 or above 1.0 to tile the image.\nWidth/height are limited to 8192 pixels.\nThere are also image functions in the DrawList API such as\nDrawList_AddImageQuad and DrawList_AddImageRounded.\nCaching of image objects may be implemented like this:\nlocal images = {}\nlocal function imageFromCache(fn)\nlocal img = images[fn]\nif not img then\nimg = {}\nimages[fn] = img\nend\nif not ImGui.ValidatePtr(img.inst, 'ImGui_Image*') then\nif img.inst then images[img.inst] = nil end\nimg.inst = ImGui.CreateImage(fn)\nlocal prev = images[img.inst]\nif prev and prev ~= img then prev.inst = nil end\nimages[img.inst] = img\nend\nreturn img.inst\nend"
	},
	"ImGui_CreateListClipper lua": {
		"prefix": "ImGui.CreateListClipper",
		"scope": "lua",
		"body": "ImGui.CreateListClipper(ctx)$0",
		"description": "**List Clipper > CreateListClipper**\nThe returned clipper object is only valid for the given context and is valid\nas long as it is used in each defer cycle unless attached (see Attach).\n**List Clipper**\nHelper to manually clip large list of items.\nIf you have lots evenly spaced items and you have random access to the list,\nyou can perform coarse clipping based on visibility to only submit items that\nare in view.\nThe clipper calculates the range of visible items and advance the cursor to\ncompensate for the non-visible items we have skipped.\n(Dear ImGui already clip items based on their bounds but: it needs to first\nlayout the item to do so, and generally fetching/submitting your own data incurs\nadditional cost. Coarse clipping using a list clipper allows you to easily\nscale using lists with tens of thousands of items without a problem.)\nUsage:\nif not ImGui.ValidatePtr(clipper, 'ImGui_ListClipper*') then\nclipper = ImGui.CreateListClipper(ctx)\nend\nImGui.ListClipper_Begin(clipper, 1000) -- We have 1000 elements, evenly spaced\nwhile ImGui.ListClipper_Step(clipper) do\nlocal display_start, display_end = ImGui.ListClipper_GetDisplayRange(clipper)\nfor row = display_start, display_end - 1 do\nImGui.Text(ctx, ('line number %d'):format(row))\nend\nend\nGenerally what happens is:\n- Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1)\nregardless of it being visible or not.\n- User code submit that one element.\n- Clipper can measure the height of the first element\n- Clipper calculate the actual range of elements to display based on the current\nclipping rectangle, position the cursor before the first visible element.\n- User code submit visible elements.\n- The clipper also handles various subtleties related to keyboard/gamepad\nnavigation, wrapping etc."
	},
	"ImGui_CreateTextFilter lua": {
		"prefix": "ImGui.CreateTextFilter",
		"scope": "lua",
		"body": "ImGui.CreateTextFilter(${1:default_filter})$0",
		"description": "**Text Filter > CreateTextFilter**\nValid while used every frame unless attached to a context (see Attach).\n**Text Filter**\nHelper to perform simple filtering on text strings.\nIn format 'aaaaa[,bbbb][,ccccc]'.\nFilter usage:\n- ''         display all lines\n- 'xxx'      display lines containing 'xxx'\n- 'xxx,yyy'  display lines containing 'xxx' or 'yyy'\n- '-xxx'     hide lines containing 'xxx'"
	},
	"ImGui_DebugFlashStyleColor lua": {
		"prefix": "ImGui.DebugFlashStyleColor",
		"scope": "lua",
		"body": "ImGui.DebugFlashStyleColor(ctx, ${2:idx})$0",
		"description": "**Style > Colors > DebugFlashStyleColor**"
	},
	"ImGui_DebugStartItemPicker lua": {
		"prefix": "ImGui.DebugStartItemPicker",
		"scope": "lua",
		"body": "ImGui.DebugStartItemPicker(ctx)$0",
		"description": "**Item & Status > DebugStartItemPicker**"
	},
	"ImGui_DebugTextEncoding lua": {
		"prefix": "ImGui.DebugTextEncoding",
		"scope": "lua",
		"body": "ImGui.DebugTextEncoding(ctx, ${2:text})$0",
		"description": "**Text > DebugTextEncoding**\nHelper tool to diagnose between text encoding issues and font loading issues.\nPass your UTF-8 string and verify that there are correct."
	},
	"ImGui_Detach lua": {
		"prefix": "ImGui.Detach",
		"scope": "lua",
		"body": "ImGui.Detach(ctx, ${2:obj})$0",
		"description": "**Context > Detach**\nUnlink the object's lifetime. Unattached objects are automatically destroyed\nwhen left unused. You may check whether an object has been destroyed using\nValidatePtr."
	},
	"ImGui_DragDouble lua": {
		"prefix": "ImGui.DragDouble",
		"scope": "lua",
		"body": "ImGui.DragDouble(ctx, ${2:label}, ${3:v}, ${4:v_speed}, ${5:v_min}, ${6:v_max}, ${7:format}, ${8:flags})$0",
		"description": "**Drag & Slider > Drag Sliders > DragDouble**\n**Drag & Slider > Drag Sliders**\nSpeed are per-pixel of mouse movement (v_speed=0.2: mouse needs to move by 5\npixels to increase value by 1). For gamepad/keyboard navigation, minimum speed\nis Max(v_speed, minimum_step_at_given_precision).\nUse v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual\ninput can override those limits if SliderFlags_AlwaysClamp is not used.\nUse v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with\nv_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_DragDouble2 lua": {
		"prefix": "ImGui.DragDouble2",
		"scope": "lua",
		"body": "ImGui.DragDouble2(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v_speed}, ${6:v_min}, ${7:v_max}, ${8:format}, ${9:flags})$0",
		"description": "**Drag & Slider > Drag Sliders > DragDouble2**\n**Drag & Slider > Drag Sliders**\nSpeed are per-pixel of mouse movement (v_speed=0.2: mouse needs to move by 5\npixels to increase value by 1). For gamepad/keyboard navigation, minimum speed\nis Max(v_speed, minimum_step_at_given_precision).\nUse v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual\ninput can override those limits if SliderFlags_AlwaysClamp is not used.\nUse v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with\nv_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_DragDouble3 lua": {
		"prefix": "ImGui.DragDouble3",
		"scope": "lua",
		"body": "ImGui.DragDouble3(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v_speed}, ${7:v_min}, ${8:v_max}, ${9:format}, ${10:flags})$0",
		"description": "**Drag & Slider > Drag Sliders > DragDouble3**\n**Drag & Slider > Drag Sliders**\nSpeed are per-pixel of mouse movement (v_speed=0.2: mouse needs to move by 5\npixels to increase value by 1). For gamepad/keyboard navigation, minimum speed\nis Max(v_speed, minimum_step_at_given_precision).\nUse v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual\ninput can override those limits if SliderFlags_AlwaysClamp is not used.\nUse v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with\nv_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_DragDouble4 lua": {
		"prefix": "ImGui.DragDouble4",
		"scope": "lua",
		"body": "ImGui.DragDouble4(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:v_speed}, ${8:v_min}, ${9:v_max}, ${10:format}, ${11:flags})$0",
		"description": "**Drag & Slider > Drag Sliders > DragDouble4**\n**Drag & Slider > Drag Sliders**\nSpeed are per-pixel of mouse movement (v_speed=0.2: mouse needs to move by 5\npixels to increase value by 1). For gamepad/keyboard navigation, minimum speed\nis Max(v_speed, minimum_step_at_given_precision).\nUse v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual\ninput can override those limits if SliderFlags_AlwaysClamp is not used.\nUse v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with\nv_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_DragDoubleN lua": {
		"prefix": "ImGui.DragDoubleN",
		"scope": "lua",
		"body": "ImGui.DragDoubleN(ctx, ${2:label}, ${3:values}, ${4:speed}, ${5:min}, ${6:max}, ${7:format}, ${8:flags})$0",
		"description": "**Drag & Slider > Drag Sliders > DragDoubleN**\n**Drag & Slider > Drag Sliders**\nSpeed are per-pixel of mouse movement (v_speed=0.2: mouse needs to move by 5\npixels to increase value by 1). For gamepad/keyboard navigation, minimum speed\nis Max(v_speed, minimum_step_at_given_precision).\nUse v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual\ninput can override those limits if SliderFlags_AlwaysClamp is not used.\nUse v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with\nv_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_DragFloatRange2 lua": {
		"prefix": "ImGui.DragFloatRange2",
		"scope": "lua",
		"body": "ImGui.DragFloatRange2(ctx, ${2:label}, ${3:v_current_min}, ${4:v_current_max}, ${5:v_speed}, ${6:v_min}, ${7:v_max}, ${8:format}, ${9:format_max}, ${10:flags})$0",
		"description": "**Drag & Slider > Drag Sliders > DragFloatRange2**\n**Drag & Slider > Drag Sliders**\nSpeed are per-pixel of mouse movement (v_speed=0.2: mouse needs to move by 5\npixels to increase value by 1). For gamepad/keyboard navigation, minimum speed\nis Max(v_speed, minimum_step_at_given_precision).\nUse v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual\ninput can override those limits if SliderFlags_AlwaysClamp is not used.\nUse v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with\nv_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_DragInt lua": {
		"prefix": "ImGui.DragInt",
		"scope": "lua",
		"body": "ImGui.DragInt(ctx, ${2:label}, ${3:v}, ${4:v_speed}, ${5:v_min}, ${6:v_max}, ${7:format}, ${8:flags})$0",
		"description": "**Drag & Slider > Drag Sliders > DragInt**\n**Drag & Slider > Drag Sliders**\nSpeed are per-pixel of mouse movement (v_speed=0.2: mouse needs to move by 5\npixels to increase value by 1). For gamepad/keyboard navigation, minimum speed\nis Max(v_speed, minimum_step_at_given_precision).\nUse v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual\ninput can override those limits if SliderFlags_AlwaysClamp is not used.\nUse v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with\nv_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_DragInt2 lua": {
		"prefix": "ImGui.DragInt2",
		"scope": "lua",
		"body": "ImGui.DragInt2(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v_speed}, ${6:v_min}, ${7:v_max}, ${8:format}, ${9:flags})$0",
		"description": "**Drag & Slider > Drag Sliders > DragInt2**\n**Drag & Slider > Drag Sliders**\nSpeed are per-pixel of mouse movement (v_speed=0.2: mouse needs to move by 5\npixels to increase value by 1). For gamepad/keyboard navigation, minimum speed\nis Max(v_speed, minimum_step_at_given_precision).\nUse v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual\ninput can override those limits if SliderFlags_AlwaysClamp is not used.\nUse v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with\nv_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_DragInt3 lua": {
		"prefix": "ImGui.DragInt3",
		"scope": "lua",
		"body": "ImGui.DragInt3(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v_speed}, ${7:v_min}, ${8:v_max}, ${9:format}, ${10:flags})$0",
		"description": "**Drag & Slider > Drag Sliders > DragInt3**\n**Drag & Slider > Drag Sliders**\nSpeed are per-pixel of mouse movement (v_speed=0.2: mouse needs to move by 5\npixels to increase value by 1). For gamepad/keyboard navigation, minimum speed\nis Max(v_speed, minimum_step_at_given_precision).\nUse v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual\ninput can override those limits if SliderFlags_AlwaysClamp is not used.\nUse v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with\nv_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_DragInt4 lua": {
		"prefix": "ImGui.DragInt4",
		"scope": "lua",
		"body": "ImGui.DragInt4(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:v_speed}, ${8:v_min}, ${9:v_max}, ${10:format}, ${11:flags})$0",
		"description": "**Drag & Slider > Drag Sliders > DragInt4**\n**Drag & Slider > Drag Sliders**\nSpeed are per-pixel of mouse movement (v_speed=0.2: mouse needs to move by 5\npixels to increase value by 1). For gamepad/keyboard navigation, minimum speed\nis Max(v_speed, minimum_step_at_given_precision).\nUse v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual\ninput can override those limits if SliderFlags_AlwaysClamp is not used.\nUse v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with\nv_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_DragIntRange2 lua": {
		"prefix": "ImGui.DragIntRange2",
		"scope": "lua",
		"body": "ImGui.DragIntRange2(ctx, ${2:label}, ${3:v_current_min}, ${4:v_current_max}, ${5:v_speed}, ${6:v_min}, ${7:v_max}, ${8:format}, ${9:format_max}, ${10:flags})$0",
		"description": "**Drag & Slider > Drag Sliders > DragIntRange2**\n**Drag & Slider > Drag Sliders**\nSpeed are per-pixel of mouse movement (v_speed=0.2: mouse needs to move by 5\npixels to increase value by 1). For gamepad/keyboard navigation, minimum speed\nis Max(v_speed, minimum_step_at_given_precision).\nUse v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual\ninput can override those limits if SliderFlags_AlwaysClamp is not used.\nUse v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with\nv_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_DrawListSplitter_Clear lua": {
		"prefix": "ImGui.DrawListSplitter_Clear",
		"scope": "lua",
		"body": "ImGui.DrawListSplitter_Clear(${1:splitter})$0",
		"description": "**Draw List > Splitter > DrawListSplitter_Clear**\n**Draw List > Splitter**\nSplit/Merge functions are used to split the draw list into different layers\nwhich can be drawn into out of order (e.g. submit FG primitives before BG primitives).\nUse to minimize draw calls (e.g. if going back-and-forth between multiple\nclipping rectangles, prefer to append into separate channels then merge at the end).\nUsage:\nif not ImGui.ValidatePtr(splitter, 'ImGui_DrawListSplitter*') then\nsplitter = ImGui.CreateDrawListSplitter(draw_list)\nend\nImGui.DrawListSplitter_Split(splitter, 2)\nImGui.DrawListSplitter_SetCurrentChannel(splitter, 0)\nImGui.DrawList_AddRectFilled(draw_list, ...) -- background\nImGui.DrawListSplitter_SetCurrentChannel(splitter, 1)\nImGui.DrawList_AddRectFilled(draw_list, ...) -- foreground\nImGui.DrawListSplitter_SetCurrentChannel(splitter, 0)\nImGui.DrawList_AddRectFilled(draw_list, ...) -- background\nImGui.DrawListSplitter_Merge(splitter)\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawListSplitter_Merge lua": {
		"prefix": "ImGui.DrawListSplitter_Merge",
		"scope": "lua",
		"body": "ImGui.DrawListSplitter_Merge(${1:splitter})$0",
		"description": "**Draw List > Splitter > DrawListSplitter_Merge**\n**Draw List > Splitter**\nSplit/Merge functions are used to split the draw list into different layers\nwhich can be drawn into out of order (e.g. submit FG primitives before BG primitives).\nUse to minimize draw calls (e.g. if going back-and-forth between multiple\nclipping rectangles, prefer to append into separate channels then merge at the end).\nUsage:\nif not ImGui.ValidatePtr(splitter, 'ImGui_DrawListSplitter*') then\nsplitter = ImGui.CreateDrawListSplitter(draw_list)\nend\nImGui.DrawListSplitter_Split(splitter, 2)\nImGui.DrawListSplitter_SetCurrentChannel(splitter, 0)\nImGui.DrawList_AddRectFilled(draw_list, ...) -- background\nImGui.DrawListSplitter_SetCurrentChannel(splitter, 1)\nImGui.DrawList_AddRectFilled(draw_list, ...) -- foreground\nImGui.DrawListSplitter_SetCurrentChannel(splitter, 0)\nImGui.DrawList_AddRectFilled(draw_list, ...) -- background\nImGui.DrawListSplitter_Merge(splitter)\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawListSplitter_SetCurrentChannel lua": {
		"prefix": "ImGui.DrawListSplitter_SetCurrentChannel",
		"scope": "lua",
		"body": "ImGui.DrawListSplitter_SetCurrentChannel(${1:splitter}, ${2:channel_idx})$0",
		"description": "**Draw List > Splitter > DrawListSplitter_SetCurrentChannel**\n**Draw List > Splitter**\nSplit/Merge functions are used to split the draw list into different layers\nwhich can be drawn into out of order (e.g. submit FG primitives before BG primitives).\nUse to minimize draw calls (e.g. if going back-and-forth between multiple\nclipping rectangles, prefer to append into separate channels then merge at the end).\nUsage:\nif not ImGui.ValidatePtr(splitter, 'ImGui_DrawListSplitter*') then\nsplitter = ImGui.CreateDrawListSplitter(draw_list)\nend\nImGui.DrawListSplitter_Split(splitter, 2)\nImGui.DrawListSplitter_SetCurrentChannel(splitter, 0)\nImGui.DrawList_AddRectFilled(draw_list, ...) -- background\nImGui.DrawListSplitter_SetCurrentChannel(splitter, 1)\nImGui.DrawList_AddRectFilled(draw_list, ...) -- foreground\nImGui.DrawListSplitter_SetCurrentChannel(splitter, 0)\nImGui.DrawList_AddRectFilled(draw_list, ...) -- background\nImGui.DrawListSplitter_Merge(splitter)\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawListSplitter_Split lua": {
		"prefix": "ImGui.DrawListSplitter_Split",
		"scope": "lua",
		"body": "ImGui.DrawListSplitter_Split(${1:splitter}, ${2:count})$0",
		"description": "**Draw List > Splitter > DrawListSplitter_Split**\n**Draw List > Splitter**\nSplit/Merge functions are used to split the draw list into different layers\nwhich can be drawn into out of order (e.g. submit FG primitives before BG primitives).\nUse to minimize draw calls (e.g. if going back-and-forth between multiple\nclipping rectangles, prefer to append into separate channels then merge at the end).\nUsage:\nif not ImGui.ValidatePtr(splitter, 'ImGui_DrawListSplitter*') then\nsplitter = ImGui.CreateDrawListSplitter(draw_list)\nend\nImGui.DrawListSplitter_Split(splitter, 2)\nImGui.DrawListSplitter_SetCurrentChannel(splitter, 0)\nImGui.DrawList_AddRectFilled(draw_list, ...) -- background\nImGui.DrawListSplitter_SetCurrentChannel(splitter, 1)\nImGui.DrawList_AddRectFilled(draw_list, ...) -- foreground\nImGui.DrawListSplitter_SetCurrentChannel(splitter, 0)\nImGui.DrawList_AddRectFilled(draw_list, ...) -- background\nImGui.DrawListSplitter_Merge(splitter)\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddBezierCubic lua": {
		"prefix": "ImGui.DrawList_AddBezierCubic",
		"scope": "lua",
		"body": "ImGui.DrawList_AddBezierCubic(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:p4_x}, ${9:p4_y}, ${10:col_rgba}, ${11:thickness}, ${12:num_segments})$0",
		"description": "**Draw List > Primitives > DrawList_AddBezierCubic**\nCubic Bezier (4 control points)\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddBezierQuadratic lua": {
		"prefix": "ImGui.DrawList_AddBezierQuadratic",
		"scope": "lua",
		"body": "ImGui.DrawList_AddBezierQuadratic(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:col_rgba}, ${9:thickness}, ${10:num_segments})$0",
		"description": "**Draw List > Primitives > DrawList_AddBezierQuadratic**\nQuadratic Bezier (3 control points)\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddCircle lua": {
		"prefix": "ImGui.DrawList_AddCircle",
		"scope": "lua",
		"body": "ImGui.DrawList_AddCircle(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:col_rgba}, ${6:num_segments}, ${7:thickness})$0",
		"description": "**Draw List > Primitives > DrawList_AddCircle**\nUse 'num_segments == 0' to automatically calculate tessellation (preferred).\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddCircleFilled lua": {
		"prefix": "ImGui.DrawList_AddCircleFilled",
		"scope": "lua",
		"body": "ImGui.DrawList_AddCircleFilled(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:col_rgba}, ${6:num_segments})$0",
		"description": "**Draw List > Primitives > DrawList_AddCircleFilled**\nUse 'num_segments == 0' to automatically calculate tessellation (preferred).\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddConcavePolyFilled lua": {
		"prefix": "ImGui.DrawList_AddConcavePolyFilled",
		"scope": "lua",
		"body": "ImGui.DrawList_AddConcavePolyFilled(${1:draw_list}, ${2:points}, ${3:col_rgba})$0",
		"description": "**Draw List > Primitives > DrawList_AddConcavePolyFilled**\nConcave polygon fill is more expensive than convex one: it has O(N^2) complexity.\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddConvexPolyFilled lua": {
		"prefix": "ImGui.DrawList_AddConvexPolyFilled",
		"scope": "lua",
		"body": "ImGui.DrawList_AddConvexPolyFilled(${1:draw_list}, ${2:points}, ${3:col_rgba})$0",
		"description": "**Draw List > Primitives > DrawList_AddConvexPolyFilled**\nNote: Anti-aliased filling requires points to be in clockwise order.\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddEllipse lua": {
		"prefix": "ImGui.DrawList_AddEllipse",
		"scope": "lua",
		"body": "ImGui.DrawList_AddEllipse(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius_x}, ${5:radius_y}, ${6:col_rgba}, ${7:rot}, ${8:num_segments}, ${9:thickness})$0",
		"description": "**Draw List > Primitives > DrawList_AddEllipse**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddEllipseFilled lua": {
		"prefix": "ImGui.DrawList_AddEllipseFilled",
		"scope": "lua",
		"body": "ImGui.DrawList_AddEllipseFilled(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius_x}, ${5:radius_y}, ${6:col_rgba}, ${7:rot}, ${8:num_segments})$0",
		"description": "**Draw List > Primitives > DrawList_AddEllipseFilled**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddImage lua": {
		"prefix": "ImGui.DrawList_AddImage",
		"scope": "lua",
		"body": "ImGui.DrawList_AddImage(${1:draw_list}, ${2:image}, ${3:p_min_x}, ${4:p_min_y}, ${5:p_max_x}, ${6:p_max_y}, ${7:uv_min_x}, ${8:uv_min_y}, ${9:uv_max_x}, ${10:uv_max_y}, ${11:col_rgba})$0",
		"description": "**Draw List > Primitives > DrawList_AddImage**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddImageQuad lua": {
		"prefix": "ImGui.DrawList_AddImageQuad",
		"scope": "lua",
		"body": "ImGui.DrawList_AddImageQuad(${1:draw_list}, ${2:image}, ${3:p1_x}, ${4:p1_y}, ${5:p2_x}, ${6:p2_y}, ${7:p3_x}, ${8:p3_y}, ${9:p4_x}, ${10:p4_y}, ${11:uv1_x}, ${12:uv1_y}, ${13:uv2_x}, ${14:uv2_y}, ${15:uv3_x}, ${16:uv3_y}, ${17:uv4_x}, ${18:uv4_y}, ${19:col_rgba})$0",
		"description": "**Draw List > Primitives > DrawList_AddImageQuad**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddImageRounded lua": {
		"prefix": "ImGui.DrawList_AddImageRounded",
		"scope": "lua",
		"body": "ImGui.DrawList_AddImageRounded(${1:draw_list}, ${2:image}, ${3:p_min_x}, ${4:p_min_y}, ${5:p_max_x}, ${6:p_max_y}, ${7:uv_min_x}, ${8:uv_min_y}, ${9:uv_max_x}, ${10:uv_max_y}, ${11:col_rgba}, ${12:rounding}, ${13:flags})$0",
		"description": "**Draw List > Primitives > DrawList_AddImageRounded**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddLine lua": {
		"prefix": "ImGui.DrawList_AddLine",
		"scope": "lua",
		"body": "ImGui.DrawList_AddLine(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:col_rgba}, ${7:thickness})$0",
		"description": "**Draw List > Primitives > DrawList_AddLine**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddNgon lua": {
		"prefix": "ImGui.DrawList_AddNgon",
		"scope": "lua",
		"body": "ImGui.DrawList_AddNgon(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:col_rgba}, ${6:num_segments}, ${7:thickness})$0",
		"description": "**Draw List > Primitives > DrawList_AddNgon**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddNgonFilled lua": {
		"prefix": "ImGui.DrawList_AddNgonFilled",
		"scope": "lua",
		"body": "ImGui.DrawList_AddNgonFilled(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:col_rgba}, ${6:num_segments})$0",
		"description": "**Draw List > Primitives > DrawList_AddNgonFilled**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddPolyline lua": {
		"prefix": "ImGui.DrawList_AddPolyline",
		"scope": "lua",
		"body": "ImGui.DrawList_AddPolyline(${1:draw_list}, ${2:points}, ${3:col_rgba}, ${4:flags}, ${5:thickness})$0",
		"description": "**Draw List > Primitives > DrawList_AddPolyline**\nPoints is a list of x,y coordinates.\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddQuad lua": {
		"prefix": "ImGui.DrawList_AddQuad",
		"scope": "lua",
		"body": "ImGui.DrawList_AddQuad(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:p4_x}, ${9:p4_y}, ${10:col_rgba}, ${11:thickness})$0",
		"description": "**Draw List > Primitives > DrawList_AddQuad**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddQuadFilled lua": {
		"prefix": "ImGui.DrawList_AddQuadFilled",
		"scope": "lua",
		"body": "ImGui.DrawList_AddQuadFilled(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:p4_x}, ${9:p4_y}, ${10:col_rgba})$0",
		"description": "**Draw List > Primitives > DrawList_AddQuadFilled**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddRect lua": {
		"prefix": "ImGui.DrawList_AddRect",
		"scope": "lua",
		"body": "ImGui.DrawList_AddRect(${1:draw_list}, ${2:p_min_x}, ${3:p_min_y}, ${4:p_max_x}, ${5:p_max_y}, ${6:col_rgba}, ${7:rounding}, ${8:flags}, ${9:thickness})$0",
		"description": "**Draw List > Primitives > DrawList_AddRect**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddRectFilled lua": {
		"prefix": "ImGui.DrawList_AddRectFilled",
		"scope": "lua",
		"body": "ImGui.DrawList_AddRectFilled(${1:draw_list}, ${2:p_min_x}, ${3:p_min_y}, ${4:p_max_x}, ${5:p_max_y}, ${6:col_rgba}, ${7:rounding}, ${8:flags})$0",
		"description": "**Draw List > Primitives > DrawList_AddRectFilled**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddRectFilledMultiColor lua": {
		"prefix": "ImGui.DrawList_AddRectFilledMultiColor",
		"scope": "lua",
		"body": "ImGui.DrawList_AddRectFilledMultiColor(${1:draw_list}, ${2:p_min_x}, ${3:p_min_y}, ${4:p_max_x}, ${5:p_max_y}, ${6:col_upr_left}, ${7:col_upr_right}, ${8:col_bot_right}, ${9:col_bot_left})$0",
		"description": "**Draw List > Primitives > DrawList_AddRectFilledMultiColor**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddText lua": {
		"prefix": "ImGui.DrawList_AddText",
		"scope": "lua",
		"body": "ImGui.DrawList_AddText(${1:draw_list}, ${2:x}, ${3:y}, ${4:col_rgba}, ${5:text})$0",
		"description": "**Draw List > Primitives > DrawList_AddText**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddTextEx lua": {
		"prefix": "ImGui.DrawList_AddTextEx",
		"scope": "lua",
		"body": "ImGui.DrawList_AddTextEx(${1:draw_list}, ${2:font}, ${3:font_size}, ${4:pos_x}, ${5:pos_y}, ${6:col_rgba}, ${7:text}, ${8:wrap_width}, ${9:cpu_fine_clip_rect_min_x}, ${10:cpu_fine_clip_rect_min_y}, ${11:cpu_fine_clip_rect_max_x}, ${12:cpu_fine_clip_rect_max_y})$0",
		"description": "**Draw List > Primitives > DrawList_AddTextEx**\nThe last pushed font is used if font is nil.\nThe size of the last pushed font is used if font_size is 0.\ncpu_fine_clip_rect_* only takes effect if all four are non-nil.\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddTriangle lua": {
		"prefix": "ImGui.DrawList_AddTriangle",
		"scope": "lua",
		"body": "ImGui.DrawList_AddTriangle(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:col_rgba}, ${9:thickness})$0",
		"description": "**Draw List > Primitives > DrawList_AddTriangle**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_AddTriangleFilled lua": {
		"prefix": "ImGui.DrawList_AddTriangleFilled",
		"scope": "lua",
		"body": "ImGui.DrawList_AddTriangleFilled(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:col_rgba})$0",
		"description": "**Draw List > Primitives > DrawList_AddTriangleFilled**\n**Draw List > Primitives**\nFilled shapes must always use clockwise winding order! The anti-aliasing\nfringe depends on it. Counter-clockwise shapes will have 'inward' anti-aliasing.\nSo e.g. `DrawList_PathArcTo(center, radius, PI * -0.5, PI)` is ok, whereas\n`DrawList_PathArcTo(center, radius, PI, PI * -0.5)` won't have correct\nanti-aliasing when followed by DrawList_PathFillConvex.\nFor rectangular primitives, 'p_min' and 'p_max' represent the upper-left and\nlower-right corners.\nFor circle primitives, use 'num_segments == 0' to automatically calculate\ntessellation (preferred).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_PathArcTo lua": {
		"prefix": "ImGui.DrawList_PathArcTo",
		"scope": "lua",
		"body": "ImGui.DrawList_PathArcTo(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:a_min}, ${6:a_max}, ${7:num_segments})$0",
		"description": "**Draw List > Stateful Path > DrawList_PathArcTo**\n**Draw List > Stateful Path**\nStateful path API, add points then finish with PathFillConvex() or PathStroke().\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_PathArcToFast lua": {
		"prefix": "ImGui.DrawList_PathArcToFast",
		"scope": "lua",
		"body": "ImGui.DrawList_PathArcToFast(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:a_min_of_12}, ${6:a_max_of_12})$0",
		"description": "**Draw List > Stateful Path > DrawList_PathArcToFast**\nUse precomputed angles for a 12 steps circle.\n**Draw List > Stateful Path**\nStateful path API, add points then finish with PathFillConvex() or PathStroke().\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_PathBezierCubicCurveTo lua": {
		"prefix": "ImGui.DrawList_PathBezierCubicCurveTo",
		"scope": "lua",
		"body": "ImGui.DrawList_PathBezierCubicCurveTo(${1:draw_list}, ${2:p2_x}, ${3:p2_y}, ${4:p3_x}, ${5:p3_y}, ${6:p4_x}, ${7:p4_y}, ${8:num_segments})$0",
		"description": "**Draw List > Stateful Path > DrawList_PathBezierCubicCurveTo**\nCubic Bezier (4 control points)\n**Draw List > Stateful Path**\nStateful path API, add points then finish with PathFillConvex() or PathStroke().\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_PathBezierQuadraticCurveTo lua": {
		"prefix": "ImGui.DrawList_PathBezierQuadraticCurveTo",
		"scope": "lua",
		"body": "ImGui.DrawList_PathBezierQuadraticCurveTo(${1:draw_list}, ${2:p2_x}, ${3:p2_y}, ${4:p3_x}, ${5:p3_y}, ${6:num_segments})$0",
		"description": "**Draw List > Stateful Path > DrawList_PathBezierQuadraticCurveTo**\nQuadratic Bezier (3 control points)\n**Draw List > Stateful Path**\nStateful path API, add points then finish with PathFillConvex() or PathStroke().\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_PathClear lua": {
		"prefix": "ImGui.DrawList_PathClear",
		"scope": "lua",
		"body": "ImGui.DrawList_PathClear(${1:draw_list})$0",
		"description": "**Draw List > Stateful Path > DrawList_PathClear**\n**Draw List > Stateful Path**\nStateful path API, add points then finish with PathFillConvex() or PathStroke().\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_PathEllipticalArcTo lua": {
		"prefix": "ImGui.DrawList_PathEllipticalArcTo",
		"scope": "lua",
		"body": "ImGui.DrawList_PathEllipticalArcTo(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius_x}, ${5:radius_y}, ${6:rot}, ${7:a_min}, ${8:a_max}, ${9:num_segments})$0",
		"description": "**Draw List > Stateful Path > DrawList_PathEllipticalArcTo**\nEllipse\n**Draw List > Stateful Path**\nStateful path API, add points then finish with PathFillConvex() or PathStroke().\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_PathFillConcave lua": {
		"prefix": "ImGui.DrawList_PathFillConcave",
		"scope": "lua",
		"body": "ImGui.DrawList_PathFillConcave(${1:draw_list}, ${2:col_rgba})$0",
		"description": "**Draw List > Stateful Path > DrawList_PathFillConcave**\n**Draw List > Stateful Path**\nStateful path API, add points then finish with PathFillConvex() or PathStroke().\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_PathFillConvex lua": {
		"prefix": "ImGui.DrawList_PathFillConvex",
		"scope": "lua",
		"body": "ImGui.DrawList_PathFillConvex(${1:draw_list}, ${2:col_rgba})$0",
		"description": "**Draw List > Stateful Path > DrawList_PathFillConvex**\n**Draw List > Stateful Path**\nStateful path API, add points then finish with PathFillConvex() or PathStroke().\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_PathLineTo lua": {
		"prefix": "ImGui.DrawList_PathLineTo",
		"scope": "lua",
		"body": "ImGui.DrawList_PathLineTo(${1:draw_list}, ${2:pos_x}, ${3:pos_y})$0",
		"description": "**Draw List > Stateful Path > DrawList_PathLineTo**\n**Draw List > Stateful Path**\nStateful path API, add points then finish with PathFillConvex() or PathStroke().\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_PathRect lua": {
		"prefix": "ImGui.DrawList_PathRect",
		"scope": "lua",
		"body": "ImGui.DrawList_PathRect(${1:draw_list}, ${2:rect_min_x}, ${3:rect_min_y}, ${4:rect_max_x}, ${5:rect_max_y}, ${6:rounding}, ${7:flags})$0",
		"description": "**Draw List > Stateful Path > DrawList_PathRect**\n**Draw List > Stateful Path**\nStateful path API, add points then finish with PathFillConvex() or PathStroke().\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_PathStroke lua": {
		"prefix": "ImGui.DrawList_PathStroke",
		"scope": "lua",
		"body": "ImGui.DrawList_PathStroke(${1:draw_list}, ${2:col_rgba}, ${3:flags}, ${4:thickness})$0",
		"description": "**Draw List > Stateful Path > DrawList_PathStroke**\n**Draw List > Stateful Path**\nStateful path API, add points then finish with PathFillConvex() or PathStroke().\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_PopClipRect lua": {
		"prefix": "ImGui.DrawList_PopClipRect",
		"scope": "lua",
		"body": "ImGui.DrawList_PopClipRect(${1:draw_list})$0",
		"description": "**Draw List > DrawList_PopClipRect**\nSee DrawList_PushClipRect\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_PushClipRect lua": {
		"prefix": "ImGui.DrawList_PushClipRect",
		"scope": "lua",
		"body": "ImGui.DrawList_PushClipRect(${1:draw_list}, ${2:clip_rect_min_x}, ${3:clip_rect_min_y}, ${4:clip_rect_max_x}, ${5:clip_rect_max_y}, ${6:intersect_with_current_clip_rect})$0",
		"description": "**Draw List > DrawList_PushClipRect**\nRender-level scissoring. Prefer using higher-level PushClipRect to affect\nlogic (hit-testing and widget culling).\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_DrawList_PushClipRectFullScreen lua": {
		"prefix": "ImGui.DrawList_PushClipRectFullScreen",
		"scope": "lua",
		"body": "ImGui.DrawList_PushClipRectFullScreen(${1:draw_list})$0",
		"description": "**Draw List > DrawList_PushClipRectFullScreen**\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_Dummy lua": {
		"prefix": "ImGui.Dummy",
		"scope": "lua",
		"body": "ImGui.Dummy(ctx, ${2:size_w}, ${3:size_h})$0",
		"description": "**Layout > Dummy**\nAdd a dummy item of given size. unlike InvisibleButton, Dummy() won't take the\nmouse click or be navigable into."
	},
	"ImGui_End lua": {
		"prefix": "ImGui.End",
		"scope": "lua",
		"body": "ImGui.End(ctx)$0",
		"description": "**Window > End**\nPop window from the stack. See Begin.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_EndChild lua": {
		"prefix": "ImGui.EndChild",
		"scope": "lua",
		"body": "ImGui.EndChild(ctx)$0",
		"description": "**Window > Child Windows > EndChild**\nSee BeginChild.\n**Window > Child Windows**\nUse child windows to begin into a self-contained independent\nscrolling/clipping regions within a host window.\nChild windows can embed their own child.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_EndCombo lua": {
		"prefix": "ImGui.EndCombo",
		"scope": "lua",
		"body": "ImGui.EndCombo(ctx)$0",
		"description": "**Combo & List > Combo Box (Dropdown) > EndCombo**\nOnly call EndCombo() if BeginCombo returns true!"
	},
	"ImGui_EndDisabled lua": {
		"prefix": "ImGui.EndDisabled",
		"scope": "lua",
		"body": "ImGui.EndDisabled(ctx)$0",
		"description": "**Item & Status > EndDisabled**\nSee BeginDisabled."
	},
	"ImGui_EndDragDropSource lua": {
		"prefix": "ImGui.EndDragDropSource",
		"scope": "lua",
		"body": "ImGui.EndDragDropSource(ctx)$0",
		"description": "**Drag & Drop > EndDragDropSource**\nOnly call EndDragDropSource() if BeginDragDropSource returns true!\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target."
	},
	"ImGui_EndDragDropTarget lua": {
		"prefix": "ImGui.EndDragDropTarget",
		"scope": "lua",
		"body": "ImGui.EndDragDropTarget(ctx)$0",
		"description": "**Drag & Drop > EndDragDropTarget**\nOnly call EndDragDropTarget() if BeginDragDropTarget returns true!\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target."
	},
	"ImGui_EndGroup lua": {
		"prefix": "ImGui.EndGroup",
		"scope": "lua",
		"body": "ImGui.EndGroup(ctx)$0",
		"description": "**Layout > EndGroup**\nUnlock horizontal starting position + capture the whole group bounding box\ninto one 'item' (so you can use IsItemHovered or layout primitives such as\nSameLine on whole group, etc.).\nSee BeginGroup."
	},
	"ImGui_EndListBox lua": {
		"prefix": "ImGui.EndListBox",
		"scope": "lua",
		"body": "ImGui.EndListBox(ctx)$0",
		"description": "**Combo & List > List Boxes > EndListBox**\nOnly call EndListBox() if BeginListBox returned true!\n**Combo & List > List Boxes**\nThis is essentially a thin wrapper to using BeginChild/EndChild with the\nChildFlags_FrameStyle flag for stylistic changes + displaying a label."
	},
	"ImGui_EndMenu lua": {
		"prefix": "ImGui.EndMenu",
		"scope": "lua",
		"body": "ImGui.EndMenu(ctx)$0",
		"description": "**Menu > EndMenu**\nOnly call EndMenu() if BeginMenu returns true!"
	},
	"ImGui_EndMenuBar lua": {
		"prefix": "ImGui.EndMenuBar",
		"scope": "lua",
		"body": "ImGui.EndMenuBar(ctx)$0",
		"description": "**Menu > EndMenuBar**\nOnly call EndMenuBar if BeginMenuBar returns true!"
	},
	"ImGui_EndPopup lua": {
		"prefix": "ImGui.EndPopup",
		"scope": "lua",
		"body": "ImGui.EndPopup(ctx)$0",
		"description": "**Popup & Modal > EndPopup**\nOnly call EndPopup() if BeginPopup*() returns true!\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack."
	},
	"ImGui_EndTabBar lua": {
		"prefix": "ImGui.EndTabBar",
		"scope": "lua",
		"body": "ImGui.EndTabBar(ctx)$0",
		"description": "**Tab Bar > EndTabBar**\nOnly call EndTabBar() if BeginTabBar() returns true!"
	},
	"ImGui_EndTabItem lua": {
		"prefix": "ImGui.EndTabItem",
		"scope": "lua",
		"body": "ImGui.EndTabItem(ctx)$0",
		"description": "**Tab Bar > Tab Item > EndTabItem**\nOnly call EndTabItem() if BeginTabItem() returns true!"
	},
	"ImGui_EndTable lua": {
		"prefix": "ImGui.EndTable",
		"scope": "lua",
		"body": "ImGui.EndTable(ctx)$0",
		"description": "**Table > EndTable**\nOnly call EndTable() if BeginTable() returns true!\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_EndTooltip lua": {
		"prefix": "ImGui.EndTooltip",
		"scope": "lua",
		"body": "ImGui.EndTooltip(ctx)$0",
		"description": "**Popup & Modal > Tooltips > EndTooltip**\nOnly call EndTooltip() if BeginTooltip()/BeginItemTooltip() returns true.\n**Popup & Modal > Tooltips**\nTooltips are windows following the mouse. They do not take focus away.\nA tooltip window can contain items of any type.\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack."
	},
	"ImGui_Function_Execute lua": {
		"prefix": "ImGui.Function_Execute",
		"scope": "lua",
		"body": "ImGui.Function_Execute(${1:func})$0",
		"description": "**Function > Function_Execute**\n**Function**\nCreate reusable programs that can passed to and called back from functions\nsuch as InputText* and SetNextWindowSizeConstraints.\nThey can also be used standalone with Function_Execute\n(eg. faster-than-Lua DSP processing)."
	},
	"ImGui_Function_GetValue lua": {
		"prefix": "ImGui.Function_GetValue",
		"scope": "lua",
		"body": "ImGui.Function_GetValue(${1:func}, ${2:name})$0",
		"description": "**Function > Function_GetValue**\n**Function**\nCreate reusable programs that can passed to and called back from functions\nsuch as InputText* and SetNextWindowSizeConstraints.\nThey can also be used standalone with Function_Execute\n(eg. faster-than-Lua DSP processing)."
	},
	"ImGui_Function_GetValue_Array lua": {
		"prefix": "ImGui.Function_GetValue_Array",
		"scope": "lua",
		"body": "ImGui.Function_GetValue_Array(${1:func}, ${2:name}, ${3:values})$0",
		"description": "**Function > Function_GetValue_Array**\nCopy the values in the function's memory starting at the address stored\nin the given variable into the array.\n**Function**\nCreate reusable programs that can passed to and called back from functions\nsuch as InputText* and SetNextWindowSizeConstraints.\nThey can also be used standalone with Function_Execute\n(eg. faster-than-Lua DSP processing)."
	},
	"ImGui_Function_GetValue_String lua": {
		"prefix": "ImGui.Function_GetValue_String",
		"scope": "lua",
		"body": "ImGui.Function_GetValue_String(${1:func}, ${2:name})$0",
		"description": "**Function > Function_GetValue_String**\nRead from a string slot or a named string (when name starts with a `#`).\n**Function**\nCreate reusable programs that can passed to and called back from functions\nsuch as InputText* and SetNextWindowSizeConstraints.\nThey can also be used standalone with Function_Execute\n(eg. faster-than-Lua DSP processing)."
	},
	"ImGui_Function_SetValue lua": {
		"prefix": "ImGui.Function_SetValue",
		"scope": "lua",
		"body": "ImGui.Function_SetValue(${1:func}, ${2:name}, ${3:value})$0",
		"description": "**Function > Function_SetValue**\n**Function**\nCreate reusable programs that can passed to and called back from functions\nsuch as InputText* and SetNextWindowSizeConstraints.\nThey can also be used standalone with Function_Execute\n(eg. faster-than-Lua DSP processing)."
	},
	"ImGui_Function_SetValue_Array lua": {
		"prefix": "ImGui.Function_SetValue_Array",
		"scope": "lua",
		"body": "ImGui.Function_SetValue_Array(${1:func}, ${2:name}, ${3:values})$0",
		"description": "**Function > Function_SetValue_Array**\nCopy the values in the array to the function's memory at the address stored\nin the given variable.\n**Function**\nCreate reusable programs that can passed to and called back from functions\nsuch as InputText* and SetNextWindowSizeConstraints.\nThey can also be used standalone with Function_Execute\n(eg. faster-than-Lua DSP processing)."
	},
	"ImGui_Function_SetValue_String lua": {
		"prefix": "ImGui.Function_SetValue_String",
		"scope": "lua",
		"body": "ImGui.Function_SetValue_String(${1:func}, ${2:name}, ${3:value})$0",
		"description": "**Function > Function_SetValue_String**\nWrite to a string slot or a named string (when name starts with a `#`).\n**Function**\nCreate reusable programs that can passed to and called back from functions\nsuch as InputText* and SetNextWindowSizeConstraints.\nThey can also be used standalone with Function_Execute\n(eg. faster-than-Lua DSP processing)."
	},
	"ImGui_GetBackgroundDrawList lua": {
		"prefix": "ImGui.GetBackgroundDrawList",
		"scope": "lua",
		"body": "ImGui.GetBackgroundDrawList(ctx)$0",
		"description": "**Draw List > GetBackgroundDrawList**\nThis draw list will be the first rendering one. Useful to quickly draw\nshapes/text behind dear imgui contents.\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_GetBuiltinPath lua": {
		"prefix": "ImGui.GetBuiltinPath",
		"scope": "lua",
		"body": "ImGui.GetBuiltinPath()$0",
		"description": "**Utility > GetBuiltinPath**\nReturns the path to the directory containing imgui.lua, imgui.py and gfx2imgui.lua."
	},
	"ImGui_GetClipboardText lua": {
		"prefix": "ImGui.GetClipboardText",
		"scope": "lua",
		"body": "ImGui.GetClipboardText(ctx)$0",
		"description": "**Utility > Clipboard > GetClipboardText**"
	},
	"ImGui_GetColor lua": {
		"prefix": "ImGui.GetColor",
		"scope": "lua",
		"body": "ImGui.GetColor(ctx, ${2:idx}, ${3:alpha_mul})$0",
		"description": "**Style > Colors > GetColor**\nRetrieve given style color with style alpha applied and optional extra alpha\nmultiplier, packed as a 32-bit value (RGBA). See Col_* for available style colors."
	},
	"ImGui_GetColorEx lua": {
		"prefix": "ImGui.GetColorEx",
		"scope": "lua",
		"body": "ImGui.GetColorEx(ctx, ${2:col_rgba}, ${3:alpha_mul})$0",
		"description": "**Style > Colors > GetColorEx**\nRetrieve given color with style alpha applied, packed as a 32-bit value (RGBA)."
	},
	"ImGui_GetConfigVar lua": {
		"prefix": "ImGui.GetConfigVar",
		"scope": "lua",
		"body": "ImGui.GetConfigVar(ctx, ${2:var_idx})$0",
		"description": "**Context > Options > GetConfigVar**"
	},
	"ImGui_GetContentRegionAvail lua": {
		"prefix": "ImGui.GetContentRegionAvail",
		"scope": "lua",
		"body": "ImGui.GetContentRegionAvail(ctx)$0",
		"description": "**Window > Content Region > GetContentRegionAvail**\n== GetContentRegionMax() - GetCursorPos()\n**Window > Content Region**\nRetrieve available space from a given point.\nGetContentRegionAvail() is frequently useful.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_GetContentRegionMax lua": {
		"prefix": "ImGui.GetContentRegionMax",
		"scope": "lua",
		"body": "ImGui.GetContentRegionMax(ctx)$0",
		"description": "**Window > Content Region > GetContentRegionMax**\nCurrent content boundaries (typically window boundaries including scrolling,\nor current column boundaries), in windows coordinates.\n**Window > Content Region**\nRetrieve available space from a given point.\nGetContentRegionAvail() is frequently useful.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_GetCursorPos lua": {
		"prefix": "ImGui.GetCursorPos",
		"scope": "lua",
		"body": "ImGui.GetCursorPos(ctx)$0",
		"description": "**Layout > Layout Cursor Positioning > GetCursorPos**\nCursor position in window\n**Layout > Layout Cursor Positioning**\nBy 'cursor' we mean the current output position.\nThe typical widget behavior is to output themselves at the current cursor\nposition, then move the cursor one line down.\nYou can call SameLine() between widgets to undo the last carriage return and\noutput at the right of the preceding widget."
	},
	"ImGui_GetCursorPosX lua": {
		"prefix": "ImGui.GetCursorPosX",
		"scope": "lua",
		"body": "ImGui.GetCursorPosX(ctx)$0",
		"description": "**Layout > Layout Cursor Positioning > GetCursorPosX**\nCursor X position in window\n**Layout > Layout Cursor Positioning**\nBy 'cursor' we mean the current output position.\nThe typical widget behavior is to output themselves at the current cursor\nposition, then move the cursor one line down.\nYou can call SameLine() between widgets to undo the last carriage return and\noutput at the right of the preceding widget."
	},
	"ImGui_GetCursorPosY lua": {
		"prefix": "ImGui.GetCursorPosY",
		"scope": "lua",
		"body": "ImGui.GetCursorPosY(ctx)$0",
		"description": "**Layout > Layout Cursor Positioning > GetCursorPosY**\nCursor Y position in window\n**Layout > Layout Cursor Positioning**\nBy 'cursor' we mean the current output position.\nThe typical widget behavior is to output themselves at the current cursor\nposition, then move the cursor one line down.\nYou can call SameLine() between widgets to undo the last carriage return and\noutput at the right of the preceding widget."
	},
	"ImGui_GetCursorScreenPos lua": {
		"prefix": "ImGui.GetCursorScreenPos",
		"scope": "lua",
		"body": "ImGui.GetCursorScreenPos(ctx)$0",
		"description": "**Layout > Layout Cursor Positioning > GetCursorScreenPos**\nCursor position in absolute screen coordinates (useful to work with the DrawList API).\n**Layout > Layout Cursor Positioning**\nBy 'cursor' we mean the current output position.\nThe typical widget behavior is to output themselves at the current cursor\nposition, then move the cursor one line down.\nYou can call SameLine() between widgets to undo the last carriage return and\noutput at the right of the preceding widget."
	},
	"ImGui_GetCursorStartPos lua": {
		"prefix": "ImGui.GetCursorStartPos",
		"scope": "lua",
		"body": "ImGui.GetCursorStartPos(ctx)$0",
		"description": "**Layout > Layout Cursor Positioning > GetCursorStartPos**\nInitial cursor position in window coordinates.\n**Layout > Layout Cursor Positioning**\nBy 'cursor' we mean the current output position.\nThe typical widget behavior is to output themselves at the current cursor\nposition, then move the cursor one line down.\nYou can call SameLine() between widgets to undo the last carriage return and\noutput at the right of the preceding widget."
	},
	"ImGui_GetDeltaTime lua": {
		"prefix": "ImGui.GetDeltaTime",
		"scope": "lua",
		"body": "ImGui.GetDeltaTime(ctx)$0",
		"description": "**Context > GetDeltaTime**\nTime elapsed since last frame, in seconds."
	},
	"ImGui_GetDragDropPayload lua": {
		"prefix": "ImGui.GetDragDropPayload",
		"scope": "lua",
		"body": "ImGui.GetDragDropPayload(ctx)$0",
		"description": "**Drag & Drop > GetDragDropPayload**\nPeek directly into the current payload from anywhere.\nReturns false when drag and drop is finished or inactive.\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target."
	},
	"ImGui_GetDragDropPayloadFile lua": {
		"prefix": "ImGui.GetDragDropPayloadFile",
		"scope": "lua",
		"body": "ImGui.GetDragDropPayloadFile(ctx, ${2:index})$0",
		"description": "**Drag & Drop > GetDragDropPayloadFile**\nGet a filename from the list of dropped files.\nReturns false if index is out of bounds.\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target."
	},
	"ImGui_GetFont lua": {
		"prefix": "ImGui.GetFont",
		"scope": "lua",
		"body": "ImGui.GetFont(ctx)$0",
		"description": "**Font > GetFont**\nGet the current font\n**Font**\nSupports loading fonts from the system by family name or from a file.\nGlyphs may contain colors in COLR/CPAL format.\nThis API currently has multiple limitations (v1.0 blockers):\n- ReaImGui rasterizes glyphs only from the Basic Latin and Latin Supplement\nUnicode blocks (U+0020 to U+00FF). UTF-8 is fully supported internally,\nhowever characters outside those blocks are displayed as '?'.\nSee [issue #5](https://github.com/cfillion/reaimgui/issues/5).\n- Dear ImGui does not support using new fonts in the middle of a frame.\nBecause of this, fonts must first be registered using Attach before any\nother context functions are used in the same defer cycle.\n(Attaching a font is a heavy operation and should ideally be done outside\nof the defer loop.)"
	},
	"ImGui_GetFontSize lua": {
		"prefix": "ImGui.GetFontSize",
		"scope": "lua",
		"body": "ImGui.GetFontSize(ctx)$0",
		"description": "**Font > GetFontSize**\nGet current font size (= height in pixels) of current font with current scale\napplied.\n**Font**\nSupports loading fonts from the system by family name or from a file.\nGlyphs may contain colors in COLR/CPAL format.\nThis API currently has multiple limitations (v1.0 blockers):\n- ReaImGui rasterizes glyphs only from the Basic Latin and Latin Supplement\nUnicode blocks (U+0020 to U+00FF). UTF-8 is fully supported internally,\nhowever characters outside those blocks are displayed as '?'.\nSee [issue #5](https://github.com/cfillion/reaimgui/issues/5).\n- Dear ImGui does not support using new fonts in the middle of a frame.\nBecause of this, fonts must first be registered using Attach before any\nother context functions are used in the same defer cycle.\n(Attaching a font is a heavy operation and should ideally be done outside\nof the defer loop.)"
	},
	"ImGui_GetForegroundDrawList lua": {
		"prefix": "ImGui.GetForegroundDrawList",
		"scope": "lua",
		"body": "ImGui.GetForegroundDrawList(ctx)$0",
		"description": "**Draw List > GetForegroundDrawList**\nThis draw list will be the last rendered one. Useful to quickly draw\nshapes/text over dear imgui contents.\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_GetFrameCount lua": {
		"prefix": "ImGui.GetFrameCount",
		"scope": "lua",
		"body": "ImGui.GetFrameCount(ctx)$0",
		"description": "**Context > GetFrameCount**\nGet global imgui frame count. incremented by 1 every frame."
	},
	"ImGui_GetFrameHeight lua": {
		"prefix": "ImGui.GetFrameHeight",
		"scope": "lua",
		"body": "ImGui.GetFrameHeight(ctx)$0",
		"description": "**Text > GetFrameHeight**\nGetFontSize + StyleVar_FramePadding.y * 2"
	},
	"ImGui_GetFrameHeightWithSpacing lua": {
		"prefix": "ImGui.GetFrameHeightWithSpacing",
		"scope": "lua",
		"body": "ImGui.GetFrameHeightWithSpacing(ctx)$0",
		"description": "**Text > GetFrameHeightWithSpacing**\nGetFontSize + StyleVar_FramePadding.y * 2 + StyleVar_ItemSpacing.y\n(distance in pixels between 2 consecutive lines of framed widgets)."
	},
	"ImGui_GetFramerate lua": {
		"prefix": "ImGui.GetFramerate",
		"scope": "lua",
		"body": "ImGui.GetFramerate(ctx)$0",
		"description": "**Context > GetFramerate**\nEstimate of application framerate (rolling average over 60 frames, based on\nGetDeltaTime), in frame per second. Solely for convenience."
	},
	"ImGui_GetInputQueueCharacter lua": {
		"prefix": "ImGui.GetInputQueueCharacter",
		"scope": "lua",
		"body": "ImGui.GetInputQueueCharacter(ctx, ${2:idx})$0",
		"description": "**Keyboard & Mouse > Keyboard > GetInputQueueCharacter**\nRead from ImGui's character input queue.\nCall with increasing idx until false is returned."
	},
	"ImGui_GetItemRectMax lua": {
		"prefix": "ImGui.GetItemRectMax",
		"scope": "lua",
		"body": "ImGui.GetItemRectMax(ctx)$0",
		"description": "**Item & Status > Dimensions > GetItemRectMax**\nGet lower-right bounding rectangle of the last item (screen space)"
	},
	"ImGui_GetItemRectMin lua": {
		"prefix": "ImGui.GetItemRectMin",
		"scope": "lua",
		"body": "ImGui.GetItemRectMin(ctx)$0",
		"description": "**Item & Status > Dimensions > GetItemRectMin**\nGet upper-left bounding rectangle of the last item (screen space)"
	},
	"ImGui_GetItemRectSize lua": {
		"prefix": "ImGui.GetItemRectSize",
		"scope": "lua",
		"body": "ImGui.GetItemRectSize(ctx)$0",
		"description": "**Item & Status > Dimensions > GetItemRectSize**\nGet size of last item"
	},
	"ImGui_GetKeyDownDuration lua": {
		"prefix": "ImGui.GetKeyDownDuration",
		"scope": "lua",
		"body": "ImGui.GetKeyDownDuration(ctx, ${2:key})$0",
		"description": "**Keyboard & Mouse > Keyboard > GetKeyDownDuration**\nDuration the keyboard key has been down (0.0 == just pressed)"
	},
	"ImGui_GetKeyMods lua": {
		"prefix": "ImGui.GetKeyMods",
		"scope": "lua",
		"body": "ImGui.GetKeyMods(ctx)$0",
		"description": "**Keyboard & Mouse > Keyboard > GetKeyMods**\nFlags for the Ctrl/Shift/Alt/Super keys. Uses Mod_* values."
	},
	"ImGui_GetKeyPressedAmount lua": {
		"prefix": "ImGui.GetKeyPressedAmount",
		"scope": "lua",
		"body": "ImGui.GetKeyPressedAmount(ctx, ${2:key}, ${3:repeat_delay}, ${4:rate})$0",
		"description": "**Keyboard & Mouse > Keyboard > GetKeyPressedAmount**\nUses provided repeat rate/delay. Return a count, most often 0 or 1 but might\nbe >1 if ConfigVar_RepeatRate is small enough that GetDeltaTime > RepeatRate."
	},
	"ImGui_GetMainViewport lua": {
		"prefix": "ImGui.GetMainViewport",
		"scope": "lua",
		"body": "ImGui.GetMainViewport(ctx)$0",
		"description": "**Viewport > GetMainViewport**\nCurrently represents REAPER's main window (arrange view).\nWARNING: This may change or be removed in the future."
	},
	"ImGui_GetMouseClickedCount lua": {
		"prefix": "ImGui.GetMouseClickedCount",
		"scope": "lua",
		"body": "ImGui.GetMouseClickedCount(ctx, ${2:button})$0",
		"description": "**Keyboard & Mouse > Mouse > GetMouseClickedCount**\nReturn the number of successive mouse-clicks at the time where a click happen (otherwise 0).\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_GetMouseClickedPos lua": {
		"prefix": "ImGui.GetMouseClickedPos",
		"scope": "lua",
		"body": "ImGui.GetMouseClickedPos(ctx, ${2:button})$0",
		"description": "**Keyboard & Mouse > Mouse > GetMouseClickedPos**\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_GetMouseCursor lua": {
		"prefix": "ImGui.GetMouseCursor",
		"scope": "lua",
		"body": "ImGui.GetMouseCursor(ctx)$0",
		"description": "**Keyboard & Mouse > Mouse > Mouse Cursor > GetMouseCursor**\nGet desired mouse cursor shape, reset every frame. This is updated during the frame.\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_GetMouseDelta lua": {
		"prefix": "ImGui.GetMouseDelta",
		"scope": "lua",
		"body": "ImGui.GetMouseDelta(ctx)$0",
		"description": "**Keyboard & Mouse > Mouse > GetMouseDelta**\nMouse delta. Note that this is zero if either current or previous position\nare invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have\na huge delta.\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_GetMouseDownDuration lua": {
		"prefix": "ImGui.GetMouseDownDuration",
		"scope": "lua",
		"body": "ImGui.GetMouseDownDuration(ctx, ${2:button})$0",
		"description": "**Keyboard & Mouse > Mouse > GetMouseDownDuration**\nDuration the mouse button has been down (0.0 == just clicked)\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_GetMouseDragDelta lua": {
		"prefix": "ImGui.GetMouseDragDelta",
		"scope": "lua",
		"body": "ImGui.GetMouseDragDelta(ctx, ${2:_1}, ${3:_2}, ${4:button}, ${5:lock_threshold})$0",
		"description": "**Keyboard & Mouse > Mouse > GetMouseDragDelta**\nReturn the delta from the initial clicking position while the mouse button is\npressed or was just released. This is locked and return 0.0 until the mouse\nmoves past a distance threshold at least once (uses ConfigVar_MouseDragThreshold\nif lock_threshold < 0.0).\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_GetMousePos lua": {
		"prefix": "ImGui.GetMousePos",
		"scope": "lua",
		"body": "ImGui.GetMousePos(ctx)$0",
		"description": "**Keyboard & Mouse > Mouse > GetMousePos**\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_GetMousePosOnOpeningCurrentPopup lua": {
		"prefix": "ImGui.GetMousePosOnOpeningCurrentPopup",
		"scope": "lua",
		"body": "ImGui.GetMousePosOnOpeningCurrentPopup(ctx)$0",
		"description": "**Keyboard & Mouse > Mouse > GetMousePosOnOpeningCurrentPopup**\nRetrieve mouse position at the time of opening popup we have BeginPopup()\ninto (helper to avoid user backing that value themselves).\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_GetMouseWheel lua": {
		"prefix": "ImGui.GetMouseWheel",
		"scope": "lua",
		"body": "ImGui.GetMouseWheel(ctx)$0",
		"description": "**Keyboard & Mouse > Mouse > GetMouseWheel**\nVertical: 1 unit scrolls about 5 lines text. >0 scrolls Up, <0 scrolls Down.\nHold SHIFT to turn vertical scroll into horizontal scroll\nHorizontal: >0 scrolls Left, <0 scrolls Right.\nMost users don't have a mouse with a horizontal wheel.\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_GetScrollMaxX lua": {
		"prefix": "ImGui.GetScrollMaxX",
		"scope": "lua",
		"body": "ImGui.GetScrollMaxX(ctx)$0",
		"description": "**Window > Scrolling > GetScrollMaxX**\nGet maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x\n**Window > Scrolling**\nAny change of Scroll will be applied at the beginning of next frame in the\nfirst call to Begin().\nYou may instead use SetNextWindowScroll() prior to calling Begin() to avoid this\ndelay, as an alternative to using SetScrollX()/SetScrollY().\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_GetScrollMaxY lua": {
		"prefix": "ImGui.GetScrollMaxY",
		"scope": "lua",
		"body": "ImGui.GetScrollMaxY(ctx)$0",
		"description": "**Window > Scrolling > GetScrollMaxY**\nGet maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y\n**Window > Scrolling**\nAny change of Scroll will be applied at the beginning of next frame in the\nfirst call to Begin().\nYou may instead use SetNextWindowScroll() prior to calling Begin() to avoid this\ndelay, as an alternative to using SetScrollX()/SetScrollY().\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_GetScrollX lua": {
		"prefix": "ImGui.GetScrollX",
		"scope": "lua",
		"body": "ImGui.GetScrollX(ctx)$0",
		"description": "**Window > Scrolling > GetScrollX**\nGet scrolling amount [0 .. GetScrollMaxX()]\n**Window > Scrolling**\nAny change of Scroll will be applied at the beginning of next frame in the\nfirst call to Begin().\nYou may instead use SetNextWindowScroll() prior to calling Begin() to avoid this\ndelay, as an alternative to using SetScrollX()/SetScrollY().\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_GetScrollY lua": {
		"prefix": "ImGui.GetScrollY",
		"scope": "lua",
		"body": "ImGui.GetScrollY(ctx)$0",
		"description": "**Window > Scrolling > GetScrollY**\nGet scrolling amount [0 .. GetScrollMaxY()]\n**Window > Scrolling**\nAny change of Scroll will be applied at the beginning of next frame in the\nfirst call to Begin().\nYou may instead use SetNextWindowScroll() prior to calling Begin() to avoid this\ndelay, as an alternative to using SetScrollX()/SetScrollY().\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_GetStyleColor lua": {
		"prefix": "ImGui.GetStyleColor",
		"scope": "lua",
		"body": "ImGui.GetStyleColor(ctx, ${2:idx})$0",
		"description": "**Style > Colors > GetStyleColor**\nRetrieve style color as stored in ImGuiStyle structure.\nUse to feed back into PushStyleColor, Otherwise use GetColor to get style color\nwith style alpha baked in. See Col_* for available style colors."
	},
	"ImGui_GetStyleVar lua": {
		"prefix": "ImGui.GetStyleVar",
		"scope": "lua",
		"body": "ImGui.GetStyleVar(ctx, ${2:var_idx})$0",
		"description": "**Style > Variables > GetStyleVar**"
	},
	"ImGui_GetTextLineHeight lua": {
		"prefix": "ImGui.GetTextLineHeight",
		"scope": "lua",
		"body": "ImGui.GetTextLineHeight(ctx)$0",
		"description": "**Text > GetTextLineHeight**\nSame as GetFontSize"
	},
	"ImGui_GetTextLineHeightWithSpacing lua": {
		"prefix": "ImGui.GetTextLineHeightWithSpacing",
		"scope": "lua",
		"body": "ImGui.GetTextLineHeightWithSpacing(ctx)$0",
		"description": "**Text > GetTextLineHeightWithSpacing**\nGetFontSize + StyleVar_ItemSpacing.y\n(distance in pixels between 2 consecutive lines of text)."
	},
	"ImGui_GetTime lua": {
		"prefix": "ImGui.GetTime",
		"scope": "lua",
		"body": "ImGui.GetTime(ctx)$0",
		"description": "**Context > GetTime**\nGet global imgui time. Incremented every frame."
	},
	"ImGui_GetTreeNodeToLabelSpacing lua": {
		"prefix": "ImGui.GetTreeNodeToLabelSpacing",
		"scope": "lua",
		"body": "ImGui.GetTreeNodeToLabelSpacing(ctx)$0",
		"description": "**Tree Node > GetTreeNodeToLabelSpacing**\nHorizontal distance preceding label when using TreeNode*() or Bullet()\n== (GetFontSize + StyleVar_FramePadding.x*2) for a regular unframed TreeNode."
	},
	"ImGui_GetVersion lua": {
		"prefix": "ImGui.GetVersion",
		"scope": "lua",
		"body": "ImGui.GetVersion()$0",
		"description": "**Utility > GetVersion**"
	},
	"ImGui_GetWindowContentRegionMax lua": {
		"prefix": "ImGui.GetWindowContentRegionMax",
		"scope": "lua",
		"body": "ImGui.GetWindowContentRegionMax(ctx)$0",
		"description": "**Window > Content Region > GetWindowContentRegionMax**\nContent boundaries max (roughly (0,0)+Size-Scroll) where Size can be\noverridden with SetNextWindowContentSize, in window coordinates.\n**Window > Content Region**\nRetrieve available space from a given point.\nGetContentRegionAvail() is frequently useful.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_GetWindowContentRegionMin lua": {
		"prefix": "ImGui.GetWindowContentRegionMin",
		"scope": "lua",
		"body": "ImGui.GetWindowContentRegionMin(ctx)$0",
		"description": "**Window > Content Region > GetWindowContentRegionMin**\nContent boundaries min (roughly (0,0)-Scroll), in window coordinates.\n**Window > Content Region**\nRetrieve available space from a given point.\nGetContentRegionAvail() is frequently useful.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_GetWindowDockID lua": {
		"prefix": "ImGui.GetWindowDockID",
		"scope": "lua",
		"body": "ImGui.GetWindowDockID(ctx)$0",
		"description": "**Window > Docking > GetWindowDockID**\n**Window > Docking**\nDock windows into other windows or in REAPER dockers.\nDock IDs are:\n- 0 = undocked\n- -1 to -16 = REAPER docker index\n- > 0 = Dear ImGui dockspace ID (when the user docked the window into another one).\nDrag from window title bar or their tab to dock/undock. Hold SHIFT to disable docking.\nDrag from window menu button (upper-left button) to undock an entire node (all windows).\nDockingWithShift == true, you instead need to hold SHIFT to _enable_ docking.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_GetWindowDpiScale lua": {
		"prefix": "ImGui.GetWindowDpiScale",
		"scope": "lua",
		"body": "ImGui.GetWindowDpiScale(ctx)$0",
		"description": "**Window > Properties > GetWindowDpiScale**\nGet DPI scale currently associated to the current window's viewport\n(1.0 = 96 DPI).\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_GetWindowDrawList lua": {
		"prefix": "ImGui.GetWindowDrawList",
		"scope": "lua",
		"body": "ImGui.GetWindowDrawList(ctx)$0",
		"description": "**Draw List > GetWindowDrawList**\nThe draw list associated to the current window, to append your own drawing primitives\n**Draw List**\nThis is the low-level list of polygons that ImGui functions are filling.\nAt the end of the frame, all draw lists are passed to the GPU for rendering.\nEach dear imgui window contains its own Draw List.\nYou can use GetWindowDrawList() to access the current window draw list and draw\ncustom primitives.\nThe Draw List API uses absolute coordinates (0,0 is the top-left corner of the\nprimary monitor, not of your window!). See GetCursorScreenPos."
	},
	"ImGui_GetWindowHeight lua": {
		"prefix": "ImGui.GetWindowHeight",
		"scope": "lua",
		"body": "ImGui.GetWindowHeight(ctx)$0",
		"description": "**Window > Properties > GetWindowHeight**\nGet current window height (shortcut for (GetWindowSize().h).\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_GetWindowPos lua": {
		"prefix": "ImGui.GetWindowPos",
		"scope": "lua",
		"body": "ImGui.GetWindowPos(ctx)$0",
		"description": "**Window > Properties > GetWindowPos**\nGet current window position in screen space (note: it is unlikely you need to\nuse this. Consider using current layout pos instead, GetCursorScreenPos()).\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_GetWindowSize lua": {
		"prefix": "ImGui.GetWindowSize",
		"scope": "lua",
		"body": "ImGui.GetWindowSize(ctx)$0",
		"description": "**Window > Properties > GetWindowSize**\nGet current window size (note: it is unlikely you need to use this.\nConsider using GetCursorScreenPos() and e.g. GetContentRegionAvail() instead)\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_GetWindowViewport lua": {
		"prefix": "ImGui.GetWindowViewport",
		"scope": "lua",
		"body": "ImGui.GetWindowViewport(ctx)$0",
		"description": "**Viewport > GetWindowViewport**\nGet viewport currently associated to the current window."
	},
	"ImGui_GetWindowWidth lua": {
		"prefix": "ImGui.GetWindowWidth",
		"scope": "lua",
		"body": "ImGui.GetWindowWidth(ctx)$0",
		"description": "**Window > Properties > GetWindowWidth**\nGet current window width (shortcut for (GetWindowSize().w).\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_Image lua": {
		"prefix": "ImGui.Image",
		"scope": "lua",
		"body": "ImGui.Image(ctx, ${2:image}, ${3:image_size_w}, ${4:image_size_h}, ${5:uv0_x}, ${6:uv0_y}, ${7:uv1_x}, ${8:uv1_y}, ${9:tint_col_rgba}, ${10:border_col_rgba})$0",
		"description": "**Image > Image**\nAdds 2.0 to the provided size if a border is visible.\n**Image**\nReaImGui currently supports loading PNG and JPEG bitmap images.\nFlat vector images may be loaded as fonts, see CreateFont.\nUV parameters are texture coordinates in a scale of 0.0 (top/left) to 1.0\n(bottom/right). Use values below 0.0 or above 1.0 to tile the image.\nWidth/height are limited to 8192 pixels.\nThere are also image functions in the DrawList API such as\nDrawList_AddImageQuad and DrawList_AddImageRounded.\nCaching of image objects may be implemented like this:\nlocal images = {}\nlocal function imageFromCache(fn)\nlocal img = images[fn]\nif not img then\nimg = {}\nimages[fn] = img\nend\nif not ImGui.ValidatePtr(img.inst, 'ImGui_Image*') then\nif img.inst then images[img.inst] = nil end\nimg.inst = ImGui.CreateImage(fn)\nlocal prev = images[img.inst]\nif prev and prev ~= img then prev.inst = nil end\nimages[img.inst] = img\nend\nreturn img.inst\nend"
	},
	"ImGui_ImageButton lua": {
		"prefix": "ImGui.ImageButton",
		"scope": "lua",
		"body": "ImGui.ImageButton(ctx, ${2:str_id}, ${3:image}, ${4:image_size_w}, ${5:image_size_h}, ${6:uv0_x}, ${7:uv0_y}, ${8:uv1_x}, ${9:uv1_y}, ${10:bg_col_rgba}, ${11:tint_col_rgba})$0",
		"description": "**Image > ImageButton**\nAdds StyleVar_FramePadding*2.0 to provided size.\n**Image**\nReaImGui currently supports loading PNG and JPEG bitmap images.\nFlat vector images may be loaded as fonts, see CreateFont.\nUV parameters are texture coordinates in a scale of 0.0 (top/left) to 1.0\n(bottom/right). Use values below 0.0 or above 1.0 to tile the image.\nWidth/height are limited to 8192 pixels.\nThere are also image functions in the DrawList API such as\nDrawList_AddImageQuad and DrawList_AddImageRounded.\nCaching of image objects may be implemented like this:\nlocal images = {}\nlocal function imageFromCache(fn)\nlocal img = images[fn]\nif not img then\nimg = {}\nimages[fn] = img\nend\nif not ImGui.ValidatePtr(img.inst, 'ImGui_Image*') then\nif img.inst then images[img.inst] = nil end\nimg.inst = ImGui.CreateImage(fn)\nlocal prev = images[img.inst]\nif prev and prev ~= img then prev.inst = nil end\nimages[img.inst] = img\nend\nreturn img.inst\nend"
	},
	"ImGui_ImageSet_Add lua": {
		"prefix": "ImGui.ImageSet_Add",
		"scope": "lua",
		"body": "ImGui.ImageSet_Add(${1:set}, ${2:scale}, ${3:image})$0",
		"description": "**Image > Image Set > ImageSet_Add**\n'img' cannot be another ImageSet.\n**Image > Image Set**\nHelper to automatically select and scale an image to the DPI scale of\nthe current window upon usage.\nImageSet objects may be used in any function that expect an image as parameter.\nUsage:\nlocal set = ImGui.CreateImageSet()\nImGui.ImageSet_Add(set, 1.0, ImGui.CreateImage('32x32.png'))\nImGui.ImageSet_Add(set, 2.0, ImGui.CreateImage('64x64.png'))\nlocal function frame()\nImGui.Image(ctx, set, ImGui.Image_GetSize(set))\n-- ...\nend\n**Image**\nReaImGui currently supports loading PNG and JPEG bitmap images.\nFlat vector images may be loaded as fonts, see CreateFont.\nUV parameters are texture coordinates in a scale of 0.0 (top/left) to 1.0\n(bottom/right). Use values below 0.0 or above 1.0 to tile the image.\nWidth/height are limited to 8192 pixels.\nThere are also image functions in the DrawList API such as\nDrawList_AddImageQuad and DrawList_AddImageRounded.\nCaching of image objects may be implemented like this:\nlocal images = {}\nlocal function imageFromCache(fn)\nlocal img = images[fn]\nif not img then\nimg = {}\nimages[fn] = img\nend\nif not ImGui.ValidatePtr(img.inst, 'ImGui_Image*') then\nif img.inst then images[img.inst] = nil end\nimg.inst = ImGui.CreateImage(fn)\nlocal prev = images[img.inst]\nif prev and prev ~= img then prev.inst = nil end\nimages[img.inst] = img\nend\nreturn img.inst\nend"
	},
	"ImGui_Image_GetSize lua": {
		"prefix": "ImGui.Image_GetSize",
		"scope": "lua",
		"body": "ImGui.Image_GetSize(${1:image})$0",
		"description": "**Image > Image_GetSize**\n**Image**\nReaImGui currently supports loading PNG and JPEG bitmap images.\nFlat vector images may be loaded as fonts, see CreateFont.\nUV parameters are texture coordinates in a scale of 0.0 (top/left) to 1.0\n(bottom/right). Use values below 0.0 or above 1.0 to tile the image.\nWidth/height are limited to 8192 pixels.\nThere are also image functions in the DrawList API such as\nDrawList_AddImageQuad and DrawList_AddImageRounded.\nCaching of image objects may be implemented like this:\nlocal images = {}\nlocal function imageFromCache(fn)\nlocal img = images[fn]\nif not img then\nimg = {}\nimages[fn] = img\nend\nif not ImGui.ValidatePtr(img.inst, 'ImGui_Image*') then\nif img.inst then images[img.inst] = nil end\nimg.inst = ImGui.CreateImage(fn)\nlocal prev = images[img.inst]\nif prev and prev ~= img then prev.inst = nil end\nimages[img.inst] = img\nend\nreturn img.inst\nend"
	},
	"ImGui_Indent lua": {
		"prefix": "ImGui.Indent",
		"scope": "lua",
		"body": "ImGui.Indent(ctx, ${2:indent_w})$0",
		"description": "**Layout > Indent**\nMove content position toward the right, by 'indent_w', or\nStyleVar_IndentSpacing if 'indent_w' <= 0. See Unindent."
	},
	"ImGui_InputDouble lua": {
		"prefix": "ImGui.InputDouble",
		"scope": "lua",
		"body": "ImGui.InputDouble(ctx, ${2:label}, ${3:v}, ${4:step}, ${5:step_fast}, ${6:format}, ${7:flags})$0",
		"description": "**Text & Scalar Input > InputDouble**"
	},
	"ImGui_InputDouble2 lua": {
		"prefix": "ImGui.InputDouble2",
		"scope": "lua",
		"body": "ImGui.InputDouble2(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:format}, ${6:flags})$0",
		"description": "**Text & Scalar Input > InputDouble2**"
	},
	"ImGui_InputDouble3 lua": {
		"prefix": "ImGui.InputDouble3",
		"scope": "lua",
		"body": "ImGui.InputDouble3(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:format}, ${7:flags})$0",
		"description": "**Text & Scalar Input > InputDouble3**"
	},
	"ImGui_InputDouble4 lua": {
		"prefix": "ImGui.InputDouble4",
		"scope": "lua",
		"body": "ImGui.InputDouble4(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:format}, ${8:flags})$0",
		"description": "**Text & Scalar Input > InputDouble4**"
	},
	"ImGui_InputDoubleN lua": {
		"prefix": "ImGui.InputDoubleN",
		"scope": "lua",
		"body": "ImGui.InputDoubleN(ctx, ${2:label}, ${3:values}, ${4:step}, ${5:step_fast}, ${6:format}, ${7:flags})$0",
		"description": "**Text & Scalar Input > InputDoubleN**"
	},
	"ImGui_InputInt lua": {
		"prefix": "ImGui.InputInt",
		"scope": "lua",
		"body": "ImGui.InputInt(ctx, ${2:label}, ${3:v}, ${4:step}, ${5:step_fast}, ${6:flags})$0",
		"description": "**Text & Scalar Input > InputInt**"
	},
	"ImGui_InputInt2 lua": {
		"prefix": "ImGui.InputInt2",
		"scope": "lua",
		"body": "ImGui.InputInt2(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:flags})$0",
		"description": "**Text & Scalar Input > InputInt2**"
	},
	"ImGui_InputInt3 lua": {
		"prefix": "ImGui.InputInt3",
		"scope": "lua",
		"body": "ImGui.InputInt3(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:flags})$0",
		"description": "**Text & Scalar Input > InputInt3**"
	},
	"ImGui_InputInt4 lua": {
		"prefix": "ImGui.InputInt4",
		"scope": "lua",
		"body": "ImGui.InputInt4(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:flags})$0",
		"description": "**Text & Scalar Input > InputInt4**"
	},
	"ImGui_InputText lua": {
		"prefix": "ImGui.InputText",
		"scope": "lua",
		"body": "ImGui.InputText(ctx, ${2:label}, ${3:buf}, ${4:flags}, ${5:callback})$0",
		"description": "**Text & Scalar Input > InputText**"
	},
	"ImGui_InputTextMultiline lua": {
		"prefix": "ImGui.InputTextMultiline",
		"scope": "lua",
		"body": "ImGui.InputTextMultiline(ctx, ${2:label}, ${3:buf}, ${4:size_w}, ${5:size_h}, ${6:flags}, ${7:callback})$0",
		"description": "**Text & Scalar Input > InputTextMultiline**"
	},
	"ImGui_InputTextWithHint lua": {
		"prefix": "ImGui.InputTextWithHint",
		"scope": "lua",
		"body": "ImGui.InputTextWithHint(ctx, ${2:label}, ${3:hint}, ${4:buf}, ${5:flags}, ${6:callback})$0",
		"description": "**Text & Scalar Input > InputTextWithHint**"
	},
	"ImGui_InvisibleButton lua": {
		"prefix": "ImGui.InvisibleButton",
		"scope": "lua",
		"body": "ImGui.InvisibleButton(ctx, ${2:str_id}, ${3:size_w}, ${4:size_h}, ${5:flags})$0",
		"description": "**Button > InvisibleButton**\nFlexible button behavior without the visuals, frequently useful to build\ncustom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.).\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state."
	},
	"ImGui_IsAnyItemActive lua": {
		"prefix": "ImGui.IsAnyItemActive",
		"scope": "lua",
		"body": "ImGui.IsAnyItemActive(ctx)$0",
		"description": "**Item & Status > Item/Widgets Utilities and Query Functions > IsAnyItemActive**\n**Item & Status > Item/Widgets Utilities and Query Functions**\nMost of the functions are referring to the previous Item that has been submitted.\nSee Demo Window under 'Widgets->Querying Item Status' for an interactive\nvisualization of most of those functions."
	},
	"ImGui_IsAnyItemFocused lua": {
		"prefix": "ImGui.IsAnyItemFocused",
		"scope": "lua",
		"body": "ImGui.IsAnyItemFocused(ctx)$0",
		"description": "**Item & Status > Item/Widgets Utilities and Query Functions > IsAnyItemFocused**\n**Item & Status > Item/Widgets Utilities and Query Functions**\nMost of the functions are referring to the previous Item that has been submitted.\nSee Demo Window under 'Widgets->Querying Item Status' for an interactive\nvisualization of most of those functions."
	},
	"ImGui_IsAnyItemHovered lua": {
		"prefix": "ImGui.IsAnyItemHovered",
		"scope": "lua",
		"body": "ImGui.IsAnyItemHovered(ctx)$0",
		"description": "**Item & Status > Item/Widgets Utilities and Query Functions > IsAnyItemHovered**\n**Item & Status > Item/Widgets Utilities and Query Functions**\nMost of the functions are referring to the previous Item that has been submitted.\nSee Demo Window under 'Widgets->Querying Item Status' for an interactive\nvisualization of most of those functions."
	},
	"ImGui_IsAnyMouseDown lua": {
		"prefix": "ImGui.IsAnyMouseDown",
		"scope": "lua",
		"body": "ImGui.IsAnyMouseDown(ctx)$0",
		"description": "**Keyboard & Mouse > Mouse > IsAnyMouseDown**\nIs any mouse button held?\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_IsItemActivated lua": {
		"prefix": "ImGui.IsItemActivated",
		"scope": "lua",
		"body": "ImGui.IsItemActivated(ctx)$0",
		"description": "**Item & Status > Item/Widgets Utilities and Query Functions > IsItemActivated**\nWas the last item just made active (item was previously inactive).\n**Item & Status > Item/Widgets Utilities and Query Functions**\nMost of the functions are referring to the previous Item that has been submitted.\nSee Demo Window under 'Widgets->Querying Item Status' for an interactive\nvisualization of most of those functions."
	},
	"ImGui_IsItemActive lua": {
		"prefix": "ImGui.IsItemActive",
		"scope": "lua",
		"body": "ImGui.IsItemActive(ctx)$0",
		"description": "**Item & Status > Item/Widgets Utilities and Query Functions > IsItemActive**\nIs the last item active? (e.g. button being held, text field being edited.\nThis will continuously return true while holding mouse button on an item.\nItems that don't interact will always return false.\n**Item & Status > Item/Widgets Utilities and Query Functions**\nMost of the functions are referring to the previous Item that has been submitted.\nSee Demo Window under 'Widgets->Querying Item Status' for an interactive\nvisualization of most of those functions."
	},
	"ImGui_IsItemClicked lua": {
		"prefix": "ImGui.IsItemClicked",
		"scope": "lua",
		"body": "ImGui.IsItemClicked(ctx, ${2:mouse_button})$0",
		"description": "**Item & Status > Item/Widgets Utilities and Query Functions > IsItemClicked**\nIs the last item clicked? (e.g. button/node just clicked on)\n== IsMouseClicked(mouse_button) && IsItemHovered().\nThis is NOT equivalent to the behavior of e.g. Button.\nMost widgets have specific reactions based on mouse-up/down state, mouse position etc.\n**Item & Status > Item/Widgets Utilities and Query Functions**\nMost of the functions are referring to the previous Item that has been submitted.\nSee Demo Window under 'Widgets->Querying Item Status' for an interactive\nvisualization of most of those functions."
	},
	"ImGui_IsItemDeactivated lua": {
		"prefix": "ImGui.IsItemDeactivated",
		"scope": "lua",
		"body": "ImGui.IsItemDeactivated(ctx)$0",
		"description": "**Item & Status > Item/Widgets Utilities and Query Functions > IsItemDeactivated**\nWas the last item just made inactive (item was previously active).\nUseful for Undo/Redo patterns with widgets that require continuous editing.\n**Item & Status > Item/Widgets Utilities and Query Functions**\nMost of the functions are referring to the previous Item that has been submitted.\nSee Demo Window under 'Widgets->Querying Item Status' for an interactive\nvisualization of most of those functions."
	},
	"ImGui_IsItemDeactivatedAfterEdit lua": {
		"prefix": "ImGui.IsItemDeactivatedAfterEdit",
		"scope": "lua",
		"body": "ImGui.IsItemDeactivatedAfterEdit(ctx)$0",
		"description": "**Item & Status > Item/Widgets Utilities and Query Functions > IsItemDeactivatedAfterEdit**\nWas the last item just made inactive and made a value change when it was\nactive? (e.g. Slider/Drag moved).\nUseful for Undo/Redo patterns with widgets that require continuous editing. Note\nthat you may get false positives (some widgets such as Combo/ListBox/Selectable\nwill return true even when clicking an already selected item).\n**Item & Status > Item/Widgets Utilities and Query Functions**\nMost of the functions are referring to the previous Item that has been submitted.\nSee Demo Window under 'Widgets->Querying Item Status' for an interactive\nvisualization of most of those functions."
	},
	"ImGui_IsItemEdited lua": {
		"prefix": "ImGui.IsItemEdited",
		"scope": "lua",
		"body": "ImGui.IsItemEdited(ctx)$0",
		"description": "**Item & Status > Item/Widgets Utilities and Query Functions > IsItemEdited**\nDid the last item modify its underlying value this frame? or was pressed?\nThis is generally the same as the 'bool' return value of many widgets.\n**Item & Status > Item/Widgets Utilities and Query Functions**\nMost of the functions are referring to the previous Item that has been submitted.\nSee Demo Window under 'Widgets->Querying Item Status' for an interactive\nvisualization of most of those functions."
	},
	"ImGui_IsItemFocused lua": {
		"prefix": "ImGui.IsItemFocused",
		"scope": "lua",
		"body": "ImGui.IsItemFocused(ctx)$0",
		"description": "**Item & Status > Item/Widgets Utilities and Query Functions > IsItemFocused**\nIs the last item focused for keyboard/gamepad navigation?\n**Item & Status > Item/Widgets Utilities and Query Functions**\nMost of the functions are referring to the previous Item that has been submitted.\nSee Demo Window under 'Widgets->Querying Item Status' for an interactive\nvisualization of most of those functions."
	},
	"ImGui_IsItemHovered lua": {
		"prefix": "ImGui.IsItemHovered",
		"scope": "lua",
		"body": "ImGui.IsItemHovered(ctx, ${2:flags})$0",
		"description": "**Item & Status > Item/Widgets Utilities and Query Functions > IsItemHovered**\nIs the last item hovered? (and usable, aka not blocked by a popup, etc.).\nSee HoveredFlags_* for more options.\n**Item & Status > Item/Widgets Utilities and Query Functions**\nMost of the functions are referring to the previous Item that has been submitted.\nSee Demo Window under 'Widgets->Querying Item Status' for an interactive\nvisualization of most of those functions."
	},
	"ImGui_IsItemToggledOpen lua": {
		"prefix": "ImGui.IsItemToggledOpen",
		"scope": "lua",
		"body": "ImGui.IsItemToggledOpen(ctx)$0",
		"description": "**Tree Node > IsItemToggledOpen**\nWas the last item open state toggled? Set by TreeNode."
	},
	"ImGui_IsItemVisible lua": {
		"prefix": "ImGui.IsItemVisible",
		"scope": "lua",
		"body": "ImGui.IsItemVisible(ctx)$0",
		"description": "**Item & Status > Item/Widgets Utilities and Query Functions > IsItemVisible**\nIs the last item visible? (items may be out of sight because of clipping/scrolling)\n**Item & Status > Item/Widgets Utilities and Query Functions**\nMost of the functions are referring to the previous Item that has been submitted.\nSee Demo Window under 'Widgets->Querying Item Status' for an interactive\nvisualization of most of those functions."
	},
	"ImGui_IsKeyChordPressed lua": {
		"prefix": "ImGui.IsKeyChordPressed",
		"scope": "lua",
		"body": "ImGui.IsKeyChordPressed(ctx, ${2:key_chord})$0",
		"description": "**Keyboard & Mouse > Shortcuts > IsKeyChordPressed**\nWas key chord (mods + key) pressed? You can pass e.g. `Mod_Ctrl | Key_S`\nas a key chord. This doesn't do any routing or focus check, consider using the\nShortcut function instead.\n**Keyboard & Mouse > Shortcuts**\nKey chords can combine a Key_* and a Mod_* value. For example: `Mod_Ctrl | Key_C`.\nOnly Mod_* values can be combined a Key_* value. Another Key_* value cannot be combined.\nSeveral callers may register interest in a shortcut, and only one owner gets it.\nParent -> call Shortcut(Ctrl+S) // When Parent is focused, Parent gets the shortcut.\nChild1 -> call Shortcut(Ctrl+S) // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)\nChild2 -> no call               // When Child2 is focused, Parent gets the shortcut.\nThe whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.\nThis is an important property as it facilitate working with foreign code or larger codebase.\nTo understand the difference:\n- IsKeyChordPressed compares modifiers and calls IsKeyPressed -> function has no side-effect.\n- Shortcut submits a route, routes are resolved, if it currently can be routed it\ncalls IsKeyChordPressed -> function has (desirable) side-effects as it can\nprevents another call from getting the route.\nRegistered routes may be visualized via Metrics/Debugger > Inputs (ShowMetricsWindow)."
	},
	"ImGui_IsKeyDown lua": {
		"prefix": "ImGui.IsKeyDown",
		"scope": "lua",
		"body": "ImGui.IsKeyDown(ctx, ${2:key})$0",
		"description": "**Keyboard & Mouse > Keyboard > IsKeyDown**\nIs key being held."
	},
	"ImGui_IsKeyPressed lua": {
		"prefix": "ImGui.IsKeyPressed",
		"scope": "lua",
		"body": "ImGui.IsKeyPressed(ctx, ${2:key}, ${3:repeat})$0",
		"description": "**Keyboard & Mouse > Keyboard > IsKeyPressed**\nWas key pressed (went from !Down to Down)?\nIf repeat=true, uses ConfigVar_KeyRepeatDelay / ConfigVar_KeyRepeatRate."
	},
	"ImGui_IsKeyReleased lua": {
		"prefix": "ImGui.IsKeyReleased",
		"scope": "lua",
		"body": "ImGui.IsKeyReleased(ctx, ${2:key})$0",
		"description": "**Keyboard & Mouse > Keyboard > IsKeyReleased**\nWas key released (went from Down to !Down)?"
	},
	"ImGui_IsMouseClicked lua": {
		"prefix": "ImGui.IsMouseClicked",
		"scope": "lua",
		"body": "ImGui.IsMouseClicked(ctx, ${2:button}, ${3:repeat})$0",
		"description": "**Keyboard & Mouse > Mouse > IsMouseClicked**\nDid mouse button clicked? (went from !Down to Down).\nSame as GetMouseClickedCount() == 1.\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_IsMouseDoubleClicked lua": {
		"prefix": "ImGui.IsMouseDoubleClicked",
		"scope": "lua",
		"body": "ImGui.IsMouseDoubleClicked(ctx, ${2:button})$0",
		"description": "**Keyboard & Mouse > Mouse > IsMouseDoubleClicked**\nDid mouse button double-clicked? Same as GetMouseClickedCount() == 2.\n(Note that a double-click will also report IsMouseClicked() == true)\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_IsMouseDown lua": {
		"prefix": "ImGui.IsMouseDown",
		"scope": "lua",
		"body": "ImGui.IsMouseDown(ctx, ${2:button})$0",
		"description": "**Keyboard & Mouse > Mouse > IsMouseDown**\nIs mouse button held?\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_IsMouseDragging lua": {
		"prefix": "ImGui.IsMouseDragging",
		"scope": "lua",
		"body": "ImGui.IsMouseDragging(ctx, ${2:button}, ${3:lock_threshold})$0",
		"description": "**Keyboard & Mouse > Mouse > IsMouseDragging**\nIs mouse dragging? (uses ConfigVar_MouseDragThreshold if lock_threshold < 0.0)\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_IsMouseHoveringRect lua": {
		"prefix": "ImGui.IsMouseHoveringRect",
		"scope": "lua",
		"body": "ImGui.IsMouseHoveringRect(ctx, ${2:r_min_x}, ${3:r_min_y}, ${4:r_max_x}, ${5:r_max_y}, ${6:clip})$0",
		"description": "**Keyboard & Mouse > Mouse > IsMouseHoveringRect**\nIs mouse hovering given bounding rect (in screen space).\nClipped by current clipping settings, but disregarding of other consideration\nof focus/window ordering/popup-block.\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_IsMousePosValid lua": {
		"prefix": "ImGui.IsMousePosValid",
		"scope": "lua",
		"body": "ImGui.IsMousePosValid(ctx, ${2:mouse_pos_x}, ${3:mouse_pos_y})$0",
		"description": "**Keyboard & Mouse > Mouse > IsMousePosValid**\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_IsMouseReleased lua": {
		"prefix": "ImGui.IsMouseReleased",
		"scope": "lua",
		"body": "ImGui.IsMouseReleased(ctx, ${2:button})$0",
		"description": "**Keyboard & Mouse > Mouse > IsMouseReleased**\nDid mouse button released? (went from Down to !Down)\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_IsPopupOpen lua": {
		"prefix": "ImGui.IsPopupOpen",
		"scope": "lua",
		"body": "ImGui.IsPopupOpen(ctx, ${2:str_id}, ${3:flags})$0",
		"description": "**Popup & Modal > IsPopupOpen**\nReturn true if the popup is open at the current BeginPopup level of the\npopup stack.\n- With PopupFlags_AnyPopupId: return true if any popup is open at the current\nBeginPopup() level of the popup stack.\n- With PopupFlags_AnyPopupId + PopupFlags_AnyPopupLevel: return true if any\npopup is open.\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack."
	},
	"ImGui_IsRectVisible lua": {
		"prefix": "ImGui.IsRectVisible",
		"scope": "lua",
		"body": "ImGui.IsRectVisible(ctx, ${2:size_w}, ${3:size_h})$0",
		"description": "**Layout > Clipping > IsRectVisible**\nTest if rectangle (of given size, starting from cursor position) is\nvisible / not clipped.\n**Layout > Clipping**\nMouse hovering is affected by PushClipRect() calls, unlike direct calls to\nDrawList_PushClipRect() which are render only. Coordinates are in screen space."
	},
	"ImGui_IsRectVisibleEx lua": {
		"prefix": "ImGui.IsRectVisibleEx",
		"scope": "lua",
		"body": "ImGui.IsRectVisibleEx(ctx, ${2:rect_min_x}, ${3:rect_min_y}, ${4:rect_max_x}, ${5:rect_max_y})$0",
		"description": "**Layout > Clipping > IsRectVisibleEx**\nTest if rectangle (in screen space) is visible / not clipped. to perform\ncoarse clipping on user's side.\n**Layout > Clipping**\nMouse hovering is affected by PushClipRect() calls, unlike direct calls to\nDrawList_PushClipRect() which are render only. Coordinates are in screen space."
	},
	"ImGui_IsWindowAppearing lua": {
		"prefix": "ImGui.IsWindowAppearing",
		"scope": "lua",
		"body": "ImGui.IsWindowAppearing(ctx)$0",
		"description": "**Window > Properties > IsWindowAppearing**\nUse after Begin/BeginPopup/BeginPopupModal to tell if a window just opened.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_IsWindowDocked lua": {
		"prefix": "ImGui.IsWindowDocked",
		"scope": "lua",
		"body": "ImGui.IsWindowDocked(ctx)$0",
		"description": "**Window > Docking > IsWindowDocked**\nIs current window docked into another window or a REAPER docker?\n**Window > Docking**\nDock windows into other windows or in REAPER dockers.\nDock IDs are:\n- 0 = undocked\n- -1 to -16 = REAPER docker index\n- > 0 = Dear ImGui dockspace ID (when the user docked the window into another one).\nDrag from window title bar or their tab to dock/undock. Hold SHIFT to disable docking.\nDrag from window menu button (upper-left button) to undock an entire node (all windows).\nDockingWithShift == true, you instead need to hold SHIFT to _enable_ docking.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_IsWindowFocused lua": {
		"prefix": "ImGui.IsWindowFocused",
		"scope": "lua",
		"body": "ImGui.IsWindowFocused(ctx, ${2:flags})$0",
		"description": "**Window > Properties > IsWindowFocused**\nIs current window focused? or its root/child, depending on flags.\nSee flags for options.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_IsWindowHovered lua": {
		"prefix": "ImGui.IsWindowHovered",
		"scope": "lua",
		"body": "ImGui.IsWindowHovered(ctx, ${2:flags})$0",
		"description": "**Window > Properties > IsWindowHovered**\nIs current window hovered and hoverable (e.g. not blocked by a popup/modal)?\nSee HoveredFlags_* for options.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_LabelText lua": {
		"prefix": "ImGui.LabelText",
		"scope": "lua",
		"body": "ImGui.LabelText(ctx, ${2:label}, ${3:text})$0",
		"description": "**Text > LabelText**\nDisplay text+label aligned the same way as value+label widgets"
	},
	"ImGui_ListBox lua": {
		"prefix": "ImGui.ListBox",
		"scope": "lua",
		"body": "ImGui.ListBox(ctx, ${2:label}, ${3:current_item}, ${4:items}, ${5:height_in_items})$0",
		"description": "**Combo & List > List Boxes > ListBox**\nThis is an helper over BeginListBox/EndListBox for convenience purpose.\nEach item must be null-terminated (requires REAPER v6.44 or newer for EEL and Lua).\n**Combo & List > List Boxes**\nThis is essentially a thin wrapper to using BeginChild/EndChild with the\nChildFlags_FrameStyle flag for stylistic changes + displaying a label."
	},
	"ImGui_ListClipper_Begin lua": {
		"prefix": "ImGui.ListClipper_Begin",
		"scope": "lua",
		"body": "ImGui.ListClipper_Begin(${1:clipper}, ${2:items_count}, ${3:items_height})$0",
		"description": "**List Clipper > ListClipper_Begin**\n- items_count: Use INT_MAX if you don't know how many items you have\n(in which case the cursor won't be advanced in the final step)\n- items_height: Use -1.0 to be calculated automatically on first step.\nOtherwise pass in the distance between your items, typically\nGetTextLineHeightWithSpacing or GetFrameHeightWithSpacing.\n**List Clipper**\nHelper to manually clip large list of items.\nIf you have lots evenly spaced items and you have random access to the list,\nyou can perform coarse clipping based on visibility to only submit items that\nare in view.\nThe clipper calculates the range of visible items and advance the cursor to\ncompensate for the non-visible items we have skipped.\n(Dear ImGui already clip items based on their bounds but: it needs to first\nlayout the item to do so, and generally fetching/submitting your own data incurs\nadditional cost. Coarse clipping using a list clipper allows you to easily\nscale using lists with tens of thousands of items without a problem.)\nUsage:\nif not ImGui.ValidatePtr(clipper, 'ImGui_ListClipper*') then\nclipper = ImGui.CreateListClipper(ctx)\nend\nImGui.ListClipper_Begin(clipper, 1000) -- We have 1000 elements, evenly spaced\nwhile ImGui.ListClipper_Step(clipper) do\nlocal display_start, display_end = ImGui.ListClipper_GetDisplayRange(clipper)\nfor row = display_start, display_end - 1 do\nImGui.Text(ctx, ('line number %d'):format(row))\nend\nend\nGenerally what happens is:\n- Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1)\nregardless of it being visible or not.\n- User code submit that one element.\n- Clipper can measure the height of the first element\n- Clipper calculate the actual range of elements to display based on the current\nclipping rectangle, position the cursor before the first visible element.\n- User code submit visible elements.\n- The clipper also handles various subtleties related to keyboard/gamepad\nnavigation, wrapping etc."
	},
	"ImGui_ListClipper_End lua": {
		"prefix": "ImGui.ListClipper_End",
		"scope": "lua",
		"body": "ImGui.ListClipper_End(${1:clipper})$0",
		"description": "**List Clipper > ListClipper_End**\nAutomatically called on the last call of ListClipper_Step that returns false.\n**List Clipper**\nHelper to manually clip large list of items.\nIf you have lots evenly spaced items and you have random access to the list,\nyou can perform coarse clipping based on visibility to only submit items that\nare in view.\nThe clipper calculates the range of visible items and advance the cursor to\ncompensate for the non-visible items we have skipped.\n(Dear ImGui already clip items based on their bounds but: it needs to first\nlayout the item to do so, and generally fetching/submitting your own data incurs\nadditional cost. Coarse clipping using a list clipper allows you to easily\nscale using lists with tens of thousands of items without a problem.)\nUsage:\nif not ImGui.ValidatePtr(clipper, 'ImGui_ListClipper*') then\nclipper = ImGui.CreateListClipper(ctx)\nend\nImGui.ListClipper_Begin(clipper, 1000) -- We have 1000 elements, evenly spaced\nwhile ImGui.ListClipper_Step(clipper) do\nlocal display_start, display_end = ImGui.ListClipper_GetDisplayRange(clipper)\nfor row = display_start, display_end - 1 do\nImGui.Text(ctx, ('line number %d'):format(row))\nend\nend\nGenerally what happens is:\n- Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1)\nregardless of it being visible or not.\n- User code submit that one element.\n- Clipper can measure the height of the first element\n- Clipper calculate the actual range of elements to display based on the current\nclipping rectangle, position the cursor before the first visible element.\n- User code submit visible elements.\n- The clipper also handles various subtleties related to keyboard/gamepad\nnavigation, wrapping etc."
	},
	"ImGui_ListClipper_GetDisplayRange lua": {
		"prefix": "ImGui.ListClipper_GetDisplayRange",
		"scope": "lua",
		"body": "ImGui.ListClipper_GetDisplayRange(${1:clipper})$0",
		"description": "**List Clipper > ListClipper_GetDisplayRange**\n**List Clipper**\nHelper to manually clip large list of items.\nIf you have lots evenly spaced items and you have random access to the list,\nyou can perform coarse clipping based on visibility to only submit items that\nare in view.\nThe clipper calculates the range of visible items and advance the cursor to\ncompensate for the non-visible items we have skipped.\n(Dear ImGui already clip items based on their bounds but: it needs to first\nlayout the item to do so, and generally fetching/submitting your own data incurs\nadditional cost. Coarse clipping using a list clipper allows you to easily\nscale using lists with tens of thousands of items without a problem.)\nUsage:\nif not ImGui.ValidatePtr(clipper, 'ImGui_ListClipper*') then\nclipper = ImGui.CreateListClipper(ctx)\nend\nImGui.ListClipper_Begin(clipper, 1000) -- We have 1000 elements, evenly spaced\nwhile ImGui.ListClipper_Step(clipper) do\nlocal display_start, display_end = ImGui.ListClipper_GetDisplayRange(clipper)\nfor row = display_start, display_end - 1 do\nImGui.Text(ctx, ('line number %d'):format(row))\nend\nend\nGenerally what happens is:\n- Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1)\nregardless of it being visible or not.\n- User code submit that one element.\n- Clipper can measure the height of the first element\n- Clipper calculate the actual range of elements to display based on the current\nclipping rectangle, position the cursor before the first visible element.\n- User code submit visible elements.\n- The clipper also handles various subtleties related to keyboard/gamepad\nnavigation, wrapping etc."
	},
	"ImGui_ListClipper_IncludeItemByIndex lua": {
		"prefix": "ImGui.ListClipper_IncludeItemByIndex",
		"scope": "lua",
		"body": "ImGui.ListClipper_IncludeItemByIndex(${1:clipper}, ${2:item_index})$0",
		"description": "**List Clipper > ListClipper_IncludeItemByIndex**\nCall ListClipper_IncludeItemByIndex or ListClipper_IncludeItemsByIndex before\nthe first call to ListClipper_Step if you need a range of items to be displayed\nregardless of visibility.\n(Due to alignment / padding of certain items it is possible that an extra item\nmay be included on either end of the display range).\n**List Clipper**\nHelper to manually clip large list of items.\nIf you have lots evenly spaced items and you have random access to the list,\nyou can perform coarse clipping based on visibility to only submit items that\nare in view.\nThe clipper calculates the range of visible items and advance the cursor to\ncompensate for the non-visible items we have skipped.\n(Dear ImGui already clip items based on their bounds but: it needs to first\nlayout the item to do so, and generally fetching/submitting your own data incurs\nadditional cost. Coarse clipping using a list clipper allows you to easily\nscale using lists with tens of thousands of items without a problem.)\nUsage:\nif not ImGui.ValidatePtr(clipper, 'ImGui_ListClipper*') then\nclipper = ImGui.CreateListClipper(ctx)\nend\nImGui.ListClipper_Begin(clipper, 1000) -- We have 1000 elements, evenly spaced\nwhile ImGui.ListClipper_Step(clipper) do\nlocal display_start, display_end = ImGui.ListClipper_GetDisplayRange(clipper)\nfor row = display_start, display_end - 1 do\nImGui.Text(ctx, ('line number %d'):format(row))\nend\nend\nGenerally what happens is:\n- Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1)\nregardless of it being visible or not.\n- User code submit that one element.\n- Clipper can measure the height of the first element\n- Clipper calculate the actual range of elements to display based on the current\nclipping rectangle, position the cursor before the first visible element.\n- User code submit visible elements.\n- The clipper also handles various subtleties related to keyboard/gamepad\nnavigation, wrapping etc."
	},
	"ImGui_ListClipper_IncludeItemsByIndex lua": {
		"prefix": "ImGui.ListClipper_IncludeItemsByIndex",
		"scope": "lua",
		"body": "ImGui.ListClipper_IncludeItemsByIndex(${1:clipper}, ${2:item_begin}, ${3:item_end})$0",
		"description": "**List Clipper > ListClipper_IncludeItemsByIndex**\nSee ListClipper_IncludeItemByIndex.\nitem_end is exclusive e.g. use (42, 42+1) to make item 42 never clipped.\n**List Clipper**\nHelper to manually clip large list of items.\nIf you have lots evenly spaced items and you have random access to the list,\nyou can perform coarse clipping based on visibility to only submit items that\nare in view.\nThe clipper calculates the range of visible items and advance the cursor to\ncompensate for the non-visible items we have skipped.\n(Dear ImGui already clip items based on their bounds but: it needs to first\nlayout the item to do so, and generally fetching/submitting your own data incurs\nadditional cost. Coarse clipping using a list clipper allows you to easily\nscale using lists with tens of thousands of items without a problem.)\nUsage:\nif not ImGui.ValidatePtr(clipper, 'ImGui_ListClipper*') then\nclipper = ImGui.CreateListClipper(ctx)\nend\nImGui.ListClipper_Begin(clipper, 1000) -- We have 1000 elements, evenly spaced\nwhile ImGui.ListClipper_Step(clipper) do\nlocal display_start, display_end = ImGui.ListClipper_GetDisplayRange(clipper)\nfor row = display_start, display_end - 1 do\nImGui.Text(ctx, ('line number %d'):format(row))\nend\nend\nGenerally what happens is:\n- Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1)\nregardless of it being visible or not.\n- User code submit that one element.\n- Clipper can measure the height of the first element\n- Clipper calculate the actual range of elements to display based on the current\nclipping rectangle, position the cursor before the first visible element.\n- User code submit visible elements.\n- The clipper also handles various subtleties related to keyboard/gamepad\nnavigation, wrapping etc."
	},
	"ImGui_ListClipper_Step lua": {
		"prefix": "ImGui.ListClipper_Step",
		"scope": "lua",
		"body": "ImGui.ListClipper_Step(${1:clipper})$0",
		"description": "**List Clipper > ListClipper_Step**\nCall until it returns false. The display_start/display_end fields from\nListClipper_GetDisplayRange will be set and you can process/draw those items.\n**List Clipper**\nHelper to manually clip large list of items.\nIf you have lots evenly spaced items and you have random access to the list,\nyou can perform coarse clipping based on visibility to only submit items that\nare in view.\nThe clipper calculates the range of visible items and advance the cursor to\ncompensate for the non-visible items we have skipped.\n(Dear ImGui already clip items based on their bounds but: it needs to first\nlayout the item to do so, and generally fetching/submitting your own data incurs\nadditional cost. Coarse clipping using a list clipper allows you to easily\nscale using lists with tens of thousands of items without a problem.)\nUsage:\nif not ImGui.ValidatePtr(clipper, 'ImGui_ListClipper*') then\nclipper = ImGui.CreateListClipper(ctx)\nend\nImGui.ListClipper_Begin(clipper, 1000) -- We have 1000 elements, evenly spaced\nwhile ImGui.ListClipper_Step(clipper) do\nlocal display_start, display_end = ImGui.ListClipper_GetDisplayRange(clipper)\nfor row = display_start, display_end - 1 do\nImGui.Text(ctx, ('line number %d'):format(row))\nend\nend\nGenerally what happens is:\n- Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1)\nregardless of it being visible or not.\n- User code submit that one element.\n- Clipper can measure the height of the first element\n- Clipper calculate the actual range of elements to display based on the current\nclipping rectangle, position the cursor before the first visible element.\n- User code submit visible elements.\n- The clipper also handles various subtleties related to keyboard/gamepad\nnavigation, wrapping etc."
	},
	"ImGui_LogFinish lua": {
		"prefix": "ImGui.LogFinish",
		"scope": "lua",
		"body": "ImGui.LogFinish(ctx)$0",
		"description": "**Utility > Logging/Capture > LogFinish**\nStop logging (close file, etc.)\n**Utility > Logging/Capture**\nAll text output from the interface can be captured into tty/file/clipboard.\nBy default, tree nodes are automatically opened during logging."
	},
	"ImGui_LogText lua": {
		"prefix": "ImGui.LogText",
		"scope": "lua",
		"body": "ImGui.LogText(ctx, ${2:text})$0",
		"description": "**Utility > Logging/Capture > LogText**\nPass text data straight to log (without being displayed)\n**Utility > Logging/Capture**\nAll text output from the interface can be captured into tty/file/clipboard.\nBy default, tree nodes are automatically opened during logging."
	},
	"ImGui_LogToClipboard lua": {
		"prefix": "ImGui.LogToClipboard",
		"scope": "lua",
		"body": "ImGui.LogToClipboard(ctx, ${2:auto_open_depth})$0",
		"description": "**Utility > Logging/Capture > LogToClipboard**\nStart logging all text output from the interface to the OS clipboard.\nSee also SetClipboardText.\n**Utility > Logging/Capture**\nAll text output from the interface can be captured into tty/file/clipboard.\nBy default, tree nodes are automatically opened during logging."
	},
	"ImGui_LogToFile lua": {
		"prefix": "ImGui.LogToFile",
		"scope": "lua",
		"body": "ImGui.LogToFile(ctx, ${2:auto_open_depth}, ${3:filename})$0",
		"description": "**Utility > Logging/Capture > LogToFile**\nStart logging all text output from the interface to a file.\nThe data is saved to $resource_path/imgui_log.txt if filename is nil.\n**Utility > Logging/Capture**\nAll text output from the interface can be captured into tty/file/clipboard.\nBy default, tree nodes are automatically opened during logging."
	},
	"ImGui_LogToTTY lua": {
		"prefix": "ImGui.LogToTTY",
		"scope": "lua",
		"body": "ImGui.LogToTTY(ctx, ${2:auto_open_depth})$0",
		"description": "**Utility > Logging/Capture > LogToTTY**\nStart logging all text output from the interface to the TTY (stdout).\n**Utility > Logging/Capture**\nAll text output from the interface can be captured into tty/file/clipboard.\nBy default, tree nodes are automatically opened during logging."
	},
	"ImGui_MenuItem lua": {
		"prefix": "ImGui.MenuItem",
		"scope": "lua",
		"body": "ImGui.MenuItem(ctx, ${2:label}, ${3:shortcut}, ${4:p_selected}, ${5:enabled})$0",
		"description": "**Menu > MenuItem**\nReturn true when activated. Shortcuts are displayed for convenience but not\nprocessed by ImGui at the moment. Toggle state is written to 'selected' when\nprovided."
	},
	"ImGui_NewLine lua": {
		"prefix": "ImGui.NewLine",
		"scope": "lua",
		"body": "ImGui.NewLine(ctx)$0",
		"description": "**Layout > NewLine**\nUndo a SameLine() or force a new line when in a horizontal-layout context."
	},
	"ImGui_NumericLimits_Double lua": {
		"prefix": "ImGui.NumericLimits_Double",
		"scope": "lua",
		"body": "ImGui.NumericLimits_Double()$0",
		"description": "**Utility > NumericLimits_Double**\nReturns DBL_MIN and DBL_MAX for this system."
	},
	"ImGui_NumericLimits_Float lua": {
		"prefix": "ImGui.NumericLimits_Float",
		"scope": "lua",
		"body": "ImGui.NumericLimits_Float()$0",
		"description": "**Utility > NumericLimits_Float**\nReturns FLT_MIN and FLT_MAX for this system."
	},
	"ImGui_NumericLimits_Int lua": {
		"prefix": "ImGui.NumericLimits_Int",
		"scope": "lua",
		"body": "ImGui.NumericLimits_Int()$0",
		"description": "**Utility > NumericLimits_Int**\nReturns INT_MIN and INT_MAX for this system."
	},
	"ImGui_OpenPopup lua": {
		"prefix": "ImGui.OpenPopup",
		"scope": "lua",
		"body": "ImGui.OpenPopup(ctx, ${2:str_id}, ${3:popup_flags})$0",
		"description": "**Popup & Modal > OpenPopup**\nSet popup state to open (don't call every frame!).\nImGuiPopupFlags are available for opening options.\nIf not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\nUse PopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's\nalready one at the same level.\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack."
	},
	"ImGui_OpenPopupOnItemClick lua": {
		"prefix": "ImGui.OpenPopupOnItemClick",
		"scope": "lua",
		"body": "ImGui.OpenPopupOnItemClick(ctx, ${2:str_id}, ${3:popup_flags})$0",
		"description": "**Popup & Modal > OpenPopupOnItemClick**\nHelper to open popup when clicked on last item. return true when just opened.\n(Note: actually triggers on the mouse _released_ event to be consistent with\npopup behaviors.)\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack."
	},
	"ImGui_PlotHistogram lua": {
		"prefix": "ImGui.PlotHistogram",
		"scope": "lua",
		"body": "ImGui.PlotHistogram(ctx, ${2:label}, ${3:values}, ${4:values_offset}, ${5:overlay_text}, ${6:scale_min}, ${7:scale_max}, ${8:graph_size_w}, ${9:graph_size_h})$0",
		"description": "**Plot > PlotHistogram**\n**Plot**\nSimple data plotting using reaper_array as data source."
	},
	"ImGui_PlotLines lua": {
		"prefix": "ImGui.PlotLines",
		"scope": "lua",
		"body": "ImGui.PlotLines(ctx, ${2:label}, ${3:values}, ${4:values_offset}, ${5:overlay_text}, ${6:scale_min}, ${7:scale_max}, ${8:graph_size_w}, ${9:graph_size_h})$0",
		"description": "**Plot > PlotLines**\n**Plot**\nSimple data plotting using reaper_array as data source."
	},
	"ImGui_PointConvertNative lua": {
		"prefix": "ImGui.PointConvertNative",
		"scope": "lua",
		"body": "ImGui.PointConvertNative(ctx, ${2:x}, ${3:y}, ${4:to_native})$0",
		"description": "**Utility > PointConvertNative**\nConvert a position from the current platform's native coordinate position\nsystem to ReaImGui global coordinates (or vice versa).\nThis effectively flips the Y coordinate on macOS and applies HiDPI scaling on\nWindows and Linux."
	},
	"ImGui_PopButtonRepeat lua": {
		"prefix": "ImGui.PopButtonRepeat",
		"scope": "lua",
		"body": "ImGui.PopButtonRepeat(ctx)$0",
		"description": "**Button > PopButtonRepeat**\nSee PushButtonRepeat\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state."
	},
	"ImGui_PopClipRect lua": {
		"prefix": "ImGui.PopClipRect",
		"scope": "lua",
		"body": "ImGui.PopClipRect(ctx)$0",
		"description": "**Layout > Clipping > PopClipRect**\nSee PushClipRect\n**Layout > Clipping**\nMouse hovering is affected by PushClipRect() calls, unlike direct calls to\nDrawList_PushClipRect() which are render only. Coordinates are in screen space."
	},
	"ImGui_PopFont lua": {
		"prefix": "ImGui.PopFont",
		"scope": "lua",
		"body": "ImGui.PopFont(ctx)$0",
		"description": "**Font > PopFont**\nSee PushFont.\n**Font**\nSupports loading fonts from the system by family name or from a file.\nGlyphs may contain colors in COLR/CPAL format.\nThis API currently has multiple limitations (v1.0 blockers):\n- ReaImGui rasterizes glyphs only from the Basic Latin and Latin Supplement\nUnicode blocks (U+0020 to U+00FF). UTF-8 is fully supported internally,\nhowever characters outside those blocks are displayed as '?'.\nSee [issue #5](https://github.com/cfillion/reaimgui/issues/5).\n- Dear ImGui does not support using new fonts in the middle of a frame.\nBecause of this, fonts must first be registered using Attach before any\nother context functions are used in the same defer cycle.\n(Attaching a font is a heavy operation and should ideally be done outside\nof the defer loop.)"
	},
	"ImGui_PopID lua": {
		"prefix": "ImGui.PopID",
		"scope": "lua",
		"body": "ImGui.PopID(ctx)$0",
		"description": "**Utility > ID Stack/Scope > PopID**\nPop from the ID stack.\n**Utility > ID Stack/Scope**\nRead the [FAQ](https://dearimgui.com/faq) for more details about how IDs are\nhandled in dear imgui.\n- Those questions are answered and impacted by understanding of the ID stack system:\n- 'Q: Why is my widget not reacting when I click on it?'\n- 'Q: How can I have widgets with an empty label?'\n- 'Q: How can I have multiple widgets with the same label?'\n- Short version: ID are hashes of the entire ID stack. If you are creating widgets\nin a loop you most likely want to push a unique identifier (e.g. object pointer,\nloop index) to uniquely differentiate them.\n- You can also use the 'Label##foobar' syntax within widget label to distinguish\nthem from each others.\n- We use the 'label'/'name' terminology to denote a string that will be\ndisplayed + used as an ID, whereas 'str_id' denote a string that is only used\nas an ID and not normally displayed."
	},
	"ImGui_PopItemWidth lua": {
		"prefix": "ImGui.PopItemWidth",
		"scope": "lua",
		"body": "ImGui.PopItemWidth(ctx)$0",
		"description": "**Item & Status > Dimensions > PopItemWidth**\nSee PushItemWidth"
	},
	"ImGui_PopStyleColor lua": {
		"prefix": "ImGui.PopStyleColor",
		"scope": "lua",
		"body": "ImGui.PopStyleColor(ctx, ${2:count})$0",
		"description": "**Style > Colors > PopStyleColor**"
	},
	"ImGui_PopStyleVar lua": {
		"prefix": "ImGui.PopStyleVar",
		"scope": "lua",
		"body": "ImGui.PopStyleVar(ctx, ${2:count})$0",
		"description": "**Style > Variables > PopStyleVar**\nReset a style variable."
	},
	"ImGui_PopTabStop lua": {
		"prefix": "ImGui.PopTabStop",
		"scope": "lua",
		"body": "ImGui.PopTabStop(ctx)$0",
		"description": "**Item & Status > Focus & Activation > PopTabStop**\nSee PushTabStop\n**Item & Status > Focus & Activation**\nPrefer using 'SetItemDefaultFocus()' over\n'if(IsWindowAppearing()) SetScrollHereY()' when applicable to signify\n'this is the default item'."
	},
	"ImGui_PopTextWrapPos lua": {
		"prefix": "ImGui.PopTextWrapPos",
		"scope": "lua",
		"body": "ImGui.PopTextWrapPos(ctx)$0",
		"description": "**Text > PopTextWrapPos**"
	},
	"ImGui_ProgressBar lua": {
		"prefix": "ImGui.ProgressBar",
		"scope": "lua",
		"body": "ImGui.ProgressBar(ctx, ${2:fraction}, ${3:size_arg_w}, ${4:size_arg_h}, ${5:overlay})$0",
		"description": "**Utility > ProgressBar**\nFraction < 0.0 displays an indeterminate progress bar animation since v0.9.1.\nThe value must be animated along with time, for example `-1.0 * ImGui.GetTime()`."
	},
	"ImGui_PushButtonRepeat lua": {
		"prefix": "ImGui.PushButtonRepeat",
		"scope": "lua",
		"body": "ImGui.PushButtonRepeat(ctx, ${2:repeat})$0",
		"description": "**Button > PushButtonRepeat**\nIn 'repeat' mode, Button*() functions return repeated true in a typematic\nmanner (using ConfigVar_KeyRepeatDelay/ConfigVar_KeyRepeatRate settings).\nNote that you can call IsItemActive after any Button to tell if the button is\nheld in the current frame.\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state."
	},
	"ImGui_PushClipRect lua": {
		"prefix": "ImGui.PushClipRect",
		"scope": "lua",
		"body": "ImGui.PushClipRect(ctx, ${2:clip_rect_min_x}, ${3:clip_rect_min_y}, ${4:clip_rect_max_x}, ${5:clip_rect_max_y}, ${6:intersect_with_current_clip_rect})$0",
		"description": "**Layout > Clipping > PushClipRect**\n**Layout > Clipping**\nMouse hovering is affected by PushClipRect() calls, unlike direct calls to\nDrawList_PushClipRect() which are render only. Coordinates are in screen space."
	},
	"ImGui_PushFont lua": {
		"prefix": "ImGui.PushFont",
		"scope": "lua",
		"body": "ImGui.PushFont(ctx, ${2:font})$0",
		"description": "**Font > PushFont**\nChange the current font. Use nil to push the default font.\nThe font object must have been registered using Attach. See PopFont.\n**Font**\nSupports loading fonts from the system by family name or from a file.\nGlyphs may contain colors in COLR/CPAL format.\nThis API currently has multiple limitations (v1.0 blockers):\n- ReaImGui rasterizes glyphs only from the Basic Latin and Latin Supplement\nUnicode blocks (U+0020 to U+00FF). UTF-8 is fully supported internally,\nhowever characters outside those blocks are displayed as '?'.\nSee [issue #5](https://github.com/cfillion/reaimgui/issues/5).\n- Dear ImGui does not support using new fonts in the middle of a frame.\nBecause of this, fonts must first be registered using Attach before any\nother context functions are used in the same defer cycle.\n(Attaching a font is a heavy operation and should ideally be done outside\nof the defer loop.)"
	},
	"ImGui_PushID lua": {
		"prefix": "ImGui.PushID",
		"scope": "lua",
		"body": "ImGui.PushID(ctx, ${2:str_id})$0",
		"description": "**Utility > ID Stack/Scope > PushID**\nPush string into the ID stack.\n**Utility > ID Stack/Scope**\nRead the [FAQ](https://dearimgui.com/faq) for more details about how IDs are\nhandled in dear imgui.\n- Those questions are answered and impacted by understanding of the ID stack system:\n- 'Q: Why is my widget not reacting when I click on it?'\n- 'Q: How can I have widgets with an empty label?'\n- 'Q: How can I have multiple widgets with the same label?'\n- Short version: ID are hashes of the entire ID stack. If you are creating widgets\nin a loop you most likely want to push a unique identifier (e.g. object pointer,\nloop index) to uniquely differentiate them.\n- You can also use the 'Label##foobar' syntax within widget label to distinguish\nthem from each others.\n- We use the 'label'/'name' terminology to denote a string that will be\ndisplayed + used as an ID, whereas 'str_id' denote a string that is only used\nas an ID and not normally displayed."
	},
	"ImGui_PushItemWidth lua": {
		"prefix": "ImGui.PushItemWidth",
		"scope": "lua",
		"body": "ImGui.PushItemWidth(ctx, ${2:item_width})$0",
		"description": "**Item & Status > Dimensions > PushItemWidth**\nPush width of items for common large 'item+label' widgets.\n- >0.0: width in pixels\n- <0.0 align xx pixels to the right of window\n(so -FLT_MIN always align width to the right side)\n- 0.0 = default to ~2/3 of windows width."
	},
	"ImGui_PushStyleColor lua": {
		"prefix": "ImGui.PushStyleColor",
		"scope": "lua",
		"body": "ImGui.PushStyleColor(ctx, ${2:idx}, ${3:col_rgba})$0",
		"description": "**Style > Colors > PushStyleColor**\nTemporarily modify a style color.\nCall PopStyleColor to undo after use (before the end of the frame).\nSee Col_* for available style colors."
	},
	"ImGui_PushStyleVar lua": {
		"prefix": "ImGui.PushStyleVar",
		"scope": "lua",
		"body": "ImGui.PushStyleVar(ctx, ${2:var_idx}, ${3:val1}, ${4:val2})$0",
		"description": "**Style > Variables > PushStyleVar**\nTemporarily modify a style variable.\nCall PopStyleVar to undo after use (before the end of the frame).\nSee StyleVar_* for possible values of 'var_idx'."
	},
	"ImGui_PushTabStop lua": {
		"prefix": "ImGui.PushTabStop",
		"scope": "lua",
		"body": "ImGui.PushTabStop(ctx, ${2:tab_stop})$0",
		"description": "**Item & Status > Focus & Activation > PushTabStop**\nAllow focusing using TAB/Shift-TAB, enabled by default but you can disable it\nfor certain widgets\n**Item & Status > Focus & Activation**\nPrefer using 'SetItemDefaultFocus()' over\n'if(IsWindowAppearing()) SetScrollHereY()' when applicable to signify\n'this is the default item'."
	},
	"ImGui_PushTextWrapPos lua": {
		"prefix": "ImGui.PushTextWrapPos",
		"scope": "lua",
		"body": "ImGui.PushTextWrapPos(ctx, ${2:wrap_local_pos_x})$0",
		"description": "**Text > PushTextWrapPos**\nPush word-wrapping position for Text*() commands.\n-  < 0.0: no wrapping\n-  = 0.0: wrap to end of window (or column)\n- > 0.0: wrap at 'wrap_pos_x' position in window local space."
	},
	"ImGui_RadioButton lua": {
		"prefix": "ImGui.RadioButton",
		"scope": "lua",
		"body": "ImGui.RadioButton(ctx, ${2:label}, ${3:active})$0",
		"description": "**Button > RadioButton**\nUse with e.g. if (RadioButton('one', my_value==1)) { my_value = 1; }\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state."
	},
	"ImGui_RadioButtonEx lua": {
		"prefix": "ImGui.RadioButtonEx",
		"scope": "lua",
		"body": "ImGui.RadioButtonEx(ctx, ${2:label}, ${3:v}, ${4:v_button})$0",
		"description": "**Button > RadioButtonEx**\nShortcut to handle RadioButton's example pattern when value is an integer\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state."
	},
	"ImGui_ResetMouseDragDelta lua": {
		"prefix": "ImGui.ResetMouseDragDelta",
		"scope": "lua",
		"body": "ImGui.ResetMouseDragDelta(ctx, ${2:button})$0",
		"description": "**Keyboard & Mouse > Mouse > ResetMouseDragDelta**\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_SameLine lua": {
		"prefix": "ImGui.SameLine",
		"scope": "lua",
		"body": "ImGui.SameLine(ctx)$0",
		"description": "**Layout > SameLine**\nCall between widgets or groups to layout them horizontally.\nX position given in window coordinates."
	},
	"ImGui_Selectable lua": {
		"prefix": "ImGui.Selectable",
		"scope": "lua",
		"body": "ImGui.Selectable(ctx, ${2:label}, ${3:p_selected}, ${4:flags}, ${5:size_w}, ${6:size_h})$0",
		"description": "**Combo & List > Selectables > Selectable**\n**Combo & List > Selectables**\nA selectable highlights when hovered, and can display another color when\nselected. Neighbors selectable extend their highlight bounds in order to leave\nno gap between them. This is so a series of selected Selectable appear\ncontiguous."
	},
	"ImGui_Separator lua": {
		"prefix": "ImGui.Separator",
		"scope": "lua",
		"body": "ImGui.Separator(ctx)$0",
		"description": "**Layout > Separator**\nSeparator, generally horizontal. inside a menu bar or in horizontal layout\nmode, this becomes a vertical separator."
	},
	"ImGui_SeparatorText lua": {
		"prefix": "ImGui.SeparatorText",
		"scope": "lua",
		"body": "ImGui.SeparatorText(ctx, ${2:label})$0",
		"description": "**Layout > SeparatorText**\nText formatted with an horizontal line"
	},
	"ImGui_SetClipboardText lua": {
		"prefix": "ImGui.SetClipboardText",
		"scope": "lua",
		"body": "ImGui.SetClipboardText(ctx, ${2:text})$0",
		"description": "**Utility > Clipboard > SetClipboardText**\nSee also the LogToClipboard function to capture GUI into clipboard,\nor easily output text data to the clipboard."
	},
	"ImGui_SetColorEditOptions lua": {
		"prefix": "ImGui.SetColorEditOptions",
		"scope": "lua",
		"body": "ImGui.SetColorEditOptions(ctx, ${2:flags})$0",
		"description": "**Color Edit > SetColorEditOptions**\nPicker type, etc. User will be able to change many settings, unless you pass\nthe _NoOptions flag to your calls.\n**Color Edit**\nTip: the ColorEdit* functions have a little color square that can be\nleft-clicked to open a picker, and right-clicked to open an option menu."
	},
	"ImGui_SetConfigVar lua": {
		"prefix": "ImGui.SetConfigVar",
		"scope": "lua",
		"body": "ImGui.SetConfigVar(ctx, ${2:var_idx}, ${3:value})$0",
		"description": "**Context > Options > SetConfigVar**"
	},
	"ImGui_SetCursorPos lua": {
		"prefix": "ImGui.SetCursorPos",
		"scope": "lua",
		"body": "ImGui.SetCursorPos(ctx, ${2:local_pos_x}, ${3:local_pos_y})$0",
		"description": "**Layout > Layout Cursor Positioning > SetCursorPos**\nCursor position in window\n**Layout > Layout Cursor Positioning**\nBy 'cursor' we mean the current output position.\nThe typical widget behavior is to output themselves at the current cursor\nposition, then move the cursor one line down.\nYou can call SameLine() between widgets to undo the last carriage return and\noutput at the right of the preceding widget."
	},
	"ImGui_SetCursorPosX lua": {
		"prefix": "ImGui.SetCursorPosX",
		"scope": "lua",
		"body": "ImGui.SetCursorPosX(ctx, ${2:local_x})$0",
		"description": "**Layout > Layout Cursor Positioning > SetCursorPosX**\nCursor X position in window\n**Layout > Layout Cursor Positioning**\nBy 'cursor' we mean the current output position.\nThe typical widget behavior is to output themselves at the current cursor\nposition, then move the cursor one line down.\nYou can call SameLine() between widgets to undo the last carriage return and\noutput at the right of the preceding widget."
	},
	"ImGui_SetCursorPosY lua": {
		"prefix": "ImGui.SetCursorPosY",
		"scope": "lua",
		"body": "ImGui.SetCursorPosY(ctx, ${2:local_y})$0",
		"description": "**Layout > Layout Cursor Positioning > SetCursorPosY**\nCursor Y position in window\n**Layout > Layout Cursor Positioning**\nBy 'cursor' we mean the current output position.\nThe typical widget behavior is to output themselves at the current cursor\nposition, then move the cursor one line down.\nYou can call SameLine() between widgets to undo the last carriage return and\noutput at the right of the preceding widget."
	},
	"ImGui_SetCursorScreenPos lua": {
		"prefix": "ImGui.SetCursorScreenPos",
		"scope": "lua",
		"body": "ImGui.SetCursorScreenPos(ctx, ${2:pos_x}, ${3:pos_y})$0",
		"description": "**Layout > Layout Cursor Positioning > SetCursorScreenPos**\nCursor position in absolute screen coordinates.\n**Layout > Layout Cursor Positioning**\nBy 'cursor' we mean the current output position.\nThe typical widget behavior is to output themselves at the current cursor\nposition, then move the cursor one line down.\nYou can call SameLine() between widgets to undo the last carriage return and\noutput at the right of the preceding widget."
	},
	"ImGui_SetDragDropPayload lua": {
		"prefix": "ImGui.SetDragDropPayload",
		"scope": "lua",
		"body": "ImGui.SetDragDropPayload(ctx, ${2:type}, ${3:data}, ${4:cond})$0",
		"description": "**Drag & Drop > SetDragDropPayload**\nThe type is a user defined string of maximum 32 characters.\nStrings starting with '_' are reserved for dear imgui internal types.\nData is copied and held by imgui.\n**Drag & Drop**\nOn source items, call BeginDragDropSource(),\nif it returns true also call SetDragDropPayload() + EndDragDropSource().\nOn target candidates, call BeginDragDropTarget(),\nif it returns true also call AcceptDragDropPayload() + EndDragDropTarget().\nAn item can be both a drag source and a drop target."
	},
	"ImGui_SetItemDefaultFocus lua": {
		"prefix": "ImGui.SetItemDefaultFocus",
		"scope": "lua",
		"body": "ImGui.SetItemDefaultFocus(ctx)$0",
		"description": "**Item & Status > Focus & Activation > SetItemDefaultFocus**\nMake last item the default focused item of a window.\n**Item & Status > Focus & Activation**\nPrefer using 'SetItemDefaultFocus()' over\n'if(IsWindowAppearing()) SetScrollHereY()' when applicable to signify\n'this is the default item'."
	},
	"ImGui_SetItemTooltip lua": {
		"prefix": "ImGui.SetItemTooltip",
		"scope": "lua",
		"body": "ImGui.SetItemTooltip(ctx, ${2:text})$0",
		"description": "**Popup & Modal > Tooltips > SetItemTooltip**\nSet a text-only tooltip if preceding item was hovered.\nOverride any previous call to SetTooltip(). Shortcut for\n`if (IsItemHovered(HoveredFlags_ForTooltip)) { SetTooltip(...); }`.\n**Popup & Modal > Tooltips**\nTooltips are windows following the mouse. They do not take focus away.\nA tooltip window can contain items of any type.\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack."
	},
	"ImGui_SetKeyboardFocusHere lua": {
		"prefix": "ImGui.SetKeyboardFocusHere",
		"scope": "lua",
		"body": "ImGui.SetKeyboardFocusHere(ctx, ${2:offset})$0",
		"description": "**Item & Status > Focus & Activation > SetKeyboardFocusHere**\nFocus keyboard on the next widget. Use positive 'offset' to access sub\ncomponents of a multiple component widget. Use -1 to access previous widget.\n**Item & Status > Focus & Activation**\nPrefer using 'SetItemDefaultFocus()' over\n'if(IsWindowAppearing()) SetScrollHereY()' when applicable to signify\n'this is the default item'."
	},
	"ImGui_SetMouseCursor lua": {
		"prefix": "ImGui.SetMouseCursor",
		"scope": "lua",
		"body": "ImGui.SetMouseCursor(ctx, ${2:cursor_type})$0",
		"description": "**Keyboard & Mouse > Mouse > Mouse Cursor > SetMouseCursor**\nSet desired mouse cursor shape. See MouseCursor_* for possible values.\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold')."
	},
	"ImGui_SetNextFrameWantCaptureKeyboard lua": {
		"prefix": "ImGui.SetNextFrameWantCaptureKeyboard",
		"scope": "lua",
		"body": "ImGui.SetNextFrameWantCaptureKeyboard(ctx, ${2:want_capture_keyboard})$0",
		"description": "**Keyboard & Mouse > Keyboard > SetNextFrameWantCaptureKeyboard**\nRequest capture of keyboard shortcuts in REAPER's global scope for the next frame."
	},
	"ImGui_SetNextItemAllowOverlap lua": {
		"prefix": "ImGui.SetNextItemAllowOverlap",
		"scope": "lua",
		"body": "ImGui.SetNextItemAllowOverlap(ctx)$0",
		"description": "**Item & Status > SetNextItemAllowOverlap**\nAllow next item to be overlapped by a subsequent item.\nUseful with invisible buttons, selectable, treenode covering an area where\nsubsequent items may need to be added. Note that both Selectable() and TreeNode()\nhave dedicated flags doing this."
	},
	"ImGui_SetNextItemOpen lua": {
		"prefix": "ImGui.SetNextItemOpen",
		"scope": "lua",
		"body": "ImGui.SetNextItemOpen(ctx, ${2:is_open}, ${3:cond})$0",
		"description": "**Tree Node > SetNextItemOpen**\nSet next TreeNode/CollapsingHeader open state.\nCan also be done with the TreeNodeFlags_DefaultOpen flag."
	},
	"ImGui_SetNextItemShortcut lua": {
		"prefix": "ImGui.SetNextItemShortcut",
		"scope": "lua",
		"body": "ImGui.SetNextItemShortcut(ctx, ${2:key_chord}, ${3:flags})$0",
		"description": "**Keyboard & Mouse > Shortcuts > SetNextItemShortcut**\n**Keyboard & Mouse > Shortcuts**\nKey chords can combine a Key_* and a Mod_* value. For example: `Mod_Ctrl | Key_C`.\nOnly Mod_* values can be combined a Key_* value. Another Key_* value cannot be combined.\nSeveral callers may register interest in a shortcut, and only one owner gets it.\nParent -> call Shortcut(Ctrl+S) // When Parent is focused, Parent gets the shortcut.\nChild1 -> call Shortcut(Ctrl+S) // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)\nChild2 -> no call               // When Child2 is focused, Parent gets the shortcut.\nThe whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.\nThis is an important property as it facilitate working with foreign code or larger codebase.\nTo understand the difference:\n- IsKeyChordPressed compares modifiers and calls IsKeyPressed -> function has no side-effect.\n- Shortcut submits a route, routes are resolved, if it currently can be routed it\ncalls IsKeyChordPressed -> function has (desirable) side-effects as it can\nprevents another call from getting the route.\nRegistered routes may be visualized via Metrics/Debugger > Inputs (ShowMetricsWindow)."
	},
	"ImGui_SetNextItemWidth lua": {
		"prefix": "ImGui.SetNextItemWidth",
		"scope": "lua",
		"body": "ImGui.SetNextItemWidth(ctx, ${2:item_width})$0",
		"description": "**Item & Status > Dimensions > SetNextItemWidth**\nSet width of the _next_ common large 'item+label' widget.\n- >0.0: width in pixels\n- <0.0 align xx pixels to the right of window\n(so -FLT_MIN always align width to the right side)"
	},
	"ImGui_SetNextWindowBgAlpha lua": {
		"prefix": "ImGui.SetNextWindowBgAlpha",
		"scope": "lua",
		"body": "ImGui.SetNextWindowBgAlpha(ctx, ${2:alpha})$0",
		"description": "**Window > Properties > SetNextWindowBgAlpha**\nSet next window background color alpha. Helper to easily override the Alpha\ncomponent of Col_WindowBg/Col_ChildBg/Col_PopupBg.\nYou may also use WindowFlags_NoBackground for a fully transparent window.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetNextWindowCollapsed lua": {
		"prefix": "ImGui.SetNextWindowCollapsed",
		"scope": "lua",
		"body": "ImGui.SetNextWindowCollapsed(ctx, ${2:collapsed}, ${3:cond})$0",
		"description": "**Window > Properties > SetNextWindowCollapsed**\nSet next window collapsed state.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetNextWindowContentSize lua": {
		"prefix": "ImGui.SetNextWindowContentSize",
		"scope": "lua",
		"body": "ImGui.SetNextWindowContentSize(ctx, ${2:size_w}, ${3:size_h})$0",
		"description": "**Window > Properties > SetNextWindowContentSize**\nSet next window content size (~ scrollable client area, which enforce the\nrange of scrollbars). Not including window decorations (title bar, menu bar,\netc.) nor StyleVar_WindowPadding. set an axis to 0.0 to leave it automatic.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetNextWindowDockID lua": {
		"prefix": "ImGui.SetNextWindowDockID",
		"scope": "lua",
		"body": "ImGui.SetNextWindowDockID(ctx, ${2:dock_id}, ${3:cond})$0",
		"description": "**Window > Docking > SetNextWindowDockID**\n**Window > Docking**\nDock windows into other windows or in REAPER dockers.\nDock IDs are:\n- 0 = undocked\n- -1 to -16 = REAPER docker index\n- > 0 = Dear ImGui dockspace ID (when the user docked the window into another one).\nDrag from window title bar or their tab to dock/undock. Hold SHIFT to disable docking.\nDrag from window menu button (upper-left button) to undock an entire node (all windows).\nDockingWithShift == true, you instead need to hold SHIFT to _enable_ docking.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetNextWindowFocus lua": {
		"prefix": "ImGui.SetNextWindowFocus",
		"scope": "lua",
		"body": "ImGui.SetNextWindowFocus(ctx)$0",
		"description": "**Window > Properties > SetNextWindowFocus**\nSet next window to be focused / top-most.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetNextWindowPos lua": {
		"prefix": "ImGui.SetNextWindowPos",
		"scope": "lua",
		"body": "ImGui.SetNextWindowPos(ctx, ${2:pos_x}, ${3:pos_y}, ${4:cond}, ${5:pivot_x}, ${6:pivot_y})$0",
		"description": "**Window > Properties > SetNextWindowPos**\nSet next window position. Use pivot=(0.5,0.5) to center on given point, etc.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetNextWindowScroll lua": {
		"prefix": "ImGui.SetNextWindowScroll",
		"scope": "lua",
		"body": "ImGui.SetNextWindowScroll(ctx, ${2:scroll_x}, ${3:scroll_y})$0",
		"description": "**Window > Properties > SetNextWindowScroll**\nSet next window scrolling value (use < 0.0 to not affect a given axis).\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetNextWindowSize lua": {
		"prefix": "ImGui.SetNextWindowSize",
		"scope": "lua",
		"body": "ImGui.SetNextWindowSize(ctx, ${2:size_w}, ${3:size_h}, ${4:cond})$0",
		"description": "**Window > Properties > SetNextWindowSize**\nSet next window size. set axis to 0.0 to force an auto-fit on this axis.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetNextWindowSizeConstraints lua": {
		"prefix": "ImGui.SetNextWindowSizeConstraints",
		"scope": "lua",
		"body": "ImGui.SetNextWindowSizeConstraints(ctx, ${2:size_min_w}, ${3:size_min_h}, ${4:size_max_w}, ${5:size_max_h}, ${6:custom_callback})$0",
		"description": "**Window > Properties > SetNextWindowSizeConstraints**\nSet next window size limits. Use 0.0 or FLT_MAX (second return value of\nNumericLimits_Float) if you don't want limits.\nUse -1 for both min and max of same axis to preserve current size (which itself\nis a constraint).\nUse callback to apply non-trivial programmatic constraints.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetScrollFromPosX lua": {
		"prefix": "ImGui.SetScrollFromPosX",
		"scope": "lua",
		"body": "ImGui.SetScrollFromPosX(ctx, ${2:local_x}, ${3:center_x_ratio})$0",
		"description": "**Window > Scrolling > SetScrollFromPosX**\nAdjust scrolling amount to make given position visible.\nGenerally GetCursorStartPos() + offset to compute a valid position.\n**Window > Scrolling**\nAny change of Scroll will be applied at the beginning of next frame in the\nfirst call to Begin().\nYou may instead use SetNextWindowScroll() prior to calling Begin() to avoid this\ndelay, as an alternative to using SetScrollX()/SetScrollY().\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetScrollFromPosY lua": {
		"prefix": "ImGui.SetScrollFromPosY",
		"scope": "lua",
		"body": "ImGui.SetScrollFromPosY(ctx, ${2:local_y}, ${3:center_y_ratio})$0",
		"description": "**Window > Scrolling > SetScrollFromPosY**\nAdjust scrolling amount to make given position visible.\nGenerally GetCursorStartPos() + offset to compute a valid position.\n**Window > Scrolling**\nAny change of Scroll will be applied at the beginning of next frame in the\nfirst call to Begin().\nYou may instead use SetNextWindowScroll() prior to calling Begin() to avoid this\ndelay, as an alternative to using SetScrollX()/SetScrollY().\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetScrollHereX lua": {
		"prefix": "ImGui.SetScrollHereX",
		"scope": "lua",
		"body": "ImGui.SetScrollHereX(ctx, ${2:center_x_ratio})$0",
		"description": "**Window > Scrolling > SetScrollHereX**\nAdjust scrolling amount to make current cursor position visible.\ncenter_x_ratio=0.0: left, 0.5: center, 1.0: right.\nWhen using to make a 'default/current item' visible,\nconsider using SetItemDefaultFocus instead.\n**Window > Scrolling**\nAny change of Scroll will be applied at the beginning of next frame in the\nfirst call to Begin().\nYou may instead use SetNextWindowScroll() prior to calling Begin() to avoid this\ndelay, as an alternative to using SetScrollX()/SetScrollY().\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetScrollHereY lua": {
		"prefix": "ImGui.SetScrollHereY",
		"scope": "lua",
		"body": "ImGui.SetScrollHereY(ctx, ${2:center_y_ratio})$0",
		"description": "**Window > Scrolling > SetScrollHereY**\nAdjust scrolling amount to make current cursor position visible.\ncenter_y_ratio=0.0: top, 0.5: center, 1.0: bottom.\nWhen using to make a 'default/current item' visible,\nconsider using SetItemDefaultFocus instead.\n**Window > Scrolling**\nAny change of Scroll will be applied at the beginning of next frame in the\nfirst call to Begin().\nYou may instead use SetNextWindowScroll() prior to calling Begin() to avoid this\ndelay, as an alternative to using SetScrollX()/SetScrollY().\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetScrollX lua": {
		"prefix": "ImGui.SetScrollX",
		"scope": "lua",
		"body": "ImGui.SetScrollX(ctx, ${2:scroll_x})$0",
		"description": "**Window > Scrolling > SetScrollX**\nSet scrolling amount [0 .. GetScrollMaxX()]\n**Window > Scrolling**\nAny change of Scroll will be applied at the beginning of next frame in the\nfirst call to Begin().\nYou may instead use SetNextWindowScroll() prior to calling Begin() to avoid this\ndelay, as an alternative to using SetScrollX()/SetScrollY().\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetScrollY lua": {
		"prefix": "ImGui.SetScrollY",
		"scope": "lua",
		"body": "ImGui.SetScrollY(ctx, ${2:scroll_y})$0",
		"description": "**Window > Scrolling > SetScrollY**\nSet scrolling amount [0 .. GetScrollMaxY()]\n**Window > Scrolling**\nAny change of Scroll will be applied at the beginning of next frame in the\nfirst call to Begin().\nYou may instead use SetNextWindowScroll() prior to calling Begin() to avoid this\ndelay, as an alternative to using SetScrollX()/SetScrollY().\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetTabItemClosed lua": {
		"prefix": "ImGui.SetTabItemClosed",
		"scope": "lua",
		"body": "ImGui.SetTabItemClosed(ctx, ${2:tab_or_docked_window_label})$0",
		"description": "**Tab Bar > Tab Item > SetTabItemClosed**\nNotify TabBar or Docking system of a closed tab/window ahead\n(useful to reduce visual flicker on reorderable tab bars).\nFor tab-bar: call after BeginTabBar and before Tab submissions.\nOtherwise call with a window name."
	},
	"ImGui_SetTooltip lua": {
		"prefix": "ImGui.SetTooltip",
		"scope": "lua",
		"body": "ImGui.SetTooltip(ctx, ${2:text})$0",
		"description": "**Popup & Modal > Tooltips > SetTooltip**\nSet a text-only tooltip. Often used after a IsItemHovered() check.\nOverride any previous call to SetTooltip.\nShortcut for `if (BeginTooltip()) { Text(...); EndTooltip(); }`.\n**Popup & Modal > Tooltips**\nTooltips are windows following the mouse. They do not take focus away.\nA tooltip window can contain items of any type.\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack."
	},
	"ImGui_SetWindowCollapsed lua": {
		"prefix": "ImGui.SetWindowCollapsed",
		"scope": "lua",
		"body": "ImGui.SetWindowCollapsed(ctx, ${2:collapsed}, ${3:cond})$0",
		"description": "**Window > Properties > SetWindowCollapsed**\n(Not recommended) Set current window collapsed state.\nPrefer using SetNextWindowCollapsed.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetWindowCollapsedEx lua": {
		"prefix": "ImGui.SetWindowCollapsedEx",
		"scope": "lua",
		"body": "ImGui.SetWindowCollapsedEx(ctx, ${2:name}, ${3:collapsed}, ${4:cond})$0",
		"description": "**Window > Properties > SetWindowCollapsedEx**\nSet named window collapsed state.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetWindowFocus lua": {
		"prefix": "ImGui.SetWindowFocus",
		"scope": "lua",
		"body": "ImGui.SetWindowFocus(ctx)$0",
		"description": "**Window > Properties > SetWindowFocus**\n(Not recommended) Set current window to be focused / top-most.\nPrefer using SetNextWindowFocus.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetWindowFocusEx lua": {
		"prefix": "ImGui.SetWindowFocusEx",
		"scope": "lua",
		"body": "ImGui.SetWindowFocusEx(ctx, ${2:name})$0",
		"description": "**Window > Properties > SetWindowFocusEx**\nSet named window to be focused / top-most. Use an empty name to remove focus.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetWindowPos lua": {
		"prefix": "ImGui.SetWindowPos",
		"scope": "lua",
		"body": "ImGui.SetWindowPos(ctx, ${2:pos_x}, ${3:pos_y}, ${4:cond})$0",
		"description": "**Window > Properties > SetWindowPos**\n(Not recommended) Set current window position - call within Begin/End.\nPrefer using SetNextWindowPos, as this may incur tearing and minor side-effects.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetWindowPosEx lua": {
		"prefix": "ImGui.SetWindowPosEx",
		"scope": "lua",
		"body": "ImGui.SetWindowPosEx(ctx, ${2:name}, ${3:pos_x}, ${4:pos_y}, ${5:cond})$0",
		"description": "**Window > Properties > SetWindowPosEx**\nSet named window position.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetWindowSize lua": {
		"prefix": "ImGui.SetWindowSize",
		"scope": "lua",
		"body": "ImGui.SetWindowSize(ctx, ${2:size_w}, ${3:size_h}, ${4:cond})$0",
		"description": "**Window > Properties > SetWindowSize**\n(Not recommended) Set current window size - call within Begin/End.\nSet size_w and size_h to 0 to force an auto-fit.\nPrefer using SetNextWindowSize, as this may incur tearing and minor side-effects.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SetWindowSizeEx lua": {
		"prefix": "ImGui.SetWindowSizeEx",
		"scope": "lua",
		"body": "ImGui.SetWindowSizeEx(ctx, ${2:name}, ${3:size_w}, ${4:size_h}, ${5:cond})$0",
		"description": "**Window > Properties > SetWindowSizeEx**\nSet named window size. Set axis to 0.0 to force an auto-fit on this axis.\n**Window > Properties**\nPrefer using SetNextWindow* functions (before Begin) rather that SetWindow* functions\n(after Begin).\n'Current window' = the window we are appending into while inside a Begin()/End()\nblock. 'Next window' = next window we will Begin() into.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_Shortcut lua": {
		"prefix": "ImGui.Shortcut",
		"scope": "lua",
		"body": "ImGui.Shortcut(ctx, ${2:key_chord}, ${3:flags})$0",
		"description": "**Keyboard & Mouse > Shortcuts > Shortcut**\n**Keyboard & Mouse > Shortcuts**\nKey chords can combine a Key_* and a Mod_* value. For example: `Mod_Ctrl | Key_C`.\nOnly Mod_* values can be combined a Key_* value. Another Key_* value cannot be combined.\nSeveral callers may register interest in a shortcut, and only one owner gets it.\nParent -> call Shortcut(Ctrl+S) // When Parent is focused, Parent gets the shortcut.\nChild1 -> call Shortcut(Ctrl+S) // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)\nChild2 -> no call               // When Child2 is focused, Parent gets the shortcut.\nThe whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.\nThis is an important property as it facilitate working with foreign code or larger codebase.\nTo understand the difference:\n- IsKeyChordPressed compares modifiers and calls IsKeyPressed -> function has no side-effect.\n- Shortcut submits a route, routes are resolved, if it currently can be routed it\ncalls IsKeyChordPressed -> function has (desirable) side-effects as it can\nprevents another call from getting the route.\nRegistered routes may be visualized via Metrics/Debugger > Inputs (ShowMetricsWindow)."
	},
	"ImGui_ShowAboutWindow lua": {
		"prefix": "ImGui.ShowAboutWindow",
		"scope": "lua",
		"body": "ImGui.ShowAboutWindow(ctx, ${2:p_open})$0",
		"description": "**Window > Debug Windows > ShowAboutWindow**\nCreate About window.\nDisplay ReaImGui version, Dear ImGui version, credits and build/system information.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_ShowDebugLogWindow lua": {
		"prefix": "ImGui.ShowDebugLogWindow",
		"scope": "lua",
		"body": "ImGui.ShowDebugLogWindow(ctx, ${2:p_open})$0",
		"description": "**Window > Debug Windows > ShowDebugLogWindow**\nCreate Debug Log window. display a simplified log of important dear imgui events.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_ShowIDStackToolWindow lua": {
		"prefix": "ImGui.ShowIDStackToolWindow",
		"scope": "lua",
		"body": "ImGui.ShowIDStackToolWindow(ctx, ${2:p_open})$0",
		"description": "**Window > Debug Windows > ShowIDStackToolWindow**\nCreate Stack Tool window. Hover items with mouse to query information about\nthe source of their unique ID.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_ShowMetricsWindow lua": {
		"prefix": "ImGui.ShowMetricsWindow",
		"scope": "lua",
		"body": "ImGui.ShowMetricsWindow(ctx, ${2:p_open})$0",
		"description": "**Window > Debug Windows > ShowMetricsWindow**\nCreate Metrics/Debugger window.\nDisplay Dear ImGui internals: windows, draw commands, various internal state, etc.\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'."
	},
	"ImGui_SliderAngle lua": {
		"prefix": "ImGui.SliderAngle",
		"scope": "lua",
		"body": "ImGui.SliderAngle(ctx, ${2:label}, ${3:v_rad}, ${4:v_degrees_min}, ${5:v_degrees_max}, ${6:format}, ${7:flags})$0",
		"description": "**Drag & Slider > Regular Sliders > SliderAngle**\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_SliderDouble lua": {
		"prefix": "ImGui.SliderDouble",
		"scope": "lua",
		"body": "ImGui.SliderDouble(ctx, ${2:label}, ${3:v}, ${4:v_min}, ${5:v_max}, ${6:format}, ${7:flags})$0",
		"description": "**Drag & Slider > Regular Sliders > SliderDouble**\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_SliderDouble2 lua": {
		"prefix": "ImGui.SliderDouble2",
		"scope": "lua",
		"body": "ImGui.SliderDouble2(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v_min}, ${6:v_max}, ${7:format}, ${8:flags})$0",
		"description": "**Drag & Slider > Regular Sliders > SliderDouble2**\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_SliderDouble3 lua": {
		"prefix": "ImGui.SliderDouble3",
		"scope": "lua",
		"body": "ImGui.SliderDouble3(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v_min}, ${7:v_max}, ${8:format}, ${9:flags})$0",
		"description": "**Drag & Slider > Regular Sliders > SliderDouble3**\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_SliderDouble4 lua": {
		"prefix": "ImGui.SliderDouble4",
		"scope": "lua",
		"body": "ImGui.SliderDouble4(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:v_min}, ${8:v_max}, ${9:format}, ${10:flags})$0",
		"description": "**Drag & Slider > Regular Sliders > SliderDouble4**\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_SliderDoubleN lua": {
		"prefix": "ImGui.SliderDoubleN",
		"scope": "lua",
		"body": "ImGui.SliderDoubleN(ctx, ${2:label}, ${3:values}, ${4:v_min}, ${5:v_max}, ${6:format}, ${7:flags})$0",
		"description": "**Drag & Slider > Regular Sliders > SliderDoubleN**\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_SliderInt lua": {
		"prefix": "ImGui.SliderInt",
		"scope": "lua",
		"body": "ImGui.SliderInt(ctx, ${2:label}, ${3:v}, ${4:v_min}, ${5:v_max}, ${6:format}, ${7:flags})$0",
		"description": "**Drag & Slider > Regular Sliders > SliderInt**\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_SliderInt2 lua": {
		"prefix": "ImGui.SliderInt2",
		"scope": "lua",
		"body": "ImGui.SliderInt2(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v_min}, ${6:v_max}, ${7:format}, ${8:flags})$0",
		"description": "**Drag & Slider > Regular Sliders > SliderInt2**\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_SliderInt3 lua": {
		"prefix": "ImGui.SliderInt3",
		"scope": "lua",
		"body": "ImGui.SliderInt3(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v_min}, ${7:v_max}, ${8:format}, ${9:flags})$0",
		"description": "**Drag & Slider > Regular Sliders > SliderInt3**\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_SliderInt4 lua": {
		"prefix": "ImGui.SliderInt4",
		"scope": "lua",
		"body": "ImGui.SliderInt4(ctx, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:v_min}, ${8:v_max}, ${9:format}, ${10:flags})$0",
		"description": "**Drag & Slider > Regular Sliders > SliderInt4**\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_SmallButton lua": {
		"prefix": "ImGui.SmallButton",
		"scope": "lua",
		"body": "ImGui.SmallButton(ctx, ${2:label})$0",
		"description": "**Button > SmallButton**\nButton with StyleVar_FramePadding.y == 0 to easily embed within text.\n**Button**\nMost widgets return true when the value has been changed or when pressed/selected.\nYou may also use one of the many IsItem* functions (e.g. IsItemActive,\nIsItemHovered, etc.) to query widget state."
	},
	"ImGui_Spacing lua": {
		"prefix": "ImGui.Spacing",
		"scope": "lua",
		"body": "ImGui.Spacing(ctx)$0",
		"description": "**Layout > Spacing**\nAdd vertical spacing."
	},
	"ImGui_TabItemButton lua": {
		"prefix": "ImGui.TabItemButton",
		"scope": "lua",
		"body": "ImGui.TabItemButton(ctx, ${2:label}, ${3:flags})$0",
		"description": "**Tab Bar > Tab Item > TabItemButton**\nCreate a Tab behaving like a button. Return true when clicked.\nCannot be selected in the tab bar."
	},
	"ImGui_TableAngledHeadersRow lua": {
		"prefix": "ImGui.TableAngledHeadersRow",
		"scope": "lua",
		"body": "ImGui.TableAngledHeadersRow(ctx)$0",
		"description": "**Table > Header & Columns > TableAngledHeadersRow**\nSubmit a row with angled headers for every column with the\nTableColumnFlags_AngledHeader flag. Must be the first row.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableGetColumnCount lua": {
		"prefix": "ImGui.TableGetColumnCount",
		"scope": "lua",
		"body": "ImGui.TableGetColumnCount(ctx)$0",
		"description": "**Table > TableGetColumnCount**\nReturn number of columns (value passed to BeginTable).\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableGetColumnFlags lua": {
		"prefix": "ImGui.TableGetColumnFlags",
		"scope": "lua",
		"body": "ImGui.TableGetColumnFlags(ctx, ${2:column_n})$0",
		"description": "**Table > Header & Columns > TableGetColumnFlags**\nReturn column flags so you can query their Enabled/Visible/Sorted/Hovered\nstatus flags. Pass -1 to use current column.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableGetColumnIndex lua": {
		"prefix": "ImGui.TableGetColumnIndex",
		"scope": "lua",
		"body": "ImGui.TableGetColumnIndex(ctx)$0",
		"description": "**Table > TableGetColumnIndex**\nReturn current column index.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableGetColumnName lua": {
		"prefix": "ImGui.TableGetColumnName",
		"scope": "lua",
		"body": "ImGui.TableGetColumnName(ctx, ${2:column_n})$0",
		"description": "**Table > Header & Columns > TableGetColumnName**\nReturn '' if column didn't have a name declared by TableSetupColumn.\nPass -1 to use current column.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableGetColumnSortSpecs lua": {
		"prefix": "ImGui.TableGetColumnSortSpecs",
		"scope": "lua",
		"body": "ImGui.TableGetColumnSortSpecs(ctx, ${2:id})$0",
		"description": "**Table > Sorting > TableGetColumnSortSpecs**\nSorting specification for one column of a table.\nCall while incrementing 'id' from 0 until false is returned.\n- id:             Index of the sorting specification (always stored in order\nstarting from 0, tables sorted on a single criteria will always have a 0 here)\n- column_index:   Index of the column\n- column_user_id: User ID of the column (if specified by a TableSetupColumn call)\n- sort_direction: SortDirection_Ascending or SortDirection_Descending\nSee TableNeedSort.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableGetHoveredColumn lua": {
		"prefix": "ImGui.TableGetHoveredColumn",
		"scope": "lua",
		"body": "ImGui.TableGetHoveredColumn(ctx)$0",
		"description": "**Table > Header & Columns > TableGetHoveredColumn**\nReturns hovered column or -1 when table is not hovered. Returns columns_count\nif the unused space at the right of visible columns is hovered.\nCan also use (TableGetColumnFlags() & TableColumnFlags_IsHovered) instead.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableGetRowIndex lua": {
		"prefix": "ImGui.TableGetRowIndex",
		"scope": "lua",
		"body": "ImGui.TableGetRowIndex(ctx)$0",
		"description": "**Table > TableGetRowIndex**\nReturn current row index.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableHeader lua": {
		"prefix": "ImGui.TableHeader",
		"scope": "lua",
		"body": "ImGui.TableHeader(ctx, ${2:label})$0",
		"description": "**Table > Header & Columns > TableHeader**\nSubmit one header cell manually (rarely used). See TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableHeadersRow lua": {
		"prefix": "ImGui.TableHeadersRow",
		"scope": "lua",
		"body": "ImGui.TableHeadersRow(ctx)$0",
		"description": "**Table > Header & Columns > TableHeadersRow**\nSubmit a row with headers cells based on data provided to TableSetupColumn\n+ submit context menu.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableNeedSort lua": {
		"prefix": "ImGui.TableNeedSort",
		"scope": "lua",
		"body": "ImGui.TableNeedSort(ctx)$0",
		"description": "**Table > Sorting > TableNeedSort**\nReturn true once when sorting specs have changed since last call,\nor the first time. 'has_specs' is false when not sorting.\nSee TableGetColumnSortSpecs.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableNextColumn lua": {
		"prefix": "ImGui.TableNextColumn",
		"scope": "lua",
		"body": "ImGui.TableNextColumn(ctx)$0",
		"description": "**Table > TableNextColumn**\nAppend into the next column (or first column of next row if currently in\nlast column). Return true when column is visible.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableNextRow lua": {
		"prefix": "ImGui.TableNextRow",
		"scope": "lua",
		"body": "ImGui.TableNextRow(ctx, ${2:row_flags}, ${3:min_row_height})$0",
		"description": "**Table > TableNextRow**\nAppend into the first cell of a new row.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableSetBgColor lua": {
		"prefix": "ImGui.TableSetBgColor",
		"scope": "lua",
		"body": "ImGui.TableSetBgColor(ctx, ${2:target}, ${3:color_rgba}, ${4:column_n})$0",
		"description": "**Table > Background > TableSetBgColor**\nChange the color of a cell, row, or column.\nSee TableBgTarget_* flags for details.\n**Table > Background**\nBackground colors are rendering in 3 layers:\n- Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.\n- Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.\n- Layer 2: draw with CellBg color if set.\nThe purpose of the two row/columns layers is to let you decide if a background\ncolor change should override or blend with the existing color.\nWhen using TableFlags_RowBg on the table, each row has the RowBg0 color\nautomatically set for odd/even rows.\nIf you set the color of RowBg0 target, your color will override the existing\nRowBg0 color.\nIf you set the color of RowBg1 or ColumnBg1 target, your color will blend over\nthe RowBg0 color.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableSetColumnEnabled lua": {
		"prefix": "ImGui.TableSetColumnEnabled",
		"scope": "lua",
		"body": "ImGui.TableSetColumnEnabled(ctx, ${2:column_n}, ${3:v})$0",
		"description": "**Table > Header & Columns > TableSetColumnEnabled**\nChange user-accessible enabled/disabled state of a column, set to false to\nhide the column. Note that end-user can use the context menu to change this\nthemselves (right-click in headers, or right-click in columns body with\nTableFlags_ContextMenuInBody).\n- Require table to have the TableFlags_Hideable flag because we are manipulating\nuser accessible state.\n- Request will be applied during next layout, which happens on the first call to\nTableNextRow after Begin_Table.\n- For the getter you can test\n(TableGetColumnFlags() & TableColumnFlags_IsEnabled) != 0.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableSetColumnIndex lua": {
		"prefix": "ImGui.TableSetColumnIndex",
		"scope": "lua",
		"body": "ImGui.TableSetColumnIndex(ctx, ${2:column_n})$0",
		"description": "**Table > TableSetColumnIndex**\nAppend into the specified column. Return true when column is visible.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableSetupColumn lua": {
		"prefix": "ImGui.TableSetupColumn",
		"scope": "lua",
		"body": "ImGui.TableSetupColumn(ctx, ${2:label}, ${3:flags}, ${4:init_width_or_weight}, ${5:user_id})$0",
		"description": "**Table > Header & Columns > TableSetupColumn**\nUse to specify label, resizing policy, default width/weight, id,\nvarious other flags etc.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_TableSetupScrollFreeze lua": {
		"prefix": "ImGui.TableSetupScrollFreeze",
		"scope": "lua",
		"body": "ImGui.TableSetupScrollFreeze(ctx, ${2:cols}, ${3:rows})$0",
		"description": "**Table > Header & Columns > TableSetupScrollFreeze**\nLock columns/rows so they stay visible when scrolled.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable."
	},
	"ImGui_Text lua": {
		"prefix": "ImGui.Text",
		"scope": "lua",
		"body": "ImGui.Text(ctx, ${2:text})$0",
		"description": "**Text > Text**"
	},
	"ImGui_TextColored lua": {
		"prefix": "ImGui.TextColored",
		"scope": "lua",
		"body": "ImGui.TextColored(ctx, ${2:col_rgba}, ${3:text})$0",
		"description": "**Text > TextColored**\nShortcut for PushStyleColor(Col_Text, color); Text(text); PopStyleColor();"
	},
	"ImGui_TextDisabled lua": {
		"prefix": "ImGui.TextDisabled",
		"scope": "lua",
		"body": "ImGui.TextDisabled(ctx, ${2:text})$0",
		"description": "**Text > TextDisabled**"
	},
	"ImGui_TextFilter_Clear lua": {
		"prefix": "ImGui.TextFilter_Clear",
		"scope": "lua",
		"body": "ImGui.TextFilter_Clear(${1:filter})$0",
		"description": "**Text Filter > TextFilter_Clear**\n**Text Filter**\nHelper to perform simple filtering on text strings.\nIn format 'aaaaa[,bbbb][,ccccc]'.\nFilter usage:\n- ''         display all lines\n- 'xxx'      display lines containing 'xxx'\n- 'xxx,yyy'  display lines containing 'xxx' or 'yyy'\n- '-xxx'     hide lines containing 'xxx'"
	},
	"ImGui_TextFilter_Draw lua": {
		"prefix": "ImGui.TextFilter_Draw",
		"scope": "lua",
		"body": "ImGui.TextFilter_Draw(${1:filter}, ctx, ${3:label}, ${4:width})$0",
		"description": "**Text Filter > TextFilter_Draw**\nHelper calling InputText+TextFilter_Set\n**Text Filter**\nHelper to perform simple filtering on text strings.\nIn format 'aaaaa[,bbbb][,ccccc]'.\nFilter usage:\n- ''         display all lines\n- 'xxx'      display lines containing 'xxx'\n- 'xxx,yyy'  display lines containing 'xxx' or 'yyy'\n- '-xxx'     hide lines containing 'xxx'"
	},
	"ImGui_TextFilter_Get lua": {
		"prefix": "ImGui.TextFilter_Get",
		"scope": "lua",
		"body": "ImGui.TextFilter_Get(${1:filter})$0",
		"description": "**Text Filter > TextFilter_Get**\n**Text Filter**\nHelper to perform simple filtering on text strings.\nIn format 'aaaaa[,bbbb][,ccccc]'.\nFilter usage:\n- ''         display all lines\n- 'xxx'      display lines containing 'xxx'\n- 'xxx,yyy'  display lines containing 'xxx' or 'yyy'\n- '-xxx'     hide lines containing 'xxx'"
	},
	"ImGui_TextFilter_IsActive lua": {
		"prefix": "ImGui.TextFilter_IsActive",
		"scope": "lua",
		"body": "ImGui.TextFilter_IsActive(${1:filter})$0",
		"description": "**Text Filter > TextFilter_IsActive**\n**Text Filter**\nHelper to perform simple filtering on text strings.\nIn format 'aaaaa[,bbbb][,ccccc]'.\nFilter usage:\n- ''         display all lines\n- 'xxx'      display lines containing 'xxx'\n- 'xxx,yyy'  display lines containing 'xxx' or 'yyy'\n- '-xxx'     hide lines containing 'xxx'"
	},
	"ImGui_TextFilter_PassFilter lua": {
		"prefix": "ImGui.TextFilter_PassFilter",
		"scope": "lua",
		"body": "ImGui.TextFilter_PassFilter(${1:filter}, ${2:text})$0",
		"description": "**Text Filter > TextFilter_PassFilter**\n**Text Filter**\nHelper to perform simple filtering on text strings.\nIn format 'aaaaa[,bbbb][,ccccc]'.\nFilter usage:\n- ''         display all lines\n- 'xxx'      display lines containing 'xxx'\n- 'xxx,yyy'  display lines containing 'xxx' or 'yyy'\n- '-xxx'     hide lines containing 'xxx'"
	},
	"ImGui_TextFilter_Set lua": {
		"prefix": "ImGui.TextFilter_Set",
		"scope": "lua",
		"body": "ImGui.TextFilter_Set(${1:filter}, ${2:filter_text})$0",
		"description": "**Text Filter > TextFilter_Set**\n**Text Filter**\nHelper to perform simple filtering on text strings.\nIn format 'aaaaa[,bbbb][,ccccc]'.\nFilter usage:\n- ''         display all lines\n- 'xxx'      display lines containing 'xxx'\n- 'xxx,yyy'  display lines containing 'xxx' or 'yyy'\n- '-xxx'     hide lines containing 'xxx'"
	},
	"ImGui_TextWrapped lua": {
		"prefix": "ImGui.TextWrapped",
		"scope": "lua",
		"body": "ImGui.TextWrapped(ctx, ${2:text})$0",
		"description": "**Text > TextWrapped**\nShortcut for PushTextWrapPos(0.0); Text(text); PopTextWrapPos();.\nNote that this won't work on an auto-resizing window if there's no other\nwidgets to extend the window width, yoy may need to set a size using\nSetNextWindowSize."
	},
	"ImGui_TreeNode lua": {
		"prefix": "ImGui.TreeNode",
		"scope": "lua",
		"body": "ImGui.TreeNode(ctx, ${2:label}, ${3:flags})$0",
		"description": "**Tree Node > TreeNode**\nTreeNode functions return true when the node is open, in which case you need\nto also call TreePop when you are finished displaying the tree node contents."
	},
	"ImGui_TreeNodeEx lua": {
		"prefix": "ImGui.TreeNodeEx",
		"scope": "lua",
		"body": "ImGui.TreeNodeEx(ctx, ${2:str_id}, ${3:label}, ${4:flags})$0",
		"description": "**Tree Node > TreeNodeEx**\nHelper variation to easily decorelate the id from the displayed string.\nRead the [FAQ](https://dearimgui.com/faq) about why and how to use ID.\nTo align arbitrary text at the same level as a TreeNode you can use Bullet."
	},
	"ImGui_TreePop lua": {
		"prefix": "ImGui.TreePop",
		"scope": "lua",
		"body": "ImGui.TreePop(ctx)$0",
		"description": "**Tree Node > TreePop**\nUnindent()+PopID()"
	},
	"ImGui_TreePush lua": {
		"prefix": "ImGui.TreePush",
		"scope": "lua",
		"body": "ImGui.TreePush(ctx, ${2:str_id})$0",
		"description": "**Tree Node > TreePush**\nIndent()+PushID(). Already called by TreeNode when returning true,\nbut you can call TreePush/TreePop yourself if desired."
	},
	"ImGui_Unindent lua": {
		"prefix": "ImGui.Unindent",
		"scope": "lua",
		"body": "ImGui.Unindent(ctx, ${2:indent_w})$0",
		"description": "**Layout > Unindent**\nMove content position back to the left, by 'indent_w', or\nStyleVar_IndentSpacing if 'indent_w' <= 0"
	},
	"ImGui_VSliderDouble lua": {
		"prefix": "ImGui.VSliderDouble",
		"scope": "lua",
		"body": "ImGui.VSliderDouble(ctx, ${2:label}, ${3:size_w}, ${4:size_h}, ${5:v}, ${6:v_min}, ${7:v_max}, ${8:format}, ${9:flags})$0",
		"description": "**Drag & Slider > Regular Sliders > VSliderDouble**\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_VSliderInt lua": {
		"prefix": "ImGui.VSliderInt",
		"scope": "lua",
		"body": "ImGui.VSliderInt(ctx, ${2:label}, ${3:size_w}, ${4:size_h}, ${5:v}, ${6:v_min}, ${7:v_max}, ${8:format}, ${9:flags})$0",
		"description": "**Drag & Slider > Regular Sliders > VSliderInt**\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d')."
	},
	"ImGui_ValidatePtr lua": {
		"prefix": "ImGui.ValidatePtr",
		"scope": "lua",
		"body": "ImGui.ValidatePtr(${1:pointer}, ${2:type})$0",
		"description": "**Utility > ValidatePtr**\nReturn whether the given pointer is a valid instance of one of the following\ntypes (indentation represents inheritance):\n- ImGui_Context*\n- ImGui_DrawList*\n- ImGui_DrawListSplitter*\n- ImGui_Font*\n- ImGui_Function*\n- ImGui_Image*\n- ImGui_ImageSet*\n- ImGui_ListClipper*\n- ImGui_TextFilter*\n- ImGui_Viewport*"
	},
	"ImGui_Viewport_GetCenter lua": {
		"prefix": "ImGui.Viewport_GetCenter",
		"scope": "lua",
		"body": "ImGui.Viewport_GetCenter(${1:viewport})$0",
		"description": "**Viewport > Viewport_GetCenter**\nCenter of the viewport."
	},
	"ImGui_Viewport_GetPos lua": {
		"prefix": "ImGui.Viewport_GetPos",
		"scope": "lua",
		"body": "ImGui.Viewport_GetPos(${1:viewport})$0",
		"description": "**Viewport > Viewport_GetPos**\nMain Area: Position of the viewport"
	},
	"ImGui_Viewport_GetSize lua": {
		"prefix": "ImGui.Viewport_GetSize",
		"scope": "lua",
		"body": "ImGui.Viewport_GetSize(${1:viewport})$0",
		"description": "**Viewport > Viewport_GetSize**\nMain Area: Size of the viewport."
	},
	"ImGui_Viewport_GetWorkCenter lua": {
		"prefix": "ImGui.Viewport_GetWorkCenter",
		"scope": "lua",
		"body": "ImGui.Viewport_GetWorkCenter(${1:viewport})$0",
		"description": "**Viewport > Work Area > Viewport_GetWorkCenter**\nCenter of the viewport's work area.\n**Viewport > Work Area**\nViewport minus task bars, menu bars, status bars"
	},
	"ImGui_Viewport_GetWorkPos lua": {
		"prefix": "ImGui.Viewport_GetWorkPos",
		"scope": "lua",
		"body": "ImGui.Viewport_GetWorkPos(${1:viewport})$0",
		"description": "**Viewport > Work Area > Viewport_GetWorkPos**\n>= Viewport_GetPos\n**Viewport > Work Area**\nViewport minus task bars, menu bars, status bars"
	},
	"ImGui_Viewport_GetWorkSize lua": {
		"prefix": "ImGui.Viewport_GetWorkSize",
		"scope": "lua",
		"body": "ImGui.Viewport_GetWorkSize(${1:viewport})$0",
		"description": "**Viewport > Work Area > Viewport_GetWorkSize**\n<= Viewport_GetSize\n**Viewport > Work Area**\nViewport minus task bars, menu bars, status bars"
	},
	"InputFlags_None lua": {
		"prefix": "ImGui.InputFlags_None",
		"scope": "lua",
		"body": "ImGui.InputFlags_None$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Shortcuts > Flags > InputFlags_None**\n**Keyboard & Mouse > Shortcuts**\nKey chords can combine a Key_* and a Mod_* value. For example: `Mod_Ctrl | Key_C`.\nOnly Mod_* values can be combined a Key_* value. Another Key_* value cannot be combined.\nSeveral callers may register interest in a shortcut, and only one owner gets it.\nParent -> call Shortcut(Ctrl+S) // When Parent is focused, Parent gets the shortcut.\nChild1 -> call Shortcut(Ctrl+S) // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)\nChild2 -> no call               // When Child2 is focused, Parent gets the shortcut.\nThe whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.\nThis is an important property as it facilitate working with foreign code or larger codebase.\nTo understand the difference:\n- IsKeyChordPressed compares modifiers and calls IsKeyPressed -> function has no side-effect.\n- Shortcut submits a route, routes are resolved, if it currently can be routed it\ncalls IsKeyChordPressed -> function has (desirable) side-effects as it can\nprevents another call from getting the route.\nRegistered routes may be visualized via Metrics/Debugger > Inputs (ShowMetricsWindow).\n@since 0.9.2\n "
	},
	"InputFlags_Repeat lua": {
		"prefix": "ImGui.InputFlags_Repeat",
		"scope": "lua",
		"body": "ImGui.InputFlags_Repeat$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Shortcuts > Flags > InputFlags_Repeat**\nEnable repeat. Return true on successive repeats.\n**Keyboard & Mouse > Shortcuts**\nKey chords can combine a Key_* and a Mod_* value. For example: `Mod_Ctrl | Key_C`.\nOnly Mod_* values can be combined a Key_* value. Another Key_* value cannot be combined.\nSeveral callers may register interest in a shortcut, and only one owner gets it.\nParent -> call Shortcut(Ctrl+S) // When Parent is focused, Parent gets the shortcut.\nChild1 -> call Shortcut(Ctrl+S) // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)\nChild2 -> no call               // When Child2 is focused, Parent gets the shortcut.\nThe whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.\nThis is an important property as it facilitate working with foreign code or larger codebase.\nTo understand the difference:\n- IsKeyChordPressed compares modifiers and calls IsKeyPressed -> function has no side-effect.\n- Shortcut submits a route, routes are resolved, if it currently can be routed it\ncalls IsKeyChordPressed -> function has (desirable) side-effects as it can\nprevents another call from getting the route.\nRegistered routes may be visualized via Metrics/Debugger > Inputs (ShowMetricsWindow).\n@since 0.9.2\n "
	},
	"InputFlags_RouteActive lua": {
		"prefix": "ImGui.InputFlags_RouteActive",
		"scope": "lua",
		"body": "ImGui.InputFlags_RouteActive$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Shortcuts > Flags > Routing policies > InputFlags_RouteActive**\nRoute to active item only.\n**Keyboard & Mouse > Shortcuts > Flags > Routing policies**\nRouteGlobal+OverActive >> RouteActive or RouteFocused (if owner is active item)\n>> RouteGlobal+OverFocused >> RouteFocused (if in focused window stack) >> RouteGlobal.\nDefault policy is RouteFocused. Can select only one policy among all available.\n**Keyboard & Mouse > Shortcuts**\nKey chords can combine a Key_* and a Mod_* value. For example: `Mod_Ctrl | Key_C`.\nOnly Mod_* values can be combined a Key_* value. Another Key_* value cannot be combined.\nSeveral callers may register interest in a shortcut, and only one owner gets it.\nParent -> call Shortcut(Ctrl+S) // When Parent is focused, Parent gets the shortcut.\nChild1 -> call Shortcut(Ctrl+S) // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)\nChild2 -> no call               // When Child2 is focused, Parent gets the shortcut.\nThe whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.\nThis is an important property as it facilitate working with foreign code or larger codebase.\nTo understand the difference:\n- IsKeyChordPressed compares modifiers and calls IsKeyPressed -> function has no side-effect.\n- Shortcut submits a route, routes are resolved, if it currently can be routed it\ncalls IsKeyChordPressed -> function has (desirable) side-effects as it can\nprevents another call from getting the route.\nRegistered routes may be visualized via Metrics/Debugger > Inputs (ShowMetricsWindow).\n@since 0.9.2\n "
	},
	"InputFlags_RouteAlways lua": {
		"prefix": "ImGui.InputFlags_RouteAlways",
		"scope": "lua",
		"body": "ImGui.InputFlags_RouteAlways$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Shortcuts > Flags > Routing policies > InputFlags_RouteAlways**\nDo not register route, poll keys directly.\n**Keyboard & Mouse > Shortcuts > Flags > Routing policies**\nRouteGlobal+OverActive >> RouteActive or RouteFocused (if owner is active item)\n>> RouteGlobal+OverFocused >> RouteFocused (if in focused window stack) >> RouteGlobal.\nDefault policy is RouteFocused. Can select only one policy among all available.\n**Keyboard & Mouse > Shortcuts**\nKey chords can combine a Key_* and a Mod_* value. For example: `Mod_Ctrl | Key_C`.\nOnly Mod_* values can be combined a Key_* value. Another Key_* value cannot be combined.\nSeveral callers may register interest in a shortcut, and only one owner gets it.\nParent -> call Shortcut(Ctrl+S) // When Parent is focused, Parent gets the shortcut.\nChild1 -> call Shortcut(Ctrl+S) // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)\nChild2 -> no call               // When Child2 is focused, Parent gets the shortcut.\nThe whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.\nThis is an important property as it facilitate working with foreign code or larger codebase.\nTo understand the difference:\n- IsKeyChordPressed compares modifiers and calls IsKeyPressed -> function has no side-effect.\n- Shortcut submits a route, routes are resolved, if it currently can be routed it\ncalls IsKeyChordPressed -> function has (desirable) side-effects as it can\nprevents another call from getting the route.\nRegistered routes may be visualized via Metrics/Debugger > Inputs (ShowMetricsWindow).\n@since 0.9.2\n "
	},
	"InputFlags_RouteFocused lua": {
		"prefix": "ImGui.InputFlags_RouteFocused",
		"scope": "lua",
		"body": "ImGui.InputFlags_RouteFocused$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Shortcuts > Flags > Routing policies > InputFlags_RouteFocused**\nRoute to windows in the focus stack. Deep-most focused window takes inputs.\nActive item takes inputs over deep-most focused window.\n**Keyboard & Mouse > Shortcuts > Flags > Routing policies**\nRouteGlobal+OverActive >> RouteActive or RouteFocused (if owner is active item)\n>> RouteGlobal+OverFocused >> RouteFocused (if in focused window stack) >> RouteGlobal.\nDefault policy is RouteFocused. Can select only one policy among all available.\n**Keyboard & Mouse > Shortcuts**\nKey chords can combine a Key_* and a Mod_* value. For example: `Mod_Ctrl | Key_C`.\nOnly Mod_* values can be combined a Key_* value. Another Key_* value cannot be combined.\nSeveral callers may register interest in a shortcut, and only one owner gets it.\nParent -> call Shortcut(Ctrl+S) // When Parent is focused, Parent gets the shortcut.\nChild1 -> call Shortcut(Ctrl+S) // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)\nChild2 -> no call               // When Child2 is focused, Parent gets the shortcut.\nThe whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.\nThis is an important property as it facilitate working with foreign code or larger codebase.\nTo understand the difference:\n- IsKeyChordPressed compares modifiers and calls IsKeyPressed -> function has no side-effect.\n- Shortcut submits a route, routes are resolved, if it currently can be routed it\ncalls IsKeyChordPressed -> function has (desirable) side-effects as it can\nprevents another call from getting the route.\nRegistered routes may be visualized via Metrics/Debugger > Inputs (ShowMetricsWindow).\n@since 0.9.2\n "
	},
	"InputFlags_RouteFromRootWindow lua": {
		"prefix": "ImGui.InputFlags_RouteFromRootWindow",
		"scope": "lua",
		"body": "ImGui.InputFlags_RouteFromRootWindow$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Shortcuts > Flags > InputFlags_RouteFromRootWindow**\nOption: route evaluated from the point of view of root window rather than current window.\n**Keyboard & Mouse > Shortcuts**\nKey chords can combine a Key_* and a Mod_* value. For example: `Mod_Ctrl | Key_C`.\nOnly Mod_* values can be combined a Key_* value. Another Key_* value cannot be combined.\nSeveral callers may register interest in a shortcut, and only one owner gets it.\nParent -> call Shortcut(Ctrl+S) // When Parent is focused, Parent gets the shortcut.\nChild1 -> call Shortcut(Ctrl+S) // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)\nChild2 -> no call               // When Child2 is focused, Parent gets the shortcut.\nThe whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.\nThis is an important property as it facilitate working with foreign code or larger codebase.\nTo understand the difference:\n- IsKeyChordPressed compares modifiers and calls IsKeyPressed -> function has no side-effect.\n- Shortcut submits a route, routes are resolved, if it currently can be routed it\ncalls IsKeyChordPressed -> function has (desirable) side-effects as it can\nprevents another call from getting the route.\nRegistered routes may be visualized via Metrics/Debugger > Inputs (ShowMetricsWindow).\n@since 0.9.2\n "
	},
	"InputFlags_RouteGlobal lua": {
		"prefix": "ImGui.InputFlags_RouteGlobal",
		"scope": "lua",
		"body": "ImGui.InputFlags_RouteGlobal$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Shortcuts > Flags > Routing policies > InputFlags_RouteGlobal**\nGlobal route (unless a focused window or active item registered the route).\n**Keyboard & Mouse > Shortcuts > Flags > Routing policies**\nRouteGlobal+OverActive >> RouteActive or RouteFocused (if owner is active item)\n>> RouteGlobal+OverFocused >> RouteFocused (if in focused window stack) >> RouteGlobal.\nDefault policy is RouteFocused. Can select only one policy among all available.\n**Keyboard & Mouse > Shortcuts**\nKey chords can combine a Key_* and a Mod_* value. For example: `Mod_Ctrl | Key_C`.\nOnly Mod_* values can be combined a Key_* value. Another Key_* value cannot be combined.\nSeveral callers may register interest in a shortcut, and only one owner gets it.\nParent -> call Shortcut(Ctrl+S) // When Parent is focused, Parent gets the shortcut.\nChild1 -> call Shortcut(Ctrl+S) // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)\nChild2 -> no call               // When Child2 is focused, Parent gets the shortcut.\nThe whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.\nThis is an important property as it facilitate working with foreign code or larger codebase.\nTo understand the difference:\n- IsKeyChordPressed compares modifiers and calls IsKeyPressed -> function has no side-effect.\n- Shortcut submits a route, routes are resolved, if it currently can be routed it\ncalls IsKeyChordPressed -> function has (desirable) side-effects as it can\nprevents another call from getting the route.\nRegistered routes may be visualized via Metrics/Debugger > Inputs (ShowMetricsWindow).\n@since 0.9.2\n "
	},
	"InputFlags_RouteOverActive lua": {
		"prefix": "ImGui.InputFlags_RouteOverActive",
		"scope": "lua",
		"body": "ImGui.InputFlags_RouteOverActive$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Shortcuts > Flags > InputFlags_RouteOverActive**\nGlobal route: higher priority than active item. Unlikely you need to\nuse that: will interfere with every active items, e.g. Ctrl+A registered by\nInputText will be overridden by this. May not be fully honored as user/internal\ncode is likely to always assume they can access keys when active.\n**Keyboard & Mouse > Shortcuts**\nKey chords can combine a Key_* and a Mod_* value. For example: `Mod_Ctrl | Key_C`.\nOnly Mod_* values can be combined a Key_* value. Another Key_* value cannot be combined.\nSeveral callers may register interest in a shortcut, and only one owner gets it.\nParent -> call Shortcut(Ctrl+S) // When Parent is focused, Parent gets the shortcut.\nChild1 -> call Shortcut(Ctrl+S) // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)\nChild2 -> no call               // When Child2 is focused, Parent gets the shortcut.\nThe whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.\nThis is an important property as it facilitate working with foreign code or larger codebase.\nTo understand the difference:\n- IsKeyChordPressed compares modifiers and calls IsKeyPressed -> function has no side-effect.\n- Shortcut submits a route, routes are resolved, if it currently can be routed it\ncalls IsKeyChordPressed -> function has (desirable) side-effects as it can\nprevents another call from getting the route.\nRegistered routes may be visualized via Metrics/Debugger > Inputs (ShowMetricsWindow).\n@since 0.9.2\n "
	},
	"InputFlags_RouteOverFocused lua": {
		"prefix": "ImGui.InputFlags_RouteOverFocused",
		"scope": "lua",
		"body": "ImGui.InputFlags_RouteOverFocused$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Shortcuts > Flags > InputFlags_RouteOverFocused**\nGlobal route: higher priority than focused route\n(unless active item in focused route).\n**Keyboard & Mouse > Shortcuts**\nKey chords can combine a Key_* and a Mod_* value. For example: `Mod_Ctrl | Key_C`.\nOnly Mod_* values can be combined a Key_* value. Another Key_* value cannot be combined.\nSeveral callers may register interest in a shortcut, and only one owner gets it.\nParent -> call Shortcut(Ctrl+S) // When Parent is focused, Parent gets the shortcut.\nChild1 -> call Shortcut(Ctrl+S) // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)\nChild2 -> no call               // When Child2 is focused, Parent gets the shortcut.\nThe whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.\nThis is an important property as it facilitate working with foreign code or larger codebase.\nTo understand the difference:\n- IsKeyChordPressed compares modifiers and calls IsKeyPressed -> function has no side-effect.\n- Shortcut submits a route, routes are resolved, if it currently can be routed it\ncalls IsKeyChordPressed -> function has (desirable) side-effects as it can\nprevents another call from getting the route.\nRegistered routes may be visualized via Metrics/Debugger > Inputs (ShowMetricsWindow).\n@since 0.9.2\n "
	},
	"InputFlags_RouteUnlessBgFocused lua": {
		"prefix": "ImGui.InputFlags_RouteUnlessBgFocused",
		"scope": "lua",
		"body": "ImGui.InputFlags_RouteUnlessBgFocused$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Shortcuts > Flags > InputFlags_RouteUnlessBgFocused**\nOption: global route: will not be applied if underlying background/void is\nfocused (== no Dear ImGui windows are focused). Useful for overlay applications.\n**Keyboard & Mouse > Shortcuts**\nKey chords can combine a Key_* and a Mod_* value. For example: `Mod_Ctrl | Key_C`.\nOnly Mod_* values can be combined a Key_* value. Another Key_* value cannot be combined.\nSeveral callers may register interest in a shortcut, and only one owner gets it.\nParent -> call Shortcut(Ctrl+S) // When Parent is focused, Parent gets the shortcut.\nChild1 -> call Shortcut(Ctrl+S) // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)\nChild2 -> no call               // When Child2 is focused, Parent gets the shortcut.\nThe whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.\nThis is an important property as it facilitate working with foreign code or larger codebase.\nTo understand the difference:\n- IsKeyChordPressed compares modifiers and calls IsKeyPressed -> function has no side-effect.\n- Shortcut submits a route, routes are resolved, if it currently can be routed it\ncalls IsKeyChordPressed -> function has (desirable) side-effects as it can\nprevents another call from getting the route.\nRegistered routes may be visualized via Metrics/Debugger > Inputs (ShowMetricsWindow).\n@since 0.9.2\n "
	},
	"InputFlags_Tooltip lua": {
		"prefix": "ImGui.InputFlags_Tooltip",
		"scope": "lua",
		"body": "ImGui.InputFlags_Tooltip$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Shortcuts > Flags > InputFlags_Tooltip**\nAutomatically display a tooltip when hovering item\n**Keyboard & Mouse > Shortcuts**\nKey chords can combine a Key_* and a Mod_* value. For example: `Mod_Ctrl | Key_C`.\nOnly Mod_* values can be combined a Key_* value. Another Key_* value cannot be combined.\nSeveral callers may register interest in a shortcut, and only one owner gets it.\nParent -> call Shortcut(Ctrl+S) // When Parent is focused, Parent gets the shortcut.\nChild1 -> call Shortcut(Ctrl+S) // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)\nChild2 -> no call               // When Child2 is focused, Parent gets the shortcut.\nThe whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.\nThis is an important property as it facilitate working with foreign code or larger codebase.\nTo understand the difference:\n- IsKeyChordPressed compares modifiers and calls IsKeyPressed -> function has no side-effect.\n- Shortcut submits a route, routes are resolved, if it currently can be routed it\ncalls IsKeyChordPressed -> function has (desirable) side-effects as it can\nprevents another call from getting the route.\nRegistered routes may be visualized via Metrics/Debugger > Inputs (ShowMetricsWindow).\n@since 0.9.2\n "
	},
	"InputTextFlags_AllowTabInput lua": {
		"prefix": "ImGui.InputTextFlags_AllowTabInput",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_AllowTabInput$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Inputs > InputTextFlags_AllowTabInput**\nPressing TAB input a 't' character into the text field.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.1\n "
	},
	"InputTextFlags_AlwaysOverwrite lua": {
		"prefix": "ImGui.InputTextFlags_AlwaysOverwrite",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_AlwaysOverwrite$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Other options > InputTextFlags_AlwaysOverwrite**\nOverwrite mode.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.2\n "
	},
	"InputTextFlags_AutoSelectAll lua": {
		"prefix": "ImGui.InputTextFlags_AutoSelectAll",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_AutoSelectAll$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Other options > InputTextFlags_AutoSelectAll**\nSelect entire text when first taking mouse focus.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.1\n "
	},
	"InputTextFlags_CallbackAlways lua": {
		"prefix": "ImGui.InputTextFlags_CallbackAlways",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_CallbackAlways$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Callback features > InputTextFlags_CallbackAlways**\nCallback on each iteration. User code may query cursor position, modify text buffer.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.8.5\n "
	},
	"InputTextFlags_CallbackCharFilter lua": {
		"prefix": "ImGui.InputTextFlags_CallbackCharFilter",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_CallbackCharFilter$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Callback features > InputTextFlags_CallbackCharFilter**\nCallback on character inputs to replace or discard them.\nModify 'EventChar' to replace or 'EventChar = 0' to discard.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.8.5\n "
	},
	"InputTextFlags_CallbackCompletion lua": {
		"prefix": "ImGui.InputTextFlags_CallbackCompletion",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_CallbackCompletion$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Callback features > InputTextFlags_CallbackCompletion**\nCallback on pressing TAB (for completion handling).\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.8.5\n "
	},
	"InputTextFlags_CallbackEdit lua": {
		"prefix": "ImGui.InputTextFlags_CallbackEdit",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_CallbackEdit$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Callback features > InputTextFlags_CallbackEdit**\nCallback on any edit (note that InputText() already returns true on edit,\nthe callback is useful mainly to manipulate the underlying buffer while\nfocus is active).\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.8.5\n "
	},
	"InputTextFlags_CallbackHistory lua": {
		"prefix": "ImGui.InputTextFlags_CallbackHistory",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_CallbackHistory$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Callback features > InputTextFlags_CallbackHistory**\nCallback on pressing Up/Down arrows (for history handling).\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.8.5\n "
	},
	"InputTextFlags_CharsDecimal lua": {
		"prefix": "ImGui.InputTextFlags_CharsDecimal",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_CharsDecimal$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Basic filters > InputTextFlags_CharsDecimal**\nAllow 0123456789.+-*/.\n**Text & Scalar Input > Flags > Basic filters**\nSee also InputTextFlags_CallbackCharFilter.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.1\n "
	},
	"InputTextFlags_CharsHexadecimal lua": {
		"prefix": "ImGui.InputTextFlags_CharsHexadecimal",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_CharsHexadecimal$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Basic filters > InputTextFlags_CharsHexadecimal**\nAllow 0123456789ABCDEFabcdef.\n**Text & Scalar Input > Flags > Basic filters**\nSee also InputTextFlags_CallbackCharFilter.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.1\n "
	},
	"InputTextFlags_CharsNoBlank lua": {
		"prefix": "ImGui.InputTextFlags_CharsNoBlank",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_CharsNoBlank$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Basic filters > InputTextFlags_CharsNoBlank**\nFilter out spaces, tabs.\n**Text & Scalar Input > Flags > Basic filters**\nSee also InputTextFlags_CallbackCharFilter.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.1\n "
	},
	"InputTextFlags_CharsScientific lua": {
		"prefix": "ImGui.InputTextFlags_CharsScientific",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_CharsScientific$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Basic filters > InputTextFlags_CharsScientific**\nAllow 0123456789.+-*/eE (Scientific notation input).\n**Text & Scalar Input > Flags > Basic filters**\nSee also InputTextFlags_CallbackCharFilter.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.1\n "
	},
	"InputTextFlags_CharsUppercase lua": {
		"prefix": "ImGui.InputTextFlags_CharsUppercase",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_CharsUppercase$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Basic filters > InputTextFlags_CharsUppercase**\nTurn a..z into A..Z.\n**Text & Scalar Input > Flags > Basic filters**\nSee also InputTextFlags_CallbackCharFilter.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.1\n "
	},
	"InputTextFlags_CtrlEnterForNewLine lua": {
		"prefix": "ImGui.InputTextFlags_CtrlEnterForNewLine",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_CtrlEnterForNewLine$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Inputs > InputTextFlags_CtrlEnterForNewLine**\nIn multi-line mode, unfocus with Enter, add new line with Ctrl+Enter\n(default is opposite: unfocus with Ctrl+Enter, add line with Enter).\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.1\n "
	},
	"InputTextFlags_DisplayEmptyRefVal lua": {
		"prefix": "ImGui.InputTextFlags_DisplayEmptyRefVal",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_DisplayEmptyRefVal$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Other options > InputTextFlags_DisplayEmptyRefVal**\nInputDouble(), InputInt() etc. only: when value is zero, do not display it.\nGenerally used with InputTextFlags_ParseEmptyRefVal.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.9.2\n "
	},
	"InputTextFlags_EnterReturnsTrue lua": {
		"prefix": "ImGui.InputTextFlags_EnterReturnsTrue",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_EnterReturnsTrue$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Inputs > InputTextFlags_EnterReturnsTrue**\nReturn 'true' when Enter is pressed (as opposed to every time the value was\nmodified). Consider looking at the IsItemDeactivatedAfterEdit function.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.1\n "
	},
	"InputTextFlags_EscapeClearsAll lua": {
		"prefix": "ImGui.InputTextFlags_EscapeClearsAll",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_EscapeClearsAll$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Inputs > InputTextFlags_EscapeClearsAll**\nEscape key clears content if not empty, and deactivate otherwise\n(constrast to default behavior of Escape to revert).\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.8\n "
	},
	"InputTextFlags_NoHorizontalScroll lua": {
		"prefix": "ImGui.InputTextFlags_NoHorizontalScroll",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_NoHorizontalScroll$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Other options > InputTextFlags_NoHorizontalScroll**\nDisable following the cursor horizontally.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.1\n "
	},
	"InputTextFlags_NoUndoRedo lua": {
		"prefix": "ImGui.InputTextFlags_NoUndoRedo",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_NoUndoRedo$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Other options > InputTextFlags_NoUndoRedo**\nDisable undo/redo. Note that input text owns the text data while active.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.1\n "
	},
	"InputTextFlags_None lua": {
		"prefix": "ImGui.InputTextFlags_None",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_None$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > InputTextFlags_None**\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.1\n "
	},
	"InputTextFlags_ParseEmptyRefVal lua": {
		"prefix": "ImGui.InputTextFlags_ParseEmptyRefVal",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_ParseEmptyRefVal$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Other options > InputTextFlags_ParseEmptyRefVal**\nInputDouble(), InputInt() etc. only: parse empty string as zero value.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.9.2\n "
	},
	"InputTextFlags_Password lua": {
		"prefix": "ImGui.InputTextFlags_Password",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_Password$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Other options > InputTextFlags_Password**\nPassword mode, display all characters as '*'.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.1\n "
	},
	"InputTextFlags_ReadOnly lua": {
		"prefix": "ImGui.InputTextFlags_ReadOnly",
		"scope": "lua",
		"body": "ImGui.InputTextFlags_ReadOnly$0",
		"description": "@type integer\n---\n**Text & Scalar Input > Flags > Other options > InputTextFlags_ReadOnly**\nRead-only mode.\n**Text & Scalar Input > Flags**\nMost of these are only useful for InputText*() and not for InputDoubleX,\nInputIntX etc.\n(Those are per-item flags. There are shared flags in SetConfigVar:\nConfigVar_InputTextCursorBlink and ConfigVar_InputTextEnterKeepActive.)\n@since 0.1\n "
	},
	"InsertAutomationItem lua": {
		"prefix": "r.InsertAutomationItem",
		"scope": "lua",
		"body": "r.InsertAutomationItem(${1:env}, ${2:pool_id}, ${3:position}, ${4:length})$0",
		"description": "Insert a new automation item. pool_id < 0 collects existing envelope points into the automation item; if pool_id is >= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). Returns the index of the item, suitable for passing to other automation item API functions. See GetSetAutomationItemInfo."
	},
	"InsertEnvelopePoint lua": {
		"prefix": "r.InsertEnvelopePoint",
		"scope": "lua",
		"body": "r.InsertEnvelopePoint(${1:envelope}, ${2:time}, ${3:value}, ${4:shape}, ${5:tension}, ${6:selected}, ${7:noSortIn})$0",
		"description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See InsertEnvelopePointEx."
	},
	"InsertEnvelopePointEx lua": {
		"prefix": "r.InsertEnvelopePointEx",
		"scope": "lua",
		"body": "r.InsertEnvelopePointEx(${1:envelope}, ${2:autoitem_idx}, ${3:time}, ${4:value}, ${5:shape}, ${6:tension}, ${7:selected}, ${8:noSortIn})$0",
		"description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, DeleteEnvelopePointEx."
	},
	"InsertMedia lua": {
		"prefix": "r.InsertMedia",
		"scope": "lua",
		"body": "r.InsertMedia(${1:file}, ${2:mode})$0",
		"description": "mode: 0=add to current track, 1=add new track, 3=add to selected items as takes, &4=stretch/loop to fit time sel, &8=try to match tempo 1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x, &64=don't preserve pitch when matching tempo, &128=no loop/section if startpct/endpct set, &256=force loop regardless of global preference for looping imported items, &512=use high word as absolute track index if mode&3==0 or mode&2048, &1024=insert into reasamplomatic on a new track (add 1 to insert on last selected track), &2048=insert into open reasamplomatic instance (add 512 to use high word as absolute track index), &4096=move to source preferred position (BWF start offset), &8192=reverse. &16384=apply ripple according to project setting"
	},
	"InsertMediaSection lua": {
		"prefix": "r.InsertMediaSection",
		"scope": "lua",
		"body": "r.InsertMediaSection(${1:file}, ${2:mode}, ${3:startpct}, ${4:endpct}, ${5:pitchshift})$0",
		"description": "See InsertMedia."
	},
	"InsertTrackAtIndex lua": {
		"prefix": "r.InsertTrackAtIndex",
		"scope": "lua",
		"body": "r.InsertTrackAtIndex(${1:idx}, ${2:wantDefaults})$0",
		"description": "inserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env. Superseded, see InsertTrackInProject"
	},
	"InsertTrackInProject lua": {
		"prefix": "r.InsertTrackInProject",
		"scope": "lua",
		"body": "r.InsertTrackInProject(0, ${2:idx}, ${3:flags})$0",
		"description": "inserts a track in project proj at idx, this will be clamped to 0..CountTracks(proj). flags&1 for default envelopes/FX, otherwise no enabled fx/envelopes will be added."
	},
	"IsMediaExtension lua": {
		"prefix": "r.IsMediaExtension",
		"scope": "lua",
		"body": "r.IsMediaExtension(${1:ext}, ${2:wantOthers})$0",
		"description": "Tests a file extension (i.e. 'wav' or 'mid') to see if it's a media extension.\nIf wantOthers is set, then 'RPP', 'TXT' and other project-type formats will also pass."
	},
	"IsMediaItemSelected lua": {
		"prefix": "r.IsMediaItemSelected",
		"scope": "lua",
		"body": "r.IsMediaItemSelected(${1:item})$0",
		"description": ""
	},
	"IsProjectDirty lua": {
		"prefix": "r.IsProjectDirty",
		"scope": "lua",
		"body": "r.IsProjectDirty(0)$0",
		"description": "Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences."
	},
	"IsTrackSelected lua": {
		"prefix": "r.IsTrackSelected",
		"scope": "lua",
		"body": "r.IsTrackSelected(${1:track})$0",
		"description": ""
	},
	"IsTrackVisible lua": {
		"prefix": "r.IsTrackVisible",
		"scope": "lua",
		"body": "r.IsTrackVisible(${1:track}, ${2:mixer})$0",
		"description": "If mixer==true, returns true if the track is visible in the mixer.  If mixer==false, returns true if the track is visible in the track control panel."
	},
	"JB_GetSWSExtraProjectNotes lua": {
		"prefix": "r.JB_GetSWSExtraProjectNotes",
		"scope": "lua",
		"body": "r.JB_GetSWSExtraProjectNotes(0)$0",
		"description": ""
	},
	"JB_SetSWSExtraProjectNotes lua": {
		"prefix": "r.JB_SetSWSExtraProjectNotes",
		"scope": "lua",
		"body": "r.JB_SetSWSExtraProjectNotes(0, ${2:str})$0",
		"description": ""
	},
	"JS_Actions_CountShortcuts lua": {
		"prefix": "r.JS_Actions_CountShortcuts",
		"scope": "lua",
		"body": "r.JS_Actions_CountShortcuts(${1:section}, ${2:cmdID})$0",
		"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer."
	},
	"JS_Actions_DeleteShortcut lua": {
		"prefix": "r.JS_Actions_DeleteShortcut",
		"scope": "lua",
		"body": "r.JS_Actions_DeleteShortcut(${1:section}, ${2:cmdID}, ${3:shortcutidx})$0",
		"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer."
	},
	"JS_Actions_DoShortcutDialog lua": {
		"prefix": "r.JS_Actions_DoShortcutDialog",
		"scope": "lua",
		"body": "r.JS_Actions_DoShortcutDialog(${1:section}, ${2:cmdID}, ${3:shortcutidx})$0",
		"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.\nIf the shortcut index is higher than the current number of shortcuts, it will add a new shortcut."
	},
	"JS_Actions_GetShortcutDesc lua": {
		"prefix": "r.JS_Actions_GetShortcutDesc",
		"scope": "lua",
		"body": "rv, desc = r.JS_Actions_GetShortcutDesc(${1:section}, ${2:cmdID}, ${3:shortcutidx})$0",
		"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer."
	},
	"JS_Byte lua": {
		"prefix": "r.JS_Byte",
		"scope": "lua",
		"body": "r.JS_Byte(${1:pointer}, ${2:offset})$0",
		"description": "Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each."
	},
	"JS_Composite lua": {
		"prefix": "r.JS_Composite",
		"scope": "lua",
		"body": "r.JS_Composite(${1:windowHWND}, ${2:dstx}, ${3:dsty}, ${4:dstw}, ${5:dsth}, ${6:sysBitmap}, ${7:srcx}, ${8:srcy}, ${9:srcw}, ${10:srch}, ${11:autoUpdate})$0",
		"description": "Composites a LICE bitmap with a REAPER window.  Each time that the window is re-drawn, the bitmap will be blitted over the window's client area (with per-pixel alpha blending).\n * If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.\n * autoUpdate is an optional parameter that is false by default. If true, JS_Composite will automatically invalidate and re-draw the part of the window that covers the current position of the bitmap, and if the bitmap is being moved, also the previous position. (If only one or a handful of bitmaps are being moved across the screen, autoUpdate should result in smoother animation on WindowsOS; if numerous bitmaps are spread over the entire window, it may be faster to disable autoUpdate and instead call JS_Window_InvalidateRect explicitly once all bitmaps have been moved.)\n * InvalidateRect should also be called whenever the contents of the bitmap contents have been changed, but not the position, to trigger a window update.\n * On WindowsOS, the key to reducing flickering is to slow down the frequency at which the window is re-drawn. InvalidateRect should only be called when absolutely necessary, preferably not more than 20 times per second.  (Also refer to the JS_Composite_Delay function.)\n * On WindowsOS, flickering can further be reduced by keeping the invalidated area as small as possible, covering only the bitmaps that have been edited or moved.  However, if numerous bitmaps are spread over the entire window, it may be faster to simply invalidate the entire client area. \n * This function should not be applied directly to top-level windows, but rather to child windows.\n * Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.\n * On WindowsOS, GDI blitting does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.\nReturns:\n1 if successful, otherwise -1 = windowHWND is not a window, -3 = Could not obtain the original window process, -4 = sysBitmap is not a LICE bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the window HDC, -7 = Error when subclassing to new window process."
	},
	"JS_Composite_Delay lua": {
		"prefix": "r.JS_Composite_Delay",
		"scope": "lua",
		"body": "r.JS_Composite_Delay(${1:windowHWND}, ${2:minTime}, ${3:maxTime}, ${4:numBitmapsWhenMax})$0",
		"description": "On WindowsOS, flickering of composited images can be improved considerably by slowing the refresh rate of the window.  The optimal refresh rate may depend on the number of composited bitmaps.\nminTime is the minimum refresh delay, in seconds, when only one bitmap is composited onto the window.  The delay time will increase linearly with the number of bitmaps, up to a maximum of maxTime when numBitmapsWhenMax is reached.\nIf both minTime and maxTime are 0, all delay settings for the window are cleared.\nReturns:\n * retval = 1 if successful, 0 if arguments are invalid (i.e. if maxTime < minTime, or maxBitmaps < 1).\n * If delay times have not previously been set for this window, prev time values are 0."
	},
	"JS_Composite_ListBitmaps lua": {
		"prefix": "r.JS_Composite_ListBitmaps",
		"scope": "lua",
		"body": "r.JS_Composite_ListBitmaps(${1:windowHWND})$0",
		"description": "Returns all bitmaps composited to the given window.\nThe list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap* pointer.\nretval is the number of linked bitmaps found, or negative if an error occured."
	},
	"JS_Composite_Unlink lua": {
		"prefix": "r.JS_Composite_Unlink",
		"scope": "lua",
		"body": "r.JS_Composite_Unlink(${1:windowHWND}, ${2:bitmap}, ${3:autoUpdate})$0",
		"description": "Unlinks the window and bitmap.\n * autoUpdate is an optional parameter. If unlinking a single bitmap and autoUpdate is true, the function will automatically re-draw the window to remove the blitted image.\nIf no bitmap is specified, all bitmaps composited to the window will be unlinked -- even those by other scripts."
	},
	"JS_Dialog_BrowseForFolder lua": {
		"prefix": "r.JS_Dialog_BrowseForFolder",
		"scope": "lua",
		"body": "r.JS_Dialog_BrowseForFolder(${1:caption}, ${2:initialFolder})$0",
		"description": "retval is 1 if a file was selected, 0 if the user cancelled the dialog, and -1 if an error occurred."
	},
	"JS_Dialog_BrowseForOpenFiles lua": {
		"prefix": "r.JS_Dialog_BrowseForOpenFiles",
		"scope": "lua",
		"body": "r.JS_Dialog_BrowseForOpenFiles(${1:windowTitle}, ${2:initialFolder}, ${3:initialFile}, ${4:extensionList}, ${5:allowMultiple})$0",
		"description": "If allowMultiple is true, multiple files may be selected. The returned string is \\0-separated, with the first substring containing the folder path and subsequent substrings containing the file names.\n * On macOS, the first substring may be empty, and each file name will then contain its entire path.\n * This function only allows selection of existing files, and does not allow creation of new files.\nextensionList is a string containing pairs of \\0-terminated substrings. The last substring must be terminated by two \\0 characters. Each pair defines one filter pattern:\n * The first substring in each pair describes the filter in user-readable form (for example, 'Lua script files (*.lua)') and will be displayed in the dialog box.\n * The second substring specifies the filter that the operating system must use to search for the files (for example, '*.txt'; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, '*.lua;*.eel').\nAn example of an extensionList string:\n'ReaScript files\\0*.lua;*.eel\\0Lua files (.lua)\\0*.lua\\0EEL files (.eel)\\0*.eel\\0\\0'.\nOn macOS, file dialogs do not accept empty extensionLists, nor wildcard extensions (such as 'All files\\0*.*\\0\\0'), so each acceptable extension must be listed explicitly. On Linux and Windows, wildcard extensions are acceptable, and if the extensionList string is empty, the dialog will display a default 'All files (*.*)' filter.\nretval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.\nDisplaying \\0-separated strings:\n * REAPER's IDE and ShowConsoleMsg only display strings up to the first \\0 byte. If multiple files were selected, only the first substring containing the path will be displayed. This is not a problem for Lua or EEL, which can access the full string beyond the first \\0 byte as usual."
	},
	"JS_Dialog_BrowseForSaveFile lua": {
		"prefix": "r.JS_Dialog_BrowseForSaveFile",
		"scope": "lua",
		"body": "r.JS_Dialog_BrowseForSaveFile(${1:windowTitle}, ${2:initialFolder}, ${3:initialFile}, ${4:extensionList})$0",
		"description": "retval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.\nextensionList is as described for JS_Dialog_BrowseForOpenFiles."
	},
	"JS_Double lua": {
		"prefix": "r.JS_Double",
		"scope": "lua",
		"body": "r.JS_Double(${1:pointer}, ${2:offset})$0",
		"description": "Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each."
	},
	"JS_File_Stat lua": {
		"prefix": "r.JS_File_Stat",
		"scope": "lua",
		"body": "r.JS_File_Stat(${1:filePath})$0",
		"description": "Returns information about a file.\ncTime is not implemented on all systems. If it does return a time, the value may differ depending on the OS: on WindowsOS, it may refer to the time that the file was either created or copied, whereas on Linux and macOS, it may refer to the time of last status change.\nretval is 0 if successful, negative if not."
	},
	"JS_GDI_Blit lua": {
		"prefix": "r.JS_GDI_Blit",
		"scope": "lua",
		"body": "r.JS_GDI_Blit(${1:destHDC}, ${2:dstx}, ${3:dsty}, ${4:sourceHDC}, ${5:srcx}, ${6:srxy}, ${7:width}, ${8:height}, ${9:mode})$0",
		"description": "Blits between two device contexts, which may include LICE 'system bitmaps'.\nmode: Optional parameter. 'SRCCOPY' by default, or specify 'ALPHA' to enable per-pixel alpha blending.\nWARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect."
	},
	"JS_GDI_CreateFillBrush lua": {
		"prefix": "r.JS_GDI_CreateFillBrush",
		"scope": "lua",
		"body": "r.JS_GDI_CreateFillBrush(${1:color})$0",
		"description": ""
	},
	"JS_GDI_CreateFont lua": {
		"prefix": "r.JS_GDI_CreateFont",
		"scope": "lua",
		"body": "r.JS_GDI_CreateFont(${1:height}, ${2:weight}, ${3:angle}, ${4:italic}, ${5:underline}, ${6:strike}, ${7:fontName})$0",
		"description": "Parameters:\n * weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.\n * angle: the angle, in tenths of degrees, between the text and the x-axis of the device.\n * fontName: If empty string '', uses first font that matches the other specified attributes.\nNote: Text color must be set separately."
	},
	"JS_GDI_CreatePen lua": {
		"prefix": "r.JS_GDI_CreatePen",
		"scope": "lua",
		"body": "r.JS_GDI_CreatePen(${1:width}, ${2:color})$0",
		"description": ""
	},
	"JS_GDI_DeleteObject lua": {
		"prefix": "r.JS_GDI_DeleteObject",
		"scope": "lua",
		"body": "r.JS_GDI_DeleteObject(${1:GDIObject})$0",
		"description": ""
	},
	"JS_GDI_DrawText lua": {
		"prefix": "r.JS_GDI_DrawText",
		"scope": "lua",
		"body": "r.JS_GDI_DrawText(${1:deviceHDC}, ${2:text}, ${3:len}, ${4:left}, ${5:top}, ${6:right}, ${7:bottom}, ${8:align})$0",
		"description": "Parameters:\n * align: Combination of: 'TOP', 'VCENTER', 'LEFT', 'HCENTER', 'RIGHT', 'BOTTOM', 'WORDBREAK', 'SINGLELINE', 'NOCLIP', 'CALCRECT', 'NOPREFIX' or 'ELLIPSIS'"
	},
	"JS_GDI_FillEllipse lua": {
		"prefix": "r.JS_GDI_FillEllipse",
		"scope": "lua",
		"body": "r.JS_GDI_FillEllipse(${1:deviceHDC}, ${2:left}, ${3:top}, ${4:right}, ${5:bottom})$0",
		"description": ""
	},
	"JS_GDI_FillPolygon lua": {
		"prefix": "r.JS_GDI_FillPolygon",
		"scope": "lua",
		"body": "r.JS_GDI_FillPolygon(${1:deviceHDC}, ${2:packedX}, ${3:packedY}, ${4:numPoints})$0",
		"description": "packedX and packedY are strings of points, each packed as '<i4'."
	},
	"JS_GDI_FillRect lua": {
		"prefix": "r.JS_GDI_FillRect",
		"scope": "lua",
		"body": "r.JS_GDI_FillRect(${1:deviceHDC}, ${2:left}, ${3:top}, ${4:right}, ${5:bottom})$0",
		"description": ""
	},
	"JS_GDI_FillRoundRect lua": {
		"prefix": "r.JS_GDI_FillRoundRect",
		"scope": "lua",
		"body": "r.JS_GDI_FillRoundRect(${1:deviceHDC}, ${2:left}, ${3:top}, ${4:right}, ${5:bottom}, ${6:xrnd}, ${7:yrnd})$0",
		"description": ""
	},
	"JS_GDI_GetClientDC lua": {
		"prefix": "r.JS_GDI_GetClientDC",
		"scope": "lua",
		"body": "r.JS_GDI_GetClientDC(${1:windowHWND})$0",
		"description": "Returns the device context for the client area of the specified window."
	},
	"JS_GDI_GetScreenDC lua": {
		"prefix": "r.JS_GDI_GetScreenDC",
		"scope": "lua",
		"body": "r.JS_GDI_GetScreenDC()$0",
		"description": "Returns a device context for the entire screen.\nWARNING: Only available on Windows, not Linux or macOS."
	},
	"JS_GDI_GetSysColor lua": {
		"prefix": "r.JS_GDI_GetSysColor",
		"scope": "lua",
		"body": "r.JS_GDI_GetSysColor(${1:GUIElement})$0",
		"description": ""
	},
	"JS_GDI_GetTextColor lua": {
		"prefix": "r.JS_GDI_GetTextColor",
		"scope": "lua",
		"body": "r.JS_GDI_GetTextColor(${1:deviceHDC})$0",
		"description": ""
	},
	"JS_GDI_GetWindowDC lua": {
		"prefix": "r.JS_GDI_GetWindowDC",
		"scope": "lua",
		"body": "r.JS_GDI_GetWindowDC(${1:windowHWND})$0",
		"description": "Returns the device context for the entire window, including title bar and frame."
	},
	"JS_GDI_Line lua": {
		"prefix": "r.JS_GDI_Line",
		"scope": "lua",
		"body": "r.JS_GDI_Line(${1:deviceHDC}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2})$0",
		"description": ""
	},
	"JS_GDI_Polyline lua": {
		"prefix": "r.JS_GDI_Polyline",
		"scope": "lua",
		"body": "r.JS_GDI_Polyline(${1:deviceHDC}, ${2:packedX}, ${3:packedY}, ${4:numPoints})$0",
		"description": "packedX and packedY are strings of points, each packed as '<i4'."
	},
	"JS_GDI_ReleaseDC lua": {
		"prefix": "r.JS_GDI_ReleaseDC",
		"scope": "lua",
		"body": "r.JS_GDI_ReleaseDC(${1:deviceHDC}, ${2:windowHWND})$0",
		"description": "To release a window HDC, both arguments must be supplied: the HWND as well as the HDC.  To release a screen DC, only the HDC needs to be supplied.  \nFor compatibility with previous versions, the HWND and HDC can be supplied in any order.\nNOTE: Any GDI HDC should be released immediately after drawing, and deferred scripts should get and release new DCs in each cycle."
	},
	"JS_GDI_SelectObject lua": {
		"prefix": "r.JS_GDI_SelectObject",
		"scope": "lua",
		"body": "r.JS_GDI_SelectObject(${1:deviceHDC}, ${2:GDIObject})$0",
		"description": "Activates a font, pen, or fill brush for subsequent drawing in the specified device context."
	},
	"JS_GDI_SetPixel lua": {
		"prefix": "r.JS_GDI_SetPixel",
		"scope": "lua",
		"body": "r.JS_GDI_SetPixel(${1:deviceHDC}, ${2:x}, ${3:y}, ${4:color})$0",
		"description": ""
	},
	"JS_GDI_SetTextBkColor lua": {
		"prefix": "r.JS_GDI_SetTextBkColor",
		"scope": "lua",
		"body": "r.JS_GDI_SetTextBkColor(${1:deviceHDC}, ${2:color})$0",
		"description": ""
	},
	"JS_GDI_SetTextBkMode lua": {
		"prefix": "r.JS_GDI_SetTextBkMode",
		"scope": "lua",
		"body": "r.JS_GDI_SetTextBkMode(${1:deviceHDC}, ${2:mode})$0",
		"description": ""
	},
	"JS_GDI_SetTextColor lua": {
		"prefix": "r.JS_GDI_SetTextColor",
		"scope": "lua",
		"body": "r.JS_GDI_SetTextColor(${1:deviceHDC}, ${2:color})$0",
		"description": ""
	},
	"JS_GDI_StretchBlit lua": {
		"prefix": "r.JS_GDI_StretchBlit",
		"scope": "lua",
		"body": "r.JS_GDI_StretchBlit(${1:destHDC}, ${2:dstx}, ${3:dsty}, ${4:dstw}, ${5:dsth}, ${6:sourceHDC}, ${7:srcx}, ${8:srxy}, ${9:srcw}, ${10:srch}, ${11:mode})$0",
		"description": "Blits between two device contexts, which may include LICE 'system bitmaps'.\nmodeOptional: 'SRCCOPY' by default, or specify 'ALPHA' to enable per-pixel alpha blending.\nWARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect."
	},
	"JS_Header_GetItemCount lua": {
		"prefix": "r.JS_Header_GetItemCount",
		"scope": "lua",
		"body": "r.JS_Header_GetItemCount(${1:headerHWND})$0",
		"description": ""
	},
	"JS_Int lua": {
		"prefix": "r.JS_Int",
		"scope": "lua",
		"body": "r.JS_Int(${1:pointer}, ${2:offset})$0",
		"description": "Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each."
	},
	"JS_LICE_AlterBitmapHSV lua": {
		"prefix": "r.JS_LICE_AlterBitmapHSV",
		"scope": "lua",
		"body": "r.JS_LICE_AlterBitmapHSV(${1:bitmap}, ${2:hue}, ${3:saturation}, ${4:value})$0",
		"description": "Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)"
	},
	"JS_LICE_AlterRectHSV lua": {
		"prefix": "r.JS_LICE_AlterRectHSV",
		"scope": "lua",
		"body": "r.JS_LICE_AlterRectHSV(${1:bitmap}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:hue}, ${7:saturation}, ${8:value})$0",
		"description": "Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)"
	},
	"JS_LICE_Arc lua": {
		"prefix": "r.JS_LICE_Arc",
		"scope": "lua",
		"body": "r.JS_LICE_Arc(${1:bitmap}, ${2:cx}, ${3:cy}, ${4:r}, ${5:minAngle}, ${6:maxAngle}, ${7:color}, ${8:alpha}, ${9:mode}, ${10:antialias})$0",
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_ArrayAllBitmaps lua": {
		"prefix": "r.JS_LICE_ArrayAllBitmaps",
		"scope": "lua",
		"body": "r.JS_LICE_ArrayAllBitmaps(${1:reaperarray})$0",
		"description": ""
	},
	"JS_LICE_Bezier lua": {
		"prefix": "r.JS_LICE_Bezier",
		"scope": "lua",
		"body": "r.JS_LICE_Bezier(${1:bitmap}, ${2:xstart}, ${3:ystart}, ${4:xctl1}, ${5:yctl1}, ${6:xctl2}, ${7:yctl2}, ${8:xend}, ${9:yend}, ${10:tol}, ${11:color}, ${12:alpha}, ${13:mode}, ${14:antialias})$0",
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_Blit lua": {
		"prefix": "r.JS_LICE_Blit",
		"scope": "lua",
		"body": "r.JS_LICE_Blit(${1:destBitmap}, ${2:dstx}, ${3:dsty}, ${4:sourceBitmap}, ${5:srcx}, ${6:srcy}, ${7:width}, ${8:height}, ${9:alpha}, ${10:mode})$0",
		"description": "Standard LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\nIn addition to the standard LICE modes, LICE_Blit also offers:\n * 'CHANCOPY_XTOY', with X and Y any of the four channels, A, R, G or B. (CHANCOPY_ATOA is similar to MASK mode.)\n * 'BLUR'\n * 'ALPHAMUL', which overwrites the destination with a per-pixel alpha-multiplied copy of the source. (Similar to first clearing the destination with 0x00000000 and then blitting with 'COPY,ALPHA'.)"
	},
	"JS_LICE_Circle lua": {
		"prefix": "r.JS_LICE_Circle",
		"scope": "lua",
		"body": "r.JS_LICE_Circle(${1:bitmap}, ${2:cx}, ${3:cy}, ${4:r}, ${5:color}, ${6:alpha}, ${7:mode}, ${8:antialias})$0",
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_Clear lua": {
		"prefix": "r.JS_LICE_Clear",
		"scope": "lua",
		"body": "r.JS_LICE_Clear(${1:bitmap}, ${2:color})$0",
		"description": ""
	},
	"JS_LICE_CreateBitmap lua": {
		"prefix": "r.JS_LICE_CreateBitmap",
		"scope": "lua",
		"body": "r.JS_LICE_CreateBitmap(${1:isSysBitmap}, ${2:width}, ${3:height})$0",
		"description": ""
	},
	"JS_LICE_CreateFont lua": {
		"prefix": "r.JS_LICE_CreateFont",
		"scope": "lua",
		"body": "r.JS_LICE_CreateFont()$0",
		"description": ""
	},
	"JS_LICE_DestroyBitmap lua": {
		"prefix": "r.JS_LICE_DestroyBitmap",
		"scope": "lua",
		"body": "r.JS_LICE_DestroyBitmap(${1:bitmap})$0",
		"description": "Deletes the bitmap, and also unlinks bitmap from any composited window."
	},
	"JS_LICE_DestroyFont lua": {
		"prefix": "r.JS_LICE_DestroyFont",
		"scope": "lua",
		"body": "r.JS_LICE_DestroyFont(${1:LICEFont})$0",
		"description": ""
	},
	"JS_LICE_DrawChar lua": {
		"prefix": "r.JS_LICE_DrawChar",
		"scope": "lua",
		"body": "r.JS_LICE_DrawChar(${1:bitmap}, ${2:x}, ${3:y}, ${4:c}, ${5:color}, ${6:alpha}, ${7:mode})$0",
		"description": ""
	},
	"JS_LICE_DrawText lua": {
		"prefix": "r.JS_LICE_DrawText",
		"scope": "lua",
		"body": "r.JS_LICE_DrawText(${1:bitmap}, ${2:LICEFont}, ${3:text}, ${4:textLen}, ${5:x1}, ${6:y1}, ${7:x2}, ${8:y2})$0",
		"description": ""
	},
	"JS_LICE_FillCircle lua": {
		"prefix": "r.JS_LICE_FillCircle",
		"scope": "lua",
		"body": "r.JS_LICE_FillCircle(${1:bitmap}, ${2:cx}, ${3:cy}, ${4:r}, ${5:color}, ${6:alpha}, ${7:mode}, ${8:antialias})$0",
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_FillPolygon lua": {
		"prefix": "r.JS_LICE_FillPolygon",
		"scope": "lua",
		"body": "r.JS_LICE_FillPolygon(${1:bitmap}, ${2:packedX}, ${3:packedY}, ${4:numPoints}, ${5:color}, ${6:alpha}, ${7:mode})$0",
		"description": "packedX and packedY are two strings of coordinates, each packed as '<i4'.\nLICE modes : 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_FillRect lua": {
		"prefix": "r.JS_LICE_FillRect",
		"scope": "lua",
		"body": "r.JS_LICE_FillRect(${1:bitmap}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:color}, ${7:alpha}, ${8:mode})$0",
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_FillTriangle lua": {
		"prefix": "r.JS_LICE_FillTriangle",
		"scope": "lua",
		"body": "r.JS_LICE_FillTriangle(${1:bitmap}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:x3}, ${7:y3}, ${8:color}, ${9:alpha}, ${10:mode})$0",
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_GetDC lua": {
		"prefix": "r.JS_LICE_GetDC",
		"scope": "lua",
		"body": "r.JS_LICE_GetDC(${1:bitmap})$0",
		"description": ""
	},
	"JS_LICE_GetHeight lua": {
		"prefix": "r.JS_LICE_GetHeight",
		"scope": "lua",
		"body": "r.JS_LICE_GetHeight(${1:bitmap})$0",
		"description": ""
	},
	"JS_LICE_GetPixel lua": {
		"prefix": "r.JS_LICE_GetPixel",
		"scope": "lua",
		"body": "r.JS_LICE_GetPixel(${1:bitmap}, ${2:x}, ${3:y})$0",
		"description": "Returns the color of the specified pixel."
	},
	"JS_LICE_GetWidth lua": {
		"prefix": "r.JS_LICE_GetWidth",
		"scope": "lua",
		"body": "r.JS_LICE_GetWidth(${1:bitmap})$0",
		"description": ""
	},
	"JS_LICE_GradRect lua": {
		"prefix": "r.JS_LICE_GradRect",
		"scope": "lua",
		"body": "r.JS_LICE_GradRect(${1:bitmap}, ${2:dstx}, ${3:dsty}, ${4:dstw}, ${5:dsth}, ${6:ir}, ${7:ig}, ${8:ib}, ${9:ia}, ${10:drdx}, ${11:dgdx}, ${12:dbdx}, ${13:dadx}, ${14:drdy}, ${15:dgdy}, ${16:dbdy}, ${17:dady}, ${18:mode})$0",
		"description": ""
	},
	"JS_LICE_IsFlipped lua": {
		"prefix": "r.JS_LICE_IsFlipped",
		"scope": "lua",
		"body": "r.JS_LICE_IsFlipped(${1:bitmap})$0",
		"description": ""
	},
	"JS_LICE_Line lua": {
		"prefix": "r.JS_LICE_Line",
		"scope": "lua",
		"body": "r.JS_LICE_Line(${1:bitmap}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color}, ${7:alpha}, ${8:mode}, ${9:antialias})$0",
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_ListAllBitmaps lua": {
		"prefix": "r.JS_LICE_ListAllBitmaps",
		"scope": "lua",
		"body": "r.JS_LICE_ListAllBitmaps()$0",
		"description": ""
	},
	"JS_LICE_LoadJPG lua": {
		"prefix": "r.JS_LICE_LoadJPG",
		"scope": "lua",
		"body": "r.JS_LICE_LoadJPG(${1:filename})$0",
		"description": "Returns a system LICE bitmap containing the JPEG."
	},
	"JS_LICE_LoadJPGFromMemory lua": {
		"prefix": "r.JS_LICE_LoadJPGFromMemory",
		"scope": "lua",
		"body": "r.JS_LICE_LoadJPGFromMemory(${1:buffer}, ${2:bufsize})$0",
		"description": "Returns a system LICE bitmap containing the JPEG."
	},
	"JS_LICE_LoadPNG lua": {
		"prefix": "r.JS_LICE_LoadPNG",
		"scope": "lua",
		"body": "r.JS_LICE_LoadPNG(${1:filename})$0",
		"description": "Returns a system LICE bitmap containing the PNG."
	},
	"JS_LICE_LoadPNGFromMemory lua": {
		"prefix": "r.JS_LICE_LoadPNGFromMemory",
		"scope": "lua",
		"body": "r.JS_LICE_LoadPNGFromMemory(${1:buffer}, ${2:bufsize})$0",
		"description": "Returns a system LICE bitmap containing the PNG."
	},
	"JS_LICE_MeasureText lua": {
		"prefix": "r.JS_LICE_MeasureText",
		"scope": "lua",
		"body": "r.JS_LICE_MeasureText(${1:text})$0",
		"description": ""
	},
	"JS_LICE_ProcessRect lua": {
		"prefix": "r.JS_LICE_ProcessRect",
		"scope": "lua",
		"body": "r.JS_LICE_ProcessRect(${1:bitmap}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:mode}, ${7:operand})$0",
		"description": "Applies bitwise operations to each pixel in the target rectangle.\noperand: a color in 0xAARRGGBB format.\nmodes:\n * 'XOR', 'OR' or 'AND'.\n * 'SET_XYZ', with XYZ any combination of A, R, G, and B: copies the specified channels from operand to the bitmap. (Useful for setting the alpha values of a bitmap.)\n * 'ALPHAMUL': Performs alpha pre-multiplication on each pixel in the rect. operand is ignored in this mode. (On WindowsOS, GDI_Blit does not perform alpha multiplication on the fly, and a separate alpha pre-multiplication step is therefore required.)\nNOTE:\nLICE_Blit and LICE_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5:\nreaper.JS_LICE_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, 'ADD')."
	},
	"JS_LICE_PutPixel lua": {
		"prefix": "r.JS_LICE_PutPixel",
		"scope": "lua",
		"body": "r.JS_LICE_PutPixel(${1:bitmap}, ${2:x}, ${3:y}, ${4:color}, ${5:alpha}, ${6:mode})$0",
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_Resize lua": {
		"prefix": "r.JS_LICE_Resize",
		"scope": "lua",
		"body": "r.JS_LICE_Resize(${1:bitmap}, ${2:width}, ${3:height})$0",
		"description": ""
	},
	"JS_LICE_RotatedBlit lua": {
		"prefix": "r.JS_LICE_RotatedBlit",
		"scope": "lua",
		"body": "r.JS_LICE_RotatedBlit(${1:destBitmap}, ${2:dstx}, ${3:dsty}, ${4:dstw}, ${5:dsth}, ${6:sourceBitmap}, ${7:srcx}, ${8:srcy}, ${9:srcw}, ${10:srch}, ${11:angle}, ${12:rotxcent}, ${13:rotycent}, ${14:cliptosourcerect}, ${15:alpha}, ${16:mode})$0",
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending."
	},
	"JS_LICE_RoundRect lua": {
		"prefix": "r.JS_LICE_RoundRect",
		"scope": "lua",
		"body": "r.JS_LICE_RoundRect(${1:bitmap}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:cornerradius}, ${7:color}, ${8:alpha}, ${9:mode}, ${10:antialias})$0",
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
	},
	"JS_LICE_ScaledBlit lua": {
		"prefix": "r.JS_LICE_ScaledBlit",
		"scope": "lua",
		"body": "r.JS_LICE_ScaledBlit(${1:destBitmap}, ${2:dstx}, ${3:dsty}, ${4:dstw}, ${5:dsth}, ${6:srcBitmap}, ${7:srcx}, ${8:srcy}, ${9:srcw}, ${10:srch}, ${11:alpha}, ${12:mode})$0",
		"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending."
	},
	"JS_LICE_SetAlphaFromColorMask lua": {
		"prefix": "r.JS_LICE_SetAlphaFromColorMask",
		"scope": "lua",
		"body": "r.JS_LICE_SetAlphaFromColorMask(${1:bitmap}, ${2:colorRGB})$0",
		"description": "Sets all pixels that match the given color's RGB values to fully transparent, and all other pixels to fully opaque.  (All pixels' RGB values remain unchanged.)"
	},
	"JS_LICE_SetFontBkColor lua": {
		"prefix": "r.JS_LICE_SetFontBkColor",
		"scope": "lua",
		"body": "r.JS_LICE_SetFontBkColor(${1:LICEFont}, ${2:color})$0",
		"description": "Sets the color of the font background."
	},
	"JS_LICE_SetFontColor lua": {
		"prefix": "r.JS_LICE_SetFontColor",
		"scope": "lua",
		"body": "r.JS_LICE_SetFontColor(${1:LICEFont}, ${2:color})$0",
		"description": ""
	},
	"JS_LICE_SetFontFXColor lua": {
		"prefix": "r.JS_LICE_SetFontFXColor",
		"scope": "lua",
		"body": "r.JS_LICE_SetFontFXColor(${1:LICEFont}, ${2:color})$0",
		"description": "Sets the color of font FX such as shadow."
	},
	"JS_LICE_SetFontFromGDI lua": {
		"prefix": "r.JS_LICE_SetFontFromGDI",
		"scope": "lua",
		"body": "r.JS_LICE_SetFontFromGDI(${1:LICEFont}, ${2:GDIFont}, ${3:moreFormats})$0",
		"description": "Converts a GDI font into a LICE font.\nThe font can be modified by the following flags, in a comma-separated list:\n'VERTICAL', 'BOTTOMUP', 'NATIVE', 'BLUR', 'INVERT', 'MONO', 'SHADOW' or 'OUTLINE'."
	},
	"JS_LICE_WriteJPG lua": {
		"prefix": "r.JS_LICE_WriteJPG",
		"scope": "lua",
		"body": "r.JS_LICE_WriteJPG(${1:filename}, ${2:bitmap}, ${3:quality}, ${4:forceBaseline})$0",
		"description": "Parameters:\n * quality is an integer in the range 1..100.\n * forceBaseline is an optional boolean parameter that ensures compatibility with all JPEG viewers by preventing too low quality, 'cubist' settings."
	},
	"JS_LICE_WritePNG lua": {
		"prefix": "r.JS_LICE_WritePNG",
		"scope": "lua",
		"body": "r.JS_LICE_WritePNG(${1:filename}, ${2:bitmap}, ${3:wantAlpha})$0",
		"description": ""
	},
	"JS_ListView_EnsureVisible lua": {
		"prefix": "r.JS_ListView_EnsureVisible",
		"scope": "lua",
		"body": "r.JS_ListView_EnsureVisible(${1:listviewHWND}, ${2:index}, ${3:partialOK})$0",
		"description": ""
	},
	"JS_ListView_EnumSelItems lua": {
		"prefix": "r.JS_ListView_EnumSelItems",
		"scope": "lua",
		"body": "r.JS_ListView_EnumSelItems(${1:listviewHWND}, ${2:index})$0",
		"description": "Returns the index of the next selected list item with index greater that the specified number. Returns -1 if no selected items left."
	},
	"JS_ListView_GetFocusedItem lua": {
		"prefix": "r.JS_ListView_GetFocusedItem",
		"scope": "lua",
		"body": "rv, text = r.JS_ListView_GetFocusedItem(${1:listviewHWND})$0",
		"description": "Returns the index and text of the focused item, if any."
	},
	"JS_ListView_GetHeader lua": {
		"prefix": "r.JS_ListView_GetHeader",
		"scope": "lua",
		"body": "r.JS_ListView_GetHeader(${1:listviewHWND})$0",
		"description": ""
	},
	"JS_ListView_GetItem lua": {
		"prefix": "r.JS_ListView_GetItem",
		"scope": "lua",
		"body": "text, state = r.JS_ListView_GetItem(${1:listviewHWND}, ${2:index}, ${3:subItem})$0",
		"description": "Returns the text and state of specified item."
	},
	"JS_ListView_GetItemCount lua": {
		"prefix": "r.JS_ListView_GetItemCount",
		"scope": "lua",
		"body": "r.JS_ListView_GetItemCount(${1:listviewHWND})$0",
		"description": ""
	},
	"JS_ListView_GetItemRect lua": {
		"prefix": "r.JS_ListView_GetItemRect",
		"scope": "lua",
		"body": "rv, left, top, right, bottom = r.JS_ListView_GetItemRect(${1:listviewHWND}, ${2:index})$0",
		"description": "Returns client coordinates of the item."
	},
	"JS_ListView_GetItemState lua": {
		"prefix": "r.JS_ListView_GetItemState",
		"scope": "lua",
		"body": "r.JS_ListView_GetItemState(${1:listviewHWND}, ${2:index})$0",
		"description": "State is a bitmask:\n1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell."
	},
	"JS_ListView_GetItemText lua": {
		"prefix": "r.JS_ListView_GetItemText",
		"scope": "lua",
		"body": "r.JS_ListView_GetItemText(${1:listviewHWND}, ${2:index}, ${3:subItem})$0",
		"description": ""
	},
	"JS_ListView_GetSelectedCount lua": {
		"prefix": "r.JS_ListView_GetSelectedCount",
		"scope": "lua",
		"body": "r.JS_ListView_GetSelectedCount(${1:listviewHWND})$0",
		"description": ""
	},
	"JS_ListView_GetTopIndex lua": {
		"prefix": "r.JS_ListView_GetTopIndex",
		"scope": "lua",
		"body": "r.JS_ListView_GetTopIndex(${1:listviewHWND})$0",
		"description": ""
	},
	"JS_ListView_HitTest lua": {
		"prefix": "r.JS_ListView_HitTest",
		"scope": "lua",
		"body": "r.JS_ListView_HitTest(${1:listviewHWND}, ${2:clientX}, ${3:clientY})$0",
		"description": ""
	},
	"JS_ListView_ListAllSelItems lua": {
		"prefix": "r.JS_ListView_ListAllSelItems",
		"scope": "lua",
		"body": "r.JS_ListView_ListAllSelItems(${1:listviewHWND})$0",
		"description": "Returns the indices of all selected items as a comma-separated list.\n * retval: Number of selected items found; negative or zero if an error occured."
	},
	"JS_ListView_SetItemState lua": {
		"prefix": "r.JS_ListView_SetItemState",
		"scope": "lua",
		"body": "r.JS_ListView_SetItemState(${1:listviewHWND}, ${2:index}, ${3:state}, ${4:mask})$0",
		"description": "The mask parameter specifies the state bits that must be set, and the state parameter specifies the new values for those bits.\n1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell."
	},
	"JS_ListView_SetItemText lua": {
		"prefix": "r.JS_ListView_SetItemText",
		"scope": "lua",
		"body": "r.JS_ListView_SetItemText(${1:listviewHWND}, ${2:index}, ${3:subItem}, ${4:text})$0",
		"description": "Currently, this fuction only accepts ASCII text."
	},
	"JS_Localize lua": {
		"prefix": "r.JS_Localize",
		"scope": "lua",
		"body": "r.JS_Localize(${1:USEnglish}, ${2:LangPackSection})$0",
		"description": "Returns the translation of the given US English text, according to the currently loaded Language Pack.\nParameters:\n * LangPackSection: Language Packs are divided into sections such as 'common' or 'DLG_102'.\n * In Lua, by default, text of up to 1024 chars can be returned. To increase (or reduce) the default buffer size, a string and size can be included as optional 3rd and 4th arguments.\nExample: reaper.JS_Localize('Actions', 'common', '', 20)"
	},
	"JS_MIDIEditor_ArrayAll lua": {
		"prefix": "r.JS_MIDIEditor_ArrayAll",
		"scope": "lua",
		"body": "r.JS_MIDIEditor_ArrayAll(${1:reaperarray})$0",
		"description": "Finds all open MIDI windows (whether docked or not).\n * retval: The number of MIDI editor windows found; negative if an error occurred.\n * The address of each MIDI editor window is stored in the provided reaper.array. Each address can be converted to a REAPER object (HWND) by the function JS_Window_HandleFromAddress."
	},
	"JS_MIDIEditor_ListAll lua": {
		"prefix": "r.JS_MIDIEditor_ListAll",
		"scope": "lua",
		"body": "r.JS_MIDIEditor_ListAll()$0",
		"description": "Finds all open MIDI windows (whether docked or not).\n * retval: The number of MIDI editor windows found; negative if an error occurred.\n * list: Comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress."
	},
	"JS_Mem_Alloc lua": {
		"prefix": "r.JS_Mem_Alloc",
		"scope": "lua",
		"body": "r.JS_Mem_Alloc(${1:sizeBytes})$0",
		"description": "Allocates memory for general use by functions that require memory buffers."
	},
	"JS_Mem_Free lua": {
		"prefix": "r.JS_Mem_Free",
		"scope": "lua",
		"body": "r.JS_Mem_Free(${1:mallocPointer})$0",
		"description": "Frees memory that was previously allocated by JS_Mem_Alloc."
	},
	"JS_Mem_FromString lua": {
		"prefix": "r.JS_Mem_FromString",
		"scope": "lua",
		"body": "r.JS_Mem_FromString(${1:mallocPointer}, ${2:offset}, ${3:packedString}, ${4:stringLength})$0",
		"description": "Copies a packed string into a memory buffer."
	},
	"JS_Mouse_GetCursor lua": {
		"prefix": "r.JS_Mouse_GetCursor",
		"scope": "lua",
		"body": "r.JS_Mouse_GetCursor()$0",
		"description": "On Windows, retrieves a handle to the current mouse cursor.\nOn Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL."
	},
	"JS_Mouse_GetState lua": {
		"prefix": "r.JS_Mouse_GetState",
		"scope": "lua",
		"body": "r.JS_Mouse_GetState(${1:flags})$0",
		"description": "Retrieves the states of mouse buttons and modifiers keys.\nParameters:\n * flags, state: The parameter and the return value both use the same format as gfx.mouse_cap. For example, to get the states of the left mouse button and the ctrl key, use flags = 0b00000101."
	},
	"JS_Mouse_LoadCursor lua": {
		"prefix": "r.JS_Mouse_LoadCursor",
		"scope": "lua",
		"body": "r.JS_Mouse_LoadCursor(${1:cursorNumber})$0",
		"description": "Loads a cursor by number.\ncursorNumber: Same as used for gfx.setcursor, and includes some of Windows' predefined cursors (with numbers > 32000; refer to documentation for the Win32 C++ function LoadCursor), and REAPER's own cursors (with numbers < 2000).\nIf successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor."
	},
	"JS_Mouse_LoadCursorFromFile lua": {
		"prefix": "r.JS_Mouse_LoadCursorFromFile",
		"scope": "lua",
		"body": "r.JS_Mouse_LoadCursorFromFile(${1:pathAndFileName}, ${2:forceNewLoad})$0",
		"description": "Loads a cursor from a .cur file.\nforceNewLoad is an optional boolean parameter:\n * If omitted or false, and if the cursor file has already been loaded previously during the REAPER session by any script, the file will not be re-loaded, and the existing handle will be returned.\n * If true, the file will be re-loaded and a new handle will be returned.\n * WARNING: Each time that a cursor file is re-loaded, the number of GDI objects increases for the entire duration of the REAPER session.\nIf successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor."
	},
	"JS_Mouse_SetCursor lua": {
		"prefix": "r.JS_Mouse_SetCursor",
		"scope": "lua",
		"body": "r.JS_Mouse_SetCursor(${1:cursorHandle})$0",
		"description": "Sets the mouse cursor.  (Only lasts while script is running, and for a single 'defer' cycle.)"
	},
	"JS_Mouse_SetPosition lua": {
		"prefix": "r.JS_Mouse_SetPosition",
		"scope": "lua",
		"body": "r.JS_Mouse_SetPosition(${1:x}, ${2:y})$0",
		"description": "Moves the mouse cursor to the specified screen coordinates.\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward."
	},
	"JS_ReaScriptAPI_Version lua": {
		"prefix": "r.JS_ReaScriptAPI_Version",
		"scope": "lua",
		"body": "r.JS_ReaScriptAPI_Version()$0",
		"description": "Returns the version of the js_ReaScriptAPI extension."
	},
	"JS_String lua": {
		"prefix": "r.JS_String",
		"scope": "lua",
		"body": "r.JS_String(${1:pointer}, ${2:offset}, ${3:lengthChars})$0",
		"description": "Returns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each."
	},
	"JS_VKeys_GetDown lua": {
		"prefix": "r.JS_VKeys_GetDown",
		"scope": "lua",
		"body": "r.JS_VKeys_GetDown(${1:cutoffTime})$0",
		"description": "Returns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.\nNotes:\n * Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.\n * Auto-repeated KEYDOWN messages are ignored."
	},
	"JS_VKeys_GetState lua": {
		"prefix": "r.JS_VKeys_GetState",
		"scope": "lua",
		"body": "r.JS_VKeys_GetState(${1:cutoffTime})$0",
		"description": "Retrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.\ncutoffTime: A key is only regarded as down if it sent a KEYDOWN message after the cut-off time, not followed by KEYUP. (This is useful for excluding old KEYDOWN messages that weren't properly followed by KEYUP.) \nIf cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise().\nIf cutoffTime is negative, it is relative to the current time.\nNotes:\n * Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.\n * Auto-repeated KEYDOWN messages are ignored."
	},
	"JS_VKeys_GetUp lua": {
		"prefix": "r.JS_VKeys_GetUp",
		"scope": "lua",
		"body": "r.JS_VKeys_GetUp(${1:cutoffTime})$0",
		"description": "Return a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.\nNote: Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead."
	},
	"JS_VKeys_Intercept lua": {
		"prefix": "r.JS_VKeys_Intercept",
		"scope": "lua",
		"body": "r.JS_VKeys_Intercept(${1:keyCode}, ${2:intercept})$0",
		"description": "Intercepting (blocking) virtual keys work similar to the native function PreventUIRefresh:  Each key has a (non-negative) intercept state, and the key is passed through as usual if the state equals 0, or blocked if the state is greater than 0.\nkeyCode: The virtual key code of the key, or -1 to change the state of all keys.\nintercept: A script can increase the intercept state by passing +1, or lower the state by passing -1.  Multiple scripts can block the same key, and the intercept state may reach up to 255. If zero is passed, the intercept state is not changed, but the current state is returned.\nReturns: If keyCode refers to a single key, the intercept state of that key is returned.  If keyCode = -1, the state of the key that is most strongly blocked (highest intercept state) is returned."
	},
	"JS_WindowMessage_Intercept lua": {
		"prefix": "r.JS_WindowMessage_Intercept",
		"scope": "lua",
		"body": "r.JS_WindowMessage_Intercept(${1:windowHWND}, ${2:message}, ${3:passThrough})$0",
		"description": "Begins intercepting a window message type to specified window.\nParameters:\n * message: a single message type to be intercepted, either in WM_ or hexadecimal format. For example 'WM_SETCURSOR' or '0x0020'.\n * passThrough: Whether message should be blocked (false) or passed through (true) to the window.\n    For more information on message codes, refer to the Win32 C++ API documentation.\n    All WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.\nReturns:\n * 1: Success.\n * 0: The message type is already being intercepted by another script.\n * -2: message string could not be parsed.\n * -3: Failure getting original window process / window not valid.\n * -6: Could not obtain the window client HDC.\nNotes:\n * Intercepted messages can be polled using JS_WindowMessage_Peek.\n * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.\n * Mouse events are typically received by the child window under the mouse, not the parent window.\nKeyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions."
	},
	"JS_WindowMessage_InterceptList lua": {
		"prefix": "r.JS_WindowMessage_InterceptList",
		"scope": "lua",
		"body": "r.JS_WindowMessage_InterceptList(${1:windowHWND}, ${2:messages})$0",
		"description": "Begins intercepting window messages to specified window.\nParameters:\n * messages: comma-separated string of message types to be intercepted (either in WM_ or hexadecimal format), each with a 'block' or 'passthrough' modifier to specify whether the message should be blocked or passed through to the window. For example 'WM_SETCURSOR:block, 0x0201:passthrough'.\n    For more information on message codes, refer to the Win32 C++ API documentation.\n    All WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.\nReturns:\n * 1: Success.\n * 0: The message type is already being intercepted by another script.\n * -1: windowHWND is not a valid window.\n * -2: message string could not be parsed.\n * -3: Failure getting original window process.\n * -6: COuld not obtain the window client HDC.\nNotes:\n * Intercepted messages can be polled using JS_WindowMessage_Peek.\n * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts."
	},
	"JS_WindowMessage_ListIntercepts lua": {
		"prefix": "r.JS_WindowMessage_ListIntercepts",
		"scope": "lua",
		"body": "r.JS_WindowMessage_ListIntercepts(${1:windowHWND})$0",
		"description": "Returns a string with a list of all message types currently being intercepted for the specified window."
	},
	"JS_WindowMessage_PassThrough lua": {
		"prefix": "r.JS_WindowMessage_PassThrough",
		"scope": "lua",
		"body": "r.JS_WindowMessage_PassThrough(${1:windowHWND}, ${2:message}, ${3:passThrough})$0",
		"description": "Changes the passthrough setting of a message type that is already being intercepted.\nReturns 1 if successful, 0 if the message type is not yet being intercepted, or -2 if the argument could not be parsed."
	},
	"JS_WindowMessage_Peek lua": {
		"prefix": "r.JS_WindowMessage_Peek",
		"scope": "lua",
		"body": "r.JS_WindowMessage_Peek(${1:windowHWND}, ${2:message})$0",
		"description": "Polls the state of an intercepted message.\nParameters:\n * message: String containing a single message name, such as 'WM_SETCURSOR', or in hexadecimal format, '0x0020'.\n (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\nReturns:\n * A retval of false indicates that the message type is not being intercepted in the specified window.\n * All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.\n * For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.\n * For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.\n * wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned."
	},
	"JS_WindowMessage_Post lua": {
		"prefix": "r.JS_WindowMessage_Post",
		"scope": "lua",
		"body": "r.JS_WindowMessage_Post(${1:windowHWND}, ${2:message}, ${3:wParam}, ${4:wParamHighWord}, ${5:lParam}, ${6:lParamHighWord})$0",
		"description": "If the specified window and message type are not currently being intercepted by a script, this function will post the message in the message queue of the specified window, and return without waiting.\nIf the window and message type are currently being intercepted, the message will be sent directly to the original window process, similar to WindowMessage_Send, thereby skipping any intercepts.\nParameters:\n * message: String containing a single message name, such as 'WM_SETCURSOR', or in hexadecimal format, '0x0020'.\n (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n * wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\nNotes:\n * For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.\n * Messages should only be sent to windows that were created from the main thread.\n * Useful for simulating mouse clicks and calling mouse modifier actions from scripts."
	},
	"JS_WindowMessage_Release lua": {
		"prefix": "r.JS_WindowMessage_Release",
		"scope": "lua",
		"body": "r.JS_WindowMessage_Release(${1:windowHWND}, ${2:messages})$0",
		"description": "Release intercepts of specified message types.\nParameters:\n * messages: 'WM_SETCURSOR,WM_MOUSEHWHEEL' or '0x0020,0x020E', for example."
	},
	"JS_WindowMessage_ReleaseAll lua": {
		"prefix": "r.JS_WindowMessage_ReleaseAll",
		"scope": "lua",
		"body": "r.JS_WindowMessage_ReleaseAll()$0",
		"description": "Release script intercepts of window messages for all windows."
	},
	"JS_WindowMessage_ReleaseWindow lua": {
		"prefix": "r.JS_WindowMessage_ReleaseWindow",
		"scope": "lua",
		"body": "r.JS_WindowMessage_ReleaseWindow(${1:windowHWND})$0",
		"description": "Release script intercepts of window messages for specified window."
	},
	"JS_WindowMessage_Send lua": {
		"prefix": "r.JS_WindowMessage_Send",
		"scope": "lua",
		"body": "r.JS_WindowMessage_Send(${1:windowHWND}, ${2:message}, ${3:wParam}, ${4:wParamHighWord}, ${5:lParam}, ${6:lParamHighWord})$0",
		"description": "Sends a message to the specified window by calling the window process directly, and only returns after the message has been processed. Any intercepts of the message by scripts will be skipped, and the message can therefore not be blocked.\nParameters:\n * message: String containing a single message name, such as 'WM_SETCURSOR', or in hexadecimal format, '0x0020'.\n (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n * wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\nNotes:\n * For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.\n * Messages should only be sent to windows that were created from the main thread.\n * Useful for simulating mouse clicks and calling mouse modifier actions from scripts."
	},
	"JS_Window_AddressFromHandle lua": {
		"prefix": "r.JS_Window_AddressFromHandle",
		"scope": "lua",
		"body": "r.JS_Window_AddressFromHandle(${1:handle})$0",
		"description": ""
	},
	"JS_Window_ArrayAllChild lua": {
		"prefix": "r.JS_Window_ArrayAllChild",
		"scope": "lua",
		"body": "r.JS_Window_ArrayAllChild(${1:parentHWND}, ${2:reaperarray})$0",
		"description": "Finds all child windows of the specified parent.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress."
	},
	"JS_Window_ArrayAllTop lua": {
		"prefix": "r.JS_Window_ArrayAllTop",
		"scope": "lua",
		"body": "r.JS_Window_ArrayAllTop(${1:reaperarray})$0",
		"description": "Finds all top-level windows.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress."
	},
	"JS_Window_ArrayFind lua": {
		"prefix": "r.JS_Window_ArrayFind",
		"scope": "lua",
		"body": "r.JS_Window_ArrayFind(${1:title}, ${2:exact}, ${3:reaperarray})$0",
		"description": "Finds all windows, whether top-level or child, whose titles match the specified string.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.\nParameters:\n * exact: Match entire title exactly, or match substring of title."
	},
	"JS_Window_AttachResizeGrip lua": {
		"prefix": "r.JS_Window_AttachResizeGrip",
		"scope": "lua",
		"body": "r.JS_Window_AttachResizeGrip(${1:windowHWND})$0",
		"description": ""
	},
	"JS_Window_AttachTopmostPin lua": {
		"prefix": "r.JS_Window_AttachTopmostPin",
		"scope": "lua",
		"body": "r.JS_Window_AttachTopmostPin(${1:windowHWND})$0",
		"description": "Attaches a 'pin on top' button to the window frame. The button should remember its state when closing and re-opening the window.\nWARNING: This function does not yet work on Linux."
	},
	"JS_Window_ClientToScreen lua": {
		"prefix": "r.JS_Window_ClientToScreen",
		"scope": "lua",
		"body": "r.JS_Window_ClientToScreen(${1:windowHWND}, ${2:x}, ${3:y})$0",
		"description": "Converts the client-area coordinates of a specified point to screen coordinates.\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n * On all platforms, client coordinates are relative to the upper left corner of the client area."
	},
	"JS_Window_Create lua": {
		"prefix": "r.JS_Window_Create",
		"scope": "lua",
		"body": "r.JS_Window_Create(${1:title}, ${2:className}, ${3:x}, ${4:y}, ${5:w}, ${6:h}, ${7:style}, ${8:ownerHWND})$0",
		"description": "Creates a modeless window with WS_OVERLAPPEDWINDOW style and only rudimentary features. Scripts can paint into the window using GDI or LICE/Composite functions (and JS_Window_InvalidateRect to trigger re-painting).\nstyle: An optional parameter that overrides the default style. The string may include any combination of standard window styles, such as 'POPUP' for a frameless window, or 'CAPTION,SIZEBOX,SYSMENU' for a standard framed window.\nOn Linux and macOS, 'MAXIMIZE' has not yet been implemented, and the remaining styles may appear slightly different from their WindowsOS counterparts.\nclassName: On Windows, only standard ANSI characters are supported.\nownerHWND: Optional parameter, only available on WindowsOS.  Usually either the REAPER main window or another script window, and useful for ensuring that the created window automatically closes when the owner is closed.\nNOTE: On Linux and macOS, the window contents are only updated *between* defer cycles, so the window cannot be animated by for/while loops within a single defer cycle."
	},
	"JS_Window_Destroy lua": {
		"prefix": "r.JS_Window_Destroy",
		"scope": "lua",
		"body": "r.JS_Window_Destroy(${1:windowHWND})$0",
		"description": "Destroys the specified window."
	},
	"JS_Window_Enable lua": {
		"prefix": "r.JS_Window_Enable",
		"scope": "lua",
		"body": "r.JS_Window_Enable(${1:windowHWND}, ${2:enable})$0",
		"description": "Enables or disables mouse and keyboard input to the specified window or control."
	},
	"JS_Window_EnableMetal lua": {
		"prefix": "r.JS_Window_EnableMetal",
		"scope": "lua",
		"body": "r.JS_Window_EnableMetal(${1:windowHWND})$0",
		"description": "On macOS, returns the Metal graphics setting:\n2 = Metal enabled and support GetDC()/ReleaseDC() for drawing (more overhead).\n1 = Metal enabled.\n0 = N/A (Windows and Linux).\n-1 = non-metal async layered mode.\n-2 = non-metal non-async layered mode.\nWARNING: If using mode -1, any BitBlt()/StretchBlt() MUST have the source bitmap persist. If it is resized after Blit it could cause crashes."
	},
	"JS_Window_Find lua": {
		"prefix": "r.JS_Window_Find",
		"scope": "lua",
		"body": "r.JS_Window_Find(${1:title}, ${2:exact})$0",
		"description": "Returns a HWND to a window whose title matches the specified string.\n * Unlike the Win32 function FindWindow, this function searches top-level as well as child windows, so that the target window can be found irrespective of docked state.\n * In addition, the function can optionally match substrings of the title.\n * Matching is not case sensitive.\nParameters:\n * exact: Match entire title, or match substring of title."
	},
	"JS_Window_FindChild lua": {
		"prefix": "r.JS_Window_FindChild",
		"scope": "lua",
		"body": "r.JS_Window_FindChild(${1:parentHWND}, ${2:title}, ${3:exact})$0",
		"description": "Returns a HWND to a child window whose title matches the specified string.\nParameters:\n * exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive."
	},
	"JS_Window_FindChildByID lua": {
		"prefix": "r.JS_Window_FindChildByID",
		"scope": "lua",
		"body": "r.JS_Window_FindChildByID(${1:parentHWND}, ${2:ID})$0",
		"description": "Similar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.\n(The ID of a window may be retrieved by JS_Window_GetLongPtr.)"
	},
	"JS_Window_FindEx lua": {
		"prefix": "r.JS_Window_FindEx",
		"scope": "lua",
		"body": "r.JS_Window_FindEx(${1:parentHWND}, ${2:childHWND}, ${3:className}, ${4:title})$0",
		"description": "Returns a handle to a child window whose class and title match the specified strings.\nParameters: * childWindow: The function searches child windows, beginning with the window *after* the specified child window. If childHWND is equal to parentHWND, the search begins with the first child window of parentHWND.\n * title: An empty string, '', will match all windows. (Search is not case sensitive.)"
	},
	"JS_Window_FindTop lua": {
		"prefix": "r.JS_Window_FindTop",
		"scope": "lua",
		"body": "r.JS_Window_FindTop(${1:title}, ${2:exact})$0",
		"description": "Returns a HWND to a top-level window whose title matches the specified string.\nParameters:\n * exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive."
	},
	"JS_Window_FromPoint lua": {
		"prefix": "r.JS_Window_FromPoint",
		"scope": "lua",
		"body": "r.JS_Window_FromPoint(${1:x}, ${2:y})$0",
		"description": "Retrieves a HWND to the window that contains the specified point.\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward."
	},
	"JS_Window_GetClassName lua": {
		"prefix": "r.JS_Window_GetClassName",
		"scope": "lua",
		"body": "r.JS_Window_GetClassName(${1:windowHWND})$0",
		"description": "WARNING: May not be fully implemented on macOS and Linux."
	},
	"JS_Window_GetClientRect lua": {
		"prefix": "r.JS_Window_GetClientRect",
		"scope": "lua",
		"body": "rv, left, top, right, bottom = r.JS_Window_GetClientRect(${1:windowHWND})$0",
		"description": "Retrieves the screen coordinates of the client area rectangle of the specified window.\nNOTES:\n * Unlike the C++ function GetClientRect, this function returns the screen coordinates, not the width and height. To get the client size, use GetClientSize.\n * The pixel at (right, bottom) lies immediately outside the rectangle.\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward."
	},
	"JS_Window_GetClientSize lua": {
		"prefix": "r.JS_Window_GetClientSize",
		"scope": "lua",
		"body": "rv, width, height = r.JS_Window_GetClientSize(${1:windowHWND})$0",
		"description": ""
	},
	"JS_Window_GetFocus lua": {
		"prefix": "r.JS_Window_GetFocus",
		"scope": "lua",
		"body": "r.JS_Window_GetFocus()$0",
		"description": "Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue."
	},
	"JS_Window_GetForeground lua": {
		"prefix": "r.JS_Window_GetForeground",
		"scope": "lua",
		"body": "r.JS_Window_GetForeground()$0",
		"description": "Retrieves a HWND to the top-level foreground window (the window with which the user is currently working)."
	},
	"JS_Window_GetLong lua": {
		"prefix": "r.JS_Window_GetLong",
		"scope": "lua",
		"body": "r.JS_Window_GetLong(${1:windowHWND}, ${2:info})$0",
		"description": "Similar to JS_Window_GetLongPtr, but returns the information as a number instead of a pointer. \nIn the case of 'DLGPROC' and 'WNDPROC', the return values can be converted to pointers by JS_Window_HandleFromAddress.\nIf the function fails, the return value is 0."
	},
	"JS_Window_GetLongPtr lua": {
		"prefix": "r.JS_Window_GetLongPtr",
		"scope": "lua",
		"body": "r.JS_Window_GetLongPtr(${1:windowHWND}, ${2:info})$0",
		"description": "Returns information about the specified window.\ninfo: 'USERDATA', 'WNDPROC', 'DLGPROC', 'ID', 'EXSTYLE' or 'STYLE'.\nFor documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.\nThe values returned by 'DLGPROC' and 'WNDPROC' are typically used as-is, as pointers, whereas the others should first be converted to integers.\nIf the function fails, a null pointer is returned."
	},
	"JS_Window_GetParent lua": {
		"prefix": "r.JS_Window_GetParent",
		"scope": "lua",
		"body": "r.JS_Window_GetParent(${1:windowHWND})$0",
		"description": "Retrieves a HWND to the specified window's parent or owner.\nReturns NULL if the window is unowned or if the function otherwise fails."
	},
	"JS_Window_GetRect lua": {
		"prefix": "r.JS_Window_GetRect",
		"scope": "lua",
		"body": "rv, left, top, right, bottom = r.JS_Window_GetRect(${1:windowHWND})$0",
		"description": "Retrieves the screen coordinates of the bounding rectangle of the specified window.\nNOTES:\n * On Windows and Linux, coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n * The pixel at (right, bottom) lies immediately outside the rectangle."
	},
	"JS_Window_GetRelated lua": {
		"prefix": "r.JS_Window_GetRelated",
		"scope": "lua",
		"body": "r.JS_Window_GetRelated(${1:windowHWND}, ${2:relation})$0",
		"description": "Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.\nrelation: 'LAST', 'NEXT', 'PREV', 'OWNER' or 'CHILD'.\n(Refer to documentation for Win32 C++ function GetWindow.)"
	},
	"JS_Window_GetScrollInfo lua": {
		"prefix": "r.JS_Window_GetScrollInfo",
		"scope": "lua",
		"body": "rv, position, pageSize, min, max, trackPos = r.JS_Window_GetScrollInfo(${1:windowHWND}, ${2:scrollbar})$0",
		"description": "Retrieves the scroll information of a window.\nParameters:\n * windowHWND: The window that contains the scrollbar. This is usually a child window, not a top-level, framed window.\n * scrollbar: 'v' (or 'SB_VERT', or 'VERT') for vertical scroll, 'h' (or 'SB_HORZ' or 'HORZ') for horizontal.\nReturns:\n * Leftmost or topmost visible pixel position, as well as the visible page size, the range minimum and maximum, and scroll box tracking position."
	},
	"JS_Window_GetTitle lua": {
		"prefix": "r.JS_Window_GetTitle",
		"scope": "lua",
		"body": "r.JS_Window_GetTitle(${1:windowHWND})$0",
		"description": "Returns the title (if any) of the specified window."
	},
	"JS_Window_GetViewportFromRect lua": {
		"prefix": "r.JS_Window_GetViewportFromRect",
		"scope": "lua",
		"body": "left, top, right, bottom = r.JS_Window_GetViewportFromRect(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:wantWork})$0",
		"description": "Retrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.\nIf the monitor is not the primary display, some of the rectangle's coordinates may be negative.\nwantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars."
	},
	"JS_Window_HandleFromAddress lua": {
		"prefix": "r.JS_Window_HandleFromAddress",
		"scope": "lua",
		"body": "r.JS_Window_HandleFromAddress(${1:address})$0",
		"description": "Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions."
	},
	"JS_Window_InvalidateRect lua": {
		"prefix": "r.JS_Window_InvalidateRect",
		"scope": "lua",
		"body": "r.JS_Window_InvalidateRect(${1:windowHWND}, ${2:left}, ${3:top}, ${4:right}, ${5:bottom}, ${6:eraseBackground})$0",
		"description": "Similar to the Win32 function InvalidateRect."
	},
	"JS_Window_IsChild lua": {
		"prefix": "r.JS_Window_IsChild",
		"scope": "lua",
		"body": "r.JS_Window_IsChild(${1:parentHWND}, ${2:childHWND})$0",
		"description": "Determines whether a window is a child window or descendant window of a specified parent window."
	},
	"JS_Window_IsVisible lua": {
		"prefix": "r.JS_Window_IsVisible",
		"scope": "lua",
		"body": "r.JS_Window_IsVisible(${1:windowHWND})$0",
		"description": "Determines the visibility state of the window."
	},
	"JS_Window_IsWindow lua": {
		"prefix": "r.JS_Window_IsWindow",
		"scope": "lua",
		"body": "r.JS_Window_IsWindow(${1:windowHWND})$0",
		"description": "Determines whether the specified window handle identifies an existing window.\nOn macOS and Linux, only windows that were created by WDL/swell will be identified (and only such windows should be acted on by scripts).\nNOTE: Since REAPER v5.974, windows can be checked using the native function ValidatePtr(windowHWND, 'HWND')."
	},
	"JS_Window_ListAllChild lua": {
		"prefix": "r.JS_Window_ListAllChild",
		"scope": "lua",
		"body": "r.JS_Window_ListAllChild(${1:parentHWND})$0",
		"description": "Finds all child windows of the specified parent.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * list: A comma-separated string of hexadecimal values.\nEach value is an address that can be converted to a HWND by the function Window_HandleFromAddress."
	},
	"JS_Window_ListAllTop lua": {
		"prefix": "r.JS_Window_ListAllTop",
		"scope": "lua",
		"body": "r.JS_Window_ListAllTop()$0",
		"description": "Finds all top-level windows.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress."
	},
	"JS_Window_ListFind lua": {
		"prefix": "r.JS_Window_ListFind",
		"scope": "lua",
		"body": "r.JS_Window_ListFind(${1:title}, ${2:exact})$0",
		"description": "Finds all windows (whether top-level or child) whose titles match the specified string.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.\nParameters:\n * exact: Match entire title exactly, or match substring of title."
	},
	"JS_Window_MonitorFromRect lua": {
		"prefix": "r.JS_Window_MonitorFromRect",
		"scope": "lua",
		"body": "r.JS_Window_MonitorFromRect(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:wantWork})$0",
		"description": "Deprecated - use GetViewportFromRect instead."
	},
	"JS_Window_Move lua": {
		"prefix": "r.JS_Window_Move",
		"scope": "lua",
		"body": "r.JS_Window_Move(${1:windowHWND}, ${2:left}, ${3:top})$0",
		"description": "Changes the position of the specified window, keeping its size constant.\nNOTES:\n * For top-level windows, position is relative to the primary display.\n * On Windows and Linux, position is calculated as the coordinates of the upper left corner of the window, relative to upper left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, position is calculated as the coordinates of the bottom left corner of the window, relative to bottom left corner of the display, and the positive Y-axis points upward.\n * For a child window, on all platforms, position is relative to the upper-left corner of the parent window's client area.\n * Equivalent to calling JS_Window_SetPosition with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set."
	},
	"JS_Window_OnCommand lua": {
		"prefix": "r.JS_Window_OnCommand",
		"scope": "lua",
		"body": "r.JS_Window_OnCommand(${1:windowHWND}, ${2:commandID})$0",
		"description": "Sends a 'WM_COMMAND' message to the specified window, which simulates a user selecting a command in the window menu.\nThis function is similar to Main_OnCommand and MIDIEditor_OnCommand, but can send commands to any window that has a menu.\nIn the case of windows that are listed among the Action list's contexts (such as the Media Explorer), the commandIDs of the actions in the Actions list may be used."
	},
	"JS_Window_Resize lua": {
		"prefix": "r.JS_Window_Resize",
		"scope": "lua",
		"body": "r.JS_Window_Resize(${1:windowHWND}, ${2:width}, ${3:height})$0",
		"description": "Changes the dimensions of the specified window, keeping the top left corner position constant.\n * If resizing script GUIs, call gfx.update() after resizing.\n* Equivalent to calling JS_Window_SetPosition with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set."
	},
	"JS_Window_ScreenToClient lua": {
		"prefix": "r.JS_Window_ScreenToClient",
		"scope": "lua",
		"body": "r.JS_Window_ScreenToClient(${1:windowHWND}, ${2:x}, ${3:y})$0",
		"description": "Converts the screen coordinates of a specified point on the screen to client-area coordinates.\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n * On all platforms, client coordinates are relative to the upper left corner of the client area."
	},
	"JS_Window_SetFocus lua": {
		"prefix": "r.JS_Window_SetFocus",
		"scope": "lua",
		"body": "r.JS_Window_SetFocus(${1:windowHWND})$0",
		"description": "Sets the keyboard focus to the specified window."
	},
	"JS_Window_SetForeground lua": {
		"prefix": "r.JS_Window_SetForeground",
		"scope": "lua",
		"body": "r.JS_Window_SetForeground(${1:windowHWND})$0",
		"description": "Brings the specified window into the foreground, activates the window, and directs keyboard input to it."
	},
	"JS_Window_SetLong lua": {
		"prefix": "r.JS_Window_SetLong",
		"scope": "lua",
		"body": "r.JS_Window_SetLong(${1:windowHWND}, ${2:info}, ${3:value})$0",
		"description": "Similar to the Win32 function SetWindowLongPtr. \ninfo: 'USERDATA', 'WNDPROC', 'DLGPROC', 'ID', 'EXSTYLE' or 'STYLE', and only on WindowOS, 'INSTANCE' and 'PARENT'."
	},
	"JS_Window_SetOpacity lua": {
		"prefix": "r.JS_Window_SetOpacity",
		"scope": "lua",
		"body": "r.JS_Window_SetOpacity(${1:windowHWND}, ${2:mode}, ${3:value})$0",
		"description": "Sets the window opacity.\nParameters:\nmode: either 'ALPHA' or 'COLOR'. \nvalue: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included. \nIf COLOR, value specifies a 0xRRGGBB color, and all pixels of this color will be made transparent. (All mouse clicks over transparent pixels will pass through, too).  WARNING:\nCOLOR mode is only available in Windows, not Linux or macOS.\nTransparency can only be applied to top-level windows. If windowHWND refers to a child window, the entire top-level window that contains windowHWND will be made transparent."
	},
	"JS_Window_SetParent lua": {
		"prefix": "r.JS_Window_SetParent",
		"scope": "lua",
		"body": "r.JS_Window_SetParent(${1:childHWND}, ${2:parentHWND})$0",
		"description": "If successful, returns a handle to the previous parent window.\nOnly on WindowsOS: If parentHWND is not specified, the desktop window becomes the new parent window."
	},
	"JS_Window_SetPosition lua": {
		"prefix": "r.JS_Window_SetPosition",
		"scope": "lua",
		"body": "r.JS_Window_SetPosition(${1:windowHWND}, ${2:left}, ${3:top}, ${4:width}, ${5:height}, ${6:ZOrder}, ${7:flags})$0",
		"description": "Interface to the Win32/swell function SetWindowPos, with which window position, size, Z-order and visibility can be set, and new frame styles can be applied.\nZOrder and flags are optional parameters. If no arguments are supplied, the window will simply be moved and resized, as if the NOACTIVATE, NOZORDER, NOOWNERZORDER flags were set.\n * ZOrder: 'BOTTOM', 'TOPMOST', 'NOTOPMOST', 'TOP' or a window HWND converted to a string, for example by the Lua function tostring.\n * flags: Any combination of the standard flags, of which 'NOMOVE', 'NOSIZE', 'NOZORDER', 'NOACTIVATE', 'SHOWWINDOW', 'FRAMECHANGED' and 'NOCOPYBITS' should be valid cross-platform."
	},
	"JS_Window_SetScrollPos lua": {
		"prefix": "r.JS_Window_SetScrollPos",
		"scope": "lua",
		"body": "r.JS_Window_SetScrollPos(${1:windowHWND}, ${2:scrollbar}, ${3:position})$0",
		"description": "Parameters:\n * scrollbar: 'v' (or 'SB_VERT', or 'VERT') for vertical scroll, 'h' (or 'SB_HORZ' or 'HORZ') for horizontal.\nNOTE: API functions can scroll REAPER's windows, but cannot zoom them.  Instead, use actions such as 'View: Zoom to one loop iteration'."
	},
	"JS_Window_SetStyle lua": {
		"prefix": "r.JS_Window_SetStyle",
		"scope": "lua",
		"body": "r.JS_Window_SetStyle(${1:windowHWND}, ${2:style})$0",
		"description": "Sets and applies a window style.\nstyle may include any combination of standard window styles, such as 'POPUP' for a frameless window, or 'CAPTION,SIZEBOX,SYSMENU' for a standard framed window.\nOn Linux and macOS, 'MAXIMIZE' has not yet been implmented, and the remaining styles may appear slightly different from their WindowsOS counterparts."
	},
	"JS_Window_SetTitle lua": {
		"prefix": "r.JS_Window_SetTitle",
		"scope": "lua",
		"body": "r.JS_Window_SetTitle(${1:windowHWND}, ${2:title})$0",
		"description": "Changes the title of the specified window. Returns true if successful."
	},
	"JS_Window_SetZOrder lua": {
		"prefix": "r.JS_Window_SetZOrder",
		"scope": "lua",
		"body": "r.JS_Window_SetZOrder(${1:windowHWND}, ${2:ZOrder}, ${3:insertAfterHWND})$0",
		"description": "Sets the window Z order.\n * Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.\n * Not all the Z orders have been implemented in Linux yet.\nParameters:\n * ZOrder: 'BOTTOM', 'TOPMOST', 'NOTOPMOST', 'TOP', or a window HWND converted to a string, for example by the Lua function tostring.\n* InsertAfterHWND: For compatibility with older versions, this parameter is still available, and is optional. If ZOrder is 'INSERTAFTER', insertAfterHWND must be a handle to the window behind which windowHWND will be placed in the Z order, equivalent to setting ZOrder to this HWND; otherwise, insertAfterHWND is ignored and can be left out (or it can simply be set to the same value as windowHWND)."
	},
	"JS_Window_Show lua": {
		"prefix": "r.JS_Window_Show",
		"scope": "lua",
		"body": "r.JS_Window_Show(${1:windowHWND}, ${2:state})$0",
		"description": "Sets the specified window's show state.\nParameters:\n * state: One of the following options: 'SHOW', 'SHOWNA' (or 'SHOWNOACTIVATE'), 'SHOWMINIMIZED', 'HIDE', 'NORMAL', 'SHOWNORMAL', 'SHOWMAXIMIZED', 'SHOWDEFAULT' or 'RESTORE'. On Linux and macOS, only the first four options are fully implemented."
	},
	"JS_Window_Update lua": {
		"prefix": "r.JS_Window_Update",
		"scope": "lua",
		"body": "r.JS_Window_Update(${1:windowHWND})$0",
		"description": "Similar to the Win32 function UpdateWindow."
	},
	"JS_Zip_Close lua": {
		"prefix": "r.JS_Zip_Close",
		"scope": "lua",
		"body": "r.JS_Zip_Close(${1:zipFile}, ${2:zipHandle})$0",
		"description": "Closes the zip archive, using either the file name or the zip handle. Finalizes entries and releases resources."
	},
	"JS_Zip_CountEntries lua": {
		"prefix": "r.JS_Zip_CountEntries",
		"scope": "lua",
		"body": "r.JS_Zip_CountEntries(${1:zipHandle})$0",
		"description": ""
	},
	"JS_Zip_DeleteEntries lua": {
		"prefix": "r.JS_Zip_DeleteEntries",
		"scope": "lua",
		"body": "r.JS_Zip_DeleteEntries(${1:zipHandle}, ${2:entryNames}, ${3:entryNamesStrLen})$0",
		"description": "Deletes the specified entries from an existing Zip file.\nentryNames is zero-separated and double-zero-terminated.\nReturns the number of deleted entries on success, negative number (< 0) on error."
	},
	"JS_Zip_Entry_Close lua": {
		"prefix": "r.JS_Zip_Entry_Close",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_Close(${1:zipHandle})$0",
		"description": "Closes a zip entry, flushes buffer and releases resources. In WRITE mode, entries must be closed in order to apply and save changes.\nReturns 0 on success, negative number (< 0) on error."
	},
	"JS_Zip_Entry_CompressFile lua": {
		"prefix": "r.JS_Zip_Entry_CompressFile",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_CompressFile(${1:zipHandle}, ${2:inputFile})$0",
		"description": "Compresses the specified file into the zip archive's open entry.\nReturns 0 on success, negative number (< 0) on error."
	},
	"JS_Zip_Entry_CompressMemory lua": {
		"prefix": "r.JS_Zip_Entry_CompressMemory",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_CompressMemory(${1:zipHandle}, ${2:buf}, ${3:buf_size})$0",
		"description": "Compresses the specified memory buffer into the zip archive's open entry.\nReturns 0 on success, negative number (< 0) on error."
	},
	"JS_Zip_Entry_ExtractToFile lua": {
		"prefix": "r.JS_Zip_Entry_ExtractToFile",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_ExtractToFile(${1:zipHandle}, ${2:outputFile})$0",
		"description": "Extracts the zip archive's open entry.\nReturns 0 on success, negative number (< 0) on error."
	},
	"JS_Zip_Entry_ExtractToMemory lua": {
		"prefix": "r.JS_Zip_Entry_ExtractToMemory",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_ExtractToMemory(${1:zipHandle})$0",
		"description": "Extracts and returns the zip archive's open entry.\nReturns the number of bytes extracted on success, negative number (< 0) on error."
	},
	"JS_Zip_Entry_Info lua": {
		"prefix": "r.JS_Zip_Entry_Info",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_Info(${1:zipHandle})$0",
		"description": "Returns information about the zip archive's open entry."
	},
	"JS_Zip_Entry_OpenByIndex lua": {
		"prefix": "r.JS_Zip_Entry_OpenByIndex",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_OpenByIndex(${1:zipHandle}, ${2:index})$0",
		"description": "Opens a new entry by index in the zip archive.\nThis function is only valid if zip archive was opened in 'r' (readonly) mode.\nReturns 0 on success, negative number on error."
	},
	"JS_Zip_Entry_OpenByName lua": {
		"prefix": "r.JS_Zip_Entry_OpenByName",
		"scope": "lua",
		"body": "r.JS_Zip_Entry_OpenByName(${1:zipHandle}, ${2:entryName})$0",
		"description": "Opens an entry by name in the zip archive.\nFor zip archive opened in 'w' or 'a' mode the function will append a new entry. In readonly mode the function tries to locate an existing entry.\nReturns 0 on success, negative number (< 0) on error."
	},
	"JS_Zip_ErrorString lua": {
		"prefix": "r.JS_Zip_ErrorString",
		"scope": "lua",
		"body": "r.JS_Zip_ErrorString(${1:errorNum})$0",
		"description": "Returns a descriptive string for the given error code."
	},
	"JS_Zip_Extract lua": {
		"prefix": "r.JS_Zip_Extract",
		"scope": "lua",
		"body": "r.JS_Zip_Extract(${1:zipFile}, ${2:outputFolder})$0",
		"description": "Extracts an existing Zip file to the specified folder.\nReturns the number of extracted files on success, negative number (< 0) on error."
	},
	"JS_Zip_ListAllEntries lua": {
		"prefix": "r.JS_Zip_ListAllEntries",
		"scope": "lua",
		"body": "r.JS_Zip_ListAllEntries(${1:zipHandle})$0",
		"description": "Returns the number of entries and a zero-separated and double-zero-terminated string of entry names.\nOn error, returns a negative number (< 0)."
	},
	"JS_Zip_Open lua": {
		"prefix": "r.JS_Zip_Open",
		"scope": "lua",
		"body": "r.JS_Zip_Open(${1:zipFile}, ${2:mode}, ${3:compressionLevel})$0",
		"description": "Opens a zip archive using the given mode, which can be either 'READ' or 'WRITE' (or simply 'r' or 'w').\n * READ: Opens an existing archive for reading/extracting.\n * WRITE: Opens an archive for writing/deleting. If the file doesn't exist, an empty archive will created.\ncompressionLevel is only relevant for WRITE mode, and ranges from 0 (fastest, no compression) to 9 (slowest, best compression), with a default of 6.\nIf successful, returns 0 and a handle to the Zip archive. If failed, returns a negative error code. If the file is already open -- in the given mode -- the existing handle will be returned.\nNOTES:\n * The Zip API functions support Unicode file names and entry names.\n * The original zip specification did not support Unicode. Some applications still use this outdated specification by default, or try to use the local code page. This may lead to incompatibility and incorrect retrieval of file or entry names."
	},
	"Key_0 lua": {
		"prefix": "ImGui.Key_0",
		"scope": "lua",
		"body": "ImGui.Key_0$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_0**\n@since 0.6\n "
	},
	"Key_1 lua": {
		"prefix": "ImGui.Key_1",
		"scope": "lua",
		"body": "ImGui.Key_1$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_1**\n@since 0.6\n "
	},
	"Key_2 lua": {
		"prefix": "ImGui.Key_2",
		"scope": "lua",
		"body": "ImGui.Key_2$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_2**\n@since 0.6\n "
	},
	"Key_3 lua": {
		"prefix": "ImGui.Key_3",
		"scope": "lua",
		"body": "ImGui.Key_3$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_3**\n@since 0.6\n "
	},
	"Key_4 lua": {
		"prefix": "ImGui.Key_4",
		"scope": "lua",
		"body": "ImGui.Key_4$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_4**\n@since 0.6\n "
	},
	"Key_5 lua": {
		"prefix": "ImGui.Key_5",
		"scope": "lua",
		"body": "ImGui.Key_5$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_5**\n@since 0.6\n "
	},
	"Key_6 lua": {
		"prefix": "ImGui.Key_6",
		"scope": "lua",
		"body": "ImGui.Key_6$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_6**\n@since 0.6\n "
	},
	"Key_7 lua": {
		"prefix": "ImGui.Key_7",
		"scope": "lua",
		"body": "ImGui.Key_7$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_7**\n@since 0.6\n "
	},
	"Key_8 lua": {
		"prefix": "ImGui.Key_8",
		"scope": "lua",
		"body": "ImGui.Key_8$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_8**\n@since 0.6\n "
	},
	"Key_9 lua": {
		"prefix": "ImGui.Key_9",
		"scope": "lua",
		"body": "ImGui.Key_9$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_9**\n@since 0.6\n "
	},
	"Key_A lua": {
		"prefix": "ImGui.Key_A",
		"scope": "lua",
		"body": "ImGui.Key_A$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_A**\n@since 0.6\n "
	},
	"Key_Apostrophe lua": {
		"prefix": "ImGui.Key_Apostrophe",
		"scope": "lua",
		"body": "ImGui.Key_Apostrophe$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Apostrophe**\n'\n@since 0.6\n "
	},
	"Key_AppBack lua": {
		"prefix": "ImGui.Key_AppBack",
		"scope": "lua",
		"body": "ImGui.Key_AppBack$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_AppBack**\nAvailable on some keyboard/mouses. Often referred as 'Browser Back'.\n@since 0.9\n "
	},
	"Key_AppForward lua": {
		"prefix": "ImGui.Key_AppForward",
		"scope": "lua",
		"body": "ImGui.Key_AppForward$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_AppForward**\n@since 0.9\n "
	},
	"Key_B lua": {
		"prefix": "ImGui.Key_B",
		"scope": "lua",
		"body": "ImGui.Key_B$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_B**\n@since 0.6\n "
	},
	"Key_Backslash lua": {
		"prefix": "ImGui.Key_Backslash",
		"scope": "lua",
		"body": "ImGui.Key_Backslash$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Backslash**\n \n@since 0.6\n "
	},
	"Key_Backspace lua": {
		"prefix": "ImGui.Key_Backspace",
		"scope": "lua",
		"body": "ImGui.Key_Backspace$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Backspace**\n@since 0.6\n "
	},
	"Key_C lua": {
		"prefix": "ImGui.Key_C",
		"scope": "lua",
		"body": "ImGui.Key_C$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_C**\n@since 0.6\n "
	},
	"Key_CapsLock lua": {
		"prefix": "ImGui.Key_CapsLock",
		"scope": "lua",
		"body": "ImGui.Key_CapsLock$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_CapsLock**\n@since 0.6\n "
	},
	"Key_Comma lua": {
		"prefix": "ImGui.Key_Comma",
		"scope": "lua",
		"body": "ImGui.Key_Comma$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Comma**\n,\n@since 0.6\n "
	},
	"Key_D lua": {
		"prefix": "ImGui.Key_D",
		"scope": "lua",
		"body": "ImGui.Key_D$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_D**\n@since 0.6\n "
	},
	"Key_Delete lua": {
		"prefix": "ImGui.Key_Delete",
		"scope": "lua",
		"body": "ImGui.Key_Delete$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Delete**\n@since 0.6\n "
	},
	"Key_DownArrow lua": {
		"prefix": "ImGui.Key_DownArrow",
		"scope": "lua",
		"body": "ImGui.Key_DownArrow$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_DownArrow**\n@since 0.6\n "
	},
	"Key_E lua": {
		"prefix": "ImGui.Key_E",
		"scope": "lua",
		"body": "ImGui.Key_E$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_E**\n@since 0.6\n "
	},
	"Key_End lua": {
		"prefix": "ImGui.Key_End",
		"scope": "lua",
		"body": "ImGui.Key_End$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_End**\n@since 0.6\n "
	},
	"Key_Enter lua": {
		"prefix": "ImGui.Key_Enter",
		"scope": "lua",
		"body": "ImGui.Key_Enter$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Enter**\n@since 0.6\n "
	},
	"Key_Equal lua": {
		"prefix": "ImGui.Key_Equal",
		"scope": "lua",
		"body": "ImGui.Key_Equal$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Equal**\n=\n@since 0.6\n "
	},
	"Key_Escape lua": {
		"prefix": "ImGui.Key_Escape",
		"scope": "lua",
		"body": "ImGui.Key_Escape$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Escape**\n@since 0.6\n "
	},
	"Key_F lua": {
		"prefix": "ImGui.Key_F",
		"scope": "lua",
		"body": "ImGui.Key_F$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F**\n@since 0.6\n "
	},
	"Key_F1 lua": {
		"prefix": "ImGui.Key_F1",
		"scope": "lua",
		"body": "ImGui.Key_F1$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F1**\n@since 0.6\n "
	},
	"Key_F10 lua": {
		"prefix": "ImGui.Key_F10",
		"scope": "lua",
		"body": "ImGui.Key_F10$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F10**\n@since 0.6\n "
	},
	"Key_F11 lua": {
		"prefix": "ImGui.Key_F11",
		"scope": "lua",
		"body": "ImGui.Key_F11$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F11**\n@since 0.6\n "
	},
	"Key_F12 lua": {
		"prefix": "ImGui.Key_F12",
		"scope": "lua",
		"body": "ImGui.Key_F12$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F12**\n@since 0.6\n "
	},
	"Key_F13 lua": {
		"prefix": "ImGui.Key_F13",
		"scope": "lua",
		"body": "ImGui.Key_F13$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F13**\n@since 0.9\n "
	},
	"Key_F14 lua": {
		"prefix": "ImGui.Key_F14",
		"scope": "lua",
		"body": "ImGui.Key_F14$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F14**\n@since 0.9\n "
	},
	"Key_F15 lua": {
		"prefix": "ImGui.Key_F15",
		"scope": "lua",
		"body": "ImGui.Key_F15$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F15**\n@since 0.9\n "
	},
	"Key_F16 lua": {
		"prefix": "ImGui.Key_F16",
		"scope": "lua",
		"body": "ImGui.Key_F16$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F16**\n@since 0.9\n "
	},
	"Key_F17 lua": {
		"prefix": "ImGui.Key_F17",
		"scope": "lua",
		"body": "ImGui.Key_F17$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F17**\n@since 0.9\n "
	},
	"Key_F18 lua": {
		"prefix": "ImGui.Key_F18",
		"scope": "lua",
		"body": "ImGui.Key_F18$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F18**\n@since 0.9\n "
	},
	"Key_F19 lua": {
		"prefix": "ImGui.Key_F19",
		"scope": "lua",
		"body": "ImGui.Key_F19$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F19**\n@since 0.9\n "
	},
	"Key_F2 lua": {
		"prefix": "ImGui.Key_F2",
		"scope": "lua",
		"body": "ImGui.Key_F2$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F2**\n@since 0.6\n "
	},
	"Key_F20 lua": {
		"prefix": "ImGui.Key_F20",
		"scope": "lua",
		"body": "ImGui.Key_F20$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F20**\n@since 0.9\n "
	},
	"Key_F21 lua": {
		"prefix": "ImGui.Key_F21",
		"scope": "lua",
		"body": "ImGui.Key_F21$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F21**\n@since 0.9\n "
	},
	"Key_F22 lua": {
		"prefix": "ImGui.Key_F22",
		"scope": "lua",
		"body": "ImGui.Key_F22$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F22**\n@since 0.9\n "
	},
	"Key_F23 lua": {
		"prefix": "ImGui.Key_F23",
		"scope": "lua",
		"body": "ImGui.Key_F23$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F23**\n@since 0.9\n "
	},
	"Key_F24 lua": {
		"prefix": "ImGui.Key_F24",
		"scope": "lua",
		"body": "ImGui.Key_F24$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F24**\n@since 0.9\n "
	},
	"Key_F3 lua": {
		"prefix": "ImGui.Key_F3",
		"scope": "lua",
		"body": "ImGui.Key_F3$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F3**\n@since 0.6\n "
	},
	"Key_F4 lua": {
		"prefix": "ImGui.Key_F4",
		"scope": "lua",
		"body": "ImGui.Key_F4$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F4**\n@since 0.6\n "
	},
	"Key_F5 lua": {
		"prefix": "ImGui.Key_F5",
		"scope": "lua",
		"body": "ImGui.Key_F5$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F5**\n@since 0.6\n "
	},
	"Key_F6 lua": {
		"prefix": "ImGui.Key_F6",
		"scope": "lua",
		"body": "ImGui.Key_F6$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F6**\n@since 0.6\n "
	},
	"Key_F7 lua": {
		"prefix": "ImGui.Key_F7",
		"scope": "lua",
		"body": "ImGui.Key_F7$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F7**\n@since 0.6\n "
	},
	"Key_F8 lua": {
		"prefix": "ImGui.Key_F8",
		"scope": "lua",
		"body": "ImGui.Key_F8$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F8**\n@since 0.6\n "
	},
	"Key_F9 lua": {
		"prefix": "ImGui.Key_F9",
		"scope": "lua",
		"body": "ImGui.Key_F9$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_F9**\n@since 0.6\n "
	},
	"Key_G lua": {
		"prefix": "ImGui.Key_G",
		"scope": "lua",
		"body": "ImGui.Key_G$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_G**\n@since 0.6\n "
	},
	"Key_GraveAccent lua": {
		"prefix": "ImGui.Key_GraveAccent",
		"scope": "lua",
		"body": "ImGui.Key_GraveAccent$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_GraveAccent**\n`\n@since 0.6\n "
	},
	"Key_H lua": {
		"prefix": "ImGui.Key_H",
		"scope": "lua",
		"body": "ImGui.Key_H$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_H**\n@since 0.6\n "
	},
	"Key_Home lua": {
		"prefix": "ImGui.Key_Home",
		"scope": "lua",
		"body": "ImGui.Key_Home$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Home**\n@since 0.6\n "
	},
	"Key_I lua": {
		"prefix": "ImGui.Key_I",
		"scope": "lua",
		"body": "ImGui.Key_I$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_I**\n@since 0.6\n "
	},
	"Key_Insert lua": {
		"prefix": "ImGui.Key_Insert",
		"scope": "lua",
		"body": "ImGui.Key_Insert$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Insert**\n@since 0.6\n "
	},
	"Key_J lua": {
		"prefix": "ImGui.Key_J",
		"scope": "lua",
		"body": "ImGui.Key_J$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_J**\n@since 0.6\n "
	},
	"Key_K lua": {
		"prefix": "ImGui.Key_K",
		"scope": "lua",
		"body": "ImGui.Key_K$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_K**\n@since 0.6\n "
	},
	"Key_Keypad0 lua": {
		"prefix": "ImGui.Key_Keypad0",
		"scope": "lua",
		"body": "ImGui.Key_Keypad0$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Keypad0**\n@since 0.6\n "
	},
	"Key_Keypad1 lua": {
		"prefix": "ImGui.Key_Keypad1",
		"scope": "lua",
		"body": "ImGui.Key_Keypad1$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Keypad1**\n@since 0.6\n "
	},
	"Key_Keypad2 lua": {
		"prefix": "ImGui.Key_Keypad2",
		"scope": "lua",
		"body": "ImGui.Key_Keypad2$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Keypad2**\n@since 0.6\n "
	},
	"Key_Keypad3 lua": {
		"prefix": "ImGui.Key_Keypad3",
		"scope": "lua",
		"body": "ImGui.Key_Keypad3$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Keypad3**\n@since 0.6\n "
	},
	"Key_Keypad4 lua": {
		"prefix": "ImGui.Key_Keypad4",
		"scope": "lua",
		"body": "ImGui.Key_Keypad4$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Keypad4**\n@since 0.6\n "
	},
	"Key_Keypad5 lua": {
		"prefix": "ImGui.Key_Keypad5",
		"scope": "lua",
		"body": "ImGui.Key_Keypad5$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Keypad5**\n@since 0.6\n "
	},
	"Key_Keypad6 lua": {
		"prefix": "ImGui.Key_Keypad6",
		"scope": "lua",
		"body": "ImGui.Key_Keypad6$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Keypad6**\n@since 0.6\n "
	},
	"Key_Keypad7 lua": {
		"prefix": "ImGui.Key_Keypad7",
		"scope": "lua",
		"body": "ImGui.Key_Keypad7$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Keypad7**\n@since 0.6\n "
	},
	"Key_Keypad8 lua": {
		"prefix": "ImGui.Key_Keypad8",
		"scope": "lua",
		"body": "ImGui.Key_Keypad8$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Keypad8**\n@since 0.6\n "
	},
	"Key_Keypad9 lua": {
		"prefix": "ImGui.Key_Keypad9",
		"scope": "lua",
		"body": "ImGui.Key_Keypad9$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Keypad9**\n@since 0.6\n "
	},
	"Key_KeypadAdd lua": {
		"prefix": "ImGui.Key_KeypadAdd",
		"scope": "lua",
		"body": "ImGui.Key_KeypadAdd$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_KeypadAdd**\n@since 0.6\n "
	},
	"Key_KeypadDecimal lua": {
		"prefix": "ImGui.Key_KeypadDecimal",
		"scope": "lua",
		"body": "ImGui.Key_KeypadDecimal$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_KeypadDecimal**\n@since 0.6\n "
	},
	"Key_KeypadDivide lua": {
		"prefix": "ImGui.Key_KeypadDivide",
		"scope": "lua",
		"body": "ImGui.Key_KeypadDivide$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_KeypadDivide**\n@since 0.6\n "
	},
	"Key_KeypadEnter lua": {
		"prefix": "ImGui.Key_KeypadEnter",
		"scope": "lua",
		"body": "ImGui.Key_KeypadEnter$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_KeypadEnter**\n@since 0.6\n "
	},
	"Key_KeypadEqual lua": {
		"prefix": "ImGui.Key_KeypadEqual",
		"scope": "lua",
		"body": "ImGui.Key_KeypadEqual$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_KeypadEqual**\n@since 0.6\n "
	},
	"Key_KeypadMultiply lua": {
		"prefix": "ImGui.Key_KeypadMultiply",
		"scope": "lua",
		"body": "ImGui.Key_KeypadMultiply$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_KeypadMultiply**\n@since 0.6\n "
	},
	"Key_KeypadSubtract lua": {
		"prefix": "ImGui.Key_KeypadSubtract",
		"scope": "lua",
		"body": "ImGui.Key_KeypadSubtract$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_KeypadSubtract**\n@since 0.6\n "
	},
	"Key_L lua": {
		"prefix": "ImGui.Key_L",
		"scope": "lua",
		"body": "ImGui.Key_L$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_L**\n@since 0.6\n "
	},
	"Key_LeftAlt lua": {
		"prefix": "ImGui.Key_LeftAlt",
		"scope": "lua",
		"body": "ImGui.Key_LeftAlt$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_LeftAlt**\n@since 0.6\n "
	},
	"Key_LeftArrow lua": {
		"prefix": "ImGui.Key_LeftArrow",
		"scope": "lua",
		"body": "ImGui.Key_LeftArrow$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_LeftArrow**\n@since 0.6\n "
	},
	"Key_LeftBracket lua": {
		"prefix": "ImGui.Key_LeftBracket",
		"scope": "lua",
		"body": "ImGui.Key_LeftBracket$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_LeftBracket**\n[\n@since 0.6\n "
	},
	"Key_LeftCtrl lua": {
		"prefix": "ImGui.Key_LeftCtrl",
		"scope": "lua",
		"body": "ImGui.Key_LeftCtrl$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_LeftCtrl**\n@since 0.6\n "
	},
	"Key_LeftShift lua": {
		"prefix": "ImGui.Key_LeftShift",
		"scope": "lua",
		"body": "ImGui.Key_LeftShift$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_LeftShift**\n@since 0.6\n "
	},
	"Key_LeftSuper lua": {
		"prefix": "ImGui.Key_LeftSuper",
		"scope": "lua",
		"body": "ImGui.Key_LeftSuper$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_LeftSuper**\n@since 0.6\n "
	},
	"Key_M lua": {
		"prefix": "ImGui.Key_M",
		"scope": "lua",
		"body": "ImGui.Key_M$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_M**\n@since 0.6\n "
	},
	"Key_Menu lua": {
		"prefix": "ImGui.Key_Menu",
		"scope": "lua",
		"body": "ImGui.Key_Menu$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Menu**\n@since 0.6\n "
	},
	"Key_Minus lua": {
		"prefix": "ImGui.Key_Minus",
		"scope": "lua",
		"body": "ImGui.Key_Minus$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Minus**\n-\n@since 0.6\n "
	},
	"Key_MouseLeft lua": {
		"prefix": "ImGui.Key_MouseLeft",
		"scope": "lua",
		"body": "ImGui.Key_MouseLeft$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Mouse Buttons > Key_MouseLeft**\n**Keyboard & Mouse > Keyboard > Named Keys > Mouse Buttons**\nThis is mirroring the data also written accessible via IsMouseDown,\nGetMouseWheel etc, in a format allowing them to be accessed via standard key API.\n@since 0.8\n "
	},
	"Key_MouseMiddle lua": {
		"prefix": "ImGui.Key_MouseMiddle",
		"scope": "lua",
		"body": "ImGui.Key_MouseMiddle$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Mouse Buttons > Key_MouseMiddle**\n**Keyboard & Mouse > Keyboard > Named Keys > Mouse Buttons**\nThis is mirroring the data also written accessible via IsMouseDown,\nGetMouseWheel etc, in a format allowing them to be accessed via standard key API.\n@since 0.8\n "
	},
	"Key_MouseRight lua": {
		"prefix": "ImGui.Key_MouseRight",
		"scope": "lua",
		"body": "ImGui.Key_MouseRight$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Mouse Buttons > Key_MouseRight**\n**Keyboard & Mouse > Keyboard > Named Keys > Mouse Buttons**\nThis is mirroring the data also written accessible via IsMouseDown,\nGetMouseWheel etc, in a format allowing them to be accessed via standard key API.\n@since 0.8\n "
	},
	"Key_MouseWheelX lua": {
		"prefix": "ImGui.Key_MouseWheelX",
		"scope": "lua",
		"body": "ImGui.Key_MouseWheelX$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Mouse Buttons > Key_MouseWheelX**\n**Keyboard & Mouse > Keyboard > Named Keys > Mouse Buttons**\nThis is mirroring the data also written accessible via IsMouseDown,\nGetMouseWheel etc, in a format allowing them to be accessed via standard key API.\n@since 0.8\n "
	},
	"Key_MouseWheelY lua": {
		"prefix": "ImGui.Key_MouseWheelY",
		"scope": "lua",
		"body": "ImGui.Key_MouseWheelY$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Mouse Buttons > Key_MouseWheelY**\n**Keyboard & Mouse > Keyboard > Named Keys > Mouse Buttons**\nThis is mirroring the data also written accessible via IsMouseDown,\nGetMouseWheel etc, in a format allowing them to be accessed via standard key API.\n@since 0.8\n "
	},
	"Key_MouseX1 lua": {
		"prefix": "ImGui.Key_MouseX1",
		"scope": "lua",
		"body": "ImGui.Key_MouseX1$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Mouse Buttons > Key_MouseX1**\n**Keyboard & Mouse > Keyboard > Named Keys > Mouse Buttons**\nThis is mirroring the data also written accessible via IsMouseDown,\nGetMouseWheel etc, in a format allowing them to be accessed via standard key API.\n@since 0.8\n "
	},
	"Key_MouseX2 lua": {
		"prefix": "ImGui.Key_MouseX2",
		"scope": "lua",
		"body": "ImGui.Key_MouseX2$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Mouse Buttons > Key_MouseX2**\n**Keyboard & Mouse > Keyboard > Named Keys > Mouse Buttons**\nThis is mirroring the data also written accessible via IsMouseDown,\nGetMouseWheel etc, in a format allowing them to be accessed via standard key API.\n@since 0.8\n "
	},
	"Key_N lua": {
		"prefix": "ImGui.Key_N",
		"scope": "lua",
		"body": "ImGui.Key_N$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_N**\n@since 0.6\n "
	},
	"Key_NumLock lua": {
		"prefix": "ImGui.Key_NumLock",
		"scope": "lua",
		"body": "ImGui.Key_NumLock$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_NumLock**\n@since 0.6\n "
	},
	"Key_O lua": {
		"prefix": "ImGui.Key_O",
		"scope": "lua",
		"body": "ImGui.Key_O$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_O**\n@since 0.6\n "
	},
	"Key_P lua": {
		"prefix": "ImGui.Key_P",
		"scope": "lua",
		"body": "ImGui.Key_P$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_P**\n@since 0.6\n "
	},
	"Key_PageDown lua": {
		"prefix": "ImGui.Key_PageDown",
		"scope": "lua",
		"body": "ImGui.Key_PageDown$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_PageDown**\n@since 0.6\n "
	},
	"Key_PageUp lua": {
		"prefix": "ImGui.Key_PageUp",
		"scope": "lua",
		"body": "ImGui.Key_PageUp$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_PageUp**\n@since 0.6\n "
	},
	"Key_Pause lua": {
		"prefix": "ImGui.Key_Pause",
		"scope": "lua",
		"body": "ImGui.Key_Pause$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Pause**\n@since 0.6\n "
	},
	"Key_Period lua": {
		"prefix": "ImGui.Key_Period",
		"scope": "lua",
		"body": "ImGui.Key_Period$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Period**\n.\n@since 0.6\n "
	},
	"Key_PrintScreen lua": {
		"prefix": "ImGui.Key_PrintScreen",
		"scope": "lua",
		"body": "ImGui.Key_PrintScreen$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_PrintScreen**\n@since 0.6\n "
	},
	"Key_Q lua": {
		"prefix": "ImGui.Key_Q",
		"scope": "lua",
		"body": "ImGui.Key_Q$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Q**\n@since 0.6\n "
	},
	"Key_R lua": {
		"prefix": "ImGui.Key_R",
		"scope": "lua",
		"body": "ImGui.Key_R$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_R**\n@since 0.6\n "
	},
	"Key_RightAlt lua": {
		"prefix": "ImGui.Key_RightAlt",
		"scope": "lua",
		"body": "ImGui.Key_RightAlt$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_RightAlt**\n@since 0.6\n "
	},
	"Key_RightArrow lua": {
		"prefix": "ImGui.Key_RightArrow",
		"scope": "lua",
		"body": "ImGui.Key_RightArrow$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_RightArrow**\n@since 0.6\n "
	},
	"Key_RightBracket lua": {
		"prefix": "ImGui.Key_RightBracket",
		"scope": "lua",
		"body": "ImGui.Key_RightBracket$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_RightBracket**\n]\n@since 0.6\n "
	},
	"Key_RightCtrl lua": {
		"prefix": "ImGui.Key_RightCtrl",
		"scope": "lua",
		"body": "ImGui.Key_RightCtrl$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_RightCtrl**\n@since 0.6\n "
	},
	"Key_RightShift lua": {
		"prefix": "ImGui.Key_RightShift",
		"scope": "lua",
		"body": "ImGui.Key_RightShift$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_RightShift**\n@since 0.6\n "
	},
	"Key_RightSuper lua": {
		"prefix": "ImGui.Key_RightSuper",
		"scope": "lua",
		"body": "ImGui.Key_RightSuper$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_RightSuper**\n@since 0.6\n "
	},
	"Key_S lua": {
		"prefix": "ImGui.Key_S",
		"scope": "lua",
		"body": "ImGui.Key_S$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_S**\n@since 0.6\n "
	},
	"Key_ScrollLock lua": {
		"prefix": "ImGui.Key_ScrollLock",
		"scope": "lua",
		"body": "ImGui.Key_ScrollLock$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_ScrollLock**\n@since 0.6\n "
	},
	"Key_Semicolon lua": {
		"prefix": "ImGui.Key_Semicolon",
		"scope": "lua",
		"body": "ImGui.Key_Semicolon$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Semicolon**\n;\n@since 0.6\n "
	},
	"Key_Slash lua": {
		"prefix": "ImGui.Key_Slash",
		"scope": "lua",
		"body": "ImGui.Key_Slash$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Slash**\n/\n@since 0.6\n "
	},
	"Key_Space lua": {
		"prefix": "ImGui.Key_Space",
		"scope": "lua",
		"body": "ImGui.Key_Space$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Space**\n@since 0.6\n "
	},
	"Key_T lua": {
		"prefix": "ImGui.Key_T",
		"scope": "lua",
		"body": "ImGui.Key_T$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_T**\n@since 0.6\n "
	},
	"Key_Tab lua": {
		"prefix": "ImGui.Key_Tab",
		"scope": "lua",
		"body": "ImGui.Key_Tab$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Tab**\n@since 0.6\n "
	},
	"Key_U lua": {
		"prefix": "ImGui.Key_U",
		"scope": "lua",
		"body": "ImGui.Key_U$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_U**\n@since 0.6\n "
	},
	"Key_UpArrow lua": {
		"prefix": "ImGui.Key_UpArrow",
		"scope": "lua",
		"body": "ImGui.Key_UpArrow$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_UpArrow**\n@since 0.6\n "
	},
	"Key_V lua": {
		"prefix": "ImGui.Key_V",
		"scope": "lua",
		"body": "ImGui.Key_V$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_V**\n@since 0.6\n "
	},
	"Key_W lua": {
		"prefix": "ImGui.Key_W",
		"scope": "lua",
		"body": "ImGui.Key_W$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_W**\n@since 0.6\n "
	},
	"Key_X lua": {
		"prefix": "ImGui.Key_X",
		"scope": "lua",
		"body": "ImGui.Key_X$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_X**\n@since 0.6\n "
	},
	"Key_Y lua": {
		"prefix": "ImGui.Key_Y",
		"scope": "lua",
		"body": "ImGui.Key_Y$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Y**\n@since 0.6\n "
	},
	"Key_Z lua": {
		"prefix": "ImGui.Key_Z",
		"scope": "lua",
		"body": "ImGui.Key_Z$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Keyboard > Key_Z**\n@since 0.6\n "
	},
	"LICE_ClipLine lua": {
		"prefix": "r.LICE_ClipLine",
		"scope": "lua",
		"body": "r.LICE_ClipLine(${1:pX1}, ${2:pY1}, ${3:pX2}, ${4:pY2}, ${5:xLo}, ${6:yLo}, ${7:xHi}, ${8:yHi})$0",
		"description": "Returns false if the line is entirely offscreen."
	},
	"LocalizeString lua": {
		"prefix": "r.LocalizeString",
		"scope": "lua",
		"body": "r.LocalizeString(${1:src_string}, ${2:section}, ${3:flags})$0",
		"description": "Returns a localized version of src_string, in section section. flags can have 1 set to only localize if sprintf-style formatting matches the original."
	},
	"Loop_OnArrow lua": {
		"prefix": "r.Loop_OnArrow",
		"scope": "lua",
		"body": "r.Loop_OnArrow(0, ${2:direction})$0",
		"description": "Move the loop selection left or right. Returns true if snap is enabled."
	},
	"MB lua": {
		"prefix": "r.MB",
		"scope": "lua",
		"body": "r.MB(${1:msg}, ${2:title}, ${3:type})$0",
		"description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO"
	},
	"MIDIEditorFlagsForTrack lua": {
		"prefix": "r.MIDIEditorFlagsForTrack",
		"scope": "lua",
		"body": "r.MIDIEditorFlagsForTrack(${1:track}, ${2:pitchwheelrange}, ${3:flags}, ${4:is_set})$0",
		"description": "Get or set MIDI editor settings for this track. pitchwheelrange: semitones up or down. flags &1: snap pitch lane edits to semitones if pitchwheel range is defined."
	},
	"MIDIEditor_EnumTakes lua": {
		"prefix": "r.MIDIEditor_EnumTakes",
		"scope": "lua",
		"body": "r.MIDIEditor_EnumTakes(${1:midieditor}, ${2:takeindex}, ${3:editable_only})$0",
		"description": "list the takes that are currently being edited in this MIDI editor, starting with the active take. See MIDIEditor_GetTake"
	},
	"MIDIEditor_GetActive lua": {
		"prefix": "r.MIDIEditor_GetActive",
		"scope": "lua",
		"body": "r.MIDIEditor_GetActive()$0",
		"description": "get a pointer to the focused MIDI editor window\nsee MIDIEditor_GetMode, MIDIEditor_OnCommand"
	},
	"MIDIEditor_GetMode lua": {
		"prefix": "r.MIDIEditor_GetMode",
		"scope": "lua",
		"body": "r.MIDIEditor_GetMode(${1:midieditor})$0",
		"description": "get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\nsee MIDIEditor_GetActive, MIDIEditor_OnCommand"
	},
	"MIDIEditor_GetSetting_int lua": {
		"prefix": "r.MIDIEditor_GetSetting_int",
		"scope": "lua",
		"body": "r.MIDIEditor_GetSetting_int(${1:midieditor}, ${2:setting_desc})$0",
		"description": "Get settings from a MIDI editor. setting_desc can be:\nsnap_enabled: returns 0 or 1\nactive_note_row: returns 0-127\nlast_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events, 0x209=aftertouch, 0x210=media item lane\ndefault_note_vel: returns 0-127\ndefault_note_chan: returns 0-15\ndefault_note_len: returns default length in MIDI ticks\nscale_enabled: returns 0-1\nscale_root: returns 0-12 (0=C)\nlist_cnt: if viewing list view, returns event count\nif setting_desc is unsupported, the function returns -1.\nSee MIDIEditor_SetSetting_int, MIDIEditor_GetActive, MIDIEditor_GetSetting_str"
	},
	"MIDIEditor_GetSetting_str lua": {
		"prefix": "r.MIDIEditor_GetSetting_str",
		"scope": "lua",
		"body": "rv, buf = r.MIDIEditor_GetSetting_str(${1:midieditor}, ${2:setting_desc})$0",
		"description": "Get settings from a MIDI editor. setting_desc can be:\nlast_clicked_cc_lane: returns text description ('velocity', 'pitch', etc)\nscale: returns the scale record, for example '102034050607' for a major scale\nlist_X: if viewing list view, returns string describing event at row X (0-based). String will have a list of key=value pairs, e.g. 'pos=4.0 len=4.0 offvel=127 msg=90317F'. pos/len times are in QN, len/offvel may not be present if event is not a note. other keys which may be present include pos_pq/len_pq, sel, mute, ccval14, ccshape, ccbeztension.\nif setting_desc is unsupported, the function returns false.\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_int"
	},
	"MIDIEditor_GetTake lua": {
		"prefix": "r.MIDIEditor_GetTake",
		"scope": "lua",
		"body": "r.MIDIEditor_GetTake(${1:midieditor})$0",
		"description": "get the take that is currently being edited in this MIDI editor. see MIDIEditor_EnumTakes"
	},
	"MIDIEditor_LastFocused_OnCommand lua": {
		"prefix": "r.MIDIEditor_LastFocused_OnCommand",
		"scope": "lua",
		"body": "r.MIDIEditor_LastFocused_OnCommand(${1:command_id}, ${2:islistviewcommand})$0",
		"description": "Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.\nsee MIDIEditor_OnCommand"
	},
	"MIDIEditor_OnCommand lua": {
		"prefix": "r.MIDIEditor_OnCommand",
		"scope": "lua",
		"body": "r.MIDIEditor_OnCommand(${1:midieditor}, ${2:command_id})$0",
		"description": "Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).\nsee MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand"
	},
	"MIDIEditor_SetSetting_int lua": {
		"prefix": "r.MIDIEditor_SetSetting_int",
		"scope": "lua",
		"body": "r.MIDIEditor_SetSetting_int(${1:midieditor}, ${2:setting_desc}, ${3:setting})$0",
		"description": "Set settings for a MIDI editor. setting_desc can be:\nactive_note_row: 0-127\nSee MIDIEditor_GetSetting_int"
	},
	"MIDI_CountEvts lua": {
		"prefix": "r.MIDI_CountEvts",
		"scope": "lua",
		"body": "r.MIDI_CountEvts(${1:take})$0",
		"description": "Count the number of notes, CC events, and text/sysex events in a given MIDI item."
	},
	"MIDI_DeleteCC lua": {
		"prefix": "r.MIDI_DeleteCC",
		"scope": "lua",
		"body": "r.MIDI_DeleteCC(${1:take}, ${2:ccidx})$0",
		"description": "Delete a MIDI CC event."
	},
	"MIDI_DeleteEvt lua": {
		"prefix": "r.MIDI_DeleteEvt",
		"scope": "lua",
		"body": "r.MIDI_DeleteEvt(${1:take}, ${2:evtidx})$0",
		"description": "Delete a MIDI event."
	},
	"MIDI_DeleteNote lua": {
		"prefix": "r.MIDI_DeleteNote",
		"scope": "lua",
		"body": "r.MIDI_DeleteNote(${1:take}, ${2:noteidx})$0",
		"description": "Delete a MIDI note."
	},
	"MIDI_DeleteTextSysexEvt lua": {
		"prefix": "r.MIDI_DeleteTextSysexEvt",
		"scope": "lua",
		"body": "r.MIDI_DeleteTextSysexEvt(${1:take}, ${2:textsyxevtidx})$0",
		"description": "Delete a MIDI text or sysex event."
	},
	"MIDI_DisableSort lua": {
		"prefix": "r.MIDI_DisableSort",
		"scope": "lua",
		"body": "r.MIDI_DisableSort(${1:take})$0",
		"description": "Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called."
	},
	"MIDI_EnumSelCC lua": {
		"prefix": "r.MIDI_EnumSelCC",
		"scope": "lua",
		"body": "r.MIDI_EnumSelCC(${1:take}, ${2:ccidx})$0",
		"description": "Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events)."
	},
	"MIDI_EnumSelEvts lua": {
		"prefix": "r.MIDI_EnumSelEvts",
		"scope": "lua",
		"body": "r.MIDI_EnumSelEvts(${1:take}, ${2:evtidx})$0",
		"description": "Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events)."
	},
	"MIDI_EnumSelNotes lua": {
		"prefix": "r.MIDI_EnumSelNotes",
		"scope": "lua",
		"body": "r.MIDI_EnumSelNotes(${1:take}, ${2:noteidx})$0",
		"description": "Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events)."
	},
	"MIDI_EnumSelTextSysexEvts lua": {
		"prefix": "r.MIDI_EnumSelTextSysexEvts",
		"scope": "lua",
		"body": "r.MIDI_EnumSelTextSysexEvts(${1:take}, ${2:textsyxidx})$0",
		"description": "Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events)."
	},
	"MIDI_GetAllEvts lua": {
		"prefix": "r.MIDI_GetAllEvts",
		"scope": "lua",
		"body": "rv, buf = r.MIDI_GetAllEvts(${1:take})$0",
		"description": "Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\noffset: MIDI ticks from previous event\nflag: &1=selected &2=muted\nflag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\nmsg: the MIDI message.\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\nSee MIDI_SetAllEvts."
	},
	"MIDI_GetCC lua": {
		"prefix": "r.MIDI_GetCC",
		"scope": "lua",
		"body": "rv, selected, muted, ppqpos, chanmsg, chan, msg2, msg3 = r.MIDI_GetCC(${1:take}, ${2:ccidx})$0",
		"description": "Get MIDI CC event properties."
	},
	"MIDI_GetCCShape lua": {
		"prefix": "r.MIDI_GetCCShape",
		"scope": "lua",
		"body": "rv, shape, beztension = r.MIDI_GetCCShape(${1:take}, ${2:ccidx})$0",
		"description": "Get CC shape and bezier tension. See MIDI_GetCC, MIDI_SetCCShape"
	},
	"MIDI_GetEvt lua": {
		"prefix": "r.MIDI_GetEvt",
		"scope": "lua",
		"body": "rv, selected, muted, ppqpos, msg = r.MIDI_GetEvt(${1:take}, ${2:evtidx})$0",
		"description": "Get MIDI event properties."
	},
	"MIDI_GetGrid lua": {
		"prefix": "r.MIDI_GetGrid",
		"scope": "lua",
		"body": "num, swing, noteLen = r.MIDI_GetGrid(${1:take})$0",
		"description": "Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size."
	},
	"MIDI_GetHash lua": {
		"prefix": "r.MIDI_GetHash",
		"scope": "lua",
		"body": "rv, hash = r.MIDI_GetHash(${1:take}, ${2:notesonly})$0",
		"description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetTrackHash"
	},
	"MIDI_GetNote lua": {
		"prefix": "r.MIDI_GetNote",
		"scope": "lua",
		"body": "rv, selected, muted, startppqpos, endppqpos, chan, pitch, vel = r.MIDI_GetNote(${1:take}, ${2:noteidx})$0",
		"description": "Get MIDI note properties."
	},
	"MIDI_GetPPQPosFromProjQN lua": {
		"prefix": "r.MIDI_GetPPQPosFromProjQN",
		"scope": "lua",
		"body": "r.MIDI_GetPPQPosFromProjQN(${1:take}, ${2:projqn})$0",
		"description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes."
	},
	"MIDI_GetPPQPosFromProjTime lua": {
		"prefix": "r.MIDI_GetPPQPosFromProjTime",
		"scope": "lua",
		"body": "r.MIDI_GetPPQPosFromProjTime(${1:take}, ${2:projtime})$0",
		"description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds."
	},
	"MIDI_GetPPQPos_EndOfMeasure lua": {
		"prefix": "r.MIDI_GetPPQPos_EndOfMeasure",
		"scope": "lua",
		"body": "r.MIDI_GetPPQPos_EndOfMeasure(${1:take}, ${2:ppqpos})$0",
		"description": "Returns the MIDI tick (ppq) position corresponding to the end of the measure."
	},
	"MIDI_GetPPQPos_StartOfMeasure lua": {
		"prefix": "r.MIDI_GetPPQPos_StartOfMeasure",
		"scope": "lua",
		"body": "r.MIDI_GetPPQPos_StartOfMeasure(${1:take}, ${2:ppqpos})$0",
		"description": "Returns the MIDI tick (ppq) position corresponding to the start of the measure."
	},
	"MIDI_GetProjQNFromPPQPos lua": {
		"prefix": "r.MIDI_GetProjQNFromPPQPos",
		"scope": "lua",
		"body": "r.MIDI_GetProjQNFromPPQPos(${1:take}, ${2:ppqpos})$0",
		"description": "Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position."
	},
	"MIDI_GetProjTimeFromPPQPos lua": {
		"prefix": "r.MIDI_GetProjTimeFromPPQPos",
		"scope": "lua",
		"body": "r.MIDI_GetProjTimeFromPPQPos(${1:take}, ${2:ppqpos})$0",
		"description": "Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position."
	},
	"MIDI_GetRecentInputEvent lua": {
		"prefix": "r.MIDI_GetRecentInputEvent",
		"scope": "lua",
		"body": "rv, buf, ts, devIdx, projPos, projLoopCnt = r.MIDI_GetRecentInputEvent(${1:idx})$0",
		"description": "Gets a recent MIDI input event from the global history. idx=0 for the most recent event, which also latches to the latest MIDI event state (to get a more recent list, calling with idx=0 is necessary). idx=1 next most recent event, returns a non-zero sequence number for the event, or zero if no more events. tsOut will be set to the timestamp in samples relative to the current position (0 is current, -48000 is one second ago, etc). devIdxOut will have the low 16 bits set to the input device index, and 0x10000 will be set if device was enabled only for control. projPosOut will be set to project position in seconds if project was playing back at time of event, otherwise -1. Large SysEx events will not be included in this event list."
	},
	"MIDI_GetScale lua": {
		"prefix": "r.MIDI_GetScale",
		"scope": "lua",
		"body": "rv, root, scale, name = r.MIDI_GetScale(${1:take})$0",
		"description": "Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd, &0x8=minor 3rd, &0xF=fourth, etc."
	},
	"MIDI_GetTextSysexEvt lua": {
		"prefix": "r.MIDI_GetTextSysexEvt",
		"scope": "lua",
		"body": "rv, selected, muted, ppqpos, type, msg = r.MIDI_GetTextSysexEvt(${1:take}, ${2:textsyxevtidx}, ${3:selected}, ${4:muted}, ${5:ppqpos}, ${6:type}, ${7:msg})$0",
		"description": "Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. For all other meta-messages, type is returned as -2 and msg returned as all zeroes. See MIDI_GetEvt."
	},
	"MIDI_GetTrackHash lua": {
		"prefix": "r.MIDI_GetTrackHash",
		"scope": "lua",
		"body": "rv, hash = r.MIDI_GetTrackHash(${1:track}, ${2:notesonly})$0",
		"description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetHash"
	},
	"MIDI_InsertCC lua": {
		"prefix": "r.MIDI_InsertCC",
		"scope": "lua",
		"body": "r.MIDI_InsertCC(${1:take}, ${2:selected}, ${3:muted}, ${4:ppqpos}, ${5:chanmsg}, ${6:chan}, ${7:msg2}, ${8:msg3})$0",
		"description": "Insert a new MIDI CC event."
	},
	"MIDI_InsertEvt lua": {
		"prefix": "r.MIDI_InsertEvt",
		"scope": "lua",
		"body": "r.MIDI_InsertEvt(${1:take}, ${2:selected}, ${3:muted}, ${4:ppqpos}, ${5:bytestr})$0",
		"description": "Insert a new MIDI event."
	},
	"MIDI_InsertNote lua": {
		"prefix": "r.MIDI_InsertNote",
		"scope": "lua",
		"body": "r.MIDI_InsertNote(${1:take}, ${2:selected}, ${3:muted}, ${4:startppqpos}, ${5:endppqpos}, ${6:chan}, ${7:pitch}, ${8:vel}, ${9:noSortIn})$0",
		"description": "Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done."
	},
	"MIDI_InsertTextSysexEvt lua": {
		"prefix": "r.MIDI_InsertTextSysexEvt",
		"scope": "lua",
		"body": "r.MIDI_InsertTextSysexEvt(${1:take}, ${2:selected}, ${3:muted}, ${4:ppqpos}, ${5:type}, ${6:bytestr})$0",
		"description": "Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event."
	},
	"MIDI_RefreshEditors lua": {
		"prefix": "r.MIDI_RefreshEditors",
		"scope": "lua",
		"body": "r.MIDI_RefreshEditors(${1:tk})$0",
		"description": "Synchronously updates any open MIDI editors for MIDI take"
	},
	"MIDI_SelectAll lua": {
		"prefix": "r.MIDI_SelectAll",
		"scope": "lua",
		"body": "r.MIDI_SelectAll(${1:take}, ${2:select})$0",
		"description": "Select or deselect all MIDI content."
	},
	"MIDI_SetAllEvts lua": {
		"prefix": "r.MIDI_SetAllEvts",
		"scope": "lua",
		"body": "r.MIDI_SetAllEvts(${1:take}, ${2:buf})$0",
		"description": "Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\noffset: MIDI ticks from previous event\nflag: &1=selected &2=muted\nflag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\nmsg: the MIDI message.\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\nSee MIDI_GetAllEvts."
	},
	"MIDI_SetCC lua": {
		"prefix": "r.MIDI_SetCC",
		"scope": "lua",
		"body": "r.MIDI_SetCC(${1:take}, ${2:ccidx}, ${3:selectedIn}, ${4:mutedIn}, ${5:ppqposIn}, ${6:chanmsgIn}, ${7:chanIn}, ${8:msg2In}, ${9:msg3In}, ${10:noSortIn})$0",
		"description": "Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done."
	},
	"MIDI_SetCCShape lua": {
		"prefix": "r.MIDI_SetCCShape",
		"scope": "lua",
		"body": "r.MIDI_SetCCShape(${1:take}, ${2:ccidx}, ${3:shape}, ${4:beztension}, ${5:noSortIn})$0",
		"description": "Set CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. See MIDI_SetCC, MIDI_GetCCShape"
	},
	"MIDI_SetEvt lua": {
		"prefix": "r.MIDI_SetEvt",
		"scope": "lua",
		"body": "r.MIDI_SetEvt(${1:take}, ${2:evtidx}, ${3:selectedIn}, ${4:mutedIn}, ${5:ppqposIn}, ${6:msg}, ${7:noSortIn})$0",
		"description": "Set MIDI event properties. Properties passed as NULL will not be set.  set noSort if setting multiple events, then call MIDI_Sort when done."
	},
	"MIDI_SetItemExtents lua": {
		"prefix": "r.MIDI_SetItemExtents",
		"scope": "lua",
		"body": "r.MIDI_SetItemExtents(${1:item}, ${2:startQN}, ${3:endQN})$0",
		"description": "Set the start/end positions of a media item that contains a MIDI take."
	},
	"MIDI_SetNote lua": {
		"prefix": "r.MIDI_SetNote",
		"scope": "lua",
		"body": "r.MIDI_SetNote(${1:take}, ${2:noteidx}, ${3:selectedIn}, ${4:mutedIn}, ${5:startppqposIn}, ${6:endppqposIn}, ${7:chanIn}, ${8:pitchIn}, ${9:velIn}, ${10:noSortIn})$0",
		"description": "Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes."
	},
	"MIDI_SetTextSysexEvt lua": {
		"prefix": "r.MIDI_SetTextSysexEvt",
		"scope": "lua",
		"body": "r.MIDI_SetTextSysexEvt(${1:take}, ${2:textsyxevtidx}, ${3:selectedIn}, ${4:mutedIn}, ${5:ppqposIn}, ${6:typeIn}, ${7:msg}, ${8:noSortIn})$0",
		"description": "Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. set noSort if setting multiple events, then call MIDI_Sort when done."
	},
	"MIDI_Sort lua": {
		"prefix": "r.MIDI_Sort",
		"scope": "lua",
		"body": "r.MIDI_Sort(${1:take})$0",
		"description": "Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc."
	},
	"Main_OnCommand lua": {
		"prefix": "r.Main_OnCommand",
		"scope": "lua",
		"body": "r.Main_OnCommand(${1:command}, ${2:flag})$0",
		"description": "See Main_OnCommandEx."
	},
	"Main_OnCommandEx lua": {
		"prefix": "r.Main_OnCommandEx",
		"scope": "lua",
		"body": "r.Main_OnCommandEx(${1:command}, ${2:flag}, 0)$0",
		"description": "Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup()."
	},
	"Main_SaveProject lua": {
		"prefix": "r.Main_SaveProject",
		"scope": "lua",
		"body": "r.Main_SaveProject(0, ${2:forceSaveAsIn})$0",
		"description": "Save the project."
	},
	"Main_SaveProjectEx lua": {
		"prefix": "r.Main_SaveProjectEx",
		"scope": "lua",
		"body": "r.Main_SaveProjectEx(0, ${2:filename}, ${3:options})$0",
		"description": "Save the project. options: &1=save selected tracks as track template, &2=include media with track template, &4=include envelopes with track template, &8=if not saving template, set as the new project filename for this ReaProject. See Main_openProject, Main_SaveProject."
	},
	"Main_UpdateLoopInfo lua": {
		"prefix": "r.Main_UpdateLoopInfo",
		"scope": "lua",
		"body": "r.Main_UpdateLoopInfo(${1:ignoremask})$0",
		"description": ""
	},
	"Main_openProject lua": {
		"prefix": "r.Main_openProject",
		"scope": "lua",
		"body": "r.Main_openProject(${1:name})$0",
		"description": "opens a project. will prompt the user to save unless name is prefixed with 'noprompt:'. If name is prefixed with 'template:', project file will be loaded as a template.\nIf passed a .RTrackTemplate file, adds the template to the existing project."
	},
	"MarkProjectDirty lua": {
		"prefix": "r.MarkProjectDirty",
		"scope": "lua",
		"body": "r.MarkProjectDirty(0)$0",
		"description": "Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences."
	},
	"MarkTrackItemsDirty lua": {
		"prefix": "r.MarkTrackItemsDirty",
		"scope": "lua",
		"body": "r.MarkTrackItemsDirty(${1:track}, ${2:item})$0",
		"description": "If track is supplied, item is ignored"
	},
	"Master_GetPlayRate lua": {
		"prefix": "r.Master_GetPlayRate",
		"scope": "lua",
		"body": "r.Master_GetPlayRate(0)$0",
		"description": ""
	},
	"Master_GetPlayRateAtTime lua": {
		"prefix": "r.Master_GetPlayRateAtTime",
		"scope": "lua",
		"body": "r.Master_GetPlayRateAtTime(${1:time_s}, 0)$0",
		"description": ""
	},
	"Master_GetTempo lua": {
		"prefix": "r.Master_GetTempo",
		"scope": "lua",
		"body": "r.Master_GetTempo()$0",
		"description": ""
	},
	"Master_NormalizePlayRate lua": {
		"prefix": "r.Master_NormalizePlayRate",
		"scope": "lua",
		"body": "r.Master_NormalizePlayRate(${1:playrate}, ${2:isnormalized})$0",
		"description": "Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider."
	},
	"Master_NormalizeTempo lua": {
		"prefix": "r.Master_NormalizeTempo",
		"scope": "lua",
		"body": "r.Master_NormalizeTempo(${1:bpm}, ${2:isnormalized})$0",
		"description": "Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm."
	},
	"MediaExplorerGetLastPlayedFileInfo lua": {
		"prefix": "r.MediaExplorerGetLastPlayedFileInfo",
		"scope": "lua",
		"body": "rv, filename, filemode, selstart, selend, pitchshift, voladj, rateadj, sourcebpm, extrainfo = r.MediaExplorerGetLastPlayedFileInfo()$0",
		"description": "Get information about the most recently previewed Media Explorer file. filename: last played file name. filemode: &1:insert on new track, &2:insert into sampler, &8:tempo sync 1x, &16:tempo sync 0.5x, &32:tempo sync 2x, &64:do not preserve pitch when changing playrate, &128:loop selection exists, &256:time selection exists, &512:apply pitch/rate adjustment on insert, &1024:apply volume adjustment on insert, &2048:apply normalization on insert, &8192:reverse preview. startpct/endpct: time selection in [0.0, 1.0]. pitchshift/voladj/rateadj: current pitch/volume/playrate preview adjustments. srcbpm: source media tempo. extrainfo: currently unused."
	},
	"MediaItemDescendsFromTrack lua": {
		"prefix": "r.MediaItemDescendsFromTrack",
		"scope": "lua",
		"body": "r.MediaItemDescendsFromTrack(${1:item}, ${2:track})$0",
		"description": "Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc."
	},
	"Menu_GetHash lua": {
		"prefix": "r.Menu_GetHash",
		"scope": "lua",
		"body": "rv, hash = r.Menu_GetHash(${1:menuname}, ${2:flag})$0",
		"description": "Get a string that only changes when menu/toolbar entries are added or removed (not re-ordered). Can be used to determine if a customized menu/toolbar differs from the default, or if the default changed after a menu/toolbar was customized. flag==0: current default menu/toolbar; flag==1: current customized menu/toolbar; flag==2: default menu/toolbar at the time the current menu/toolbar was most recently customized, if it was customized in REAPER v7.08 or later."
	},
	"Mod_Alt lua": {
		"prefix": "ImGui.Mod_Alt",
		"scope": "lua",
		"body": "ImGui.Mod_Alt$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Modifiers > Mod_Alt**\n@since 0.8\n "
	},
	"Mod_Ctrl lua": {
		"prefix": "ImGui.Mod_Ctrl",
		"scope": "lua",
		"body": "ImGui.Mod_Ctrl$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Modifiers > Mod_Ctrl**\nCmd when ConfigVar_MacOSXBehaviors is enabled.\n@since 0.9.2\n "
	},
	"Mod_None lua": {
		"prefix": "ImGui.Mod_None",
		"scope": "lua",
		"body": "ImGui.Mod_None$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Modifiers > Mod_None**\n@since 0.8\n "
	},
	"Mod_Shift lua": {
		"prefix": "ImGui.Mod_Shift",
		"scope": "lua",
		"body": "ImGui.Mod_Shift$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Modifiers > Mod_Shift**\n@since 0.8\n "
	},
	"Mod_Super lua": {
		"prefix": "ImGui.Mod_Super",
		"scope": "lua",
		"body": "ImGui.Mod_Super$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Keyboard > Named Keys > Modifiers > Mod_Super**\nCtrl when ConfigVar_MacOSXBehaviors is enabled.\n@since 0.9.2\n "
	},
	"MouseButton_Left lua": {
		"prefix": "ImGui.MouseButton_Left",
		"scope": "lua",
		"body": "ImGui.MouseButton_Left$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Mouse > MouseButton_Left**\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold').\n@since 0.1\n "
	},
	"MouseButton_Middle lua": {
		"prefix": "ImGui.MouseButton_Middle",
		"scope": "lua",
		"body": "ImGui.MouseButton_Middle$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Mouse > MouseButton_Middle**\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold').\n@since 0.1\n "
	},
	"MouseButton_Right lua": {
		"prefix": "ImGui.MouseButton_Right",
		"scope": "lua",
		"body": "ImGui.MouseButton_Right$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Mouse > MouseButton_Right**\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold').\n@since 0.1\n "
	},
	"MouseCursor_Arrow lua": {
		"prefix": "ImGui.MouseCursor_Arrow",
		"scope": "lua",
		"body": "ImGui.MouseCursor_Arrow$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Mouse > Mouse Cursor > MouseCursor_Arrow**\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold').\n@since 0.1\n "
	},
	"MouseCursor_Hand lua": {
		"prefix": "ImGui.MouseCursor_Hand",
		"scope": "lua",
		"body": "ImGui.MouseCursor_Hand$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Mouse > Mouse Cursor > MouseCursor_Hand**\n(Unused by Dear ImGui functions. Use for e.g. hyperlinks)\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold').\n@since 0.1\n "
	},
	"MouseCursor_None lua": {
		"prefix": "ImGui.MouseCursor_None",
		"scope": "lua",
		"body": "ImGui.MouseCursor_None$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Mouse > Mouse Cursor > MouseCursor_None**\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold').\n@since 0.8.4\n "
	},
	"MouseCursor_NotAllowed lua": {
		"prefix": "ImGui.MouseCursor_NotAllowed",
		"scope": "lua",
		"body": "ImGui.MouseCursor_NotAllowed$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Mouse > Mouse Cursor > MouseCursor_NotAllowed**\nWhen hovering something with disallowed interaction. Usually a crossed circle.\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold').\n@since 0.1\n "
	},
	"MouseCursor_ResizeAll lua": {
		"prefix": "ImGui.MouseCursor_ResizeAll",
		"scope": "lua",
		"body": "ImGui.MouseCursor_ResizeAll$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Mouse > Mouse Cursor > MouseCursor_ResizeAll**\n(Unused by Dear ImGui functions)\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold').\n@since 0.1\n "
	},
	"MouseCursor_ResizeEW lua": {
		"prefix": "ImGui.MouseCursor_ResizeEW",
		"scope": "lua",
		"body": "ImGui.MouseCursor_ResizeEW$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Mouse > Mouse Cursor > MouseCursor_ResizeEW**\nWhen hovering over a vertical border or a column.\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold').\n@since 0.1\n "
	},
	"MouseCursor_ResizeNESW lua": {
		"prefix": "ImGui.MouseCursor_ResizeNESW",
		"scope": "lua",
		"body": "ImGui.MouseCursor_ResizeNESW$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Mouse > Mouse Cursor > MouseCursor_ResizeNESW**\nWhen hovering over the bottom-left corner of a window.\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold').\n@since 0.1\n "
	},
	"MouseCursor_ResizeNS lua": {
		"prefix": "ImGui.MouseCursor_ResizeNS",
		"scope": "lua",
		"body": "ImGui.MouseCursor_ResizeNS$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Mouse > Mouse Cursor > MouseCursor_ResizeNS**\nWhen hovering over a horizontal border.\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold').\n@since 0.1\n "
	},
	"MouseCursor_ResizeNWSE lua": {
		"prefix": "ImGui.MouseCursor_ResizeNWSE",
		"scope": "lua",
		"body": "ImGui.MouseCursor_ResizeNWSE$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Mouse > Mouse Cursor > MouseCursor_ResizeNWSE**\nWhen hovering over the bottom-right corner of a window.\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold').\n@since 0.1\n "
	},
	"MouseCursor_TextInput lua": {
		"prefix": "ImGui.MouseCursor_TextInput",
		"scope": "lua",
		"body": "ImGui.MouseCursor_TextInput$0",
		"description": "@type integer\n---\n**Keyboard & Mouse > Mouse > Mouse Cursor > MouseCursor_TextInput**\nWhen hovering over InputText, etc.\n**Keyboard & Mouse > Mouse**\nTo refer to a mouse button, you may use named enums in your code e.g.\nMouseButton_Left, MouseButton_Right.\nYou can also use regular integer: it is forever guaranteed that\n0=Left, 1=Right, 2=Middle. Buttons 3 and 4 do not have a named enum.\nDragging operations are only reported after mouse has moved a certain distance\naway from the initial clicking position (see 'lock_threshold' parameters and\n'ConfigVar_MouseDragThreshold').\n@since 0.1\n "
	},
	"MoveEditCursor lua": {
		"prefix": "r.MoveEditCursor",
		"scope": "lua",
		"body": "r.MoveEditCursor(${1:adjamt}, ${2:dosel})$0",
		"description": ""
	},
	"MoveMediaItemToTrack lua": {
		"prefix": "r.MoveMediaItemToTrack",
		"scope": "lua",
		"body": "r.MoveMediaItemToTrack(${1:item}, ${2:desttr})$0",
		"description": "returns TRUE if move succeeded"
	},
	"MuteAllTracks lua": {
		"prefix": "r.MuteAllTracks",
		"scope": "lua",
		"body": "r.MuteAllTracks(${1:mute})$0",
		"description": ""
	},
	"NF_AnalyzeMediaItemPeakAndRMS lua": {
		"prefix": "r.NF_AnalyzeMediaItemPeakAndRMS",
		"scope": "lua",
		"body": "r.NF_AnalyzeMediaItemPeakAndRMS(${1:item}, ${2:windowSize}, ${3:reaper_array_peaks}, ${4:reaper_array_peakpositions}, ${5:reaper_array_RMSs}, ${6:reaper_array_RMSpositions})$0",
		"description": "This function combines all other NF_Peak/RMS functions in a single one and additionally returns peak RMS positions. Lua example code here. Note: It's recommended to use this function with ReaScript/Lua as it provides reaper.array objects. If using this function with other scripting languages, you must provide arrays in the reaper.array format."
	},
	"NF_AnalyzeTakeLoudness lua": {
		"prefix": "r.NF_AnalyzeTakeLoudness",
		"scope": "lua",
		"body": "r.NF_AnalyzeTakeLoudness(${1:take}, ${2:analyzeTruePeak})$0",
		"description": "Full loudness analysis. retval: returns true on successful analysis, false on MIDI take or when analysis failed for some reason. analyzeTruePeak=true: Also do true peak analysis. Returns true peak value in dBTP and true peak position (relative to item position). Considerably slower than without true peak analysis (since it uses oversampling). Note: Short term uses a time window of 3 sec. for calculation. So for items shorter than this shortTermMaxOut can't be calculated correctly. Momentary uses a time window of 0.4 sec."
	},
	"NF_AnalyzeTakeLoudness2 lua": {
		"prefix": "r.NF_AnalyzeTakeLoudness2",
		"scope": "lua",
		"body": "r.NF_AnalyzeTakeLoudness2(${1:take}, ${2:analyzeTruePeak})$0",
		"description": "Same as NF_AnalyzeTakeLoudness but additionally returns shortTermMaxPos and momentaryMaxPos (in absolute project time). Note: shortTermMaxPos and momentaryMaxPos indicate the beginning of time intervalls, (3 sec. and 0.4 sec. resp.)."
	},
	"NF_AnalyzeTakeLoudness_IntegratedOnly lua": {
		"prefix": "r.NF_AnalyzeTakeLoudness_IntegratedOnly",
		"scope": "lua",
		"body": "r.NF_AnalyzeTakeLoudness_IntegratedOnly(${1:take})$0",
		"description": "Does LUFS integrated analysis only. Faster than full loudness analysis (NF_AnalyzeTakeLoudness) . Use this if only LUFS integrated is required. Take vol. env. is taken into account. See: Signal flow"
	},
	"NF_Base64_Decode lua": {
		"prefix": "r.NF_Base64_Decode",
		"scope": "lua",
		"body": "r.NF_Base64_Decode(${1:base64Str})$0",
		"description": "Returns true on success."
	},
	"NF_Base64_Encode lua": {
		"prefix": "r.NF_Base64_Encode",
		"scope": "lua",
		"body": "r.NF_Base64_Encode(${1:str}, ${2:usePadding})$0",
		"description": "Input string may contain null bytes in REAPER 6.44 or newer. Note: Doesn't allow padding in the middle (e.g. concatenated encoded strings), doesn't allow newlines."
	},
	"NF_ClearGlobalStartupAction lua": {
		"prefix": "r.NF_ClearGlobalStartupAction",
		"scope": "lua",
		"body": "r.NF_ClearGlobalStartupAction()$0",
		"description": "Returns true if global startup action was cleared successfully."
	},
	"NF_ClearProjectStartupAction lua": {
		"prefix": "r.NF_ClearProjectStartupAction",
		"scope": "lua",
		"body": "r.NF_ClearProjectStartupAction()$0",
		"description": "Returns true if project startup action was cleared successfully."
	},
	"NF_ClearProjectTrackSelectionAction lua": {
		"prefix": "r.NF_ClearProjectTrackSelectionAction",
		"scope": "lua",
		"body": "r.NF_ClearProjectTrackSelectionAction()$0",
		"description": "Returns true if project track selection action was cleared successfully."
	},
	"NF_DeleteTakeFromItem lua": {
		"prefix": "r.NF_DeleteTakeFromItem",
		"scope": "lua",
		"body": "r.NF_DeleteTakeFromItem(${1:item}, ${2:takeIdx})$0",
		"description": "Deletes a take from an item. takeIdx is zero-based. Returns true on success."
	},
	"NF_GetGlobalStartupAction lua": {
		"prefix": "r.NF_GetGlobalStartupAction",
		"scope": "lua",
		"body": "rv, desc, cmdId = r.NF_GetGlobalStartupAction()$0",
		"description": "Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if global startup action is set, otherwise empty string. Returns false on failure."
	},
	"NF_GetMediaItemAverageRMS lua": {
		"prefix": "r.NF_GetMediaItemAverageRMS",
		"scope": "lua",
		"body": "r.NF_GetMediaItemAverageRMS(${1:item})$0",
		"description": "Returns the average overall (non-windowed) dB RMS level of active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Returns -150.0 if MIDI take or empty item."
	},
	"NF_GetMediaItemMaxPeak lua": {
		"prefix": "r.NF_GetMediaItemMaxPeak",
		"scope": "lua",
		"body": "r.NF_GetMediaItemMaxPeak(${1:item})$0",
		"description": "Returns the greatest max. peak value in dBFS of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Returns -150.0 if MIDI take or empty item."
	},
	"NF_GetMediaItemMaxPeakAndMaxPeakPos lua": {
		"prefix": "r.NF_GetMediaItemMaxPeakAndMaxPeakPos",
		"scope": "lua",
		"body": "num, maxPeakPos = r.NF_GetMediaItemMaxPeakAndMaxPeakPos(${1:item})$0",
		"description": "See NF_GetMediaItemMaxPeak, additionally returns maxPeakPos (relative to item position)."
	},
	"NF_GetMediaItemPeakRMS_NonWindowed lua": {
		"prefix": "r.NF_GetMediaItemPeakRMS_NonWindowed",
		"scope": "lua",
		"body": "r.NF_GetMediaItemPeakRMS_NonWindowed(${1:item})$0",
		"description": "Returns the greatest overall (non-windowed) dB RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Returns -150.0 if MIDI take or empty item."
	},
	"NF_GetMediaItemPeakRMS_Windowed lua": {
		"prefix": "r.NF_GetMediaItemPeakRMS_Windowed",
		"scope": "lua",
		"body": "r.NF_GetMediaItemPeakRMS_Windowed(${1:item})$0",
		"description": "Returns the average dB RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Obeys 'Window size for peak RMS' setting in 'SWS: Set RMS analysis/normalize options' for calculation. Returns -150.0 if MIDI take or empty item."
	},
	"NF_GetProjectStartupAction lua": {
		"prefix": "r.NF_GetProjectStartupAction",
		"scope": "lua",
		"body": "rv, desc, cmdId = r.NF_GetProjectStartupAction()$0",
		"description": "Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if project startup action is set, otherwise empty string. Returns false on failure."
	},
	"NF_GetProjectTrackSelectionAction lua": {
		"prefix": "r.NF_GetProjectTrackSelectionAction",
		"scope": "lua",
		"body": "rv, desc, cmdId = r.NF_GetProjectTrackSelectionAction()$0",
		"description": "Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if project track selection action is set, otherwise empty string. Returns false on failure."
	},
	"NF_GetSWSMarkerRegionSub lua": {
		"prefix": "r.NF_GetSWSMarkerRegionSub",
		"scope": "lua",
		"body": "r.NF_GetSWSMarkerRegionSub(${1:markerRegionIdx})$0",
		"description": "Returns SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers (not displayed marker/region index). Returns empty string if marker/region with specified index not found or marker/region subtitle not set. Lua code example here."
	},
	"NF_GetSWSTrackNotes lua": {
		"prefix": "r.NF_GetSWSTrackNotes",
		"scope": "lua",
		"body": "r.NF_GetSWSTrackNotes(${1:track})$0",
		"description": ""
	},
	"NF_GetSWS_RMSoptions lua": {
		"prefix": "r.NF_GetSWS_RMSoptions",
		"scope": "lua",
		"body": "target, windowSize = r.NF_GetSWS_RMSoptions()$0",
		"description": "Get SWS analysis/normalize options. See NF_SetSWS_RMSoptions."
	},
	"NF_GetThemeDefaultTCPHeights lua": {
		"prefix": "r.NF_GetThemeDefaultTCPHeights",
		"scope": "lua",
		"body": "supercollapsed, collapsed, small, recarm = r.NF_GetThemeDefaultTCPHeights()$0",
		"description": ""
	},
	"NF_ReadAudioFileBitrate lua": {
		"prefix": "r.NF_ReadAudioFileBitrate",
		"scope": "lua",
		"body": "r.NF_ReadAudioFileBitrate(${1:fn})$0",
		"description": "Returns the bitrate of an audio file in kb/s if available (0 otherwise). For supported filetypes see TagLib::AudioProperties::bitrate."
	},
	"NF_ScrollHorizontallyByPercentage lua": {
		"prefix": "r.NF_ScrollHorizontallyByPercentage",
		"scope": "lua",
		"body": "r.NF_ScrollHorizontallyByPercentage(${1:amount})$0",
		"description": "100 means scroll one page. Negative values scroll left."
	},
	"NF_SetGlobalStartupAction lua": {
		"prefix": "r.NF_SetGlobalStartupAction",
		"scope": "lua",
		"body": "r.NF_SetGlobalStartupAction(${1:str})$0",
		"description": "Returns true if global startup action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. '_SWS_ABOUT', '_f506bc780a0ab34b8fdedb67ed5d3649'), not command IDs (e.g. '47145').\nTip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.\nNOnly works for actions / scripts from Main action section."
	},
	"NF_SetProjectStartupAction lua": {
		"prefix": "r.NF_SetProjectStartupAction",
		"scope": "lua",
		"body": "r.NF_SetProjectStartupAction(${1:str})$0",
		"description": "Returns true if project startup action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. '_SWS_ABOUT', '_f506bc780a0ab34b8fdedb67ed5d3649'), not command IDs (e.g. '47145').\nTip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.\nOnly works for actions / scripts from Main action section. Project must be saved after setting project startup action to be persistent."
	},
	"NF_SetProjectTrackSelectionAction lua": {
		"prefix": "r.NF_SetProjectTrackSelectionAction",
		"scope": "lua",
		"body": "r.NF_SetProjectTrackSelectionAction(${1:str})$0",
		"description": "Returns true if project track selection action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. '_SWS_ABOUT', '_f506bc780a0ab34b8fdedb67ed5d3649'), not command IDs (e.g. '47145').\nTip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.\nOnly works for actions / scripts from Main action section. Project must be saved after setting project track selection action to be persistent."
	},
	"NF_SetSWSMarkerRegionSub lua": {
		"prefix": "r.NF_SetSWSMarkerRegionSub",
		"scope": "lua",
		"body": "r.NF_SetSWSMarkerRegionSub(${1:markerRegionSub}, ${2:markerRegionIdx})$0",
		"description": "Set SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers (not displayed marker/region index). Returns true if subtitle is set successfully (i.e. marker/region with specified index is present in project). Lua code example here."
	},
	"NF_SetSWSTrackNotes lua": {
		"prefix": "r.NF_SetSWSTrackNotes",
		"scope": "lua",
		"body": "r.NF_SetSWSTrackNotes(${1:track}, ${2:str})$0",
		"description": ""
	},
	"NF_SetSWS_RMSoptions lua": {
		"prefix": "r.NF_SetSWS_RMSoptions",
		"scope": "lua",
		"body": "r.NF_SetSWS_RMSoptions(${1:targetLevel}, ${2:windowSize})$0",
		"description": "Set SWS analysis/normalize options (same as running action 'SWS: Set RMS analysis/normalize options'). targetLevel: target RMS normalize level (dB), windowSize: window size for peak RMS (sec.)"
	},
	"NF_TakeFX_GetFXModuleName lua": {
		"prefix": "r.NF_TakeFX_GetFXModuleName",
		"scope": "lua",
		"body": "rv, name = r.NF_TakeFX_GetFXModuleName(${1:item}, ${2:fx})$0",
		"description": "Deprecated, see TakeFX_GetNamedConfigParm/'fx_ident' (v6.37+). See BR_TrackFX_GetFXModuleName. fx: counted consecutively across all takes (zero-based)."
	},
	"NF_UpdateSWSMarkerRegionSubWindow lua": {
		"prefix": "r.NF_UpdateSWSMarkerRegionSubWindow",
		"scope": "lua",
		"body": "r.NF_UpdateSWSMarkerRegionSubWindow()$0",
		"description": "Redraw the Notes window (call if you've changed a subtitle via NF_SetSWSMarkerRegionSub which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)"
	},
	"NF_Win32_GetSystemMetrics lua": {
		"prefix": "r.NF_Win32_GetSystemMetrics",
		"scope": "lua",
		"body": "r.NF_Win32_GetSystemMetrics(${1:nIndex})$0",
		"description": "Equivalent to win32 API GetSystemMetrics(). Note: Only SM_C[XY]SCREEN, SM_C[XY][HV]SCROLL and SM_CYMENU are currently supported on macOS and Linux as of REAPER 6.68. Check the SWELL source code for up-to-date support information (swell-wnd.mm, swell-wnd-generic.cpp)."
	},
	"NamedCommandLookup lua": {
		"prefix": "r.NamedCommandLookup",
		"scope": "lua",
		"body": "r.NamedCommandLookup(${1:command_name})$0",
		"description": "Get the command ID number for named command that was registered by an extension such as '_SWS_ABOUT' or '_113088d11ae641c193a2b7ede3041ad5' for a ReaScript or a custom action."
	},
	"OnPauseButton lua": {
		"prefix": "r.OnPauseButton",
		"scope": "lua",
		"body": "r.OnPauseButton()$0",
		"description": "direct way to simulate pause button hit"
	},
	"OnPauseButtonEx lua": {
		"prefix": "r.OnPauseButtonEx",
		"scope": "lua",
		"body": "r.OnPauseButtonEx(0)$0",
		"description": "direct way to simulate pause button hit"
	},
	"OnPlayButton lua": {
		"prefix": "r.OnPlayButton",
		"scope": "lua",
		"body": "r.OnPlayButton()$0",
		"description": "direct way to simulate play button hit"
	},
	"OnPlayButtonEx lua": {
		"prefix": "r.OnPlayButtonEx",
		"scope": "lua",
		"body": "r.OnPlayButtonEx(0)$0",
		"description": "direct way to simulate play button hit"
	},
	"OnStopButton lua": {
		"prefix": "r.OnStopButton",
		"scope": "lua",
		"body": "r.OnStopButton()$0",
		"description": "direct way to simulate stop button hit"
	},
	"OnStopButtonEx lua": {
		"prefix": "r.OnStopButtonEx",
		"scope": "lua",
		"body": "r.OnStopButtonEx(0)$0",
		"description": "direct way to simulate stop button hit"
	},
	"OpenColorThemeFile lua": {
		"prefix": "r.OpenColorThemeFile",
		"scope": "lua",
		"body": "r.OpenColorThemeFile(${1:fn})$0",
		"description": ""
	},
	"OpenMediaExplorer lua": {
		"prefix": "r.OpenMediaExplorer",
		"scope": "lua",
		"body": "r.OpenMediaExplorer(${1:mediafn}, ${2:play})$0",
		"description": "Opens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it."
	},
	"OscLocalMessageToHost lua": {
		"prefix": "r.OscLocalMessageToHost",
		"scope": "lua",
		"body": "r.OscLocalMessageToHost(${1:message}, ${2:valueIn})$0",
		"description": "Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns."
	},
	"PCM_Sink_Enum lua": {
		"prefix": "r.PCM_Sink_Enum",
		"scope": "lua",
		"body": "r.PCM_Sink_Enum(${1:idx})$0",
		"description": ""
	},
	"PCM_Sink_GetExtension lua": {
		"prefix": "r.PCM_Sink_GetExtension",
		"scope": "lua",
		"body": "r.PCM_Sink_GetExtension(${1:data})$0",
		"description": ""
	},
	"PCM_Sink_ShowConfig lua": {
		"prefix": "r.PCM_Sink_ShowConfig",
		"scope": "lua",
		"body": "r.PCM_Sink_ShowConfig(${1:cfg}, ${2:hwndParent})$0",
		"description": ""
	},
	"PCM_Source_BuildPeaks lua": {
		"prefix": "r.PCM_Source_BuildPeaks",
		"scope": "lua",
		"body": "r.PCM_Source_BuildPeaks(${1:src}, ${2:mode})$0",
		"description": "Calls and returns PCM_source::PeaksBuild_Begin() if mode=0, PeaksBuild_Run() if mode=1, and PeaksBuild_Finish() if mode=2. Normal use is to call PCM_Source_BuildPeaks(src,0), and if that returns nonzero, call PCM_Source_BuildPeaks(src,1) periodically until it returns zero (it returns the percentage of the file remaining), then call PCM_Source_BuildPeaks(src,2) to finalize. If PCM_Source_BuildPeaks(src,0) returns zero, then no further action is necessary."
	},
	"PCM_Source_CreateFromFile lua": {
		"prefix": "r.PCM_Source_CreateFromFile",
		"scope": "lua",
		"body": "r.PCM_Source_CreateFromFile(${1:filename})$0",
		"description": "See PCM_Source_CreateFromFileEx."
	},
	"PCM_Source_CreateFromFileEx lua": {
		"prefix": "r.PCM_Source_CreateFromFileEx",
		"scope": "lua",
		"body": "r.PCM_Source_CreateFromFileEx(${1:filename}, ${2:forcenoMidiImp})$0",
		"description": "Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events."
	},
	"PCM_Source_CreateFromType lua": {
		"prefix": "r.PCM_Source_CreateFromType",
		"scope": "lua",
		"body": "r.PCM_Source_CreateFromType(${1:sourcetype})$0",
		"description": "Create a PCM_source from a 'type' (use this if you're going to load its state via LoadState/ProjectStateContext).\nValid types include 'WAVE', 'MIDI', or whatever plug-ins define as well."
	},
	"PCM_Source_Destroy lua": {
		"prefix": "r.PCM_Source_Destroy",
		"scope": "lua",
		"body": "r.PCM_Source_Destroy(${1:src})$0",
		"description": "Deletes a PCM_source -- be sure that you remove any project reference before deleting a source"
	},
	"PCM_Source_GetPeaks lua": {
		"prefix": "r.PCM_Source_GetPeaks",
		"scope": "lua",
		"body": "r.PCM_Source_GetPeaks(${1:src}, ${2:peakrate}, ${3:starttime}, ${4:numchannels}, ${5:numsamplesperchannel}, ${6:want_extra_type}, ${7:buf})$0",
		"description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality."
	},
	"PCM_Source_GetSectionInfo lua": {
		"prefix": "r.PCM_Source_GetSectionInfo",
		"scope": "lua",
		"body": "rv, offs, len, rev = r.PCM_Source_GetSectionInfo(${1:src})$0",
		"description": "If a section/reverse block, retrieves offset/len/reverse. return true if success"
	},
	"PluginWantsAlwaysRunFx lua": {
		"prefix": "r.PluginWantsAlwaysRunFx",
		"scope": "lua",
		"body": "r.PluginWantsAlwaysRunFx(${1:amt})$0",
		"description": ""
	},
	"PopupFlags_AnyPopup lua": {
		"prefix": "ImGui.PopupFlags_AnyPopup",
		"scope": "lua",
		"body": "ImGui.PopupFlags_AnyPopup$0",
		"description": "@type integer\n---\n**Popup & Modal > Flags > For IsPopupOpen > PopupFlags_AnyPopup**\nPopupFlags_AnyPopupId | PopupFlags_AnyPopupLevel\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack.\n@since 0.1\n "
	},
	"PopupFlags_AnyPopupId lua": {
		"prefix": "ImGui.PopupFlags_AnyPopupId",
		"scope": "lua",
		"body": "ImGui.PopupFlags_AnyPopupId$0",
		"description": "@type integer\n---\n**Popup & Modal > Flags > For IsPopupOpen > PopupFlags_AnyPopupId**\nIgnore the str_id parameter and test for any popup.\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack.\n@since 0.1\n "
	},
	"PopupFlags_AnyPopupLevel lua": {
		"prefix": "ImGui.PopupFlags_AnyPopupLevel",
		"scope": "lua",
		"body": "ImGui.PopupFlags_AnyPopupLevel$0",
		"description": "@type integer\n---\n**Popup & Modal > Flags > For IsPopupOpen > PopupFlags_AnyPopupLevel**\nSearch/test at any level of the popup stack (default test in the current level).\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack.\n@since 0.1\n "
	},
	"PopupFlags_MouseButtonLeft lua": {
		"prefix": "ImGui.PopupFlags_MouseButtonLeft",
		"scope": "lua",
		"body": "ImGui.PopupFlags_MouseButtonLeft$0",
		"description": "@type integer\n---\n**Popup & Modal > Flags > For BeginPopupContext* > PopupFlags_MouseButtonLeft**\nOpen on Left Mouse release.\nGuaranteed to always be == 0 (same as MouseButton_Left).\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack.\n@since 0.1\n "
	},
	"PopupFlags_MouseButtonMiddle lua": {
		"prefix": "ImGui.PopupFlags_MouseButtonMiddle",
		"scope": "lua",
		"body": "ImGui.PopupFlags_MouseButtonMiddle$0",
		"description": "@type integer\n---\n**Popup & Modal > Flags > For BeginPopupContext* > PopupFlags_MouseButtonMiddle**\nOpen on Middle Mouse release.\nGuaranteed to always be == 2 (same as MouseButton_Middle).\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack.\n@since 0.1\n "
	},
	"PopupFlags_MouseButtonRight lua": {
		"prefix": "ImGui.PopupFlags_MouseButtonRight",
		"scope": "lua",
		"body": "ImGui.PopupFlags_MouseButtonRight$0",
		"description": "@type integer\n---\n**Popup & Modal > Flags > For BeginPopupContext* > PopupFlags_MouseButtonRight**\nOpen on Right Mouse release.\nGuaranteed to always be == 1 (same as MouseButton_Right).\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack.\n@since 0.1\n "
	},
	"PopupFlags_NoOpenOverExistingPopup lua": {
		"prefix": "ImGui.PopupFlags_NoOpenOverExistingPopup",
		"scope": "lua",
		"body": "ImGui.PopupFlags_NoOpenOverExistingPopup$0",
		"description": "@type integer\n---\n**Popup & Modal > Flags > For OpenPopup* and BeginPopupContext* > PopupFlags_NoOpenOverExistingPopup**\nDon't open if there's already a popup at the same level of the popup stack.\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack.\n@since 0.1\n "
	},
	"PopupFlags_NoOpenOverItems lua": {
		"prefix": "ImGui.PopupFlags_NoOpenOverItems",
		"scope": "lua",
		"body": "ImGui.PopupFlags_NoOpenOverItems$0",
		"description": "@type integer\n---\n**Popup & Modal > Flags > For BeginPopupContext* > PopupFlags_NoOpenOverItems**\nFor BeginPopupContextWindow: don't return true when hovering items,\nonly when hovering empty space.\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack.\n@since 0.1\n "
	},
	"PopupFlags_NoReopen lua": {
		"prefix": "ImGui.PopupFlags_NoReopen",
		"scope": "lua",
		"body": "ImGui.PopupFlags_NoReopen$0",
		"description": "@type integer\n---\n**Popup & Modal > Flags > For OpenPopup* and BeginPopupContext* > PopupFlags_NoReopen**\nDon't reopen same popup if already open\n(won't reposition, won't reinitialize navigation).\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack.\n@since 0.9\n "
	},
	"PopupFlags_None lua": {
		"prefix": "ImGui.PopupFlags_None",
		"scope": "lua",
		"body": "ImGui.PopupFlags_None$0",
		"description": "@type integer\n---\n**Popup & Modal > Flags > PopupFlags_None**\n**Popup & Modal**\n- They block normal mouse hovering detection (and therefore most mouse\ninteractions) behind them.\n- If not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\n- Their visibility state (~bool) is held internally instead of being held by the\nprogrammer as we are used to with regular Begin*() calls.\nThe 3 properties above are related: we need to retain popup visibility state in\nthe library because popups may be closed as any time.\nYou can bypass the hovering restriction by using\nHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered or IsWindowHovered.\nIMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup\nand BeginPopup generally needs to be at the same level of the stack.\n@since 0.1\n "
	},
	"PreventUIRefresh lua": {
		"prefix": "r.PreventUIRefresh",
		"scope": "lua",
		"body": "r.PreventUIRefresh(${1:prevent_count})$0",
		"description": "adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur"
	},
	"PromptForAction lua": {
		"prefix": "r.PromptForAction",
		"scope": "lua",
		"body": "r.PromptForAction(${1:session_mode}, ${2:init_id}, ${3:section_id})$0",
		"description": "Uses the action list to choose an action. Call with session_mode=1 to create a session (init_id will be the initial action to select, or 0), then poll with session_mode=0, checking return value for user-selected action (will return 0 if no action selected yet, or -1 if the action window is no longer available). When finished, call with session_mode=-1."
	},
	"ReaPack_AboutInstalledPackage lua": {
		"prefix": "r.ReaPack_AboutInstalledPackage",
		"scope": "lua",
		"body": "r.ReaPack_AboutInstalledPackage(${1:entry})$0",
		"description": "Show the about dialog of the given package entry.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week."
	},
	"ReaPack_AboutRepository lua": {
		"prefix": "r.ReaPack_AboutRepository",
		"scope": "lua",
		"body": "r.ReaPack_AboutRepository(${1:repoName})$0",
		"description": "Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week."
	},
	"ReaPack_AddSetRepository lua": {
		"prefix": "r.ReaPack_AddSetRepository",
		"scope": "lua",
		"body": "r.ReaPack_AddSetRepository(${1:name}, ${2:url}, ${3:enable}, ${4:autoInstall})$0",
		"description": "Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. Call ReaPack_ProcessQueue(true) when done to process the new list and update the GUI.\nautoInstall: usually set to 2 (obey user setting)."
	},
	"ReaPack_BrowsePackages lua": {
		"prefix": "r.ReaPack_BrowsePackages",
		"scope": "lua",
		"body": "r.ReaPack_BrowsePackages(${1:filter})$0",
		"description": "Opens the package browser with the given filter string."
	},
	"ReaPack_CompareVersions lua": {
		"prefix": "r.ReaPack_CompareVersions",
		"scope": "lua",
		"body": "r.ReaPack_CompareVersions(${1:ver1}, ${2:ver2})$0",
		"description": "Returns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise."
	},
	"ReaPack_EnumOwnedFiles lua": {
		"prefix": "r.ReaPack_EnumOwnedFiles",
		"scope": "lua",
		"body": "r.ReaPack_EnumOwnedFiles(${1:entry}, ${2:index})$0",
		"description": "Enumerate the files owned by the given package. Returns false when there is no more data.\nsections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor\ntype: see ReaPack_GetEntryInfo."
	},
	"ReaPack_FreeEntry lua": {
		"prefix": "r.ReaPack_FreeEntry",
		"scope": "lua",
		"body": "r.ReaPack_FreeEntry(${1:entry})$0",
		"description": "Free resources allocated for the given package entry."
	},
	"ReaPack_GetEntryInfo lua": {
		"prefix": "r.ReaPack_GetEntryInfo",
		"scope": "lua",
		"body": "rv, repo, cat, pkg, desc, type, ver, author, flags, fileCount = r.ReaPack_GetEntryInfo(${1:entry})$0",
		"description": "Get the repository name, category, package name, package description, package type, the currently installed version, author name, flags (&1=Pinned, &2=BleedingEdge) and how many files are owned by the given package entry.\ntype: 1=script, 2=extension, 3=effect, 4=data, 5=theme, 6=langpack, 7=webinterface"
	},
	"ReaPack_GetOwner lua": {
		"prefix": "r.ReaPack_GetOwner",
		"scope": "lua",
		"body": "rv, error = r.ReaPack_GetOwner(${1:fn})$0",
		"description": "Returns the package entry owning the given file.\nDelete the returned object from memory after use with ReaPack_FreeEntry."
	},
	"ReaPack_GetRepositoryInfo lua": {
		"prefix": "r.ReaPack_GetRepositoryInfo",
		"scope": "lua",
		"body": "rv, url, enabled, autoInstall = r.ReaPack_GetRepositoryInfo(${1:name})$0",
		"description": "Get the infos of the given repository.\nautoInstall: 0=manual, 1=when sychronizing, 2=obey user setting"
	},
	"ReaPack_ProcessQueue lua": {
		"prefix": "r.ReaPack_ProcessQueue",
		"scope": "lua",
		"body": "r.ReaPack_ProcessQueue(${1:refreshUI})$0",
		"description": "Run pending operations and save the configuration file. If refreshUI is true the browser and manager windows are guaranteed to be refreshed (otherwise it depends on which operations are in the queue)."
	},
	"ReaScriptError lua": {
		"prefix": "r.ReaScriptError",
		"scope": "lua",
		"body": "r.ReaScriptError(${1:errmsg})$0",
		"description": "Causes REAPER to display the error message after the current ReaScript finishes. If called within a Lua context and errmsg has a ! prefix, script execution will be terminated."
	},
	"RecursiveCreateDirectory lua": {
		"prefix": "r.RecursiveCreateDirectory",
		"scope": "lua",
		"body": "r.RecursiveCreateDirectory(${1:path}, ${2:ignored})$0",
		"description": "returns positive value on success, 0 on failure."
	},
	"RefreshToolbar lua": {
		"prefix": "r.RefreshToolbar",
		"scope": "lua",
		"body": "r.RefreshToolbar(${1:command_id})$0",
		"description": "See RefreshToolbar2."
	},
	"RefreshToolbar2 lua": {
		"prefix": "r.RefreshToolbar2",
		"scope": "lua",
		"body": "r.RefreshToolbar2(${1:section_id}, ${2:command_id})$0",
		"description": "Refresh the toolbar button states of a toggle action."
	},
	"RemoveTrackSend lua": {
		"prefix": "r.RemoveTrackSend",
		"scope": "lua",
		"body": "r.RemoveTrackSend(${1:tr}, ${2:category}, ${3:sendidx})$0",
		"description": "Remove a send/receive/hardware output, return true on success. category is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends."
	},
	"RenderFileSection lua": {
		"prefix": "r.RenderFileSection",
		"scope": "lua",
		"body": "r.RenderFileSection(${1:source_filename}, ${2:target_filename}, ${3:start_percent}, ${4:end_percent}, ${5:playrate})$0",
		"description": "Not available while playing back."
	},
	"ReorderSelectedTracks lua": {
		"prefix": "r.ReorderSelectedTracks",
		"scope": "lua",
		"body": "r.ReorderSelectedTracks(${1:beforeTrackIdx}, ${2:makePrevFolder})$0",
		"description": "Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder"
	},
	"Resample_EnumModes lua": {
		"prefix": "r.Resample_EnumModes",
		"scope": "lua",
		"body": "r.Resample_EnumModes(${1:mode})$0",
		"description": ""
	},
	"ResolveWildcards lua": {
		"prefix": "r.ResolveWildcards",
		"scope": "lua",
		"body": "r.ResolveWildcards(0, ${2:timePosition}, ${3:wildcards}, ${4:resolvedString})$0",
		"description": "Resolve a wildcard string. Any wildcards that are valid in the Big Clock can be resolved using this function. Pass in timePosition=-1 to use the current project playback position."
	},
	"ReverseNamedCommandLookup lua": {
		"prefix": "r.ReverseNamedCommandLookup",
		"scope": "lua",
		"body": "r.ReverseNamedCommandLookup(${1:command_id})$0",
		"description": "Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return 'SWS_ABOUT'), it will be NULL if command_id is a native action."
	},
	"SLIDER2DB lua": {
		"prefix": "r.SLIDER2DB",
		"scope": "lua",
		"body": "r.SLIDER2DB(${1:y})$0",
		"description": ""
	},
	"SNM_AddReceive lua": {
		"prefix": "r.SNM_AddReceive",
		"scope": "lua",
		"body": "r.SNM_AddReceive(${1:src}, ${2:dest}, ${3:type})$0",
		"description": "[S&M] Deprecated, see CreateTrackSend (v5.15pre1+). Adds a receive. Returns false if nothing updated.\ntype -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).\nNote: obeys default sends preferences, supports frozen tracks, etc.."
	},
	"SNM_AddTCPFXParm lua": {
		"prefix": "r.SNM_AddTCPFXParm",
		"scope": "lua",
		"body": "r.SNM_AddTCPFXParm(${1:tr}, ${2:fxId}, ${3:prmId})$0",
		"description": "[S&M] Add an FX parameter knob in the TCP. Returns false if nothing updated (invalid parameters, knob already present, etc..)"
	},
	"SNM_CreateFastString lua": {
		"prefix": "r.SNM_CreateFastString",
		"scope": "lua",
		"body": "r.SNM_CreateFastString(${1:str})$0",
		"description": "[S&M] Instantiates a new 'fast string'. You must delete this string, see SNM_DeleteFastString."
	},
	"SNM_DeleteFastString lua": {
		"prefix": "r.SNM_DeleteFastString",
		"scope": "lua",
		"body": "r.SNM_DeleteFastString(${1:str})$0",
		"description": "[S&M] Deletes a 'fast string' instance."
	},
	"SNM_GetDoubleConfigVar lua": {
		"prefix": "r.SNM_GetDoubleConfigVar",
		"scope": "lua",
		"body": "r.SNM_GetDoubleConfigVar(${1:varname}, ${2:errvalue})$0",
		"description": "[S&M] Returns a floating-point preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found)."
	},
	"SNM_GetDoubleConfigVarEx lua": {
		"prefix": "r.SNM_GetDoubleConfigVarEx",
		"scope": "lua",
		"body": "r.SNM_GetDoubleConfigVarEx(0, ${2:varname}, ${3:errvalue})$0",
		"description": "[S&M] See SNM_GetDoubleConfigVar."
	},
	"SNM_GetFastString lua": {
		"prefix": "r.SNM_GetFastString",
		"scope": "lua",
		"body": "r.SNM_GetFastString(${1:str})$0",
		"description": "[S&M] Gets the 'fast string' content."
	},
	"SNM_GetFastStringLength lua": {
		"prefix": "r.SNM_GetFastStringLength",
		"scope": "lua",
		"body": "r.SNM_GetFastStringLength(${1:str})$0",
		"description": "[S&M] Gets the 'fast string' length."
	},
	"SNM_GetIntConfigVar lua": {
		"prefix": "r.SNM_GetIntConfigVar",
		"scope": "lua",
		"body": "r.SNM_GetIntConfigVar(${1:varname}, ${2:errvalue})$0",
		"description": "[S&M] Returns an integer preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found)."
	},
	"SNM_GetIntConfigVarEx lua": {
		"prefix": "r.SNM_GetIntConfigVarEx",
		"scope": "lua",
		"body": "r.SNM_GetIntConfigVarEx(0, ${2:varname}, ${3:errvalue})$0",
		"description": "[S&M] See SNM_GetIntConfigVar."
	},
	"SNM_GetLongConfigVar lua": {
		"prefix": "r.SNM_GetLongConfigVar",
		"scope": "lua",
		"body": "rv, high, low = r.SNM_GetLongConfigVar(${1:varname})$0",
		"description": "[S&M] Reads a 64-bit integer preference split in two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found)."
	},
	"SNM_GetLongConfigVarEx lua": {
		"prefix": "r.SNM_GetLongConfigVarEx",
		"scope": "lua",
		"body": "rv, high, low = r.SNM_GetLongConfigVarEx(0, ${2:varname})$0",
		"description": "[S&M] See SNM_GetLongConfigVar."
	},
	"SNM_GetMediaItemTakeByGUID lua": {
		"prefix": "r.SNM_GetMediaItemTakeByGUID",
		"scope": "lua",
		"body": "r.SNM_GetMediaItemTakeByGUID(0, ${2:guid})$0",
		"description": "[S&M] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see BR_GetMediaItemTakeGUID"
	},
	"SNM_GetProjectMarkerName lua": {
		"prefix": "r.SNM_GetProjectMarkerName",
		"scope": "lua",
		"body": "r.SNM_GetProjectMarkerName(0, ${2:num}, ${3:isrgn}, ${4:name})$0",
		"description": "[S&M] Gets a marker/region name. Returns true if marker/region found."
	},
	"SNM_GetSetObjectState lua": {
		"prefix": "r.SNM_GetSetObjectState",
		"scope": "lua",
		"body": "r.SNM_GetSetObjectState(${1:obj}, ${2:state}, ${3:setnewvalue}, ${4:wantminimalstate})$0",
		"description": "[S&M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.\nWhen getting a track state (and when you are not interested in FX data), you can use wantminimalstate=true to radically reduce the length of the state. Do not set such minimal states back though, this is for read-only applications!\nNote: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required."
	},
	"SNM_GetSetSourceState lua": {
		"prefix": "r.SNM_GetSetSourceState",
		"scope": "lua",
		"body": "r.SNM_GetSetSourceState(${1:item}, ${2:takeidx}, ${3:state}, ${4:setnewvalue})$0",
		"description": "[S&M] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.\nNote: this function does not use a MediaItem_Take* param in order to manage empty takes (i.e. takes with MediaItem_Take*==NULL), see SNM_GetSetSourceState2."
	},
	"SNM_GetSetSourceState2 lua": {
		"prefix": "r.SNM_GetSetSourceState2",
		"scope": "lua",
		"body": "r.SNM_GetSetSourceState2(${1:take}, ${2:state}, ${3:setnewvalue})$0",
		"description": "[S&M] Gets or sets a take source state. Returns false if failed.\nNote: this function cannot deal with empty takes, see SNM_GetSetSourceState."
	},
	"SNM_GetSourceType lua": {
		"prefix": "r.SNM_GetSourceType",
		"scope": "lua",
		"body": "r.SNM_GetSourceType(${1:take}, ${2:type})$0",
		"description": "[S&M] Deprecated, see GetMediaSourceType. Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)"
	},
	"SNM_MoveOrRemoveTrackFX lua": {
		"prefix": "r.SNM_MoveOrRemoveTrackFX",
		"scope": "lua",
		"body": "r.SNM_MoveOrRemoveTrackFX(${1:tr}, ${2:fxId}, ${3:what})$0",
		"description": "[S&M] Deprecated, see TrackFX_{CopyToTrack,Delete} (v5.95+). Move or removes a track FX. Returns true if tr has been updated.\nfxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain."
	},
	"SNM_ReadMediaFileTag lua": {
		"prefix": "r.SNM_ReadMediaFileTag",
		"scope": "lua",
		"body": "r.SNM_ReadMediaFileTag(${1:fn}, ${2:tag})$0",
		"description": "[S&M] Reads a media file tag. Supported tags: 'artist', 'album', 'genre', 'comment', 'title', 'track' (track number) or 'year'. Returns false if tag was not found. See SNM_TagMediaFile."
	},
	"SNM_RemoveReceive lua": {
		"prefix": "r.SNM_RemoveReceive",
		"scope": "lua",
		"body": "r.SNM_RemoveReceive(${1:tr}, ${2:rcvidx})$0",
		"description": "[S&M] Deprecated, see RemoveTrackSend (v5.15pre1+). Removes a receive. Returns false if nothing updated."
	},
	"SNM_RemoveReceivesFrom lua": {
		"prefix": "r.SNM_RemoveReceivesFrom",
		"scope": "lua",
		"body": "r.SNM_RemoveReceivesFrom(${1:tr}, ${2:srctr})$0",
		"description": "[S&M] Removes all receives from srctr. Returns false if nothing updated."
	},
	"SNM_SelectResourceBookmark lua": {
		"prefix": "r.SNM_SelectResourceBookmark",
		"scope": "lua",
		"body": "r.SNM_SelectResourceBookmark(${1:name})$0",
		"description": "[S&M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed)."
	},
	"SNM_SetDoubleConfigVar lua": {
		"prefix": "r.SNM_SetDoubleConfigVar",
		"scope": "lua",
		"body": "r.SNM_SetDoubleConfigVar(${1:varname}, ${2:newvalue})$0",
		"description": "[S&M] Sets a floating-point preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range)."
	},
	"SNM_SetDoubleConfigVarEx lua": {
		"prefix": "r.SNM_SetDoubleConfigVarEx",
		"scope": "lua",
		"body": "r.SNM_SetDoubleConfigVarEx(0, ${2:varname}, ${3:newvalue})$0",
		"description": "[S&M] See SNM_SetDoubleConfigVar."
	},
	"SNM_SetFastString lua": {
		"prefix": "r.SNM_SetFastString",
		"scope": "lua",
		"body": "r.SNM_SetFastString(${1:str}, ${2:newstr})$0",
		"description": "[S&M] Sets the 'fast string' content. Returns str for facility."
	},
	"SNM_SetIntConfigVar lua": {
		"prefix": "r.SNM_SetIntConfigVar",
		"scope": "lua",
		"body": "r.SNM_SetIntConfigVar(${1:varname}, ${2:newvalue})$0",
		"description": "[S&M] Sets an integer preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range)."
	},
	"SNM_SetIntConfigVarEx lua": {
		"prefix": "r.SNM_SetIntConfigVarEx",
		"scope": "lua",
		"body": "r.SNM_SetIntConfigVarEx(0, ${2:varname}, ${3:newvalue})$0",
		"description": "[S&M] See SNM_SetIntConfigVar."
	},
	"SNM_SetLongConfigVar lua": {
		"prefix": "r.SNM_SetLongConfigVar",
		"scope": "lua",
		"body": "r.SNM_SetLongConfigVar(${1:varname}, ${2:newHighValue}, ${3:newLowValue})$0",
		"description": "[S&M] Sets a 64-bit integer preference from two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found)."
	},
	"SNM_SetLongConfigVarEx lua": {
		"prefix": "r.SNM_SetLongConfigVarEx",
		"scope": "lua",
		"body": "r.SNM_SetLongConfigVarEx(0, ${2:varname}, ${3:newHighValue}, ${4:newLowValue})$0",
		"description": "[S&M] SNM_SetLongConfigVar."
	},
	"SNM_SetProjectMarker lua": {
		"prefix": "r.SNM_SetProjectMarker",
		"scope": "lua",
		"body": "r.SNM_SetProjectMarker(0, ${2:num}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:name}, ${7:color})$0",
		"description": "[S&M] Deprecated, see SetProjectMarker4 -- Same function as SetProjectMarker3() except it can set empty names ''."
	},
	"SNM_SetStringConfigVar lua": {
		"prefix": "r.SNM_SetStringConfigVar",
		"scope": "lua",
		"body": "r.SNM_SetStringConfigVar(${1:varname}, ${2:newvalue})$0",
		"description": "[S&M] Sets a string preference (general prefs only). Returns false if failed (e.g. varname not found or value too long). See get_config_var_string."
	},
	"SNM_TagMediaFile lua": {
		"prefix": "r.SNM_TagMediaFile",
		"scope": "lua",
		"body": "r.SNM_TagMediaFile(${1:fn}, ${2:tag}, ${3:tagval})$0",
		"description": "[S&M] Tags a media file thanks to TagLib. Supported tags: 'artist', 'album', 'genre', 'comment', 'title', 'track' (track number) or 'year'. Use an empty tagval to clear a tag. When a file is opened in REAPER, turn it offline before using this function. Returns false if nothing updated. See SNM_ReadMediaFileTag."
	},
	"SNM_TieResourceSlotActions lua": {
		"prefix": "r.SNM_TieResourceSlotActions",
		"scope": "lua",
		"body": "r.SNM_TieResourceSlotActions(${1:bookmarkId})$0",
		"description": "[S&M] Attach Resources slot actions to a given bookmark."
	},
	"SN_FocusMIDIEditor lua": {
		"prefix": "r.SN_FocusMIDIEditor",
		"scope": "lua",
		"body": "r.SN_FocusMIDIEditor()$0",
		"description": "Focuses the active/open MIDI editor."
	},
	"ScaleFromEnvelopeMode lua": {
		"prefix": "r.ScaleFromEnvelopeMode",
		"scope": "lua",
		"body": "r.ScaleFromEnvelopeMode(${1:scaling_mode}, ${2:val})$0",
		"description": "See GetEnvelopeScalingMode."
	},
	"ScaleToEnvelopeMode lua": {
		"prefix": "r.ScaleToEnvelopeMode",
		"scope": "lua",
		"body": "r.ScaleToEnvelopeMode(${1:scaling_mode}, ${2:val})$0",
		"description": "See GetEnvelopeScalingMode."
	},
	"SectionFromUniqueID lua": {
		"prefix": "r.SectionFromUniqueID",
		"scope": "lua",
		"body": "r.SectionFromUniqueID(${1:uniqueID})$0",
		"description": ""
	},
	"SelectAllMediaItems lua": {
		"prefix": "r.SelectAllMediaItems",
		"scope": "lua",
		"body": "r.SelectAllMediaItems(0, ${2:selected})$0",
		"description": ""
	},
	"SelectProjectInstance lua": {
		"prefix": "r.SelectProjectInstance",
		"scope": "lua",
		"body": "r.SelectProjectInstance(0)$0",
		"description": ""
	},
	"SelectableFlags_AllowDoubleClick lua": {
		"prefix": "ImGui.SelectableFlags_AllowDoubleClick",
		"scope": "lua",
		"body": "ImGui.SelectableFlags_AllowDoubleClick$0",
		"description": "@type integer\n---\n**Combo & List > Selectables > SelectableFlags_AllowDoubleClick**\nGenerate press events on double clicks too.\n**Combo & List > Selectables**\nA selectable highlights when hovered, and can display another color when\nselected. Neighbors selectable extend their highlight bounds in order to leave\nno gap between them. This is so a series of selected Selectable appear\ncontiguous.\n@since 0.1\n "
	},
	"SelectableFlags_AllowOverlap lua": {
		"prefix": "ImGui.SelectableFlags_AllowOverlap",
		"scope": "lua",
		"body": "ImGui.SelectableFlags_AllowOverlap$0",
		"description": "@type integer\n---\n**Combo & List > Selectables > SelectableFlags_AllowOverlap**\nHit testing to allow subsequent widgets to overlap this one.\n**Combo & List > Selectables**\nA selectable highlights when hovered, and can display another color when\nselected. Neighbors selectable extend their highlight bounds in order to leave\nno gap between them. This is so a series of selected Selectable appear\ncontiguous.\n@since 0.9\n "
	},
	"SelectableFlags_Disabled lua": {
		"prefix": "ImGui.SelectableFlags_Disabled",
		"scope": "lua",
		"body": "ImGui.SelectableFlags_Disabled$0",
		"description": "@type integer\n---\n**Combo & List > Selectables > SelectableFlags_Disabled**\nCannot be selected, display grayed out text.\n**Combo & List > Selectables**\nA selectable highlights when hovered, and can display another color when\nselected. Neighbors selectable extend their highlight bounds in order to leave\nno gap between them. This is so a series of selected Selectable appear\ncontiguous.\n@since 0.1\n "
	},
	"SelectableFlags_DontClosePopups lua": {
		"prefix": "ImGui.SelectableFlags_DontClosePopups",
		"scope": "lua",
		"body": "ImGui.SelectableFlags_DontClosePopups$0",
		"description": "@type integer\n---\n**Combo & List > Selectables > SelectableFlags_DontClosePopups**\nClicking this doesn't close parent popup window.\n**Combo & List > Selectables**\nA selectable highlights when hovered, and can display another color when\nselected. Neighbors selectable extend their highlight bounds in order to leave\nno gap between them. This is so a series of selected Selectable appear\ncontiguous.\n@since 0.1\n "
	},
	"SelectableFlags_None lua": {
		"prefix": "ImGui.SelectableFlags_None",
		"scope": "lua",
		"body": "ImGui.SelectableFlags_None$0",
		"description": "@type integer\n---\n**Combo & List > Selectables > SelectableFlags_None**\n**Combo & List > Selectables**\nA selectable highlights when hovered, and can display another color when\nselected. Neighbors selectable extend their highlight bounds in order to leave\nno gap between them. This is so a series of selected Selectable appear\ncontiguous.\n@since 0.1\n "
	},
	"SelectableFlags_SpanAllColumns lua": {
		"prefix": "ImGui.SelectableFlags_SpanAllColumns",
		"scope": "lua",
		"body": "ImGui.SelectableFlags_SpanAllColumns$0",
		"description": "@type integer\n---\n**Combo & List > Selectables > SelectableFlags_SpanAllColumns**\nFrame will span all columns of its container table (text will still fit in current column).\n**Combo & List > Selectables**\nA selectable highlights when hovered, and can display another color when\nselected. Neighbors selectable extend their highlight bounds in order to leave\nno gap between them. This is so a series of selected Selectable appear\ncontiguous.\n@since 0.1\n "
	},
	"SendMIDIMessageToHardware lua": {
		"prefix": "r.SendMIDIMessageToHardware",
		"scope": "lua",
		"body": "r.SendMIDIMessageToHardware(${1:output}, ${2:msg})$0",
		"description": "Sends a MIDI message to output device specified by output. Message is sent in immediate mode. Lua example of how to pack the message string:\nsysex = { 0xF0, 0x00, 0xF7 }\nmsg = ''\nfor i=1, #sysex do msg = msg .. string.char(sysex[i]) end"
	},
	"SetActiveTake lua": {
		"prefix": "r.SetActiveTake",
		"scope": "lua",
		"body": "r.SetActiveTake(${1:take})$0",
		"description": "set this take active in this media item"
	},
	"SetAutomationMode lua": {
		"prefix": "r.SetAutomationMode",
		"scope": "lua",
		"body": "r.SetAutomationMode(${1:mode}, ${2:onlySel})$0",
		"description": "sets all or selected tracks to mode."
	},
	"SetCurrentBPM lua": {
		"prefix": "r.SetCurrentBPM",
		"scope": "lua",
		"body": "r.SetCurrentBPM(0, ${2:bpm}, ${3:wantUndo})$0",
		"description": "set current BPM in project, set wantUndo=true to add undo point"
	},
	"SetCursorContext lua": {
		"prefix": "r.SetCursorContext",
		"scope": "lua",
		"body": "r.SetCursorContext(${1:mode}, ${2:envIn})$0",
		"description": "You must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)"
	},
	"SetEditCurPos lua": {
		"prefix": "r.SetEditCurPos",
		"scope": "lua",
		"body": "r.SetEditCurPos(${1:time}, ${2:moveview}, ${3:seekplay})$0",
		"description": ""
	},
	"SetEditCurPos2 lua": {
		"prefix": "r.SetEditCurPos2",
		"scope": "lua",
		"body": "r.SetEditCurPos2(0, ${2:time}, ${3:moveview}, ${4:seekplay})$0",
		"description": ""
	},
	"SetEnvelopePoint lua": {
		"prefix": "r.SetEnvelopePoint",
		"scope": "lua",
		"body": "r.SetEnvelopePoint(${1:envelope}, ${2:ptidx}, ${3:timeIn}, ${4:valueIn}, ${5:shapeIn}, ${6:tensionIn}, ${7:selectedIn}, ${8:noSortIn})$0",
		"description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See SetEnvelopePointEx."
	},
	"SetEnvelopePointEx lua": {
		"prefix": "r.SetEnvelopePointEx",
		"scope": "lua",
		"body": "r.SetEnvelopePointEx(${1:envelope}, ${2:autoitem_idx}, ${3:ptidx}, ${4:timeIn}, ${5:valueIn}, ${6:shapeIn}, ${7:tensionIn}, ${8:selectedIn}, ${9:noSortIn})$0",
		"description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx."
	},
	"SetEnvelopeStateChunk lua": {
		"prefix": "r.SetEnvelopeStateChunk",
		"scope": "lua",
		"body": "r.SetEnvelopeStateChunk(${1:env}, ${2:str}, ${3:isundo})$0",
		"description": "Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint."
	},
	"SetExtState lua": {
		"prefix": "r.SetExtState",
		"scope": "lua",
		"body": "r.SetExtState(${1:section}, ${2:key}, ${3:value}, ${4:persist})$0",
		"description": "Set the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. Note that with persist=true set, the value will be encoded as a text line in an .ini file and may behaved in unexpected ways if it contains any newlines: do not pass a string with newlines to this function. To save arbitrary data persistently, use base64 encoding or similar. See GetExtState, DeleteExtState, HasExtState."
	},
	"SetGlobalAutomationOverride lua": {
		"prefix": "r.SetGlobalAutomationOverride",
		"scope": "lua",
		"body": "r.SetGlobalAutomationOverride(${1:mode})$0",
		"description": "mode: see GetGlobalAutomationOverride"
	},
	"SetItemStateChunk lua": {
		"prefix": "r.SetItemStateChunk",
		"scope": "lua",
		"body": "r.SetItemStateChunk(${1:item}, ${2:str}, ${3:isundo})$0",
		"description": "Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint."
	},
	"SetMIDIEditorGrid lua": {
		"prefix": "r.SetMIDIEditorGrid",
		"scope": "lua",
		"body": "r.SetMIDIEditorGrid(0, ${2:division})$0",
		"description": "Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc. Sets the swing enabled/strength from the arrange settings."
	},
	"SetMasterTrackVisibility lua": {
		"prefix": "r.SetMasterTrackVisibility",
		"scope": "lua",
		"body": "r.SetMasterTrackVisibility(${1:flag})$0",
		"description": "set &1 to show the master track in the TCP, &2 to HIDE in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility."
	},
	"SetMediaItemInfo_Value lua": {
		"prefix": "r.SetMediaItemInfo_Value",
		"scope": "lua",
		"body": "r.SetMediaItemInfo_Value(${1:item}, ${2:parmname}, ${3:newvalue})$0",
		"description": "Set media item numerical-value attributes.\nB_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_LANEPLAYS : char * : on fixed lane tracks, 0=this item lane does not play, 1=this item lane plays exclusively, 2=this item lane plays and other lanes also play, -1=this item is on a non-visible, non-playing lane on a formerly fixed-lane track (read-only)\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * : free item positioning or fixed lane Y-position. 0=top of track, 1.0=bottom of track\nF_FREEMODE_H : float * : free item positioning or fixed lane height. 0.5=half the track height, 1.0=full track height\nI_FIXEDLANE : int * : fixed lane of item (fine to call with setNewValue, but returned value is read-only)\nB_FIXEDLANE_HIDDEN : bool * : true if displaying only one fixed lane and this item is in a different lane (read-only)"
	},
	"SetMediaItemLength lua": {
		"prefix": "r.SetMediaItemLength",
		"scope": "lua",
		"body": "r.SetMediaItemLength(${1:item}, ${2:length}, ${3:refreshUI})$0",
		"description": "Redraws the screen only if refreshUI == true.\nSee UpdateArrange()."
	},
	"SetMediaItemPosition lua": {
		"prefix": "r.SetMediaItemPosition",
		"scope": "lua",
		"body": "r.SetMediaItemPosition(${1:item}, ${2:position}, ${3:refreshUI})$0",
		"description": "Redraws the screen only if refreshUI == true.\nSee UpdateArrange()."
	},
	"SetMediaItemSelected lua": {
		"prefix": "r.SetMediaItemSelected",
		"scope": "lua",
		"body": "r.SetMediaItemSelected(${1:item}, ${2:selected})$0",
		"description": ""
	},
	"SetMediaItemTakeInfo_Value lua": {
		"prefix": "r.SetMediaItemTakeInfo_Value",
		"scope": "lua",
		"body": "r.SetMediaItemTakeInfo_Value(${1:take}, ${2:parmname}, ${3:newvalue})$0",
		"description": "Set media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=project default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_STRETCHFLAGS : int * : stretch marker flags (&7 mask for mode override: 0=default, 1=balanced, 2/3/6=tonal, 4=transient, 5=no pre-echo)\nF_STRETCHFADESIZE : float * : stretch marker fade size in seconds (0.0025 default)\nI_RECPASSID : int * : record pass ID\nI_TAKEFX_NCH : int * : number of internal audio channels for per-take FX to use (OK to call with setNewValue, but the returned value is read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nIP_SPECEDIT:CNT : int : spectral edit count (read-only)\nIP_SPECEDIT:DELETE:x : int : read or write this key to remove the spectral edit specified\nIP_SPECEDIT:ADD : int : read or write this key to add a new spectral edit (returns index)\nIP_SPECEDIT:SORT : int : read or write this key to re-sort spectral edits (be sure to do this following a position change or insert of new edit)\nI_SPECEDIT:FFT_SIZE : int * : FFT size used by spectral edits for this take\nD_SPECEDIT:x:POSITION : double * : position of spectral edit start (changing this requires a resort of spectral edits)\nD_SPECEDIT:x:LENGTH : double * : length of spectral edit\nF_SPECEDIT:x:GAIN : float * : gain of spectral edit\nF_SPECEDIT:x:FADE_IN : float * : fade-in size 0..1\nF_SPECEDIT:x:FADE_OUT : float * : fade-out size 0..1\nF_SPECEDIT:x:FADE_LOW : float * : fade-lf size 0..1\nF_SPECEDIT:x:FADE_HI : float * : fade-hf size 0..1\nI_SPECEDIT:x:CHAN : int * : channel index, -1 for omni\nI_SPECEDIT:x:FLAGS : int * : flags, &1=bypassed, &2=solo\nF_SPECEDIT:x:GATE_THRESH : float * : gate threshold\nF_SPECEDIT:x:GATE_FLOOR : float * : gate floor\nF_SPECEDIT:x:COMP_THRESH : float * : comp threshold\nF_SPECEDIT:x:COMP_RATIO : float * : comp ratio\nB_SPECEDIT:x:SELECTED : bool * : selection state\nI_SPECEDIT:x:TOPFREQ_CNT : int * : (read-only) number of top frequency-points\nI_SPECEDIT:x:TOPFREQ_ADD:pos:val : int * : reading or writing will insert top frequency-point with position/value pair, returns index\nI_SPECEDIT:x:TOPFREQ_DEL:y : int * : reading or writing will delete top frequency-point y. there will always be at least one point.\nF_SPECEDIT:x:TOPFREQ_POS:y : float * : (read-only) get position of top frequency-point y\nF_SPECEDIT:x:TOPFREQ_FREQ:y : float * : (read-only) get frequency of top frequency-point y\nI_SPECEDIT:x:BOTFREQ_CNT : int * : number of bottom frequency-points\nI_SPECEDIT:x:BOTFREQ_ADD:pos:val : int * : reading or writing will insert bottom frequency-point with position/value pair, returns index\nI_SPECEDIT:x:BOTFREQ_DEL:y : int * : reading or writing will delete bottom frequency-point y. there will always be at least one point.\nF_SPECEDIT:x:BOTFREQ_POS:y : float * : (read-only) get position of bottom frequency-point y\nF_SPECEDIT:x:BOTFREQ_FREQ:y : float * : (read-only) get frequency of bottom frequency-point y\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)"
	},
	"SetMediaItemTake_Source lua": {
		"prefix": "r.SetMediaItemTake_Source",
		"scope": "lua",
		"body": "r.SetMediaItemTake_Source(${1:take}, ${2:source})$0",
		"description": "Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly."
	},
	"SetMediaTrackInfo_Value lua": {
		"prefix": "r.SetMediaTrackInfo_Value",
		"scope": "lua",
		"body": "r.SetMediaTrackInfo_Value(${1:tr}, ${2:parmname}, ${3:newvalue})$0",
		"description": "Set track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-128, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)\nI_MCPW : int * : current MCP width in pixels (read-only)\nI_MCPH : int * : current MCP height in pixels (read-only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder collapsed state (only valid on folders), 0=normal, 1=collapsed, 2=fully collapsed\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_MIDI_INPUT_CHANMAP : int * : -1 maps to source channel, otherwise 1-16 to map to MIDI channel\nI_MIDI_CTL_CHAN : int * : -1 no link, 0-15 link to MIDI volume/pan on channel, 16 link to MIDI volume/pan on all channels\nI_MIDI_TRACKSEL_FLAG : int * : MIDI editor track list options: &1=expand media items, &2=exclude from list, &4=auto-pruned\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nI_SPACER : int * : 1=TCP track spacer above this trackB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper\nP_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)\nI_NUMFIXEDLANES : int * : number of track fixed lanes (fine to call with setNewValue, but returned value is read-only)\nC_LANESCOLLAPSED : char * : fixed lane collapse state (1=lanes collapsed, 2=track displays as non-fixed-lanes but hidden lanes exist)\nC_LANESETTINGS : char * : fixed lane settings (&1=auto-remove empty lanes at bottom, &2=do not auto-comp new recording, &4=newly recorded lanes play exclusively (else add lanes in layers), &8=big lanes (else small lanes), &16=add new recording at bottom (else record into first available lane), &32=hide lane buttons\nC_LANEPLAYS:N : char * :  on fixed lane tracks, 0=lane N does not play, 1=lane N plays exclusively, 2=lane N plays and other lanes also play (fine to call with setNewValue, but returned value is read-only)\nC_ALLLANESPLAY : char * : on fixed lane tracks, 0=no lanes play, 1=all lanes play, 2=some lanes play (fine to call with setNewValue 0 or 1, but returned value is read-only)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG"
	},
	"SetMixerScroll lua": {
		"prefix": "r.SetMixerScroll",
		"scope": "lua",
		"body": "r.SetMixerScroll(${1:leftmosttrack})$0",
		"description": "Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right."
	},
	"SetMouseModifier lua": {
		"prefix": "r.SetMouseModifier",
		"scope": "lua",
		"body": "r.SetMouseModifier(${1:context}, ${2:modifier_flag}, ${3:action})$0",
		"description": "Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.\nContext is a string like 'MM_CTX_ITEM' (see reaper-mouse.ini) or 'Media item left drag' (unlocalized).\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\nFor left-click and double-click contexts, the action can be any built-in command ID number\nor any custom action ID string. Find built-in command IDs in the REAPER actions window\n(enable 'show command IDs' in the context menu), and find custom action ID strings in reaper-kb.ini.\nThe action string may be a mouse modifier ID (see reaper-mouse.ini) with ' m' appended to it,\nor (for click/double-click contexts) a command ID with ' c' appended to it,\nor the text that appears in the mouse modifiers preferences dialog, like 'Move item' (unlocalized).\nFor example, SetMouseModifier('MM_CTX_ITEM', 0, '1 m') and SetMouseModifier('Media item left drag', 0, 'Move item') are equivalent.\nSetMouseModifier(context, modifier_flag, -1) will reset that mouse modifier to default.\nSetMouseModifier(context, -1, -1) will reset the entire context to default.\nSetMouseModifier(-1, -1, -1) will reset all contexts to default.\nSee GetMouseModifier."
	},
	"SetOnlyTrackSelected lua": {
		"prefix": "r.SetOnlyTrackSelected",
		"scope": "lua",
		"body": "r.SetOnlyTrackSelected(${1:track})$0",
		"description": "Set exactly one track selected, deselect all others"
	},
	"SetProjExtState lua": {
		"prefix": "r.SetProjExtState",
		"scope": "lua",
		"body": "r.SetProjExtState(0, ${2:extname}, ${3:key}, ${4:value})$0",
		"description": "Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or '', all extended data for that extname will be deleted.  If val is NULL or '', the data previously associated with that key will be deleted. Returns the size of the state for this extname. See GetProjExtState, EnumProjExtState."
	},
	"SetProjectGrid lua": {
		"prefix": "r.SetProjectGrid",
		"scope": "lua",
		"body": "r.SetProjectGrid(0, ${2:division})$0",
		"description": "Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc."
	},
	"SetProjectMarker lua": {
		"prefix": "r.SetProjectMarker",
		"scope": "lua",
		"body": "r.SetProjectMarker(${1:markrgnindexnumber}, ${2:isrgn}, ${3:pos}, ${4:rgnend}, ${5:name})$0",
		"description": "Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4."
	},
	"SetProjectMarker2 lua": {
		"prefix": "r.SetProjectMarker2",
		"scope": "lua",
		"body": "r.SetProjectMarker2(0, ${2:markrgnindexnumber}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:name})$0",
		"description": "Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4."
	},
	"SetProjectMarker3 lua": {
		"prefix": "r.SetProjectMarker3",
		"scope": "lua",
		"body": "r.SetProjectMarker3(0, ${2:markrgnindexnumber}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:name}, ${7:color})$0",
		"description": "Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4."
	},
	"SetProjectMarker4 lua": {
		"prefix": "r.SetProjectMarker4",
		"scope": "lua",
		"body": "r.SetProjectMarker4(0, ${2:markrgnindexnumber}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:name}, ${7:color}, ${8:flags})$0",
		"description": "color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name"
	},
	"SetProjectMarkerByIndex lua": {
		"prefix": "r.SetProjectMarkerByIndex",
		"scope": "lua",
		"body": "r.SetProjectMarkerByIndex(0, ${2:markrgnidx}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:IDnumber}, ${7:name}, ${8:color})$0",
		"description": "See SetProjectMarkerByIndex2."
	},
	"SetProjectMarkerByIndex2 lua": {
		"prefix": "r.SetProjectMarkerByIndex2",
		"scope": "lua",
		"body": "r.SetProjectMarkerByIndex2(0, ${2:markrgnidx}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:IDnumber}, ${7:name}, ${8:color}, ${9:flags})$0",
		"description": "Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3). IDnumber < 0 to ignore. Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). flags&1 to clear name. If flags&2, markers will not be re-sorted, and after making updates, you MUST call SetProjectMarkerByIndex2 with markrgnidx=-1 and flags&2 to force re-sort/UI updates."
	},
	"SetRegionRenderMatrix lua": {
		"prefix": "r.SetRegionRenderMatrix",
		"scope": "lua",
		"body": "r.SetRegionRenderMatrix(0, ${2:regionindex}, ${3:track}, ${4:flag})$0",
		"description": "Add (flag > 0) or remove (flag < 0) a track from this region when using the region render matrix. If adding, flag==2 means force mono, flag==4 means force stereo, flag==N means force N/2 channels."
	},
	"SetTakeMarker lua": {
		"prefix": "r.SetTakeMarker",
		"scope": "lua",
		"body": "r.SetTakeMarker(${1:take}, ${2:idx}, ${3:nameIn}, ${4:srcposIn}, ${5:colorIn})$0",
		"description": "Inserts or updates a take marker. If idx<0, a take marker will be added, otherwise an existing take marker will be updated. Returns the index of the new or updated take marker (which may change if srcPos is updated). See GetNumTakeMarkers, GetTakeMarker, DeleteTakeMarker"
	},
	"SetTakeStretchMarker lua": {
		"prefix": "r.SetTakeStretchMarker",
		"scope": "lua",
		"body": "r.SetTakeStretchMarker(${1:take}, ${2:idx}, ${3:pos}, ${4:srcposIn})$0",
		"description": "Adds or updates a stretch marker. If idx<0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time)."
	},
	"SetTakeStretchMarkerSlope lua": {
		"prefix": "r.SetTakeStretchMarkerSlope",
		"scope": "lua",
		"body": "r.SetTakeStretchMarkerSlope(${1:take}, ${2:idx}, ${3:slope})$0",
		"description": "See GetTakeStretchMarkerSlope"
	},
	"SetTempoTimeSigMarker lua": {
		"prefix": "r.SetTempoTimeSigMarker",
		"scope": "lua",
		"body": "r.SetTempoTimeSigMarker(0, ${2:ptidx}, ${3:timepos}, ${4:measurepos}, ${5:beatpos}, ${6:bpm}, ${7:timesig_num}, ${8:timesig_denom}, ${9:lineartempo})$0",
		"description": "Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker."
	},
	"SetThemeColor lua": {
		"prefix": "r.SetThemeColor",
		"scope": "lua",
		"body": "r.SetThemeColor(${1:ini_key}, ${2:color}, ${3:flags})$0",
		"description": "Temporarily updates the theme color to the color specified (or the theme default color if -1 is specified). Returns -1 on failure, otherwise returns the color (or transformed-color). Note that the UI is not updated by this, the caller should call UpdateArrange() etc as necessary. If the low bit of flags is set, any color transformations are bypassed. To read a value see GetThemeColor.\nCurrently valid ini_keys:\ncol_main_bg2 : Main window/transport background\ncol_main_text2 : Main window/transport text\ncol_main_textshadow : Main window text shadow (ignored if too close to text color)\ncol_main_3dhl : Main window 3D highlight\ncol_main_3dsh : Main window 3D shadow\ncol_main_resize2 : Main window pane resize mouseover\ncol_main_text : Themed window text\ncol_main_bg : Themed window background\ncol_main_editbk : Themed window edit background\ncol_nodarkmodemiscwnd : Do not use window theming on macOS dark mode\n-- bool 00000000\ncol_transport_editbk : Transport edit background\ncol_toolbar_text : Toolbar button text\ncol_toolbar_text_on : Toolbar button enabled text\ncol_toolbar_frame : Toolbar frame when floating or docked\ntoolbararmed_color : Toolbar button armed color\ntoolbararmed_drawmode : Toolbar button armed fill mode\nio_text : I/O window text\nio_3dhl : I/O window 3D highlight\nio_3dsh : I/O window 3D shadow\ngenlist_bg : Window list background\ngenlist_fg : Window list text\ngenlist_grid : Window list grid lines\ngenlist_selbg : Window list selected row\ngenlist_selfg : Window list selected text\ngenlist_seliabg : Window list selected row (inactive)\ngenlist_seliafg : Window list selected text (inactive)\ngenlist_hilite : Window list highlighted text\ngenlist_hilite_sel : Window list highlighted selected text\ncol_buttonbg : Button background\ncol_tcp_text : Track panel text\ncol_tcp_textsel : Track panel (selected) text\ncol_seltrack : Selected track control panel background\ncol_seltrack2 : Unselected track control panel background (enabled with a checkbox above)\ntcplocked_color : Locked track control panel overlay color\ntcplocked_drawmode : Locked track control panel fill mode\ncol_tracklistbg : Empty track list area\ncol_mixerbg : Empty mixer list area\ncol_arrangebg : Empty arrange view area\narrange_vgrid : Empty arrange view area vertical grid shading\ncol_fadearm : Fader background when automation recording\ncol_fadearm2 : Fader background when automation playing\ncol_fadearm3 : Fader background when in inactive touch/latch\ncol_tl_fg : Timeline foreground\ncol_tl_fg2 : Timeline foreground (secondary markings)\ncol_tl_bg : Timeline background\ncol_tl_bgsel : Time selection color\ntimesel_drawmode : Time selection fill mode\ncol_tl_bgsel2 : Timeline background (in loop points)\ncol_trans_bg : Transport status background\ncol_trans_fg : Transport status text\nplayrate_edited : Project play rate control when not 1.0\nselitem_dot : Media item selection indicator\ncol_mi_label : Media item label\ncol_mi_label_sel : Media item label (selected)\ncol_mi_label_float : Floating media item label\ncol_mi_label_float_sel : Floating media item label (selected)\ncol_mi_bg2 : Media item background (odd tracks)\ncol_mi_bg : Media item background (even tracks)\ncol_tr1_itembgsel : Media item background selected (odd tracks)\ncol_tr2_itembgsel : Media item background selected (even tracks)\nitembg_drawmode : Media item background fill mode\ncol_tr1_peaks : Media item peaks (odd tracks)\ncol_tr2_peaks : Media item peaks (even tracks)\ncol_tr1_ps2 : Media item peaks when selected (odd tracks)\ncol_tr2_ps2 : Media item peaks when selected (even tracks)\ncol_peaksedge : Media item peaks edge highlight (odd tracks)\ncol_peaksedge2 : Media item peaks edge highlight (even tracks)\ncol_peaksedgesel : Media item peaks edge highlight when selected (odd tracks)\ncol_peaksedgesel2 : Media item peaks edge highlight when selected (even tracks)\ncc_chase_drawmode : Media item MIDI CC peaks fill mode\ncol_peaksfade : Media item peaks when active in crossfade editor (fade-out)\ncol_peaksfade2 : Media item peaks when active in crossfade editor (fade-in)\ncol_mi_fades : Media item fade/volume controls\nfadezone_color : Media item fade quiet zone fill color\nfadezone_drawmode : Media item fade quiet zone fill mode\nfadearea_color : Media item fade full area fill color\nfadearea_drawmode : Media item fade full area fill mode\ncol_mi_fade2 : Media item edges of controls\ncol_mi_fade2_drawmode : Media item edges of controls blend mode\nitem_grouphl : Media item edge when selected via grouping\ncol_offlinetext : Media item 'offline' text\ncol_stretchmarker : Media item stretch marker line\ncol_stretchmarker_h0 : Media item stretch marker handle (1x)\ncol_stretchmarker_h1 : Media item stretch marker handle (>1x)\ncol_stretchmarker_h2 : Media item stretch marker handle (-- current RGB: 189,19,19\ncol_stretchmarker_b : Media item stretch marker handle edge\ncol_stretchmarkerm : Media item stretch marker blend mode\ncol_stretchmarker_text : Media item stretch marker text\ncol_stretchmarker_tm : Media item transient guide handle\ntake_marker : Media item take marker\ntake_marker_sel : Media item take marker when item selected\nselitem_tag : Selected media item bar color\nactivetake_tag : Active media item take bar color\ncol_tr1_bg : Track background (odd tracks)\ncol_tr2_bg : Track background (even tracks)\nselcol_tr1_bg : Selected track background (odd tracks)\nselcol_tr2_bg : Selected track background (even tracks)\ntrack_lane_tabcol : Track fixed lane button\ntrack_lanesolo_tabcol : Track fixed lane button when only this lane plays\ntrack_lanesolo_text : Track fixed lane button text\ntrack_lane_gutter : Track fixed lane add area\ntrack_lane_gutter_drawmode : Track fixed lane add fill mode\ncol_tr1_divline : Track divider line (odd tracks)\ncol_tr2_divline : Track divider line (even tracks)\ncol_envlane1_divline : Envelope lane divider line (odd tracks)\ncol_envlane2_divline : Envelope lane divider line (even tracks)\nmute_overlay_col : Muted/unsoloed track/item overlay color\nmute_overlay_mode : Muted/unsoloed track/item overlay mode\ninactive_take_overlay_col : Inactive take/lane overlay color\ninactive_take_overlay_mode : Inactive take/lane overlay mode\nlocked_overlay_col : Locked track/item overlay color\nlocked_overlay_mode : Locked track/item overlay mode\nmarquee_fill : Marquee fill\nmarquee_drawmode : Marquee fill mode\nmarquee_outline : Marquee outline\nmarqueezoom_fill : Marquee zoom fill\nmarqueezoom_drawmode : Marquee zoom fill mode\nmarqueezoom_outline : Marquee zoom outline\nareasel_fill : Razor edit area fill\nareasel_drawmode : Razor edit area fill mode\nareasel_outline : Razor edit area outline\nareasel_outlinemode : Razor edit area outline mode\nlinkedlane_fill : Fixed lane comp area fill\nlinkedlane_fillmode : Fixed lane comp area fill mode\nlinkedlane_outline : Fixed lane comp area outline\nlinkedlane_outlinemode : Fixed lane comp area outline mode\nlinkedlane_unsynced : Fixed lane comp lane unsynced media item\nlinkedlane_unsynced_mode : Fixed lane comp lane unsynced media item mode\ncol_cursor : Edit cursor\ncol_cursor2 : Edit cursor (alternate)\nplaycursor_color : Play cursor\nplaycursor_drawmode : Play cursor mode\ncol_gridlines2 : Grid lines (start of measure)\ncol_gridlines2dm : Grid lines (start of measure) - draw mode\ncol_gridlines3 : Grid lines (start of beats)\ncol_gridlines3dm : Grid lines (start of beats) - draw mode\ncol_gridlines : Grid lines (in between beats)\ncol_gridlines1dm : Grid lines (in between beats) - draw mode\nguideline_color : Editing guide line\nguideline_drawmode : Editing guide mode\nmouseitem_color : Mouse position indicator\nmouseitem_mode : Mouse position indicator mode\nregion : Regions\nregion_lane_bg : Region lane background\nregion_lane_text : Region text\nregion_edge : Region edge\nregion_edge_sel : Region text and edge (selected)\nmarker : Markers\nmarker_lane_bg : Marker lane background\nmarker_lane_text : Marker text\nmarker_edge : Marker edge\nmarker_edge_sel : Marker text and edge (selected)\ncol_tsigmark : Time signature change marker\nts_lane_bg : Time signature lane background\nts_lane_text : Time signature lane text\ntimesig_sel_bg : Time signature marker selected background\ncol_routinghl1 : Routing matrix row highlight\ncol_routinghl2 : Routing matrix column highlight\ncol_routingact : Routing matrix input activity highlight\ncol_vudoint : Theme has interlaced VU meters\n-- bool 00000000\ncol_vuclip : VU meter clip indicator\ncol_vudbscale : VU meters dB scales (not record armed)\n-- bool 00000001\ncol_vudbscale2 : VU meters dB scales (record armed)\n-- bool 00000001\ncol_vutop : VU meter top\ncol_vumid : VU meter middle\ncol_vubot : VU meter bottom\ncol_vuintcol : VU meter interlace/edge color\nvu_gr_bgcol : VU meter gain reduction background\nvu_gr_fgcol : VU meter gain reduction indicator\ncol_vumidi : VU meter midi activity\ncol_vuind1 : VU (indicator) - no signal\ncol_vuind2 : VU (indicator) - low signal\ncol_vuind3 : VU (indicator) - med signal\ncol_vuind4 : VU (indicator) - hot signal\nmcp_sends_normal : Sends text: normal\nmcp_sends_muted : Sends text: muted\nmcp_send_midihw : Sends text: MIDI hardware\nmcp_sends_levels : Sends level\nmcp_fx_normal : FX insert text: normal\nmcp_fx_bypassed : FX insert text: bypassed\nmcp_fx_offlined : FX insert text: offline\nmcp_fxparm_normal : FX parameter text: normal\nmcp_fxparm_bypassed : FX parameter text: bypassed\nmcp_fxparm_offlined : FX parameter text: offline\ntcp_list_scrollbar : List scrollbar (track panel)\ntcp_list_scrollbar_mode : List scrollbar (track panel) - draw mode\ntcp_list_scrollbar_mouseover : List scrollbar mouseover (track panel)\ntcp_list_scrollbar_mouseover_mode : List scrollbar mouseover (track panel) - draw mode\nmcp_list_scrollbar : List scrollbar (mixer panel)\nmcp_list_scrollbar_mode : List scrollbar (mixer panel) - draw mode\nmcp_list_scrollbar_mouseover : List scrollbar mouseover (mixer panel)\nmcp_list_scrollbar_mouseover_mode : List scrollbar mouseover (mixer panel) - draw mode\nmidi_rulerbg : MIDI editor ruler background\nmidi_rulerfg : MIDI editor ruler text\nmidi_grid2 : MIDI editor grid line (start of measure)\nmidi_griddm2 : MIDI editor grid line (start of measure) - draw mode\nmidi_grid3 : MIDI editor grid line (start of beats)\nmidi_griddm3 : MIDI editor grid line (start of beats) - draw mode\nmidi_grid1 : MIDI editor grid line (between beats)\nmidi_griddm1 : MIDI editor grid line (between beats) - draw mode\nmidi_trackbg1 : MIDI editor background color (naturals)\nmidi_trackbg2 : MIDI editor background color (sharps/flats)\nmidi_trackbg_outer1 : MIDI editor background color, out of bounds (naturals)\nmidi_trackbg_outer2 : MIDI editor background color, out of bounds (sharps/flats)\nmidi_selpitch1 : MIDI editor background color, selected pitch (naturals)\nmidi_selpitch2 : MIDI editor background color, selected pitch (sharps/flats)\nmidi_selbg : MIDI editor time selection color\nmidi_selbg_drawmode : MIDI editor time selection fill mode\nmidi_gridhc : MIDI editor CC horizontal center line\nmidi_gridhcdm : MIDI editor CC horizontal center line - draw mode\nmidi_gridh : MIDI editor CC horizontal line\nmidi_gridhdm : MIDI editor CC horizontal line - draw mode\nmidi_ccbut : MIDI editor CC lane add/remove buttons\nmidi_ccbut_text : MIDI editor CC lane button text\nmidi_ccbut_arrow : MIDI editor CC lane button arrow\nmidioct : MIDI editor octave line color\nmidi_inline_trackbg1 : MIDI inline background color (naturals)\nmidi_inline_trackbg2 : MIDI inline background color (sharps/flats)\nmidioct_inline : MIDI inline octave line color\nmidi_endpt : MIDI editor end marker\nmidi_notebg : MIDI editor note, unselected (midi_note_colormap overrides)\nmidi_notefg : MIDI editor note, selected (midi_note_colormap overrides)\nmidi_notemute : MIDI editor note, muted, unselected (midi_note_colormap overrides)\nmidi_notemute_sel : MIDI editor note, muted, selected (midi_note_colormap overrides)\nmidi_itemctl : MIDI editor note controls\nmidi_ofsn : MIDI editor note (offscreen)\nmidi_ofsnsel : MIDI editor note (offscreen, selected)\nmidi_editcurs : MIDI editor cursor\nmidi_pkey1 : MIDI piano key color (naturals background, sharps/flats text)\nmidi_pkey2 : MIDI piano key color (sharps/flats background, naturals text)\nmidi_pkey3 : MIDI piano key color (selected)\nmidi_noteon_flash : MIDI piano key note-on flash\nmidi_leftbg : MIDI piano pane background\nmidifont_col_light_unsel : MIDI editor note text and control color, unselected (light)\nmidifont_col_dark_unsel : MIDI editor note text and control color, unselected (dark)\nmidifont_mode_unsel : MIDI editor note text and control mode, unselected\nmidifont_col_light : MIDI editor note text and control color (light)\nmidifont_col_dark : MIDI editor note text and control color (dark)\nmidifont_mode : MIDI editor note text and control mode\nscore_bg : MIDI notation editor background\nscore_fg : MIDI notation editor staff/notation/text\nscore_sel : MIDI notation editor selected staff/notation/text\nscore_timesel : MIDI notation editor time selection\nscore_loop : MIDI notation editor loop points, selected pitch\nmidieditorlist_bg : MIDI list editor background\nmidieditorlist_fg : MIDI list editor text\nmidieditorlist_grid : MIDI list editor grid lines\nmidieditorlist_selbg : MIDI list editor selected row\nmidieditorlist_selfg : MIDI list editor selected text\nmidieditorlist_seliabg : MIDI list editor selected row (inactive)\nmidieditorlist_seliafg : MIDI list editor selected text (inactive)\nmidieditorlist_bg2 : MIDI list editor background (secondary)\nmidieditorlist_fg2 : MIDI list editor text (secondary)\nmidieditorlist_selbg2 : MIDI list editor selected row (secondary)\nmidieditorlist_selfg2 : MIDI list editor selected text (secondary)\ncol_explorer_sel : Media explorer selection\ncol_explorer_seldm : Media explorer selection mode\ncol_explorer_seledge : Media explorer selection edge\nexplorer_grid : Media explorer grid, markers\nexplorer_pitchtext : Media explorer pitch detection text\ndocker_shadow : Tab control shadow\ndocker_selface : Tab control selected tab\ndocker_unselface : Tab control unselected tab\ndocker_text : Tab control text\ndocker_text_sel : Tab control text selected tab\ndocker_bg : Tab control background\nwindowtab_bg : Tab control background in windows\nauto_item_unsel : Envelope: Unselected automation item\ncol_env1 : Envelope: Volume (pre-FX)\ncol_env2 : Envelope: Volume\nenv_trim_vol : Envelope: Trim Volume\ncol_env3 : Envelope: Pan (pre-FX)\ncol_env4 : Envelope: Pan\nenv_track_mute : Envelope: Mute\ncol_env5 : Envelope: Master playrate\ncol_env6 : Envelope: Master tempo\ncol_env7 : Envelope: Width / Send volume\ncol_env8 : Envelope: Send pan\ncol_env9 : Envelope: Send volume 2\ncol_env10 : Envelope: Send pan 2\nenv_sends_mute : Envelope: Send mute\ncol_env11 : Envelope: Audio hardware output volume\ncol_env12 : Envelope: Audio hardware output pan\ncol_env13 : Envelope: FX parameter 1\ncol_env14 : Envelope: FX parameter 2\ncol_env15 : Envelope: FX parameter 3\ncol_env16 : Envelope: FX parameter 4\nenv_item_vol : Envelope: Item take volume\nenv_item_pan : Envelope: Item take pan\nenv_item_mute : Envelope: Item take mute\nenv_item_pitch : Envelope: Item take pitch\nwiring_grid2 : Wiring: Background\nwiring_grid : Wiring: Background grid lines\nwiring_border : Wiring: Box border\nwiring_tbg : Wiring: Box background\nwiring_ticon : Wiring: Box foreground\nwiring_recbg : Wiring: Record section background\nwiring_recitem : Wiring: Record section foreground\nwiring_media : Wiring: Media\nwiring_recv : Wiring: Receives\nwiring_send : Wiring: Sends\nwiring_fader : Wiring: Fader\nwiring_parent : Wiring: Master/Parent\nwiring_parentwire_border : Wiring: Master/Parent wire border\nwiring_parentwire_master : Wiring: Master/Parent to master wire\nwiring_parentwire_folder : Wiring: Master/Parent to parent folder wire\nwiring_pin_normal : Wiring: Pins normal\nwiring_pin_connected : Wiring: Pins connected\nwiring_pin_disconnected : Wiring: Pins disconnected\nwiring_horz_col : Wiring: Horizontal pin connections\nwiring_sendwire : Wiring: Send hanging wire\nwiring_hwoutwire : Wiring: Hardware output wire\nwiring_recinputwire : Wiring: Record input wire\nwiring_hwout : Wiring: System hardware outputs\nwiring_recinput : Wiring: System record inputs\nwiring_activity : Wiring: Activity lights\nautogroup : Automatic track group\ngroup_0 : Group #1\ngroup_1 : Group #2\ngroup_2 : Group #3\ngroup_3 : Group #4\ngroup_4 : Group #5\ngroup_5 : Group #6\ngroup_6 : Group #7\ngroup_7 : Group #8\ngroup_8 : Group #9\ngroup_9 : Group #10\ngroup_10 : Group #11\ngroup_11 : Group #12\ngroup_12 : Group #13\ngroup_13 : Group #14\ngroup_14 : Group #15\ngroup_15 : Group #16\ngroup_16 : Group #17\ngroup_17 : Group #18\ngroup_18 : Group #19\ngroup_19 : Group #20\ngroup_20 : Group #21\ngroup_21 : Group #22\ngroup_22 : Group #23\ngroup_23 : Group #24\ngroup_24 : Group #25\ngroup_25 : Group #26\ngroup_26 : Group #27\ngroup_27 : Group #28\ngroup_28 : Group #29\ngroup_29 : Group #30\ngroup_30 : Group #31\ngroup_31 : Group #32\ngroup_32 : Group #33\ngroup_33 : Group #34\ngroup_34 : Group #35\ngroup_35 : Group #36\ngroup_36 : Group #37\ngroup_37 : Group #38\ngroup_38 : Group #39\ngroup_39 : Group #40\ngroup_40 : Group #41\ngroup_41 : Group #42\ngroup_42 : Group #43\ngroup_43 : Group #44\ngroup_44 : Group #45\ngroup_45 : Group #46\ngroup_46 : Group #47\ngroup_47 : Group #48\ngroup_48 : Group #49\ngroup_49 : Group #50\ngroup_50 : Group #51\ngroup_51 : Group #52\ngroup_52 : Group #53\ngroup_53 : Group #54\ngroup_54 : Group #55\ngroup_55 : Group #56\ngroup_56 : Group #57\ngroup_57 : Group #58\ngroup_58 : Group #59\ngroup_59 : Group #60\ngroup_60 : Group #61\ngroup_61 : Group #62\ngroup_62 : Group #63\ngroup_63 : Group #64"
	},
	"SetToggleCommandState lua": {
		"prefix": "r.SetToggleCommandState",
		"scope": "lua",
		"body": "r.SetToggleCommandState(${1:section_id}, ${2:command_id}, ${3:state})$0",
		"description": "Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2."
	},
	"SetTrackAutomationMode lua": {
		"prefix": "r.SetTrackAutomationMode",
		"scope": "lua",
		"body": "r.SetTrackAutomationMode(${1:tr}, ${2:mode})$0",
		"description": ""
	},
	"SetTrackColor lua": {
		"prefix": "r.SetTrackColor",
		"scope": "lua",
		"body": "r.SetTrackColor(${1:track}, ${2:color})$0",
		"description": "Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b). To unset the track color, see SetMediaTrackInfo_Value I_CUSTOMCOLOR"
	},
	"SetTrackMIDILyrics lua": {
		"prefix": "r.SetTrackMIDILyrics",
		"scope": "lua",
		"body": "r.SetTrackMIDILyrics(${1:track}, ${2:flag}, ${3:str})$0",
		"description": "Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: '1.1.2\\tLyric for measure 1 beat 2\\t2.1.1\\tLyric for measure 2 beat 1\t'). See GetTrackMIDILyrics"
	},
	"SetTrackMIDINoteName lua": {
		"prefix": "r.SetTrackMIDINoteName",
		"scope": "lua",
		"body": "r.SetTrackMIDINoteName(${1:track}, ${2:pitch}, ${3:chan}, ${4:name})$0",
		"description": "channel < 0 assigns these note names to all channels."
	},
	"SetTrackMIDINoteNameEx lua": {
		"prefix": "r.SetTrackMIDINoteNameEx",
		"scope": "lua",
		"body": "r.SetTrackMIDINoteNameEx(0, ${2:track}, ${3:pitch}, ${4:chan}, ${5:name})$0",
		"description": "channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc."
	},
	"SetTrackSelected lua": {
		"prefix": "r.SetTrackSelected",
		"scope": "lua",
		"body": "r.SetTrackSelected(${1:track}, ${2:selected})$0",
		"description": ""
	},
	"SetTrackSendInfo_Value lua": {
		"prefix": "r.SetTrackSendInfo_Value",
		"scope": "lua",
		"body": "r.SetTrackSendInfo_Value(${1:tr}, ${2:category}, ${3:sendidx}, ${4:parmname}, ${5:newvalue})$0",
		"description": "Set send/receive/hardware output numerical-value attributes, return true on success.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\nB_MUTE : bool *\nB_PHASE : bool * : true to flip phase\nB_MONO : bool *\nD_VOL : double * : 1.0 = +0dB etc\nD_PAN : double * : -1..+1\nD_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\nI_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.\nI_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.\nI_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, 31=MIDI send disabled, next 5 bits=dest channel, 0=orig, 1-16=chan. &1024 for faders-send MIDI vol/pan. (>>14)&255 = src bus (0 for all, 1 for normal, 2+). (>>22)&255=destination bus (0 for all, 1 for normal, 2+)\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends."
	},
	"SetTrackSendUIPan lua": {
		"prefix": "r.SetTrackSendUIPan",
		"scope": "lua",
		"body": "r.SetTrackSendUIPan(${1:track}, ${2:send_idx}, ${3:pan}, ${4:isend})$0",
		"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak."
	},
	"SetTrackSendUIVol lua": {
		"prefix": "r.SetTrackSendUIVol",
		"scope": "lua",
		"body": "r.SetTrackSendUIVol(${1:track}, ${2:send_idx}, ${3:vol}, ${4:isend})$0",
		"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak."
	},
	"SetTrackStateChunk lua": {
		"prefix": "r.SetTrackStateChunk",
		"scope": "lua",
		"body": "r.SetTrackStateChunk(${1:track}, ${2:str}, ${3:isundo})$0",
		"description": "Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint."
	},
	"SetTrackUIInputMonitor lua": {
		"prefix": "r.SetTrackUIInputMonitor",
		"scope": "lua",
		"body": "r.SetTrackUIInputMonitor(${1:track}, ${2:monitor}, ${3:igngroupflags})$0",
		"description": "monitor: 0=no monitoring, 1=monitoring, 2=auto-monitoring. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"SetTrackUIMute lua": {
		"prefix": "r.SetTrackUIMute",
		"scope": "lua",
		"body": "r.SetTrackUIMute(${1:track}, ${2:mute}, ${3:igngroupflags})$0",
		"description": "mute: <0 toggles, >0 sets mute, 0=unsets mute. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"SetTrackUIPan lua": {
		"prefix": "r.SetTrackUIPan",
		"scope": "lua",
		"body": "r.SetTrackUIPan(${1:track}, ${2:pan}, ${3:relative}, ${4:done}, ${5:igngroupflags})$0",
		"description": "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"SetTrackUIPolarity lua": {
		"prefix": "r.SetTrackUIPolarity",
		"scope": "lua",
		"body": "r.SetTrackUIPolarity(${1:track}, ${2:polarity}, ${3:igngroupflags})$0",
		"description": "polarity (AKA phase): <0 toggles, 0=normal, >0=inverted. returns new value or -1 if error.igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"SetTrackUIRecArm lua": {
		"prefix": "r.SetTrackUIRecArm",
		"scope": "lua",
		"body": "r.SetTrackUIRecArm(${1:track}, ${2:recarm}, ${3:igngroupflags})$0",
		"description": "recarm: <0 toggles, >0 sets recarm, 0=unsets recarm. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"SetTrackUISolo lua": {
		"prefix": "r.SetTrackUISolo",
		"scope": "lua",
		"body": "r.SetTrackUISolo(${1:track}, ${2:solo}, ${3:igngroupflags})$0",
		"description": "solo: <0 toggles, 1 sets solo (default mode), 0=unsets solo, 2 sets solo (non-SIP), 4 sets solo (SIP). returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"SetTrackUIVolume lua": {
		"prefix": "r.SetTrackUIVolume",
		"scope": "lua",
		"body": "r.SetTrackUIVolume(${1:track}, ${2:volume}, ${3:relative}, ${4:done}, ${5:igngroupflags})$0",
		"description": "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"SetTrackUIWidth lua": {
		"prefix": "r.SetTrackUIWidth",
		"scope": "lua",
		"body": "r.SetTrackUIWidth(${1:track}, ${2:width}, ${3:relative}, ${4:done}, ${5:igngroupflags})$0",
		"description": "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
	},
	"ShowActionList lua": {
		"prefix": "r.ShowActionList",
		"scope": "lua",
		"body": "r.ShowActionList(${1:section}, ${2:callerWnd})$0",
		"description": ""
	},
	"ShowConsoleMsg lua": {
		"prefix": "r.ShowConsoleMsg",
		"scope": "lua",
		"body": "r.ShowConsoleMsg(${1:msg})$0",
		"description": "Show a message to the user (also useful for debugging). Send '\\n' for newline, '' to clear the console. Prefix string with '!SHOW:' and text will be added to console without opening the window. See ClearConsole"
	},
	"ShowMessageBox lua": {
		"prefix": "r.ShowMessageBox",
		"scope": "lua",
		"body": "r.ShowMessageBox(${1:msg}, ${2:title}, ${3:type})$0",
		"description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO"
	},
	"ShowPopupMenu lua": {
		"prefix": "r.ShowPopupMenu",
		"scope": "lua",
		"body": "r.ShowPopupMenu(${1:name}, ${2:x}, ${3:y}, ${4:hwndParent}, ${5:ctx}, ${6:ctx2}, ${7:ctx3})$0",
		"description": "shows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)"
	},
	"SliderFlags_AlwaysClamp lua": {
		"prefix": "ImGui.SliderFlags_AlwaysClamp",
		"scope": "lua",
		"body": "ImGui.SliderFlags_AlwaysClamp$0",
		"description": "@type integer\n---\n**Drag & Slider > Flags > SliderFlags_AlwaysClamp**\nClamp value to min/max bounds when input manually with CTRL+Click.\nBy default CTRL+Click allows going out of bounds.\n**Drag & Slider > Flags**\nFor DragDouble, DragInt, SliderDouble, SliderInt etc. (Those are per-item\nflags. There are shared flags in SetConfigVar: ConfigVar_DragClickToInputText\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d').\n@since 0.1\n "
	},
	"SliderFlags_Logarithmic lua": {
		"prefix": "ImGui.SliderFlags_Logarithmic",
		"scope": "lua",
		"body": "ImGui.SliderFlags_Logarithmic$0",
		"description": "@type integer\n---\n**Drag & Slider > Flags > SliderFlags_Logarithmic**\nMake the widget logarithmic (linear otherwise).\nConsider using SliderFlags_NoRoundToFormat with this if using a format-string\nwith small amount of digits.\n**Drag & Slider > Flags**\nFor DragDouble, DragInt, SliderDouble, SliderInt etc. (Those are per-item\nflags. There are shared flags in SetConfigVar: ConfigVar_DragClickToInputText\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d').\n@since 0.1\n "
	},
	"SliderFlags_NoInput lua": {
		"prefix": "ImGui.SliderFlags_NoInput",
		"scope": "lua",
		"body": "ImGui.SliderFlags_NoInput$0",
		"description": "@type integer\n---\n**Drag & Slider > Flags > SliderFlags_NoInput**\nDisable CTRL+Click or Enter key allowing to input text directly into the widget.\n**Drag & Slider > Flags**\nFor DragDouble, DragInt, SliderDouble, SliderInt etc. (Those are per-item\nflags. There are shared flags in SetConfigVar: ConfigVar_DragClickToInputText\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d').\n@since 0.1\n "
	},
	"SliderFlags_NoRoundToFormat lua": {
		"prefix": "ImGui.SliderFlags_NoRoundToFormat",
		"scope": "lua",
		"body": "ImGui.SliderFlags_NoRoundToFormat$0",
		"description": "@type integer\n---\n**Drag & Slider > Flags > SliderFlags_NoRoundToFormat**\nDisable rounding underlying value to match precision of the display format\nstring (e.g. %.3f values are rounded to those 3 digits).\n**Drag & Slider > Flags**\nFor DragDouble, DragInt, SliderDouble, SliderInt etc. (Those are per-item\nflags. There are shared flags in SetConfigVar: ConfigVar_DragClickToInputText\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d').\n@since 0.1\n "
	},
	"SliderFlags_None lua": {
		"prefix": "ImGui.SliderFlags_None",
		"scope": "lua",
		"body": "ImGui.SliderFlags_None$0",
		"description": "@type integer\n---\n**Drag & Slider > Flags > SliderFlags_None**\n**Drag & Slider > Flags**\nFor DragDouble, DragInt, SliderDouble, SliderInt etc. (Those are per-item\nflags. There are shared flags in SetConfigVar: ConfigVar_DragClickToInputText\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d').\n@since 0.1\n "
	},
	"SliderFlags_WrapAround lua": {
		"prefix": "ImGui.SliderFlags_WrapAround",
		"scope": "lua",
		"body": "ImGui.SliderFlags_WrapAround$0",
		"description": "@type integer\n---\n**Drag & Slider > Flags > SliderFlags_WrapAround**\nEnable wrapping around from max to min and from min to max\n(only supported by DragXXX() functions for now).\n**Drag & Slider > Flags**\nFor DragDouble, DragInt, SliderDouble, SliderInt etc. (Those are per-item\nflags. There are shared flags in SetConfigVar: ConfigVar_DragClickToInputText\n**Drag & Slider**\nWe use the same sets of flags for Drag*() and Slider*() functions as the\nfeatures are the same and it makes it easier to swap them.\nCTRL+Click on any drag box or slider to turn them into an input box.\nManually input values aren't clamped by default and can go off-bounds.\nUse SliderFlags_AlwaysClamp to always clamp.\nAdjust format string to decorate the value with a prefix, a suffix, or adapt the\nediting and display precision e.g. '%.3f' -> 1.234; '%5.2f secs' -> 01.23 secs;\n'Biscuit: %.0f' -> Biscuit: 1; etc.\nFormat string may also be set to nil or use the default format ('%f' or '%d').\n@since 0.9.2\n "
	},
	"SnapToGrid lua": {
		"prefix": "r.SnapToGrid",
		"scope": "lua",
		"body": "r.SnapToGrid(0, ${2:time_pos})$0",
		"description": ""
	},
	"SoloAllTracks lua": {
		"prefix": "r.SoloAllTracks",
		"scope": "lua",
		"body": "r.SoloAllTracks(${1:solo})$0",
		"description": "solo=2 for SIP"
	},
	"SortDirection_Ascending lua": {
		"prefix": "ImGui.SortDirection_Ascending",
		"scope": "lua",
		"body": "ImGui.SortDirection_Ascending$0",
		"description": "@type integer\n---\n**Table > Sorting > SortDirection_Ascending**\nAscending = 0->9, A->Z etc.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"SortDirection_Descending lua": {
		"prefix": "ImGui.SortDirection_Descending",
		"scope": "lua",
		"body": "ImGui.SortDirection_Descending$0",
		"description": "@type integer\n---\n**Table > Sorting > SortDirection_Descending**\nDescending = 9->0, Z->A etc.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"SortDirection_None lua": {
		"prefix": "ImGui.SortDirection_None",
		"scope": "lua",
		"body": "ImGui.SortDirection_None$0",
		"description": "@type integer\n---\n**Table > Sorting > SortDirection_None**\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"Splash_GetWnd lua": {
		"prefix": "r.Splash_GetWnd",
		"scope": "lua",
		"body": "r.Splash_GetWnd()$0",
		"description": "gets the splash window, in case you want to display a message over it. Returns NULL when the splash window is not displayed."
	},
	"SplitMediaItem lua": {
		"prefix": "r.SplitMediaItem",
		"scope": "lua",
		"body": "r.SplitMediaItem(${1:item}, ${2:position})$0",
		"description": "the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)"
	},
	"StuffMIDIMessage lua": {
		"prefix": "r.StuffMIDIMessage",
		"scope": "lua",
		"body": "r.StuffMIDIMessage(${1:mode}, ${2:msg1}, ${3:msg2}, ${4:msg3})$0",
		"description": "Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName."
	},
	"StyleVar_Alpha lua": {
		"prefix": "ImGui.StyleVar_Alpha",
		"scope": "lua",
		"body": "ImGui.StyleVar_Alpha$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_Alpha**\nGlobal alpha applies to everything in Dear ImGui.\n@since 0.1\n "
	},
	"StyleVar_ButtonTextAlign lua": {
		"prefix": "ImGui.StyleVar_ButtonTextAlign",
		"scope": "lua",
		"body": "ImGui.StyleVar_ButtonTextAlign$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_ButtonTextAlign**\nAlignment of button text when button is larger than text.\nDefaults to (0.5, 0.5) (centered).\n@since 0.1\n "
	},
	"StyleVar_CellPadding lua": {
		"prefix": "ImGui.StyleVar_CellPadding",
		"scope": "lua",
		"body": "ImGui.StyleVar_CellPadding$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_CellPadding**\nPadding within a table cell.\nCellPadding.x is locked for entire table.\nCellPadding.y may be altered between different rows.\n@since 0.1\n "
	},
	"StyleVar_ChildBorderSize lua": {
		"prefix": "ImGui.StyleVar_ChildBorderSize",
		"scope": "lua",
		"body": "ImGui.StyleVar_ChildBorderSize$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_ChildBorderSize**\nThickness of border around child windows. Generally set to 0.0 or 1.0.\n(Other values are not well tested and more CPU/GPU costly).\n@since 0.1\n "
	},
	"StyleVar_ChildRounding lua": {
		"prefix": "ImGui.StyleVar_ChildRounding",
		"scope": "lua",
		"body": "ImGui.StyleVar_ChildRounding$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_ChildRounding**\nRadius of child window corners rounding. Set to 0.0 to have rectangular windows.\n@since 0.1\n "
	},
	"StyleVar_DisabledAlpha lua": {
		"prefix": "ImGui.StyleVar_DisabledAlpha",
		"scope": "lua",
		"body": "ImGui.StyleVar_DisabledAlpha$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_DisabledAlpha**\nAdditional alpha multiplier applied by BeginDisabled.\nMultiply over current value of Alpha.\n@since 0.5.5\n "
	},
	"StyleVar_FrameBorderSize lua": {
		"prefix": "ImGui.StyleVar_FrameBorderSize",
		"scope": "lua",
		"body": "ImGui.StyleVar_FrameBorderSize$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_FrameBorderSize**\nThickness of border around frames. Generally set to 0.0 or 1.0.\n(Other values are not well tested and more CPU/GPU costly).\n@since 0.1\n "
	},
	"StyleVar_FramePadding lua": {
		"prefix": "ImGui.StyleVar_FramePadding",
		"scope": "lua",
		"body": "ImGui.StyleVar_FramePadding$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_FramePadding**\nPadding within a framed rectangle (used by most widgets).\n@since 0.1\n "
	},
	"StyleVar_FrameRounding lua": {
		"prefix": "ImGui.StyleVar_FrameRounding",
		"scope": "lua",
		"body": "ImGui.StyleVar_FrameRounding$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_FrameRounding**\nRadius of frame corners rounding.\nSet to 0.0 to have rectangular frame (used by most widgets).\n@since 0.1\n "
	},
	"StyleVar_GrabMinSize lua": {
		"prefix": "ImGui.StyleVar_GrabMinSize",
		"scope": "lua",
		"body": "ImGui.StyleVar_GrabMinSize$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_GrabMinSize**\nMinimum width/height of a grab box for slider/scrollbar.\n@since 0.1\n "
	},
	"StyleVar_GrabRounding lua": {
		"prefix": "ImGui.StyleVar_GrabRounding",
		"scope": "lua",
		"body": "ImGui.StyleVar_GrabRounding$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_GrabRounding**\nRadius of grabs corners rounding. Set to 0.0 to have rectangular slider grabs.\n@since 0.1\n "
	},
	"StyleVar_IndentSpacing lua": {
		"prefix": "ImGui.StyleVar_IndentSpacing",
		"scope": "lua",
		"body": "ImGui.StyleVar_IndentSpacing$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_IndentSpacing**\nHorizontal indentation when e.g. entering a tree node.\nGenerally == (GetFontSize + StyleVar_FramePadding.x*2).\n@since 0.1\n "
	},
	"StyleVar_ItemInnerSpacing lua": {
		"prefix": "ImGui.StyleVar_ItemInnerSpacing",
		"scope": "lua",
		"body": "ImGui.StyleVar_ItemInnerSpacing$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_ItemInnerSpacing**\nHorizontal and vertical spacing between within elements of a composed widget\n(e.g. a slider and its label).\n@since 0.1\n "
	},
	"StyleVar_ItemSpacing lua": {
		"prefix": "ImGui.StyleVar_ItemSpacing",
		"scope": "lua",
		"body": "ImGui.StyleVar_ItemSpacing$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_ItemSpacing**\nHorizontal and vertical spacing between widgets/lines.\n@since 0.1\n "
	},
	"StyleVar_PopupBorderSize lua": {
		"prefix": "ImGui.StyleVar_PopupBorderSize",
		"scope": "lua",
		"body": "ImGui.StyleVar_PopupBorderSize$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_PopupBorderSize**\nThickness of border around popup/tooltip windows. Generally set to 0.0 or 1.0.\n(Other values are not well tested and more CPU/GPU costly).\n@since 0.1\n "
	},
	"StyleVar_PopupRounding lua": {
		"prefix": "ImGui.StyleVar_PopupRounding",
		"scope": "lua",
		"body": "ImGui.StyleVar_PopupRounding$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_PopupRounding**\nRadius of popup window corners rounding.\n(Note that tooltip windows use StyleVar_WindowRounding.)\n@since 0.1\n "
	},
	"StyleVar_ScrollbarRounding lua": {
		"prefix": "ImGui.StyleVar_ScrollbarRounding",
		"scope": "lua",
		"body": "ImGui.StyleVar_ScrollbarRounding$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_ScrollbarRounding**\nRadius of grab corners for scrollbar.\n@since 0.1\n "
	},
	"StyleVar_ScrollbarSize lua": {
		"prefix": "ImGui.StyleVar_ScrollbarSize",
		"scope": "lua",
		"body": "ImGui.StyleVar_ScrollbarSize$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_ScrollbarSize**\nWidth of the vertical scrollbar, Height of the horizontal scrollbar.\n@since 0.1\n "
	},
	"StyleVar_SelectableTextAlign lua": {
		"prefix": "ImGui.StyleVar_SelectableTextAlign",
		"scope": "lua",
		"body": "ImGui.StyleVar_SelectableTextAlign$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_SelectableTextAlign**\nAlignment of selectable text. Defaults to (0.0, 0.0) (top-left aligned).\nIt's generally important to keep this left-aligned if you want to lay\nmultiple items on a same line.\n@since 0.1\n "
	},
	"StyleVar_SeparatorTextAlign lua": {
		"prefix": "ImGui.StyleVar_SeparatorTextAlign",
		"scope": "lua",
		"body": "ImGui.StyleVar_SeparatorTextAlign$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_SeparatorTextAlign**\nAlignment of text within the separator.\nDefaults to (0.0, 0.5) (left aligned, center).\n@since 0.8.4\n "
	},
	"StyleVar_SeparatorTextBorderSize lua": {
		"prefix": "ImGui.StyleVar_SeparatorTextBorderSize",
		"scope": "lua",
		"body": "ImGui.StyleVar_SeparatorTextBorderSize$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_SeparatorTextBorderSize**\nThickness of border in SeparatorText()\n@since 0.8.4\n "
	},
	"StyleVar_SeparatorTextPadding lua": {
		"prefix": "ImGui.StyleVar_SeparatorTextPadding",
		"scope": "lua",
		"body": "ImGui.StyleVar_SeparatorTextPadding$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_SeparatorTextPadding**\nHorizontal offset of text from each edge of the separator + spacing on other\naxis. Generally small values. .y is recommended to be == StyleVar_FramePadding.y.\n@since 0.8.4\n "
	},
	"StyleVar_TabBarBorderSize lua": {
		"prefix": "ImGui.StyleVar_TabBarBorderSize",
		"scope": "lua",
		"body": "ImGui.StyleVar_TabBarBorderSize$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_TabBarBorderSize**\nThickness of tab-bar separator, which takes on the tab active color to denote focus.\n@since 0.9\n "
	},
	"StyleVar_TabBorderSize lua": {
		"prefix": "ImGui.StyleVar_TabBorderSize",
		"scope": "lua",
		"body": "ImGui.StyleVar_TabBorderSize$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_TabBorderSize**\nThickness of border around tabs.\n@since 0.9\n "
	},
	"StyleVar_TabRounding lua": {
		"prefix": "ImGui.StyleVar_TabRounding",
		"scope": "lua",
		"body": "ImGui.StyleVar_TabRounding$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_TabRounding**\nRadius of upper corners of a tab. Set to 0.0 to have rectangular tabs.\n@since 0.1\n "
	},
	"StyleVar_TableAngledHeadersAngle lua": {
		"prefix": "ImGui.StyleVar_TableAngledHeadersAngle",
		"scope": "lua",
		"body": "ImGui.StyleVar_TableAngledHeadersAngle$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_TableAngledHeadersAngle**\nAngle of angled headers (supported values range from -50.0 degrees to +50.0 degrees).\n@since 0.9\n "
	},
	"StyleVar_TableAngledHeadersTextAlign lua": {
		"prefix": "ImGui.StyleVar_TableAngledHeadersTextAlign",
		"scope": "lua",
		"body": "ImGui.StyleVar_TableAngledHeadersTextAlign$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_TableAngledHeadersTextAlign**\nAlignment of angled headers within the cell\n@since 0.9.1\n "
	},
	"StyleVar_WindowBorderSize lua": {
		"prefix": "ImGui.StyleVar_WindowBorderSize",
		"scope": "lua",
		"body": "ImGui.StyleVar_WindowBorderSize$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_WindowBorderSize**\nThickness of border around windows. Generally set to 0.0 or 1.0.\n(Other values are not well tested and more CPU/GPU costly).\n@since 0.1\n "
	},
	"StyleVar_WindowMinSize lua": {
		"prefix": "ImGui.StyleVar_WindowMinSize",
		"scope": "lua",
		"body": "ImGui.StyleVar_WindowMinSize$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_WindowMinSize**\nMinimum window size. This is a global setting.\nIf you want to constrain individual windows, use SetNextWindowSizeConstraints.\n@since 0.1\n "
	},
	"StyleVar_WindowPadding lua": {
		"prefix": "ImGui.StyleVar_WindowPadding",
		"scope": "lua",
		"body": "ImGui.StyleVar_WindowPadding$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_WindowPadding**\nPadding within a window.\n@since 0.1\n "
	},
	"StyleVar_WindowRounding lua": {
		"prefix": "ImGui.StyleVar_WindowRounding",
		"scope": "lua",
		"body": "ImGui.StyleVar_WindowRounding$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_WindowRounding**\nRadius of window corners rounding. Set to 0.0 to have rectangular windows.\nLarge values tend to lead to variety of artifacts and are not recommended.\n@since 0.1\n "
	},
	"StyleVar_WindowTitleAlign lua": {
		"prefix": "ImGui.StyleVar_WindowTitleAlign",
		"scope": "lua",
		"body": "ImGui.StyleVar_WindowTitleAlign$0",
		"description": "@type integer\n---\n**Style > Variables > StyleVar_WindowTitleAlign**\nAlignment for title bar text.\nDefaults to (0.0,0.5) for left-aligned,vertically centered.\n@since 0.1\n "
	},
	"TabBarFlags_AutoSelectNewTabs lua": {
		"prefix": "ImGui.TabBarFlags_AutoSelectNewTabs",
		"scope": "lua",
		"body": "ImGui.TabBarFlags_AutoSelectNewTabs$0",
		"description": "@type integer\n---\n**Tab Bar > TabBarFlags_AutoSelectNewTabs**\nAutomatically select new tabs when they appear.\n@since 0.1\n "
	},
	"TabBarFlags_DrawSelectedOverline lua": {
		"prefix": "ImGui.TabBarFlags_DrawSelectedOverline",
		"scope": "lua",
		"body": "ImGui.TabBarFlags_DrawSelectedOverline$0",
		"description": "@type integer\n---\n**Tab Bar > TabBarFlags_DrawSelectedOverline**\nDraw selected overline markers over selected tab\n@since 0.9.2\n "
	},
	"TabBarFlags_FittingPolicyResizeDown lua": {
		"prefix": "ImGui.TabBarFlags_FittingPolicyResizeDown",
		"scope": "lua",
		"body": "ImGui.TabBarFlags_FittingPolicyResizeDown$0",
		"description": "@type integer\n---\n**Tab Bar > TabBarFlags_FittingPolicyResizeDown**\nResize tabs when they don't fit.\n@since 0.1\n "
	},
	"TabBarFlags_FittingPolicyScroll lua": {
		"prefix": "ImGui.TabBarFlags_FittingPolicyScroll",
		"scope": "lua",
		"body": "ImGui.TabBarFlags_FittingPolicyScroll$0",
		"description": "@type integer\n---\n**Tab Bar > TabBarFlags_FittingPolicyScroll**\nAdd scroll buttons when tabs don't fit.\n@since 0.1\n "
	},
	"TabBarFlags_NoCloseWithMiddleMouseButton lua": {
		"prefix": "ImGui.TabBarFlags_NoCloseWithMiddleMouseButton",
		"scope": "lua",
		"body": "ImGui.TabBarFlags_NoCloseWithMiddleMouseButton$0",
		"description": "@type integer\n---\n**Tab Bar > TabBarFlags_NoCloseWithMiddleMouseButton**\nDisable behavior of closing tabs (that are submitted with p_open != nil)\nwith middle mouse button. You may handle this behavior manually on user's\nside with if(IsItemHovered() && IsMouseClicked(2)) p_open = false.\n@since 0.1\n "
	},
	"TabBarFlags_NoTabListScrollingButtons lua": {
		"prefix": "ImGui.TabBarFlags_NoTabListScrollingButtons",
		"scope": "lua",
		"body": "ImGui.TabBarFlags_NoTabListScrollingButtons$0",
		"description": "@type integer\n---\n**Tab Bar > TabBarFlags_NoTabListScrollingButtons**\nDisable scrolling buttons (apply when fitting policy is\nTabBarFlags_FittingPolicyScroll).\n@since 0.1\n "
	},
	"TabBarFlags_NoTooltip lua": {
		"prefix": "ImGui.TabBarFlags_NoTooltip",
		"scope": "lua",
		"body": "ImGui.TabBarFlags_NoTooltip$0",
		"description": "@type integer\n---\n**Tab Bar > TabBarFlags_NoTooltip**\nDisable tooltips when hovering a tab.\n@since 0.1\n "
	},
	"TabBarFlags_None lua": {
		"prefix": "ImGui.TabBarFlags_None",
		"scope": "lua",
		"body": "ImGui.TabBarFlags_None$0",
		"description": "@type integer\n---\n**Tab Bar > TabBarFlags_None**\n@since 0.1\n "
	},
	"TabBarFlags_Reorderable lua": {
		"prefix": "ImGui.TabBarFlags_Reorderable",
		"scope": "lua",
		"body": "ImGui.TabBarFlags_Reorderable$0",
		"description": "@type integer\n---\n**Tab Bar > TabBarFlags_Reorderable**\nAllow manually dragging tabs to re-order them + New tabs are appended at\nthe end of list.\n@since 0.1\n "
	},
	"TabBarFlags_TabListPopupButton lua": {
		"prefix": "ImGui.TabBarFlags_TabListPopupButton",
		"scope": "lua",
		"body": "ImGui.TabBarFlags_TabListPopupButton$0",
		"description": "@type integer\n---\n**Tab Bar > TabBarFlags_TabListPopupButton**\nDisable buttons to open the tab list popup.\n@since 0.1\n "
	},
	"TabItemFlags_Leading lua": {
		"prefix": "ImGui.TabItemFlags_Leading",
		"scope": "lua",
		"body": "ImGui.TabItemFlags_Leading$0",
		"description": "@type integer\n---\n**Tab Bar > Tab Item > TabItemFlags_Leading**\nEnforce the tab position to the left of the tab bar (after the tab list popup button).\n@since 0.1\n "
	},
	"TabItemFlags_NoAssumedClosure lua": {
		"prefix": "ImGui.TabItemFlags_NoAssumedClosure",
		"scope": "lua",
		"body": "ImGui.TabItemFlags_NoAssumedClosure$0",
		"description": "@type integer\n---\n**Tab Bar > Tab Item > TabItemFlags_NoAssumedClosure**\nTab is selected when trying to close + closure is not immediately assumed\n(will wait for user to stop submitting the tab).\nOtherwise closure is assumed when pressing the X, so if you keep submitting\nthe tab may reappear at end of tab bar.\n@since 0.9\n "
	},
	"TabItemFlags_NoCloseWithMiddleMouseButton lua": {
		"prefix": "ImGui.TabItemFlags_NoCloseWithMiddleMouseButton",
		"scope": "lua",
		"body": "ImGui.TabItemFlags_NoCloseWithMiddleMouseButton$0",
		"description": "@type integer\n---\n**Tab Bar > Tab Item > TabItemFlags_NoCloseWithMiddleMouseButton**\nDisable behavior of closing tabs (that are submitted with p_open != nil) with\nmiddle mouse button. You can still repro this behavior on user's side with\nif(IsItemHovered() && IsMouseClicked(2)) p_open = false.\n@since 0.1\n "
	},
	"TabItemFlags_NoPushId lua": {
		"prefix": "ImGui.TabItemFlags_NoPushId",
		"scope": "lua",
		"body": "ImGui.TabItemFlags_NoPushId$0",
		"description": "@type integer\n---\n**Tab Bar > Tab Item > TabItemFlags_NoPushId**\nDon't call PushID()/PopID() on BeginTabItem/EndTabItem.\n@since 0.1\n "
	},
	"TabItemFlags_NoReorder lua": {
		"prefix": "ImGui.TabItemFlags_NoReorder",
		"scope": "lua",
		"body": "ImGui.TabItemFlags_NoReorder$0",
		"description": "@type integer\n---\n**Tab Bar > Tab Item > TabItemFlags_NoReorder**\nDisable reordering this tab or having another tab cross over this tab.\n@since 0.1\n "
	},
	"TabItemFlags_NoTooltip lua": {
		"prefix": "ImGui.TabItemFlags_NoTooltip",
		"scope": "lua",
		"body": "ImGui.TabItemFlags_NoTooltip$0",
		"description": "@type integer\n---\n**Tab Bar > Tab Item > TabItemFlags_NoTooltip**\nDisable tooltip for the given tab.\n@since 0.1\n "
	},
	"TabItemFlags_None lua": {
		"prefix": "ImGui.TabItemFlags_None",
		"scope": "lua",
		"body": "ImGui.TabItemFlags_None$0",
		"description": "@type integer\n---\n**Tab Bar > Tab Item > TabItemFlags_None**\n@since 0.1\n "
	},
	"TabItemFlags_SetSelected lua": {
		"prefix": "ImGui.TabItemFlags_SetSelected",
		"scope": "lua",
		"body": "ImGui.TabItemFlags_SetSelected$0",
		"description": "@type integer\n---\n**Tab Bar > Tab Item > TabItemFlags_SetSelected**\nTrigger flag to programmatically make the tab selected when calling BeginTabItem.\n@since 0.1\n "
	},
	"TabItemFlags_Trailing lua": {
		"prefix": "ImGui.TabItemFlags_Trailing",
		"scope": "lua",
		"body": "ImGui.TabItemFlags_Trailing$0",
		"description": "@type integer\n---\n**Tab Bar > Tab Item > TabItemFlags_Trailing**\nEnforce the tab position to the right of the tab bar (before the scrolling buttons).\n@since 0.1\n "
	},
	"TabItemFlags_UnsavedDocument lua": {
		"prefix": "ImGui.TabItemFlags_UnsavedDocument",
		"scope": "lua",
		"body": "ImGui.TabItemFlags_UnsavedDocument$0",
		"description": "@type integer\n---\n**Tab Bar > Tab Item > TabItemFlags_UnsavedDocument**\nDisplay a dot next to the title + set TabItemFlags_NoAssumedClosure.\n@since 0.1\n "
	},
	"TableBgTarget_CellBg lua": {
		"prefix": "ImGui.TableBgTarget_CellBg",
		"scope": "lua",
		"body": "ImGui.TableBgTarget_CellBg$0",
		"description": "@type integer\n---\n**Table > Background > TableBgTarget_CellBg**\nSet cell background color (top-most color).\n**Table > Background**\nBackground colors are rendering in 3 layers:\n- Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.\n- Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.\n- Layer 2: draw with CellBg color if set.\nThe purpose of the two row/columns layers is to let you decide if a background\ncolor change should override or blend with the existing color.\nWhen using TableFlags_RowBg on the table, each row has the RowBg0 color\nautomatically set for odd/even rows.\nIf you set the color of RowBg0 target, your color will override the existing\nRowBg0 color.\nIf you set the color of RowBg1 or ColumnBg1 target, your color will blend over\nthe RowBg0 color.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableBgTarget_None lua": {
		"prefix": "ImGui.TableBgTarget_None",
		"scope": "lua",
		"body": "ImGui.TableBgTarget_None$0",
		"description": "@type integer\n---\n**Table > Background > TableBgTarget_None**\n**Table > Background**\nBackground colors are rendering in 3 layers:\n- Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.\n- Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.\n- Layer 2: draw with CellBg color if set.\nThe purpose of the two row/columns layers is to let you decide if a background\ncolor change should override or blend with the existing color.\nWhen using TableFlags_RowBg on the table, each row has the RowBg0 color\nautomatically set for odd/even rows.\nIf you set the color of RowBg0 target, your color will override the existing\nRowBg0 color.\nIf you set the color of RowBg1 or ColumnBg1 target, your color will blend over\nthe RowBg0 color.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableBgTarget_RowBg0 lua": {
		"prefix": "ImGui.TableBgTarget_RowBg0",
		"scope": "lua",
		"body": "ImGui.TableBgTarget_RowBg0$0",
		"description": "@type integer\n---\n**Table > Background > TableBgTarget_RowBg0**\nSet row background color 0 (generally used for background,\nautomatically set when TableFlags_RowBg is used).\n**Table > Background**\nBackground colors are rendering in 3 layers:\n- Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.\n- Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.\n- Layer 2: draw with CellBg color if set.\nThe purpose of the two row/columns layers is to let you decide if a background\ncolor change should override or blend with the existing color.\nWhen using TableFlags_RowBg on the table, each row has the RowBg0 color\nautomatically set for odd/even rows.\nIf you set the color of RowBg0 target, your color will override the existing\nRowBg0 color.\nIf you set the color of RowBg1 or ColumnBg1 target, your color will blend over\nthe RowBg0 color.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableBgTarget_RowBg1 lua": {
		"prefix": "ImGui.TableBgTarget_RowBg1",
		"scope": "lua",
		"body": "ImGui.TableBgTarget_RowBg1$0",
		"description": "@type integer\n---\n**Table > Background > TableBgTarget_RowBg1**\nSet row background color 1 (generally used for selection marking).\n**Table > Background**\nBackground colors are rendering in 3 layers:\n- Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.\n- Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.\n- Layer 2: draw with CellBg color if set.\nThe purpose of the two row/columns layers is to let you decide if a background\ncolor change should override or blend with the existing color.\nWhen using TableFlags_RowBg on the table, each row has the RowBg0 color\nautomatically set for odd/even rows.\nIf you set the color of RowBg0 target, your color will override the existing\nRowBg0 color.\nIf you set the color of RowBg1 or ColumnBg1 target, your color will blend over\nthe RowBg0 color.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_AngledHeader lua": {
		"prefix": "ImGui.TableColumnFlags_AngledHeader",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_AngledHeader$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_AngledHeader**\nTableHeadersRow will submit an angled header row for this column.\nNote this will add an extra row.\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.9\n "
	},
	"TableColumnFlags_DefaultHide lua": {
		"prefix": "ImGui.TableColumnFlags_DefaultHide",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_DefaultHide$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_DefaultHide**\nDefault as a hidden/disabled column.\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_DefaultSort lua": {
		"prefix": "ImGui.TableColumnFlags_DefaultSort",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_DefaultSort$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_DefaultSort**\nDefault as a sorting column.\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_Disabled lua": {
		"prefix": "ImGui.TableColumnFlags_Disabled",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_Disabled$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_Disabled**\nOverriding/master disable flag: hide column, won't show in context menu\n(unlike calling TableSetColumnEnabled which manipulates the user accessible state).\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.5.5\n "
	},
	"TableColumnFlags_IndentDisable lua": {
		"prefix": "ImGui.TableColumnFlags_IndentDisable",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_IndentDisable$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_IndentDisable**\nIgnore current Indent value when entering cell (default for columns > 0).\nIndentation changes _within_ the cell will still be honored.\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_IndentEnable lua": {
		"prefix": "ImGui.TableColumnFlags_IndentEnable",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_IndentEnable$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_IndentEnable**\nUse current Indent value when entering cell (default for column 0).\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_IsEnabled lua": {
		"prefix": "ImGui.TableColumnFlags_IsEnabled",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_IsEnabled$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Output Status > TableColumnFlags_IsEnabled**\nStatus: is enabled == not hidden by user/api (referred to as 'Hide' in\n_DefaultHide and _NoHide) flags.\n**Table > Header & Columns > Column Flags > Output Status**\nRead-only via TableGetColumnFlags\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_IsHovered lua": {
		"prefix": "ImGui.TableColumnFlags_IsHovered",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_IsHovered$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Output Status > TableColumnFlags_IsHovered**\nStatus: is hovered by mouse.\n**Table > Header & Columns > Column Flags > Output Status**\nRead-only via TableGetColumnFlags\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_IsSorted lua": {
		"prefix": "ImGui.TableColumnFlags_IsSorted",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_IsSorted$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Output Status > TableColumnFlags_IsSorted**\nStatus: is currently part of the sort specs.\n**Table > Header & Columns > Column Flags > Output Status**\nRead-only via TableGetColumnFlags\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_IsVisible lua": {
		"prefix": "ImGui.TableColumnFlags_IsVisible",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_IsVisible$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Output Status > TableColumnFlags_IsVisible**\nStatus: is visible == is enabled AND not clipped by scrolling.\n**Table > Header & Columns > Column Flags > Output Status**\nRead-only via TableGetColumnFlags\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_NoClip lua": {
		"prefix": "ImGui.TableColumnFlags_NoClip",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_NoClip$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_NoClip**\nDisable clipping for this column\n(all NoClip columns will render in a same draw command).\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_NoHeaderLabel lua": {
		"prefix": "ImGui.TableColumnFlags_NoHeaderLabel",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_NoHeaderLabel$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_NoHeaderLabel**\nTableHeadersRow will not submit horizontal label for this column.\nConvenient for some small columns. Name will still appear in context menu\nor in angled headers.\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.5.5\n "
	},
	"TableColumnFlags_NoHeaderWidth lua": {
		"prefix": "ImGui.TableColumnFlags_NoHeaderWidth",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_NoHeaderWidth$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_NoHeaderWidth**\nDisable header text width contribution to automatic column width.\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_NoHide lua": {
		"prefix": "ImGui.TableColumnFlags_NoHide",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_NoHide$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_NoHide**\nDisable ability to hide/disable this column.\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_NoReorder lua": {
		"prefix": "ImGui.TableColumnFlags_NoReorder",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_NoReorder$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_NoReorder**\nDisable manual reordering this column, this will also prevent other columns\nfrom crossing over this column.\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_NoResize lua": {
		"prefix": "ImGui.TableColumnFlags_NoResize",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_NoResize$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_NoResize**\nDisable manual resizing.\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_NoSort lua": {
		"prefix": "ImGui.TableColumnFlags_NoSort",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_NoSort$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_NoSort**\nDisable ability to sort on this field\n(even if TableFlags_Sortable is set on the table).\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_NoSortAscending lua": {
		"prefix": "ImGui.TableColumnFlags_NoSortAscending",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_NoSortAscending$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_NoSortAscending**\nDisable ability to sort in the ascending direction.\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_NoSortDescending lua": {
		"prefix": "ImGui.TableColumnFlags_NoSortDescending",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_NoSortDescending$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_NoSortDescending**\nDisable ability to sort in the descending direction.\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_None lua": {
		"prefix": "ImGui.TableColumnFlags_None",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_None$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > TableColumnFlags_None**\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_PreferSortAscending lua": {
		"prefix": "ImGui.TableColumnFlags_PreferSortAscending",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_PreferSortAscending$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_PreferSortAscending**\nMake the initial sort direction Ascending when first sorting on this column (default).\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_PreferSortDescending lua": {
		"prefix": "ImGui.TableColumnFlags_PreferSortDescending",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_PreferSortDescending$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_PreferSortDescending**\nMake the initial sort direction Descending when first sorting on this column.\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_WidthFixed lua": {
		"prefix": "ImGui.TableColumnFlags_WidthFixed",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_WidthFixed$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_WidthFixed**\nColumn will not stretch. Preferable with horizontal scrolling enabled\n(default if table sizing policy is _SizingFixedFit and table is resizable).\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableColumnFlags_WidthStretch lua": {
		"prefix": "ImGui.TableColumnFlags_WidthStretch",
		"scope": "lua",
		"body": "ImGui.TableColumnFlags_WidthStretch$0",
		"description": "@type integer\n---\n**Table > Header & Columns > Column Flags > Input Configuration > TableColumnFlags_WidthStretch**\nColumn will stretch. Preferable with horizontal scrolling disabled\n(default if table sizing policy is _SizingStretchSame or _SizingStretchProp).\n**Table > Header & Columns > Column Flags**\nFor TableSetupColumn.\n**Table > Header & Columns**\nUse TableSetupColumn() to specify label, resizing policy, default\nwidth/weight, id, various other flags etc.\nUse TableHeadersRow() to create a header row and automatically submit a\nTableHeader() for each column. Headers are required to perform: reordering,\nsorting, and opening the context menu. The context menu can also be made\navailable in columns body using TableFlags_ContextMenuInBody.\nYou may manually submit headers using TableNextRow() + TableHeader() calls, but\nthis is only useful in some advanced use cases (e.g. adding custom widgets in\nheader row).\nUse TableSetupScrollFreeze() to lock columns/rows so they stay visible when\nscrolled.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_Borders lua": {
		"prefix": "ImGui.TableFlags_Borders",
		"scope": "lua",
		"body": "ImGui.TableFlags_Borders$0",
		"description": "@type integer\n---\n**Table > Table Flags > Decorations > TableFlags_Borders**\nDraw all borders.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_BordersH lua": {
		"prefix": "ImGui.TableFlags_BordersH",
		"scope": "lua",
		"body": "ImGui.TableFlags_BordersH$0",
		"description": "@type integer\n---\n**Table > Table Flags > Decorations > TableFlags_BordersH**\nDraw horizontal borders.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_BordersInner lua": {
		"prefix": "ImGui.TableFlags_BordersInner",
		"scope": "lua",
		"body": "ImGui.TableFlags_BordersInner$0",
		"description": "@type integer\n---\n**Table > Table Flags > Decorations > TableFlags_BordersInner**\nDraw inner borders.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_BordersInnerH lua": {
		"prefix": "ImGui.TableFlags_BordersInnerH",
		"scope": "lua",
		"body": "ImGui.TableFlags_BordersInnerH$0",
		"description": "@type integer\n---\n**Table > Table Flags > Decorations > TableFlags_BordersInnerH**\nDraw horizontal borders between rows.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_BordersInnerV lua": {
		"prefix": "ImGui.TableFlags_BordersInnerV",
		"scope": "lua",
		"body": "ImGui.TableFlags_BordersInnerV$0",
		"description": "@type integer\n---\n**Table > Table Flags > Decorations > TableFlags_BordersInnerV**\nDraw vertical borders between columns.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_BordersOuter lua": {
		"prefix": "ImGui.TableFlags_BordersOuter",
		"scope": "lua",
		"body": "ImGui.TableFlags_BordersOuter$0",
		"description": "@type integer\n---\n**Table > Table Flags > Decorations > TableFlags_BordersOuter**\nDraw outer borders.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_BordersOuterH lua": {
		"prefix": "ImGui.TableFlags_BordersOuterH",
		"scope": "lua",
		"body": "ImGui.TableFlags_BordersOuterH$0",
		"description": "@type integer\n---\n**Table > Table Flags > Decorations > TableFlags_BordersOuterH**\nDraw horizontal borders at the top and bottom.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_BordersOuterV lua": {
		"prefix": "ImGui.TableFlags_BordersOuterV",
		"scope": "lua",
		"body": "ImGui.TableFlags_BordersOuterV$0",
		"description": "@type integer\n---\n**Table > Table Flags > Decorations > TableFlags_BordersOuterV**\nDraw vertical borders on the left and right sides.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_BordersV lua": {
		"prefix": "ImGui.TableFlags_BordersV",
		"scope": "lua",
		"body": "ImGui.TableFlags_BordersV$0",
		"description": "@type integer\n---\n**Table > Table Flags > Decorations > TableFlags_BordersV**\nDraw vertical borders.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_ContextMenuInBody lua": {
		"prefix": "ImGui.TableFlags_ContextMenuInBody",
		"scope": "lua",
		"body": "ImGui.TableFlags_ContextMenuInBody$0",
		"description": "@type integer\n---\n**Table > Table Flags > Features > TableFlags_ContextMenuInBody**\nRight-click on columns body/contents will display table context menu.\nBy default it is available in TableHeadersRow.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_Hideable lua": {
		"prefix": "ImGui.TableFlags_Hideable",
		"scope": "lua",
		"body": "ImGui.TableFlags_Hideable$0",
		"description": "@type integer\n---\n**Table > Table Flags > Features > TableFlags_Hideable**\nEnable hiding/disabling columns in context menu.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_HighlightHoveredColumn lua": {
		"prefix": "ImGui.TableFlags_HighlightHoveredColumn",
		"scope": "lua",
		"body": "ImGui.TableFlags_HighlightHoveredColumn$0",
		"description": "@type integer\n---\n**Table > Table Flags > Miscellaneous > TableFlags_HighlightHoveredColumn**\nHighlight column headers when hovered (may evolve into a fuller highlight.)\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.9\n "
	},
	"TableFlags_NoClip lua": {
		"prefix": "ImGui.TableFlags_NoClip",
		"scope": "lua",
		"body": "ImGui.TableFlags_NoClip$0",
		"description": "@type integer\n---\n**Table > Table Flags > Clipping > TableFlags_NoClip**\nDisable clipping rectangle for every individual columns\n(reduce draw command count, items will be able to overflow into other columns).\nGenerally incompatible with TableSetupScrollFreeze.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_NoHostExtendX lua": {
		"prefix": "ImGui.TableFlags_NoHostExtendX",
		"scope": "lua",
		"body": "ImGui.TableFlags_NoHostExtendX$0",
		"description": "@type integer\n---\n**Table > Table Flags > Sizing Extra Options > TableFlags_NoHostExtendX**\nMake outer width auto-fit to columns, overriding outer_size.x value. Only\navailable when ScrollX/ScrollY are disabled and Stretch columns are not used.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_NoHostExtendY lua": {
		"prefix": "ImGui.TableFlags_NoHostExtendY",
		"scope": "lua",
		"body": "ImGui.TableFlags_NoHostExtendY$0",
		"description": "@type integer\n---\n**Table > Table Flags > Sizing Extra Options > TableFlags_NoHostExtendY**\nMake outer height stop exactly at outer_size.y (prevent auto-extending table\npast the limit). Only available when ScrollX/ScrollY are disabled.\nData below the limit will be clipped and not visible.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_NoKeepColumnsVisible lua": {
		"prefix": "ImGui.TableFlags_NoKeepColumnsVisible",
		"scope": "lua",
		"body": "ImGui.TableFlags_NoKeepColumnsVisible$0",
		"description": "@type integer\n---\n**Table > Table Flags > Sizing Extra Options > TableFlags_NoKeepColumnsVisible**\nDisable keeping column always minimally visible when ScrollX is off and table\ngets too small. Not recommended if columns are resizable.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_NoPadInnerX lua": {
		"prefix": "ImGui.TableFlags_NoPadInnerX",
		"scope": "lua",
		"body": "ImGui.TableFlags_NoPadInnerX$0",
		"description": "@type integer\n---\n**Table > Table Flags > Padding > TableFlags_NoPadInnerX**\nDisable inner padding between columns (double inner padding if\nTableFlags_BordersOuterV is on, single inner padding if BordersOuterV is off).\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_NoPadOuterX lua": {
		"prefix": "ImGui.TableFlags_NoPadOuterX",
		"scope": "lua",
		"body": "ImGui.TableFlags_NoPadOuterX$0",
		"description": "@type integer\n---\n**Table > Table Flags > Padding > TableFlags_NoPadOuterX**\nDefault if TableFlags_BordersOuterV is off. Disable outermost padding.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_NoSavedSettings lua": {
		"prefix": "ImGui.TableFlags_NoSavedSettings",
		"scope": "lua",
		"body": "ImGui.TableFlags_NoSavedSettings$0",
		"description": "@type integer\n---\n**Table > Table Flags > Features > TableFlags_NoSavedSettings**\nDisable persisting columns order, width and sort settings in the .ini file.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.4\n "
	},
	"TableFlags_None lua": {
		"prefix": "ImGui.TableFlags_None",
		"scope": "lua",
		"body": "ImGui.TableFlags_None$0",
		"description": "@type integer\n---\n**Table > Table Flags > TableFlags_None**\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_PadOuterX lua": {
		"prefix": "ImGui.TableFlags_PadOuterX",
		"scope": "lua",
		"body": "ImGui.TableFlags_PadOuterX$0",
		"description": "@type integer\n---\n**Table > Table Flags > Padding > TableFlags_PadOuterX**\nDefault if TableFlags_BordersOuterV is on. Enable outermost padding.\nGenerally desirable if you have headers.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_PreciseWidths lua": {
		"prefix": "ImGui.TableFlags_PreciseWidths",
		"scope": "lua",
		"body": "ImGui.TableFlags_PreciseWidths$0",
		"description": "@type integer\n---\n**Table > Table Flags > Sizing Extra Options > TableFlags_PreciseWidths**\nDisable distributing remainder width to stretched columns (width allocation\non a 100-wide table with 3 columns: Without this flag: 33,33,34. With this\nflag: 33,33,33).\nWith larger number of columns, resizing will appear to be less smooth.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_Reorderable lua": {
		"prefix": "ImGui.TableFlags_Reorderable",
		"scope": "lua",
		"body": "ImGui.TableFlags_Reorderable$0",
		"description": "@type integer\n---\n**Table > Table Flags > Features > TableFlags_Reorderable**\nEnable reordering columns in header row\n(need calling TableSetupColumn + TableHeadersRow to display headers).\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_Resizable lua": {
		"prefix": "ImGui.TableFlags_Resizable",
		"scope": "lua",
		"body": "ImGui.TableFlags_Resizable$0",
		"description": "@type integer\n---\n**Table > Table Flags > Features > TableFlags_Resizable**\nEnable resizing columns.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_RowBg lua": {
		"prefix": "ImGui.TableFlags_RowBg",
		"scope": "lua",
		"body": "ImGui.TableFlags_RowBg$0",
		"description": "@type integer\n---\n**Table > Table Flags > Decorations > TableFlags_RowBg**\nSet each RowBg color with Col_TableRowBg or Col_TableRowBgAlt (equivalent of\ncalling TableSetBgColor with TableBgTarget_RowBg0 on each row manually).\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_ScrollX lua": {
		"prefix": "ImGui.TableFlags_ScrollX",
		"scope": "lua",
		"body": "ImGui.TableFlags_ScrollX$0",
		"description": "@type integer\n---\n**Table > Table Flags > Scrolling > TableFlags_ScrollX**\nEnable horizontal scrolling. Require 'outer_size' parameter of BeginTable to\nspecify the container size. Changes default sizing policy.\nBecause this creates a child window, ScrollY is currently generally\nrecommended when using ScrollX.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_ScrollY lua": {
		"prefix": "ImGui.TableFlags_ScrollY",
		"scope": "lua",
		"body": "ImGui.TableFlags_ScrollY$0",
		"description": "@type integer\n---\n**Table > Table Flags > Scrolling > TableFlags_ScrollY**\nEnable vertical scrolling.\nRequire 'outer_size' parameter of BeginTable to specify the container size.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_SizingFixedFit lua": {
		"prefix": "ImGui.TableFlags_SizingFixedFit",
		"scope": "lua",
		"body": "ImGui.TableFlags_SizingFixedFit$0",
		"description": "@type integer\n---\n**Table > Table Flags > Sizing Policy > TableFlags_SizingFixedFit**\nColumns default to _WidthFixed or _WidthAuto (if resizable or not resizable),\nmatching contents width.\n**Table > Table Flags > Sizing Policy**\n(read above for defaults)\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_SizingFixedSame lua": {
		"prefix": "ImGui.TableFlags_SizingFixedSame",
		"scope": "lua",
		"body": "ImGui.TableFlags_SizingFixedSame$0",
		"description": "@type integer\n---\n**Table > Table Flags > Sizing Policy > TableFlags_SizingFixedSame**\nColumns default to _WidthFixed or _WidthAuto (if resizable or not resizable),\nmatching the maximum contents width of all columns.\nImplicitly enable TableFlags_NoKeepColumnsVisible.\n**Table > Table Flags > Sizing Policy**\n(read above for defaults)\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_SizingStretchProp lua": {
		"prefix": "ImGui.TableFlags_SizingStretchProp",
		"scope": "lua",
		"body": "ImGui.TableFlags_SizingStretchProp$0",
		"description": "@type integer\n---\n**Table > Table Flags > Sizing Policy > TableFlags_SizingStretchProp**\nColumns default to _WidthStretch with default weights proportional to each\ncolumns contents widths.\n**Table > Table Flags > Sizing Policy**\n(read above for defaults)\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_SizingStretchSame lua": {
		"prefix": "ImGui.TableFlags_SizingStretchSame",
		"scope": "lua",
		"body": "ImGui.TableFlags_SizingStretchSame$0",
		"description": "@type integer\n---\n**Table > Table Flags > Sizing Policy > TableFlags_SizingStretchSame**\nColumns default to _WidthStretch with default weights all equal,\nunless overriden by TableSetupColumn.\n**Table > Table Flags > Sizing Policy**\n(read above for defaults)\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_SortMulti lua": {
		"prefix": "ImGui.TableFlags_SortMulti",
		"scope": "lua",
		"body": "ImGui.TableFlags_SortMulti$0",
		"description": "@type integer\n---\n**Table > Table Flags > Sorting > TableFlags_SortMulti**\nHold shift when clicking headers to sort on multiple column.\nTableGetColumnSortSpecs may return specs where (SpecsCount > 1).\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_SortTristate lua": {
		"prefix": "ImGui.TableFlags_SortTristate",
		"scope": "lua",
		"body": "ImGui.TableFlags_SortTristate$0",
		"description": "@type integer\n---\n**Table > Table Flags > Sorting > TableFlags_SortTristate**\nAllow no sorting, disable default sorting.\nTableGetColumnSortSpecs may return specs where (SpecsCount == 0).\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableFlags_Sortable lua": {
		"prefix": "ImGui.TableFlags_Sortable",
		"scope": "lua",
		"body": "ImGui.TableFlags_Sortable$0",
		"description": "@type integer\n---\n**Table > Table Flags > Features > TableFlags_Sortable**\nEnable sorting. Call TableNeedSort/TableGetColumnSortSpecs to obtain sort specs.\nAlso see TableFlags_SortMulti and TableFlags_SortTristate.\n**Table > Table Flags**\nFor BeginTable.\n- Important! Sizing policies have complex and subtle side effects,\nmore so than you would expect. Read comments/demos carefully +\nexperiment with live demos to get acquainted with them.\n- The DEFAULT sizing policies are:\n- Default to TableFlags_SizingFixedFit\nif ScrollX is on, or if host window has WindowFlags_AlwaysAutoResize.\n- Default to TableFlags_SizingStretchSame if ScrollX is off.\n- When ScrollX is off:\n- Table defaults to TableFlags_SizingStretchSame ->\nall Columns defaults to TableColumnFlags_WidthStretch with same weight.\n- Columns sizing policy allowed: Stretch (default), Fixed/Auto.\n- Fixed Columns will generally obtain their requested width\n(unless the table cannot fit them all).\n- Stretch Columns will share the remaining width.\n- Mixed Fixed/Stretch columns is possible but has various side-effects on\nresizing behaviors.\nThe typical use of mixing sizing policies is: any number of LEADING Fixed\ncolumns, followed by one or two TRAILING Stretch columns.\n(this is because the visible order of columns have subtle but necessary\neffects on how they react to manual resizing).\n- When ScrollX is on:\n- Table defaults to TableFlags_SizingFixedFit ->\nall Columns defaults to TableColumnFlags_WidthFixed\n- Columns sizing policy allowed: Fixed/Auto mostly.\n- Fixed Columns can be enlarged as needed.\nTable will show a horizontal scrollbar if needed.\n- When using auto-resizing (non-resizable) fixed columns,\nquerying the content width to use item right-alignment e.g.\nSetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.\n- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on,\nUNLESS you have specified a value for 'inner_width' in BeginTable().\nIf you specify a value for 'inner_width' then effectively the scrolling\nspace is known and Stretch or mixed Fixed/Stretch columns become meaningful\nagain.\n- Read on documentation at the top of imgui_tables.cpp for details.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableRowFlags_Headers lua": {
		"prefix": "ImGui.TableRowFlags_Headers",
		"scope": "lua",
		"body": "ImGui.TableRowFlags_Headers$0",
		"description": "@type integer\n---\n**Table > TableRowFlags_Headers**\nIdentify header row (set default background color + width of its contents\naccounted different for auto column width).\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TableRowFlags_None lua": {
		"prefix": "ImGui.TableRowFlags_None",
		"scope": "lua",
		"body": "ImGui.TableRowFlags_None$0",
		"description": "@type integer\n---\n**Table > TableRowFlags_None**\nFor TableNextRow.\n**Table**\nSee top of [imgui_tables.cpp](https://github.com/ocornut/imgui/blob/master/imgui_tables.cpp)\nfor general commentary.\nSee TableFlags* and TableColumnFlags* enums for a description of available flags.\nThe typical call flow is:\n1. Call BeginTable.\n2. Optionally call TableSetupColumn to submit column name/flags/defaults.\n3. Optionally call TableSetupScrollFreeze to request scroll freezing of columns/rows.\n4. Optionally call TableHeadersRow to submit a header row. Names are pulled from\nTableSetupColumn data.\n5. Populate contents:\n- In most situations you can use TableNextRow + TableSetColumnIndex(N) to\nstart appending into a column.\n- If you are using tables as a sort of grid, where every column is holding\nthe same type of contents,\nyou may prefer using TableNextColumn instead of\nTableNextRow + TableSetColumnIndex.\nTableNextColumn will automatically wrap-around into the next row if needed.\n- Summary of possible call flow:\n```\nTableNextRow() -> TableSetColumnIndex(0) -> Text('Hello 0') -> TableSetColumnIndex(1) -> Text('Hello 1')  // OK\nTableNextRow() -> TableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK\nTableNextColumn()      -> Text('Hello 0') -> TableNextColumn()      -> Text('Hello 1')  // OK: TableNextColumn() automatically gets to next row!\nTableNextRow()                           -> Text('Hello 0')                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!\n```\n5. Call EndTable.\n@since 0.1\n "
	},
	"TakeFX_AddByName lua": {
		"prefix": "r.TakeFX_AddByName",
		"scope": "lua",
		"body": "r.TakeFX_AddByName(${1:take}, ${2:fxname}, ${3:instantiate})$0",
		"description": "Adds or queries the position of a named FX in a take. See TrackFX_AddByName() for information on fxname and instantiate. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_CopyToTake lua": {
		"prefix": "r.TakeFX_CopyToTake",
		"scope": "lua",
		"body": "r.TakeFX_CopyToTake(${1:src_take}, ${2:src_fx}, ${3:dest_take}, ${4:dest_fx}, ${5:is_move})$0",
		"description": "Copies (or moves) FX from src_take to dest_take. Can be used with src_take=dest_take to reorder. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_CopyToTrack lua": {
		"prefix": "r.TakeFX_CopyToTrack",
		"scope": "lua",
		"body": "r.TakeFX_CopyToTrack(${1:src_take}, ${2:src_fx}, ${3:dest_track}, ${4:dest_fx}, ${5:is_move})$0",
		"description": "Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_Delete lua": {
		"prefix": "r.TakeFX_Delete",
		"scope": "lua",
		"body": "r.TakeFX_Delete(${1:take}, ${2:fx})$0",
		"description": "Remove a FX from take chain (returns true on success) FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_EndParamEdit lua": {
		"prefix": "r.TakeFX_EndParamEdit",
		"scope": "lua",
		"body": "r.TakeFX_EndParamEdit(${1:take}, ${2:fx}, ${3:param})$0",
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_FormatParamValue lua": {
		"prefix": "r.TakeFX_FormatParamValue",
		"scope": "lua",
		"body": "r.TakeFX_FormatParamValue(${1:take}, ${2:fx}, ${3:param}, ${4:val})$0",
		"description": "Note: only works with FX that support Cockos VST extensions. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_FormatParamValueNormalized lua": {
		"prefix": "r.TakeFX_FormatParamValueNormalized",
		"scope": "lua",
		"body": "r.TakeFX_FormatParamValueNormalized(${1:take}, ${2:fx}, ${3:param}, ${4:value}, ${5:buf})$0",
		"description": "Note: only works with FX that support Cockos VST extensions. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetChainVisible lua": {
		"prefix": "r.TakeFX_GetChainVisible",
		"scope": "lua",
		"body": "r.TakeFX_GetChainVisible(${1:take})$0",
		"description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
	},
	"TakeFX_GetCount lua": {
		"prefix": "r.TakeFX_GetCount",
		"scope": "lua",
		"body": "r.TakeFX_GetCount(${1:take})$0",
		"description": ""
	},
	"TakeFX_GetEnabled lua": {
		"prefix": "r.TakeFX_GetEnabled",
		"scope": "lua",
		"body": "r.TakeFX_GetEnabled(${1:take}, ${2:fx})$0",
		"description": "See TakeFX_SetEnabled FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetEnvelope lua": {
		"prefix": "r.TakeFX_GetEnvelope",
		"scope": "lua",
		"body": "r.TakeFX_GetEnvelope(${1:take}, ${2:fxindex}, ${3:parameterindex}, ${4:create})$0",
		"description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created. If the envelope already exists and is bypassed and create=true, then the envelope will be unbypassed. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetFXGUID lua": {
		"prefix": "r.TakeFX_GetFXGUID",
		"scope": "lua",
		"body": "r.TakeFX_GetFXGUID(${1:take}, ${2:fx})$0",
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetFXName lua": {
		"prefix": "r.TakeFX_GetFXName",
		"scope": "lua",
		"body": "rv, buf = r.TakeFX_GetFXName(${1:take}, ${2:fx})$0",
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetFloatingWindow lua": {
		"prefix": "r.TakeFX_GetFloatingWindow",
		"scope": "lua",
		"body": "r.TakeFX_GetFloatingWindow(${1:take}, ${2:index})$0",
		"description": "returns HWND of floating window for effect index, if any FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetFormattedParamValue lua": {
		"prefix": "r.TakeFX_GetFormattedParamValue",
		"scope": "lua",
		"body": "rv, buf = r.TakeFX_GetFormattedParamValue(${1:take}, ${2:fx}, ${3:param})$0",
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetIOSize lua": {
		"prefix": "r.TakeFX_GetIOSize",
		"scope": "lua",
		"body": "rv, inputPins, outputPins = r.TakeFX_GetIOSize(${1:take}, ${2:fx})$0",
		"description": "Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetNamedConfigParm lua": {
		"prefix": "r.TakeFX_GetNamedConfigParm",
		"scope": "lua",
		"body": "rv, buf = r.TakeFX_GetNamedConfigParm(${1:take}, ${2:fx}, ${3:parmname})$0",
		"description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetNumParams lua": {
		"prefix": "r.TakeFX_GetNumParams",
		"scope": "lua",
		"body": "r.TakeFX_GetNumParams(${1:take}, ${2:fx})$0",
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetOffline lua": {
		"prefix": "r.TakeFX_GetOffline",
		"scope": "lua",
		"body": "r.TakeFX_GetOffline(${1:take}, ${2:fx})$0",
		"description": "See TakeFX_SetOffline FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetOpen lua": {
		"prefix": "r.TakeFX_GetOpen",
		"scope": "lua",
		"body": "r.TakeFX_GetOpen(${1:take}, ${2:fx})$0",
		"description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetParam lua": {
		"prefix": "r.TakeFX_GetParam",
		"scope": "lua",
		"body": "num, minval, maxval = r.TakeFX_GetParam(${1:take}, ${2:fx}, ${3:param})$0",
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetParamEx lua": {
		"prefix": "r.TakeFX_GetParamEx",
		"scope": "lua",
		"body": "num, minval, maxval, midval = r.TakeFX_GetParamEx(${1:take}, ${2:fx}, ${3:param})$0",
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetParamFromIdent lua": {
		"prefix": "r.TakeFX_GetParamFromIdent",
		"scope": "lua",
		"body": "r.TakeFX_GetParamFromIdent(${1:take}, ${2:fx}, ${3:ident_str})$0",
		"description": "gets the parameter index from an identifying string (:wet, :bypass, or a string returned from GetParamIdent), or -1 if unknown. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetParamIdent lua": {
		"prefix": "r.TakeFX_GetParamIdent",
		"scope": "lua",
		"body": "rv, buf = r.TakeFX_GetParamIdent(${1:take}, ${2:fx}, ${3:param})$0",
		"description": "gets an identifying string for the parameter FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetParamName lua": {
		"prefix": "r.TakeFX_GetParamName",
		"scope": "lua",
		"body": "rv, buf = r.TakeFX_GetParamName(${1:take}, ${2:fx}, ${3:param})$0",
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetParamNormalized lua": {
		"prefix": "r.TakeFX_GetParamNormalized",
		"scope": "lua",
		"body": "r.TakeFX_GetParamNormalized(${1:take}, ${2:fx}, ${3:param})$0",
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetParameterStepSizes lua": {
		"prefix": "r.TakeFX_GetParameterStepSizes",
		"scope": "lua",
		"body": "rv, step, smallstep, largestep, istoggle = r.TakeFX_GetParameterStepSizes(${1:take}, ${2:fx}, ${3:param})$0",
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetPinMappings lua": {
		"prefix": "r.TakeFX_GetPinMappings",
		"scope": "lua",
		"body": "rv, high32 = r.TakeFX_GetPinMappings(${1:take}, ${2:fx}, ${3:isoutput}, ${4:pin})$0",
		"description": "gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits. Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetPreset lua": {
		"prefix": "r.TakeFX_GetPreset",
		"scope": "lua",
		"body": "rv, presetname = r.TakeFX_GetPreset(${1:take}, ${2:fx})$0",
		"description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). See TakeFX_SetPreset. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetPresetIndex lua": {
		"prefix": "r.TakeFX_GetPresetIndex",
		"scope": "lua",
		"body": "rv, numberOfPresets = r.TakeFX_GetPresetIndex(${1:take}, ${2:fx})$0",
		"description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_GetUserPresetFilename lua": {
		"prefix": "r.TakeFX_GetUserPresetFilename",
		"scope": "lua",
		"body": "r.TakeFX_GetUserPresetFilename(${1:take}, ${2:fx})$0",
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_NavigatePresets lua": {
		"prefix": "r.TakeFX_NavigatePresets",
		"scope": "lua",
		"body": "r.TakeFX_NavigatePresets(${1:take}, ${2:fx}, ${3:presetmove})$0",
		"description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetEnabled lua": {
		"prefix": "r.TakeFX_SetEnabled",
		"scope": "lua",
		"body": "r.TakeFX_SetEnabled(${1:take}, ${2:fx}, ${3:enabled})$0",
		"description": "See TakeFX_GetEnabled FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetNamedConfigParm lua": {
		"prefix": "r.TakeFX_SetNamedConfigParm",
		"scope": "lua",
		"body": "r.TakeFX_SetNamedConfigParm(${1:take}, ${2:fx}, ${3:parmname}, ${4:value})$0",
		"description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_SetNamedConfigParm FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetOffline lua": {
		"prefix": "r.TakeFX_SetOffline",
		"scope": "lua",
		"body": "r.TakeFX_SetOffline(${1:take}, ${2:fx}, ${3:offline})$0",
		"description": "See TakeFX_GetOffline FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetOpen lua": {
		"prefix": "r.TakeFX_SetOpen",
		"scope": "lua",
		"body": "r.TakeFX_SetOpen(${1:take}, ${2:fx}, ${3:open})$0",
		"description": "Open this FX UI. See TakeFX_GetOpen FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetParam lua": {
		"prefix": "r.TakeFX_SetParam",
		"scope": "lua",
		"body": "r.TakeFX_SetParam(${1:take}, ${2:fx}, ${3:param}, ${4:val})$0",
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetParamNormalized lua": {
		"prefix": "r.TakeFX_SetParamNormalized",
		"scope": "lua",
		"body": "r.TakeFX_SetParamNormalized(${1:take}, ${2:fx}, ${3:param}, ${4:value})$0",
		"description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetPinMappings lua": {
		"prefix": "r.TakeFX_SetPinMappings",
		"scope": "lua",
		"body": "r.TakeFX_SetPinMappings(${1:take}, ${2:fx}, ${3:isoutput}, ${4:pin}, ${5:low32bits}, ${6:hi32bits})$0",
		"description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability). Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetPreset lua": {
		"prefix": "r.TakeFX_SetPreset",
		"scope": "lua",
		"body": "r.TakeFX_SetPreset(${1:take}, ${2:fx}, ${3:presetname})$0",
		"description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_SetPresetByIndex lua": {
		"prefix": "r.TakeFX_SetPresetByIndex",
		"scope": "lua",
		"body": "r.TakeFX_SetPresetByIndex(${1:take}, ${2:fx}, ${3:idx})$0",
		"description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeFX_Show lua": {
		"prefix": "r.TakeFX_Show",
		"scope": "lua",
		"body": "r.TakeFX_Show(${1:take}, ${2:index}, ${3:showFlag})$0",
		"description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid) FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TakeIsMIDI lua": {
		"prefix": "r.TakeIsMIDI",
		"scope": "lua",
		"body": "r.TakeIsMIDI(${1:take})$0",
		"description": "Returns true if the active take contains MIDI."
	},
	"ThemeLayout_GetLayout lua": {
		"prefix": "r.ThemeLayout_GetLayout",
		"scope": "lua",
		"body": "rv, name = r.ThemeLayout_GetLayout(${1:section}, ${2:idx})$0",
		"description": "Gets theme layout information. section can be 'global' for global layout override, 'seclist' to enumerate a list of layout sections, otherwise a layout section such as 'mcp', 'tcp', 'trans', etc. idx can be -1 to query the current value, -2 to get the description of the section (if not global), -3 will return the current context DPI-scaling (256=normal, 512=retina, etc), or 0..x. returns false if failed."
	},
	"ThemeLayout_GetParameter lua": {
		"prefix": "r.ThemeLayout_GetParameter",
		"scope": "lua",
		"body": "str, desc, value, defValue, minValue, maxValue = r.ThemeLayout_GetParameter(${1:wp})$0",
		"description": "returns theme layout parameter. return value is cfg-name, or nil/empty if out of range."
	},
	"ThemeLayout_RefreshAll lua": {
		"prefix": "r.ThemeLayout_RefreshAll",
		"scope": "lua",
		"body": "r.ThemeLayout_RefreshAll()$0",
		"description": "Refreshes all layouts"
	},
	"ThemeLayout_SetLayout lua": {
		"prefix": "r.ThemeLayout_SetLayout",
		"scope": "lua",
		"body": "r.ThemeLayout_SetLayout(${1:section}, ${2:layout})$0",
		"description": "Sets theme layout override for a particular section -- section can be 'global' or 'mcp' etc. If setting global layout, prefix a ! to the layout string to clear any per-layout overrides. Returns false if failed."
	},
	"ThemeLayout_SetParameter lua": {
		"prefix": "r.ThemeLayout_SetParameter",
		"scope": "lua",
		"body": "r.ThemeLayout_SetParameter(${1:wp}, ${2:value}, ${3:persist})$0",
		"description": "sets theme layout parameter to value. persist=true in order to have change loaded on next theme load. note that the caller should update layouts via ??? to make changes visible."
	},
	"TimeMap2_GetDividedBpmAtTime lua": {
		"prefix": "r.TimeMap2_GetDividedBpmAtTime",
		"scope": "lua",
		"body": "r.TimeMap2_GetDividedBpmAtTime(0, ${2:time})$0",
		"description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)"
	},
	"TimeMap2_GetNextChangeTime lua": {
		"prefix": "r.TimeMap2_GetNextChangeTime",
		"scope": "lua",
		"body": "r.TimeMap2_GetNextChangeTime(0, ${2:time})$0",
		"description": "when does the next time map (tempo or time sig) change occur"
	},
	"TimeMap2_QNToTime lua": {
		"prefix": "r.TimeMap2_QNToTime",
		"scope": "lua",
		"body": "r.TimeMap2_QNToTime(0, ${2:qn})$0",
		"description": "converts project QN position to time."
	},
	"TimeMap2_beatsToTime lua": {
		"prefix": "r.TimeMap2_beatsToTime",
		"scope": "lua",
		"body": "r.TimeMap2_beatsToTime(0, ${2:tpos}, ${3:measuresIn})$0",
		"description": "convert a beat position (or optionally a beats+measures if measures is non-NULL) to time."
	},
	"TimeMap2_timeToBeats lua": {
		"prefix": "r.TimeMap2_timeToBeats",
		"scope": "lua",
		"body": "r.TimeMap2_timeToBeats(0, ${2:tpos})$0",
		"description": "convert a time into beats.\nif measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.\nif cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).\nif cdenom is non-NULL, will be set to the current time signature denominator."
	},
	"TimeMap2_timeToQN lua": {
		"prefix": "r.TimeMap2_timeToQN",
		"scope": "lua",
		"body": "r.TimeMap2_timeToQN(0, ${2:tpos})$0",
		"description": "converts project time position to QN position."
	},
	"TimeMap_GetDividedBpmAtTime lua": {
		"prefix": "r.TimeMap_GetDividedBpmAtTime",
		"scope": "lua",
		"body": "r.TimeMap_GetDividedBpmAtTime(${1:time})$0",
		"description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)"
	},
	"TimeMap_GetMeasureInfo lua": {
		"prefix": "r.TimeMap_GetMeasureInfo",
		"scope": "lua",
		"body": "num, qn_start, qn_end, timesig_num, timesig_denom, tempo = r.TimeMap_GetMeasureInfo(0, ${2:measure})$0",
		"description": "Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start."
	},
	"TimeMap_GetMetronomePattern lua": {
		"prefix": "r.TimeMap_GetMetronomePattern",
		"scope": "lua",
		"body": "rv, pattern = r.TimeMap_GetMetronomePattern(0, ${2:time}, ${3:pattern})$0",
		"description": "Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be 'ABCABCD'. For backwards compatibility, by default the function will return 1 for each primary beat and 2 for each non-primary beat, so '1221222' in this example, and does not support triplets. If buf is set to 'EXTENDED', the function will return the full string as displayed in the pattern editor, including all beat types and triplet representations. Pass in 'SET:string' with a correctly formed pattern string matching the current time signature numerator to set the click pattern. The time signature numerator can be deduced from the returned string, and the function returns the time signature denominator."
	},
	"TimeMap_GetTimeSigAtTime lua": {
		"prefix": "r.TimeMap_GetTimeSigAtTime",
		"scope": "lua",
		"body": "timesig_num, timesig_denom, tempo = r.TimeMap_GetTimeSigAtTime(0, ${2:time})$0",
		"description": "get the effective time signature and tempo"
	},
	"TimeMap_QNToMeasures lua": {
		"prefix": "r.TimeMap_QNToMeasures",
		"scope": "lua",
		"body": "r.TimeMap_QNToMeasures(0, ${2:qn})$0",
		"description": "Find which measure the given QN position falls in."
	},
	"TimeMap_QNToTime lua": {
		"prefix": "r.TimeMap_QNToTime",
		"scope": "lua",
		"body": "r.TimeMap_QNToTime(${1:qn})$0",
		"description": "converts project QN position to time."
	},
	"TimeMap_QNToTime_abs lua": {
		"prefix": "r.TimeMap_QNToTime_abs",
		"scope": "lua",
		"body": "r.TimeMap_QNToTime_abs(0, ${2:qn})$0",
		"description": "Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_QNToTime"
	},
	"TimeMap_curFrameRate lua": {
		"prefix": "r.TimeMap_curFrameRate",
		"scope": "lua",
		"body": "r.TimeMap_curFrameRate(0)$0",
		"description": "Gets project framerate, and optionally whether it is drop-frame timecode"
	},
	"TimeMap_timeToQN lua": {
		"prefix": "r.TimeMap_timeToQN",
		"scope": "lua",
		"body": "r.TimeMap_timeToQN(${1:tpos})$0",
		"description": "converts project QN position to time."
	},
	"TimeMap_timeToQN_abs lua": {
		"prefix": "r.TimeMap_timeToQN_abs",
		"scope": "lua",
		"body": "r.TimeMap_timeToQN_abs(0, ${2:tpos})$0",
		"description": "Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN"
	},
	"ToggleTrackSendUIMute lua": {
		"prefix": "r.ToggleTrackSendUIMute",
		"scope": "lua",
		"body": "r.ToggleTrackSendUIMute(${1:track}, ${2:send_idx})$0",
		"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends."
	},
	"TrackCtl_SetToolTip lua": {
		"prefix": "r.TrackCtl_SetToolTip",
		"scope": "lua",
		"body": "r.TrackCtl_SetToolTip(${1:fmt}, ${2:xpos}, ${3:ypos}, ${4:topmost})$0",
		"description": "displays tooltip at location, or removes if empty string"
	},
	"TrackFX_AddByName lua": {
		"prefix": "r.TrackFX_AddByName",
		"scope": "lua",
		"body": "r.TrackFX_AddByName(${1:track}, ${2:fxname}, ${3:recFX}, ${4:instantiate})$0",
		"description": "Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. If instantiate is <= -1000, it is used for the insertion position (-1000 is first item in chain, -1001 is second, etc). fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:, or FXADD: which adds selected items from the currently-open FX browser, FXADD:2 to limit to 2 FX added, or FXADD:2e to only succeed if exactly 2 FX are selected. Returns -1 on failure or the new position in chain on success. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_CopyToTake lua": {
		"prefix": "r.TrackFX_CopyToTake",
		"scope": "lua",
		"body": "r.TrackFX_CopyToTake(${1:src_track}, ${2:src_fx}, ${3:dest_take}, ${4:dest_fx}, ${5:is_move})$0",
		"description": "Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_CopyToTrack lua": {
		"prefix": "r.TrackFX_CopyToTrack",
		"scope": "lua",
		"body": "r.TrackFX_CopyToTrack(${1:src_track}, ${2:src_fx}, ${3:dest_track}, ${4:dest_fx}, ${5:is_move})$0",
		"description": "Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_Delete lua": {
		"prefix": "r.TrackFX_Delete",
		"scope": "lua",
		"body": "r.TrackFX_Delete(${1:track}, ${2:fx})$0",
		"description": "Remove a FX from track chain (returns true on success) FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_EndParamEdit lua": {
		"prefix": "r.TrackFX_EndParamEdit",
		"scope": "lua",
		"body": "r.TrackFX_EndParamEdit(${1:track}, ${2:fx}, ${3:param})$0",
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_FormatParamValue lua": {
		"prefix": "r.TrackFX_FormatParamValue",
		"scope": "lua",
		"body": "r.TrackFX_FormatParamValue(${1:track}, ${2:fx}, ${3:param}, ${4:val})$0",
		"description": "Note: only works with FX that support Cockos VST extensions. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_FormatParamValueNormalized lua": {
		"prefix": "r.TrackFX_FormatParamValueNormalized",
		"scope": "lua",
		"body": "r.TrackFX_FormatParamValueNormalized(${1:track}, ${2:fx}, ${3:param}, ${4:value}, ${5:buf})$0",
		"description": "Note: only works with FX that support Cockos VST extensions. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetByName lua": {
		"prefix": "r.TrackFX_GetByName",
		"scope": "lua",
		"body": "r.TrackFX_GetByName(${1:track}, ${2:fxname}, ${3:instantiate})$0",
		"description": "Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName."
	},
	"TrackFX_GetChainVisible lua": {
		"prefix": "r.TrackFX_GetChainVisible",
		"scope": "lua",
		"body": "r.TrackFX_GetChainVisible(${1:track})$0",
		"description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
	},
	"TrackFX_GetCount lua": {
		"prefix": "r.TrackFX_GetCount",
		"scope": "lua",
		"body": "r.TrackFX_GetCount(${1:track})$0",
		"description": ""
	},
	"TrackFX_GetEQ lua": {
		"prefix": "r.TrackFX_GetEQ",
		"scope": "lua",
		"body": "r.TrackFX_GetEQ(${1:track}, ${2:instantiate})$0",
		"description": "Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName."
	},
	"TrackFX_GetEQBandEnabled lua": {
		"prefix": "r.TrackFX_GetEQBandEnabled",
		"scope": "lua",
		"body": "r.TrackFX_GetEQBandEnabled(${1:track}, ${2:fxidx}, ${3:bandtype}, ${4:bandidx})$0",
		"description": "Returns true if the EQ band is enabled.\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetEQParam lua": {
		"prefix": "r.TrackFX_GetEQParam",
		"scope": "lua",
		"body": "rv, bandtype, bandidx, paramtype, normval = r.TrackFX_GetEQParam(${1:track}, ${2:fxidx}, ${3:paramidx})$0",
		"description": "Returns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetEnabled lua": {
		"prefix": "r.TrackFX_GetEnabled",
		"scope": "lua",
		"body": "r.TrackFX_GetEnabled(${1:track}, ${2:fx})$0",
		"description": "See TrackFX_SetEnabled FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetFXGUID lua": {
		"prefix": "r.TrackFX_GetFXGUID",
		"scope": "lua",
		"body": "r.TrackFX_GetFXGUID(${1:track}, ${2:fx})$0",
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetFXName lua": {
		"prefix": "r.TrackFX_GetFXName",
		"scope": "lua",
		"body": "rv, buf = r.TrackFX_GetFXName(${1:track}, ${2:fx})$0",
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetFloatingWindow lua": {
		"prefix": "r.TrackFX_GetFloatingWindow",
		"scope": "lua",
		"body": "r.TrackFX_GetFloatingWindow(${1:track}, ${2:index})$0",
		"description": "returns HWND of floating window for effect index, if any FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetFormattedParamValue lua": {
		"prefix": "r.TrackFX_GetFormattedParamValue",
		"scope": "lua",
		"body": "rv, buf = r.TrackFX_GetFormattedParamValue(${1:track}, ${2:fx}, ${3:param})$0",
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetIOSize lua": {
		"prefix": "r.TrackFX_GetIOSize",
		"scope": "lua",
		"body": "rv, inputPins, outputPins = r.TrackFX_GetIOSize(${1:track}, ${2:fx})$0",
		"description": "Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetInstrument lua": {
		"prefix": "r.TrackFX_GetInstrument",
		"scope": "lua",
		"body": "r.TrackFX_GetInstrument(${1:track})$0",
		"description": "Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName."
	},
	"TrackFX_GetNamedConfigParm lua": {
		"prefix": "r.TrackFX_GetNamedConfigParm",
		"scope": "lua",
		"body": "rv, buf = r.TrackFX_GetNamedConfigParm(${1:track}, ${2:fx}, ${3:parmname})$0",
		"description": "gets plug-in specific named configuration value (returns true on success). \nSupported values for read:\npdc : PDC latency\nin_pin_X : name of input pin X\nout_pin_X : name of output pin X\nfx_type : type string\nfx_ident : type-specific identifier\nfx_name : name of FX (also supported as original_name)\nGainReduction_dB : [ReaComp + other supported compressors]\nis_instrument : 1 if instrument, 0 if not (v7.40+)\nparent_container : FX ID of parent container, if any (v7.06+)\ncontainer_count : [Container] number of FX in container\ncontainer_item.X : FX ID of item in container (first item is container_item.0) (v7.06+)\nparam.X.container_map.hint_id : unique ID of mapping (preserved if mapping order changes)\nparam.X.container_map.delete : read this value in order to remove the mapping for this parameter\ncontainer_map.add : read from this value to add a new container parameter mapping -- will return new parameter index (accessed via param.X.container_map.*)\ncontainer_map.add.FXID.PARMIDX : read from this value to add/get container parameter mapping for FXID/PARMIDX -- will return the parameter index (accessed via param.X.container_map.*). FXID can be a full address (must be a child of the container) or a 0-based sub-index (v7.06+).\ncontainer_map.get.FXID.PARMIDX : read from this value to get container parameter mapping for FXID/PARMIDX -- will return the parameter index (accessed via param.X.container_map.*). FXID can be a full address (must be a child of the container) or a 0-based sub-index (v7.06+).\nchain_pdc_actual : returns the actual chain latency in samples, only valid after playback has commenced, may be rounded up to block size.\nchain_pdc_reporting : returns the reported chain latency, always valid, not rounded to block size.\nSupported values for read/write:\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\nparam.X.container_map.fx_index : index of FX contained in container\nparam.X.container_map.fx_parm : parameter index of parameter of FX contained in container\nparam.X.container_map.aliased_name : name of parameter (if user-renamed, otherwise fails)\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLimit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\nparallel : 0, 1 or 2 - 1=process plug-in in parallel with previous, 2=process plug-in parallel and merge MIDI\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)\nchain_sel : selected/visible FX in chain\nrenamed_name : renamed FX instance name (empty string = not renamed)\ncontainer_nch : number of internal channels for container\ncontainer_nch_in : number of input pins for container\ncontainer_nch_out : number of output pints for container\ncontainer_nch_feedback : number of internal feedback channels enabled in container\nfocused : reading returns 1 if focused. Writing a positive value to this sets the FX UI as 'last focused.'\nlast_touched : reading returns two integers, one indicates whether FX is the last-touched FX, the second indicates which parameter was last touched. Writing a negative value ensures this plug-in is not set as last touched, otherwise the FX is set 'last touched,' and last touched parameter index is set to the value in the string (if valid).\n FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetNumParams lua": {
		"prefix": "r.TrackFX_GetNumParams",
		"scope": "lua",
		"body": "r.TrackFX_GetNumParams(${1:track}, ${2:fx})$0",
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetOffline lua": {
		"prefix": "r.TrackFX_GetOffline",
		"scope": "lua",
		"body": "r.TrackFX_GetOffline(${1:track}, ${2:fx})$0",
		"description": "See TrackFX_SetOffline FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetOpen lua": {
		"prefix": "r.TrackFX_GetOpen",
		"scope": "lua",
		"body": "r.TrackFX_GetOpen(${1:track}, ${2:fx})$0",
		"description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetParam lua": {
		"prefix": "r.TrackFX_GetParam",
		"scope": "lua",
		"body": "num, minval, maxval = r.TrackFX_GetParam(${1:track}, ${2:fx}, ${3:param})$0",
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetParamEx lua": {
		"prefix": "r.TrackFX_GetParamEx",
		"scope": "lua",
		"body": "num, minval, maxval, midval = r.TrackFX_GetParamEx(${1:track}, ${2:fx}, ${3:param})$0",
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetParamFromIdent lua": {
		"prefix": "r.TrackFX_GetParamFromIdent",
		"scope": "lua",
		"body": "r.TrackFX_GetParamFromIdent(${1:track}, ${2:fx}, ${3:ident_str})$0",
		"description": "gets the parameter index from an identifying string (:wet, :bypass, :delta, or a string returned from GetParamIdent), or -1 if unknown. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetParamIdent lua": {
		"prefix": "r.TrackFX_GetParamIdent",
		"scope": "lua",
		"body": "rv, buf = r.TrackFX_GetParamIdent(${1:track}, ${2:fx}, ${3:param})$0",
		"description": "gets an identifying string for the parameter FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetParamName lua": {
		"prefix": "r.TrackFX_GetParamName",
		"scope": "lua",
		"body": "rv, buf = r.TrackFX_GetParamName(${1:track}, ${2:fx}, ${3:param})$0",
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetParamNormalized lua": {
		"prefix": "r.TrackFX_GetParamNormalized",
		"scope": "lua",
		"body": "r.TrackFX_GetParamNormalized(${1:track}, ${2:fx}, ${3:param})$0",
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetParameterStepSizes lua": {
		"prefix": "r.TrackFX_GetParameterStepSizes",
		"scope": "lua",
		"body": "rv, step, smallstep, largestep, istoggle = r.TrackFX_GetParameterStepSizes(${1:track}, ${2:fx}, ${3:param})$0",
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetPinMappings lua": {
		"prefix": "r.TrackFX_GetPinMappings",
		"scope": "lua",
		"body": "rv, high32 = r.TrackFX_GetPinMappings(${1:tr}, ${2:fx}, ${3:isoutput}, ${4:pin})$0",
		"description": "gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits. Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetPreset lua": {
		"prefix": "r.TrackFX_GetPreset",
		"scope": "lua",
		"body": "rv, presetname = r.TrackFX_GetPreset(${1:track}, ${2:fx})$0",
		"description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). See TrackFX_SetPreset. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetPresetIndex lua": {
		"prefix": "r.TrackFX_GetPresetIndex",
		"scope": "lua",
		"body": "rv, numberOfPresets = r.TrackFX_GetPresetIndex(${1:track}, ${2:fx})$0",
		"description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_GetRecChainVisible lua": {
		"prefix": "r.TrackFX_GetRecChainVisible",
		"scope": "lua",
		"body": "r.TrackFX_GetRecChainVisible(${1:track})$0",
		"description": "returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
	},
	"TrackFX_GetRecCount lua": {
		"prefix": "r.TrackFX_GetRecCount",
		"scope": "lua",
		"body": "r.TrackFX_GetRecCount(${1:track})$0",
		"description": "returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX."
	},
	"TrackFX_GetUserPresetFilename lua": {
		"prefix": "r.TrackFX_GetUserPresetFilename",
		"scope": "lua",
		"body": "r.TrackFX_GetUserPresetFilename(${1:track}, ${2:fx})$0",
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_NavigatePresets lua": {
		"prefix": "r.TrackFX_NavigatePresets",
		"scope": "lua",
		"body": "r.TrackFX_NavigatePresets(${1:track}, ${2:fx}, ${3:presetmove})$0",
		"description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetEQBandEnabled lua": {
		"prefix": "r.TrackFX_SetEQBandEnabled",
		"scope": "lua",
		"body": "r.TrackFX_SetEQBandEnabled(${1:track}, ${2:fxidx}, ${3:bandtype}, ${4:bandidx}, ${5:enable})$0",
		"description": "Enable or disable a ReaEQ band.\nReturns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetEQParam lua": {
		"prefix": "r.TrackFX_SetEQParam",
		"scope": "lua",
		"body": "r.TrackFX_SetEQParam(${1:track}, ${2:fxidx}, ${3:bandtype}, ${4:bandidx}, ${5:paramtype}, ${6:val}, ${7:isnorm})$0",
		"description": "Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetEnabled lua": {
		"prefix": "r.TrackFX_SetEnabled",
		"scope": "lua",
		"body": "r.TrackFX_SetEnabled(${1:track}, ${2:fx}, ${3:enabled})$0",
		"description": "See TrackFX_GetEnabled FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetNamedConfigParm lua": {
		"prefix": "r.TrackFX_SetNamedConfigParm",
		"scope": "lua",
		"body": "r.TrackFX_SetNamedConfigParm(${1:track}, ${2:fx}, ${3:parmname}, ${4:value})$0",
		"description": "sets plug-in specific named configuration value (returns true on success).\nSupport values for write:\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\nparam.X.container_map.fx_index : index of FX contained in container\nparam.X.container_map.fx_parm : parameter index of parameter of FX contained in container\nparam.X.container_map.aliased_name : name of parameter (if user-renamed, otherwise fails)\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLimit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\nparallel : 0, 1 or 2 - 1=process plug-in in parallel with previous, 2=process plug-in parallel and merge MIDI\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)\nchain_sel : selected/visible FX in chain\nrenamed_name : renamed FX instance name (empty string = not renamed)\ncontainer_nch : number of internal channels for container\ncontainer_nch_in : number of input pins for container\ncontainer_nch_out : number of output pints for container\ncontainer_nch_feedback : number of internal feedback channels enabled in container\nfocused : reading returns 1 if focused. Writing a positive value to this sets the FX UI as 'last focused.'\nlast_touched : reading returns two integers, one indicates whether FX is the last-touched FX, the second indicates which parameter was last touched. Writing a negative value ensures this plug-in is not set as last touched, otherwise the FX is set 'last touched,' and last touched parameter index is set to the value in the string (if valid).\n FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetOffline lua": {
		"prefix": "r.TrackFX_SetOffline",
		"scope": "lua",
		"body": "r.TrackFX_SetOffline(${1:track}, ${2:fx}, ${3:offline})$0",
		"description": "See TrackFX_GetOffline FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetOpen lua": {
		"prefix": "r.TrackFX_SetOpen",
		"scope": "lua",
		"body": "r.TrackFX_SetOpen(${1:track}, ${2:fx}, ${3:open})$0",
		"description": "Open this FX UI. See TrackFX_GetOpen FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetParam lua": {
		"prefix": "r.TrackFX_SetParam",
		"scope": "lua",
		"body": "r.TrackFX_SetParam(${1:track}, ${2:fx}, ${3:param}, ${4:val})$0",
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetParamNormalized lua": {
		"prefix": "r.TrackFX_SetParamNormalized",
		"scope": "lua",
		"body": "r.TrackFX_SetParamNormalized(${1:track}, ${2:fx}, ${3:param}, ${4:value})$0",
		"description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetPinMappings lua": {
		"prefix": "r.TrackFX_SetPinMappings",
		"scope": "lua",
		"body": "r.TrackFX_SetPinMappings(${1:tr}, ${2:fx}, ${3:isoutput}, ${4:pin}, ${5:low32bits}, ${6:hi32bits})$0",
		"description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability). Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetPreset lua": {
		"prefix": "r.TrackFX_SetPreset",
		"scope": "lua",
		"body": "r.TrackFX_SetPreset(${1:track}, ${2:fx}, ${3:presetname})$0",
		"description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_SetPresetByIndex lua": {
		"prefix": "r.TrackFX_SetPresetByIndex",
		"scope": "lua",
		"body": "r.TrackFX_SetPresetByIndex(${1:track}, ${2:fx}, ${3:idx})$0",
		"description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackFX_Show lua": {
		"prefix": "r.TrackFX_Show",
		"scope": "lua",
		"body": "r.TrackFX_Show(${1:track}, ${2:index}, ${3:showFlag})$0",
		"description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid) FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
	},
	"TrackList_AdjustWindows lua": {
		"prefix": "r.TrackList_AdjustWindows",
		"scope": "lua",
		"body": "r.TrackList_AdjustWindows(${1:isMinor})$0",
		"description": ""
	},
	"TrackList_UpdateAllExternalSurfaces lua": {
		"prefix": "r.TrackList_UpdateAllExternalSurfaces",
		"scope": "lua",
		"body": "r.TrackList_UpdateAllExternalSurfaces()$0",
		"description": ""
	},
	"Track_GetPeakHoldDB lua": {
		"prefix": "r.Track_GetPeakHoldDB",
		"scope": "lua",
		"body": "r.Track_GetPeakHoldDB(${1:track}, ${2:channel}, ${3:clear})$0",
		"description": "Returns meter hold state, in dB*0.01 (0 = +0dB, -0.01 = -1dB, 0.02 = +2dB, etc). If clear is set, clears the meter hold. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness."
	},
	"Track_GetPeakInfo lua": {
		"prefix": "r.Track_GetPeakInfo",
		"scope": "lua",
		"body": "r.Track_GetPeakInfo(${1:track}, ${2:channel})$0",
		"description": "Returns peak meter value (1.0=+0dB, 0.0=-inf) for channel. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness."
	},
	"TreeNodeFlags_AllowOverlap lua": {
		"prefix": "ImGui.TreeNodeFlags_AllowOverlap",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_AllowOverlap$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_AllowOverlap**\nHit testing to allow subsequent widgets to overlap this one.\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.9\n "
	},
	"TreeNodeFlags_Bullet lua": {
		"prefix": "ImGui.TreeNodeFlags_Bullet",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_Bullet$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_Bullet**\nDisplay a bullet instead of arrow. IMPORTANT: node can still be marked\nopen/close if you don't set the _Leaf flag!\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.1\n "
	},
	"TreeNodeFlags_CollapsingHeader lua": {
		"prefix": "ImGui.TreeNodeFlags_CollapsingHeader",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_CollapsingHeader$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_CollapsingHeader**\nTreeNodeFlags_Framed | TreeNodeFlags_NoTreePushOnOpen | TreeNodeFlags_NoAutoOpenOnLog\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.1\n "
	},
	"TreeNodeFlags_DefaultOpen lua": {
		"prefix": "ImGui.TreeNodeFlags_DefaultOpen",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_DefaultOpen$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_DefaultOpen**\nDefault node to be open.\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.1\n "
	},
	"TreeNodeFlags_FramePadding lua": {
		"prefix": "ImGui.TreeNodeFlags_FramePadding",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_FramePadding$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_FramePadding**\nUse FramePadding (even for an unframed text node) to vertically align text\nbaseline to regular widget height.\nEquivalent to calling AlignTextToFramePadding before the node.\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.1\n "
	},
	"TreeNodeFlags_Framed lua": {
		"prefix": "ImGui.TreeNodeFlags_Framed",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_Framed$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_Framed**\nDraw frame with background (e.g. for CollapsingHeader).\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.1\n "
	},
	"TreeNodeFlags_Leaf lua": {
		"prefix": "ImGui.TreeNodeFlags_Leaf",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_Leaf$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_Leaf**\nNo collapsing, no arrow (use as a convenience for leaf nodes).\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.1\n "
	},
	"TreeNodeFlags_NoAutoOpenOnLog lua": {
		"prefix": "ImGui.TreeNodeFlags_NoAutoOpenOnLog",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_NoAutoOpenOnLog$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_NoAutoOpenOnLog**\nDon't automatically and temporarily open node when Logging is active\n(by default logging will automatically open tree nodes).\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.1\n "
	},
	"TreeNodeFlags_NoTreePushOnOpen lua": {
		"prefix": "ImGui.TreeNodeFlags_NoTreePushOnOpen",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_NoTreePushOnOpen$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_NoTreePushOnOpen**\nDon't do a TreePush when open (e.g. for CollapsingHeader)\n= no extra indent nor pushing on ID stack.\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.1\n "
	},
	"TreeNodeFlags_None lua": {
		"prefix": "ImGui.TreeNodeFlags_None",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_None$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_None**\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.1\n "
	},
	"TreeNodeFlags_OpenOnArrow lua": {
		"prefix": "ImGui.TreeNodeFlags_OpenOnArrow",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_OpenOnArrow$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_OpenOnArrow**\nOnly open when clicking on the arrow part.\nIf TreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or\ndouble-click all box to open.\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.1\n "
	},
	"TreeNodeFlags_OpenOnDoubleClick lua": {
		"prefix": "ImGui.TreeNodeFlags_OpenOnDoubleClick",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_OpenOnDoubleClick$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_OpenOnDoubleClick**\nNeed double-click to open node.\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.1\n "
	},
	"TreeNodeFlags_Selected lua": {
		"prefix": "ImGui.TreeNodeFlags_Selected",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_Selected$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_Selected**\nDraw as selected.\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.1\n "
	},
	"TreeNodeFlags_SpanAllColumns lua": {
		"prefix": "ImGui.TreeNodeFlags_SpanAllColumns",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_SpanAllColumns$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_SpanAllColumns**\nFrame will span all columns of its container table (text will still fit in current column).\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.9\n "
	},
	"TreeNodeFlags_SpanAvailWidth lua": {
		"prefix": "ImGui.TreeNodeFlags_SpanAvailWidth",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_SpanAvailWidth$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_SpanAvailWidth**\nExtend hit box to the right-most edge, even if not framed.\nThis is not the default in order to allow adding other items on the same line.\nIn the future we may refactor the hit system to be front-to-back,\nallowing natural overlaps and then this can become the default.\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.1\n "
	},
	"TreeNodeFlags_SpanFullWidth lua": {
		"prefix": "ImGui.TreeNodeFlags_SpanFullWidth",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_SpanFullWidth$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_SpanFullWidth**\nExtend hit box to the left-most and right-most edges (bypass the indented area).\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.1\n "
	},
	"TreeNodeFlags_SpanTextWidth lua": {
		"prefix": "ImGui.TreeNodeFlags_SpanTextWidth",
		"scope": "lua",
		"body": "ImGui.TreeNodeFlags_SpanTextWidth$0",
		"description": "@type integer\n---\n**Tree Node > Flags > TreeNodeFlags_SpanTextWidth**\nNarrow hit box + narrow hovering highlight, will only cover the label text.\n**Tree Node > Flags**\nFor TreeNode, TreeNodeEx and CollapsingHeader.\n@since 0.9.1\n "
	},
	"ULT_GetMediaItemNote lua": {
		"prefix": "r.ULT_GetMediaItemNote",
		"scope": "lua",
		"body": "r.ULT_GetMediaItemNote(${1:item})$0",
		"description": "[ULT] Deprecated, see GetSetMediaItemInfo_String (v5.95+). Get item notes."
	},
	"ULT_SetMediaItemNote lua": {
		"prefix": "r.ULT_SetMediaItemNote",
		"scope": "lua",
		"body": "r.ULT_SetMediaItemNote(${1:item}, ${2:note})$0",
		"description": "[ULT] Deprecated, see GetSetMediaItemInfo_String (v5.95+). Set item notes."
	},
	"Undo_BeginBlock lua": {
		"prefix": "r.Undo_BeginBlock",
		"scope": "lua",
		"body": "r.Undo_BeginBlock()$0",
		"description": "call to start a new block"
	},
	"Undo_BeginBlock2 lua": {
		"prefix": "r.Undo_BeginBlock2",
		"scope": "lua",
		"body": "r.Undo_BeginBlock2(0)$0",
		"description": "call to start a new block"
	},
	"Undo_CanRedo2 lua": {
		"prefix": "r.Undo_CanRedo2",
		"scope": "lua",
		"body": "r.Undo_CanRedo2(0)$0",
		"description": "returns string of next action,if able,NULL if not"
	},
	"Undo_CanUndo2 lua": {
		"prefix": "r.Undo_CanUndo2",
		"scope": "lua",
		"body": "r.Undo_CanUndo2(0)$0",
		"description": "returns string of last action,if able,NULL if not"
	},
	"Undo_DoRedo2 lua": {
		"prefix": "r.Undo_DoRedo2",
		"scope": "lua",
		"body": "r.Undo_DoRedo2(0)$0",
		"description": "nonzero if success"
	},
	"Undo_DoUndo2 lua": {
		"prefix": "r.Undo_DoUndo2",
		"scope": "lua",
		"body": "r.Undo_DoUndo2(0)$0",
		"description": "nonzero if success"
	},
	"Undo_EndBlock lua": {
		"prefix": "r.Undo_EndBlock",
		"scope": "lua",
		"body": "r.Undo_EndBlock(${1:descchange}, ${2:extraflags})$0",
		"description": "call to end the block,with extra flags if any,and a description"
	},
	"Undo_EndBlock2 lua": {
		"prefix": "r.Undo_EndBlock2",
		"scope": "lua",
		"body": "r.Undo_EndBlock2(0, ${2:descchange}, ${3:extraflags})$0",
		"description": "call to end the block,with extra flags if any,and a description"
	},
	"Undo_OnStateChange lua": {
		"prefix": "r.Undo_OnStateChange",
		"scope": "lua",
		"body": "r.Undo_OnStateChange(${1:descchange})$0",
		"description": "limited state change to items"
	},
	"Undo_OnStateChange2 lua": {
		"prefix": "r.Undo_OnStateChange2",
		"scope": "lua",
		"body": "r.Undo_OnStateChange2(0, ${2:descchange})$0",
		"description": "limited state change to items"
	},
	"Undo_OnStateChangeEx lua": {
		"prefix": "r.Undo_OnStateChangeEx",
		"scope": "lua",
		"body": "r.Undo_OnStateChangeEx(${1:descchange}, ${2:whichStates}, ${3:trackparm})$0",
		"description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index"
	},
	"Undo_OnStateChangeEx2 lua": {
		"prefix": "r.Undo_OnStateChangeEx2",
		"scope": "lua",
		"body": "r.Undo_OnStateChangeEx2(0, ${2:descchange}, ${3:whichStates}, ${4:trackparm})$0",
		"description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index"
	},
	"Undo_OnStateChange_Item lua": {
		"prefix": "r.Undo_OnStateChange_Item",
		"scope": "lua",
		"body": "r.Undo_OnStateChange_Item(0, ${2:name}, ${3:item})$0",
		"description": ""
	},
	"UpdateArrange lua": {
		"prefix": "r.UpdateArrange",
		"scope": "lua",
		"body": "r.UpdateArrange()$0",
		"description": "Redraw the arrange view"
	},
	"UpdateItemInProject lua": {
		"prefix": "r.UpdateItemInProject",
		"scope": "lua",
		"body": "r.UpdateItemInProject(${1:item})$0",
		"description": ""
	},
	"UpdateItemLanes lua": {
		"prefix": "r.UpdateItemLanes",
		"scope": "lua",
		"body": "r.UpdateItemLanes(0)$0",
		"description": "Recalculate lane arrangement for fixed lane tracks, including auto-removing empty lanes at the bottom of the track"
	},
	"UpdateTimeline lua": {
		"prefix": "r.UpdateTimeline",
		"scope": "lua",
		"body": "r.UpdateTimeline()$0",
		"description": "Redraw the arrange view and ruler"
	},
	"ValidatePtr lua": {
		"prefix": "r.ValidatePtr",
		"scope": "lua",
		"body": "r.ValidatePtr(${1:pointer}, ${2:ctypename})$0",
		"description": "see ValidatePtr2"
	},
	"ValidatePtr2 lua": {
		"prefix": "r.ValidatePtr2",
		"scope": "lua",
		"body": "r.ValidatePtr2(0, ${2:pointer}, ${3:ctypename})$0",
		"description": "Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*."
	},
	"ViewPrefs lua": {
		"prefix": "r.ViewPrefs",
		"scope": "lua",
		"body": "r.ViewPrefs(${1:page}, ${2:pageByName})$0",
		"description": "Opens the prefs to a page, use pageByName if page is 0."
	},
	"WindowFlags_AlwaysAutoResize lua": {
		"prefix": "ImGui.WindowFlags_AlwaysAutoResize",
		"scope": "lua",
		"body": "ImGui.WindowFlags_AlwaysAutoResize$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_AlwaysAutoResize**\nResize every window to its content every frame.\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_AlwaysHorizontalScrollbar lua": {
		"prefix": "ImGui.WindowFlags_AlwaysHorizontalScrollbar",
		"scope": "lua",
		"body": "ImGui.WindowFlags_AlwaysHorizontalScrollbar$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_AlwaysHorizontalScrollbar**\nAlways show horizontal scrollbar (even if ContentSize.x < Size.x).\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_AlwaysVerticalScrollbar lua": {
		"prefix": "ImGui.WindowFlags_AlwaysVerticalScrollbar",
		"scope": "lua",
		"body": "ImGui.WindowFlags_AlwaysVerticalScrollbar$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_AlwaysVerticalScrollbar**\nAlways show vertical scrollbar (even if ContentSize.y < Size.y).\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_HorizontalScrollbar lua": {
		"prefix": "ImGui.WindowFlags_HorizontalScrollbar",
		"scope": "lua",
		"body": "ImGui.WindowFlags_HorizontalScrollbar$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_HorizontalScrollbar**\nAllow horizontal scrollbar to appear (off by default).\nYou may use SetNextWindowContentSize(width, 0.0) prior to calling Begin() to\nspecify width. Read code in the demo's 'Horizontal Scrolling' section.\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_MenuBar lua": {
		"prefix": "ImGui.WindowFlags_MenuBar",
		"scope": "lua",
		"body": "ImGui.WindowFlags_MenuBar$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_MenuBar**\nHas a menu-bar.\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_NoBackground lua": {
		"prefix": "ImGui.WindowFlags_NoBackground",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoBackground$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoBackground**\nDisable drawing background color (WindowBg, etc.) and outside border.\nSimilar as using SetNextWindowBgAlpha(0.0).\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_NoCollapse lua": {
		"prefix": "ImGui.WindowFlags_NoCollapse",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoCollapse$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoCollapse**\nDisable user collapsing window by double-clicking on it.\nAlso referred to as Window Menu Button (e.g. within a docking node).\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_NoDecoration lua": {
		"prefix": "ImGui.WindowFlags_NoDecoration",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoDecoration$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoDecoration**\nWindowFlags_NoTitleBar | WindowFlags_NoResize | WindowFlags_NoScrollbar |\nWindowFlags_NoCollapse\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_NoDocking lua": {
		"prefix": "ImGui.WindowFlags_NoDocking",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoDocking$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoDocking**\nDisable docking of this window.\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.5\n "
	},
	"WindowFlags_NoFocusOnAppearing lua": {
		"prefix": "ImGui.WindowFlags_NoFocusOnAppearing",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoFocusOnAppearing$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoFocusOnAppearing**\nDisable taking focus when transitioning from hidden to visible state.\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_NoInputs lua": {
		"prefix": "ImGui.WindowFlags_NoInputs",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoInputs$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoInputs**\nWindowFlags_NoMouseInputs | WindowFlags_NoNavInputs | WindowFlags_NoNavFocus\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_NoMouseInputs lua": {
		"prefix": "ImGui.WindowFlags_NoMouseInputs",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoMouseInputs$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoMouseInputs**\nDisable catching mouse, hovering test with pass through.\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_NoMove lua": {
		"prefix": "ImGui.WindowFlags_NoMove",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoMove$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoMove**\nDisable user moving the window.\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_NoNav lua": {
		"prefix": "ImGui.WindowFlags_NoNav",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoNav$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoNav**\nWindowFlags_NoNavInputs | WindowFlags_NoNavFocus\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_NoNavFocus lua": {
		"prefix": "ImGui.WindowFlags_NoNavFocus",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoNavFocus$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoNavFocus**\nNo focusing toward this window with gamepad/keyboard navigation\n(e.g. skipped by CTRL+TAB).\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_NoNavInputs lua": {
		"prefix": "ImGui.WindowFlags_NoNavInputs",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoNavInputs$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoNavInputs**\nNo gamepad/keyboard navigation within the window.\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_NoResize lua": {
		"prefix": "ImGui.WindowFlags_NoResize",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoResize$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoResize**\nDisable user resizing with the lower-right grip.\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_NoSavedSettings lua": {
		"prefix": "ImGui.WindowFlags_NoSavedSettings",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoSavedSettings$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoSavedSettings**\nNever load/save settings in .ini file.\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.4\n "
	},
	"WindowFlags_NoScrollWithMouse lua": {
		"prefix": "ImGui.WindowFlags_NoScrollWithMouse",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoScrollWithMouse$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoScrollWithMouse**\nDisable user vertically scrolling with mouse wheel.\nOn child window, mouse wheel will be forwarded to the parent unless\nNoScrollbar is also set.\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_NoScrollbar lua": {
		"prefix": "ImGui.WindowFlags_NoScrollbar",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoScrollbar$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoScrollbar**\nDisable scrollbars (window can still scroll with mouse or programmatically).\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_NoTitleBar lua": {
		"prefix": "ImGui.WindowFlags_NoTitleBar",
		"scope": "lua",
		"body": "ImGui.WindowFlags_NoTitleBar$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_NoTitleBar**\nDisable title-bar.\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_None lua": {
		"prefix": "ImGui.WindowFlags_None",
		"scope": "lua",
		"body": "ImGui.WindowFlags_None$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_None**\nDefault flag.\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"WindowFlags_TopMost lua": {
		"prefix": "ImGui.WindowFlags_TopMost",
		"scope": "lua",
		"body": "ImGui.WindowFlags_TopMost$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_TopMost**\nShow the window above all non-topmost windows.\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.5.5\n "
	},
	"WindowFlags_UnsavedDocument lua": {
		"prefix": "ImGui.WindowFlags_UnsavedDocument",
		"scope": "lua",
		"body": "ImGui.WindowFlags_UnsavedDocument$0",
		"description": "@type integer\n---\n**Window > Flags > WindowFlags_UnsavedDocument**\nDisplay a dot next to the title. When used in a tab/docking context,\ntab is selected when clicking the X + closure is not assumed\n(will wait for user to stop submitting the tab).\nOtherwise closure is assumed when pressing the X,\nso if you keep submitting the tab may reappear at end of tab bar.\n**Window > Flags**\nFor Begin and BeginChild.\n(Those are per-window flags. There are shared flags in SetConfigVar:\nConfigVar_WindowsResizeFromEdges and ConfigVar_WindowsMoveFromTitleBarOnly)\n**Window**\nFunctions for creating and manipulating windows.\nNote that the bottom of the window stack always contains a window called 'Debug'.\n@since 0.1\n "
	},
	"Xen_AudioWriter_Create lua": {
		"prefix": "r.Xen_AudioWriter_Create",
		"scope": "lua",
		"body": "r.Xen_AudioWriter_Create(${1:filename}, ${2:numchans}, ${3:samplerate})$0",
		"description": "Creates writer for 32 bit floating point WAV"
	},
	"Xen_AudioWriter_Destroy lua": {
		"prefix": "r.Xen_AudioWriter_Destroy",
		"scope": "lua",
		"body": "r.Xen_AudioWriter_Destroy(${1:writer})$0",
		"description": "Destroys writer"
	},
	"Xen_AudioWriter_Write lua": {
		"prefix": "r.Xen_AudioWriter_Write",
		"scope": "lua",
		"body": "r.Xen_AudioWriter_Write(${1:writer}, ${2:numframes}, ${3:data}, ${4:offset})$0",
		"description": "Write interleaved audio data to disk"
	},
	"Xen_GetMediaSourceSamples lua": {
		"prefix": "r.Xen_GetMediaSourceSamples",
		"scope": "lua",
		"body": "r.Xen_GetMediaSourceSamples(${1:src}, ${2:destbuf}, ${3:destbufoffset}, ${4:numframes}, ${5:numchans}, ${6:samplerate}, ${7:sourceposition})$0",
		"description": "Get interleaved audio data from media source"
	},
	"Xen_StartSourcePreview lua": {
		"prefix": "r.Xen_StartSourcePreview",
		"scope": "lua",
		"body": "r.Xen_StartSourcePreview(${1:source}, ${2:gain}, ${3:loop}, ${4:outputchanindexIn})$0",
		"description": "Start audio preview of a PCM_source. Returns id of a preview handle that can be provided to Xen_StopSourcePreview.\nIf the given PCM_source does not belong to an existing MediaItem/Take, it will be deleted by the preview system when the preview is stopped."
	},
	"Xen_StopSourcePreview lua": {
		"prefix": "r.Xen_StopSourcePreview",
		"scope": "lua",
		"body": "r.Xen_StopSourcePreview(${1:preview_id})$0",
		"description": "Stop audio preview. id -1 stops all.\nReaScript/EEL2 Built-in Function List"
	},
	"adjustZoom lua": {
		"prefix": "r.adjustZoom",
		"scope": "lua",
		"body": "r.adjustZoom(${1:amt}, ${2:forceset}, ${3:doupd}, ${4:centermode})$0",
		"description": "forceset=0,doupd=true,centermode=-1 for default"
	},
	"file_exists lua": {
		"prefix": "r.file_exists",
		"scope": "lua",
		"body": "r.file_exists(${1:path})$0",
		"description": "returns true if path points to a valid, readable file"
	},
	"format_timestr lua": {
		"prefix": "r.format_timestr",
		"scope": "lua",
		"body": "r.format_timestr(${1:tpos}, ${2:buf})$0",
		"description": "Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len."
	},
	"format_timestr_len lua": {
		"prefix": "r.format_timestr_len",
		"scope": "lua",
		"body": "r.format_timestr_len(${1:tpos}, ${2:buf}, ${3:offset}, ${4:modeoverride})$0",
		"description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f\noffset is start of where the length will be calculated from"
	},
	"format_timestr_pos lua": {
		"prefix": "r.format_timestr_pos",
		"scope": "lua",
		"body": "r.format_timestr_pos(${1:tpos}, ${2:buf}, ${3:modeoverride})$0",
		"description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f"
	},
	"genGuid lua": {
		"prefix": "r.genGuid",
		"scope": "lua",
		"body": "r.genGuid()$0",
		"description": "Generates a new GUID string e.g. {35C37676-7CFF-7E46-BB14-FA0CC7C04BEB}"
	},
	"get_config_var_string lua": {
		"prefix": "r.get_config_var_string",
		"scope": "lua",
		"body": "r.get_config_var_string(${1:name})$0",
		"description": "gets ini configuration variable value as string"
	},
	"get_ini_file lua": {
		"prefix": "r.get_ini_file",
		"scope": "lua",
		"body": "r.get_ini_file()$0",
		"description": "Get reaper.ini full filename."
	},
	"guidToString lua": {
		"prefix": "r.guidToString",
		"scope": "lua",
		"body": "r.guidToString(${1:gGUID}, ${2:destNeed64})$0",
		"description": "dest should be at least 64 chars long to be safe"
	},
	"image_resolve_fn lua": {
		"prefix": "r.image_resolve_fn",
		"scope": "lua",
		"body": "r.image_resolve_fn(${1:in}, ${2:out})$0",
		"description": ""
	},
	"joystick_create lua": {
		"prefix": "r.joystick_create",
		"scope": "lua",
		"body": "r.joystick_create(${1:guidGUID})$0",
		"description": "creates a joystick device"
	},
	"joystick_destroy lua": {
		"prefix": "r.joystick_destroy",
		"scope": "lua",
		"body": "r.joystick_destroy(${1:device})$0",
		"description": "destroys a joystick device"
	},
	"joystick_enum lua": {
		"prefix": "r.joystick_enum",
		"scope": "lua",
		"body": "r.joystick_enum(${1:index})$0",
		"description": "enumerates installed devices, returns GUID as a string"
	},
	"joystick_getaxis lua": {
		"prefix": "r.joystick_getaxis",
		"scope": "lua",
		"body": "r.joystick_getaxis(${1:dev}, ${2:axis})$0",
		"description": "returns axis value (-1..1)"
	},
	"joystick_getbuttonmask lua": {
		"prefix": "r.joystick_getbuttonmask",
		"scope": "lua",
		"body": "r.joystick_getbuttonmask(${1:dev})$0",
		"description": "returns button pressed mask, 1=first button, 2=second..."
	},
	"joystick_getinfo lua": {
		"prefix": "r.joystick_getinfo",
		"scope": "lua",
		"body": "r.joystick_getinfo(${1:dev})$0",
		"description": "returns button count"
	},
	"joystick_getpov lua": {
		"prefix": "r.joystick_getpov",
		"scope": "lua",
		"body": "r.joystick_getpov(${1:dev}, ${2:pov})$0",
		"description": "returns POV value (usually 0..655.35, or 655.35 on error)"
	},
	"joystick_update lua": {
		"prefix": "r.joystick_update",
		"scope": "lua",
		"body": "r.joystick_update(${1:dev})$0",
		"description": "Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)"
	},
	"kbd_enumerateActions lua": {
		"prefix": "r.kbd_enumerateActions",
		"scope": "lua",
		"body": "r.kbd_enumerateActions(${1:section}, ${2:idx})$0",
		"description": ""
	},
	"kbd_getTextFromCmd lua": {
		"prefix": "r.kbd_getTextFromCmd",
		"scope": "lua",
		"body": "r.kbd_getTextFromCmd(${1:cmd}, ${2:section})$0",
		"description": ""
	},
	"midi_init lua": {
		"prefix": "r.midi_init",
		"scope": "lua",
		"body": "r.midi_init(${1:force_reinit_input}, ${2:force_reinit_output})$0",
		"description": "Opens MIDI devices as configured in preferences. force_reinit_input and force_reinit_output force a particular device index to close/re-open (pass -1 to not force any devices to reopen)."
	},
	"midi_reinit lua": {
		"prefix": "r.midi_reinit",
		"scope": "lua",
		"body": "r.midi_reinit()$0",
		"description": "Reset (close and re-open) all MIDI devices"
	},
	"mkpanstr lua": {
		"prefix": "r.mkpanstr",
		"scope": "lua",
		"body": "r.mkpanstr(${1:strNeed64}, ${2:pan})$0",
		"description": ""
	},
	"mkvolpanstr lua": {
		"prefix": "r.mkvolpanstr",
		"scope": "lua",
		"body": "r.mkvolpanstr(${1:strNeed64}, ${2:vol}, ${3:pan})$0",
		"description": ""
	},
	"mkvolstr lua": {
		"prefix": "r.mkvolstr",
		"scope": "lua",
		"body": "r.mkvolstr(${1:strNeed64}, ${2:vol})$0",
		"description": ""
	},
	"my_getViewport lua": {
		"prefix": "r.my_getViewport",
		"scope": "lua",
		"body": "reaper.my_getViewport(${1:r_left}, ${2:r_top}, ${3:r_right}, ${4:r_bot}, ${5:sr_left}, ${6:sr_top}, ${7:sr_right}, ${8:sr_bot}, ${9:wantWorkArea})$0",
		"description": "Get the current viewport and the work area"
	},
	"parse_timestr lua": {
		"prefix": "r.parse_timestr",
		"scope": "lua",
		"body": "r.parse_timestr(${1:buf})$0",
		"description": "Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len."
	},
	"parse_timestr_len lua": {
		"prefix": "r.parse_timestr_len",
		"scope": "lua",
		"body": "r.parse_timestr_len(${1:buf}, ${2:offset}, ${3:modeoverride})$0",
		"description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f"
	},
	"parse_timestr_pos lua": {
		"prefix": "r.parse_timestr_pos",
		"scope": "lua",
		"body": "r.parse_timestr_pos(${1:buf}, ${2:modeoverride})$0",
		"description": "Parse time string, time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f"
	},
	"parsepanstr lua": {
		"prefix": "r.parsepanstr",
		"scope": "lua",
		"body": "r.parsepanstr(${1:str})$0",
		"description": ""
	},
	"reduce_open_files lua": {
		"prefix": "r.reduce_open_files",
		"scope": "lua",
		"body": "r.reduce_open_files(${1:flags})$0",
		"description": "garbage-collects extra open files and closes them. if flags has 1 set, this is done incrementally (call this from a regular timer, if desired). if flags has 2 set, files are aggressively closed (they may need to be re-opened very soon). returns number of files closed by this call."
	},
	"relative_fn lua": {
		"prefix": "r.relative_fn",
		"scope": "lua",
		"body": "r.relative_fn(${1:in}, ${2:out})$0",
		"description": "Makes a filename 'in' relative to the current project, if any."
	},
	"resolve_fn lua": {
		"prefix": "r.resolve_fn",
		"scope": "lua",
		"body": "r.resolve_fn(${1:in}, ${2:out})$0",
		"description": "See resolve_fn2."
	},
	"resolve_fn2 lua": {
		"prefix": "r.resolve_fn2",
		"scope": "lua",
		"body": "r.resolve_fn2(${1:in}, ${2:out}, ${3:checkSubDir})$0",
		"description": "Resolves a filename 'in' by using project settings etc. If no file found, out will be a copy of in."
	},
	"stringToGuid lua": {
		"prefix": "r.stringToGuid",
		"scope": "lua",
		"body": "r.stringToGuid(${1:str}, ${2:gGUID})$0",
		"description": ""
	},
	"time_precise lua": {
		"prefix": "r.time_precise",
		"scope": "lua",
		"body": "r.time_precise()$0",
		"description": "Gets a precise system timestamp in seconds"
	}
}